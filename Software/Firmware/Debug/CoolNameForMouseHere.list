
CoolNameForMouseHere.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a7c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003b88  08003b88  00004b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc4  08003bc4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003bc4  08003bc4  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bc4  08003bc4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bc4  08003bc4  00004bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bc8  08003bc8  00004bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003bcc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  08003bd8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08003bd8  000051a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d862  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000213e  00000000  00000000  00012897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  000149d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9f  00000000  00000000  00015770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017be2  00000000  00000000  0001620f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff5b  00000000  00000000  0002ddf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bdf6  00000000  00000000  0003dd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9b42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000382c  00000000  00000000  000c9b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000cd3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b70 	.word	0x08003b70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003b70 	.word	0x08003b70

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fd5c 	bl	8000c0c <HAL_Init>

  /* USER CODE BEGIN Init */
  LED_Power_Init();
 8000154:	f000 fb14 	bl	8000780 <LED_Power_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f80e 	bl	8000178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f9f4 	bl	8000548 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000160:	f000 f862 	bl	8000228 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000164:	f000 f89e 	bl	80002a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000168:	f000 f91c 	bl	80003a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800016c:	f000 f96e 	bl	800044c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f9c0 	bl	80004f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000174:	bf00      	nop
 8000176:	e7fd      	b.n	8000174 <main+0x28>

08000178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b094      	sub	sp, #80	@ 0x50
 800017c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000182:	2228      	movs	r2, #40	@ 0x28
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f003 fcc6 	bl	8003b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018c:	f107 0314 	add.w	r3, r7, #20
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	605a      	str	r2, [r3, #4]
 8000196:	609a      	str	r2, [r3, #8]
 8000198:	60da      	str	r2, [r3, #12]
 800019a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a8:	2302      	movs	r3, #2
 80001aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ac:	2301      	movs	r3, #1
 80001ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001b0:	2310      	movs	r3, #16
 80001b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b4:	2302      	movs	r3, #2
 80001b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b8:	2300      	movs	r3, #0
 80001ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001bc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001c6:	4618      	mov	r0, r3
 80001c8:	f001 fb2c 	bl	8001824 <HAL_RCC_OscConfig>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d001      	beq.n	80001d6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80001d2:	f000 faa9 	bl	8000728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d6:	230f      	movs	r3, #15
 80001d8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001da:	2302      	movs	r3, #2
 80001dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80001ec:	f107 0314 	add.w	r3, r7, #20
 80001f0:	2101      	movs	r1, #1
 80001f2:	4618      	mov	r0, r3
 80001f4:	f001 fd98 	bl	8001d28 <HAL_RCC_ClockConfig>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80001fe:	f000 fa93 	bl	8000728 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000202:	2302      	movs	r3, #2
 8000204:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800020a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4618      	mov	r0, r3
 8000210:	f001 ff18 	bl	8002044 <HAL_RCCEx_PeriphCLKConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800021a:	f000 fa85 	bl	8000728 <Error_Handler>
  }
}
 800021e:	bf00      	nop
 8000220:	3750      	adds	r7, #80	@ 0x50
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000238:	4b18      	ldr	r3, [pc, #96]	@ (800029c <MX_ADC1_Init+0x74>)
 800023a:	4a19      	ldr	r2, [pc, #100]	@ (80002a0 <MX_ADC1_Init+0x78>)
 800023c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800023e:	4b17      	ldr	r3, [pc, #92]	@ (800029c <MX_ADC1_Init+0x74>)
 8000240:	2200      	movs	r2, #0
 8000242:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000244:	4b15      	ldr	r3, [pc, #84]	@ (800029c <MX_ADC1_Init+0x74>)
 8000246:	2200      	movs	r2, #0
 8000248:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800024a:	4b14      	ldr	r3, [pc, #80]	@ (800029c <MX_ADC1_Init+0x74>)
 800024c:	2200      	movs	r2, #0
 800024e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000250:	4b12      	ldr	r3, [pc, #72]	@ (800029c <MX_ADC1_Init+0x74>)
 8000252:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000256:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000258:	4b10      	ldr	r3, [pc, #64]	@ (800029c <MX_ADC1_Init+0x74>)
 800025a:	2200      	movs	r2, #0
 800025c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800025e:	4b0f      	ldr	r3, [pc, #60]	@ (800029c <MX_ADC1_Init+0x74>)
 8000260:	2201      	movs	r2, #1
 8000262:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000264:	480d      	ldr	r0, [pc, #52]	@ (800029c <MX_ADC1_Init+0x74>)
 8000266:	f000 fd33 	bl	8000cd0 <HAL_ADC_Init>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000270:	f000 fa5a 	bl	8000728 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000274:	2305      	movs	r3, #5
 8000276:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000278:	2301      	movs	r3, #1
 800027a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800027c:	2300      	movs	r3, #0
 800027e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	4619      	mov	r1, r3
 8000284:	4805      	ldr	r0, [pc, #20]	@ (800029c <MX_ADC1_Init+0x74>)
 8000286:	f000 fdfb 	bl	8000e80 <HAL_ADC_ConfigChannel>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000290:	f000 fa4a 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000294:	bf00      	nop
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000028 	.word	0x20000028
 80002a0:	40012400 	.word	0x40012400

080002a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b08e      	sub	sp, #56	@ 0x38
 80002a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b8:	f107 0320 	add.w	r3, r7, #32
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]
 80002cc:	60da      	str	r2, [r3, #12]
 80002ce:	611a      	str	r2, [r3, #16]
 80002d0:	615a      	str	r2, [r3, #20]
 80002d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002d4:	4b32      	ldr	r3, [pc, #200]	@ (80003a0 <MX_TIM2_Init+0xfc>)
 80002d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002dc:	4b30      	ldr	r3, [pc, #192]	@ (80003a0 <MX_TIM2_Init+0xfc>)
 80002de:	2200      	movs	r2, #0
 80002e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e2:	4b2f      	ldr	r3, [pc, #188]	@ (80003a0 <MX_TIM2_Init+0xfc>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2047;
 80002e8:	4b2d      	ldr	r3, [pc, #180]	@ (80003a0 <MX_TIM2_Init+0xfc>)
 80002ea:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80002ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f0:	4b2b      	ldr	r3, [pc, #172]	@ (80003a0 <MX_TIM2_Init+0xfc>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002f6:	4b2a      	ldr	r3, [pc, #168]	@ (80003a0 <MX_TIM2_Init+0xfc>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002fc:	4828      	ldr	r0, [pc, #160]	@ (80003a0 <MX_TIM2_Init+0xfc>)
 80002fe:	f001 ff57 	bl	80021b0 <HAL_TIM_Base_Init>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000308:	f000 fa0e 	bl	8000728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800030c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000310:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000312:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000316:	4619      	mov	r1, r3
 8000318:	4821      	ldr	r0, [pc, #132]	@ (80003a0 <MX_TIM2_Init+0xfc>)
 800031a:	f002 fa5d 	bl	80027d8 <HAL_TIM_ConfigClockSource>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000324:	f000 fa00 	bl	8000728 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000328:	481d      	ldr	r0, [pc, #116]	@ (80003a0 <MX_TIM2_Init+0xfc>)
 800032a:	f001 ff90 	bl	800224e <HAL_TIM_PWM_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000334:	f000 f9f8 	bl	8000728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000338:	2300      	movs	r3, #0
 800033a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800033c:	2300      	movs	r3, #0
 800033e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000340:	f107 0320 	add.w	r3, r7, #32
 8000344:	4619      	mov	r1, r3
 8000346:	4816      	ldr	r0, [pc, #88]	@ (80003a0 <MX_TIM2_Init+0xfc>)
 8000348:	f002 fdba 	bl	8002ec0 <HAL_TIMEx_MasterConfigSynchronization>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000352:	f000 f9e9 	bl	8000728 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000356:	2360      	movs	r3, #96	@ 0x60
 8000358:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800035e:	2300      	movs	r3, #0
 8000360:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2208      	movs	r2, #8
 800036a:	4619      	mov	r1, r3
 800036c:	480c      	ldr	r0, [pc, #48]	@ (80003a0 <MX_TIM2_Init+0xfc>)
 800036e:	f002 f971 	bl	8002654 <HAL_TIM_PWM_ConfigChannel>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000378:	f000 f9d6 	bl	8000728 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	220c      	movs	r2, #12
 8000380:	4619      	mov	r1, r3
 8000382:	4807      	ldr	r0, [pc, #28]	@ (80003a0 <MX_TIM2_Init+0xfc>)
 8000384:	f002 f966 	bl	8002654 <HAL_TIM_PWM_ConfigChannel>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800038e:	f000 f9cb 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000392:	4803      	ldr	r0, [pc, #12]	@ (80003a0 <MX_TIM2_Init+0xfc>)
 8000394:	f000 fb30 	bl	80009f8 <HAL_TIM_MspPostInit>

}
 8000398:	bf00      	nop
 800039a:	3738      	adds	r7, #56	@ 0x38
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	20000058 	.word	0x20000058

080003a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b08c      	sub	sp, #48	@ 0x30
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80003aa:	f107 030c 	add.w	r3, r7, #12
 80003ae:	2224      	movs	r2, #36	@ 0x24
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f003 fbb0 	bl	8003b18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003c0:	4b20      	ldr	r3, [pc, #128]	@ (8000444 <MX_TIM3_Init+0xa0>)
 80003c2:	4a21      	ldr	r2, [pc, #132]	@ (8000448 <MX_TIM3_Init+0xa4>)
 80003c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000444 <MX_TIM3_Init+0xa0>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000444 <MX_TIM3_Init+0xa0>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80003d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000444 <MX_TIM3_Init+0xa0>)
 80003d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003da:	4b1a      	ldr	r3, [pc, #104]	@ (8000444 <MX_TIM3_Init+0xa0>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003e0:	4b18      	ldr	r3, [pc, #96]	@ (8000444 <MX_TIM3_Init+0xa0>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80003e6:	2303      	movs	r3, #3
 80003e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80003ea:	2302      	movs	r3, #2
 80003ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80003ee:	2301      	movs	r3, #1
 80003f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80003fa:	2302      	movs	r3, #2
 80003fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80003fe:	2301      	movs	r3, #1
 8000400:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800040a:	f107 030c 	add.w	r3, r7, #12
 800040e:	4619      	mov	r1, r3
 8000410:	480c      	ldr	r0, [pc, #48]	@ (8000444 <MX_TIM3_Init+0xa0>)
 8000412:	f001 ff74 	bl	80022fe <HAL_TIM_Encoder_Init>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800041c:	f000 f984 	bl	8000728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000420:	2300      	movs	r3, #0
 8000422:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000424:	2300      	movs	r3, #0
 8000426:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	4619      	mov	r1, r3
 800042c:	4805      	ldr	r0, [pc, #20]	@ (8000444 <MX_TIM3_Init+0xa0>)
 800042e:	f002 fd47 	bl	8002ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000438:	f000 f976 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800043c:	bf00      	nop
 800043e:	3730      	adds	r7, #48	@ 0x30
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	200000a0 	.word	0x200000a0
 8000448:	40000400 	.word	0x40000400

0800044c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b08c      	sub	sp, #48	@ 0x30
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000452:	f107 030c 	add.w	r3, r7, #12
 8000456:	2224      	movs	r2, #36	@ 0x24
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f003 fb5c 	bl	8003b18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000468:	4b20      	ldr	r3, [pc, #128]	@ (80004ec <MX_TIM4_Init+0xa0>)
 800046a:	4a21      	ldr	r2, [pc, #132]	@ (80004f0 <MX_TIM4_Init+0xa4>)
 800046c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800046e:	4b1f      	ldr	r3, [pc, #124]	@ (80004ec <MX_TIM4_Init+0xa0>)
 8000470:	2200      	movs	r2, #0
 8000472:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000474:	4b1d      	ldr	r3, [pc, #116]	@ (80004ec <MX_TIM4_Init+0xa0>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800047a:	4b1c      	ldr	r3, [pc, #112]	@ (80004ec <MX_TIM4_Init+0xa0>)
 800047c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000480:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000482:	4b1a      	ldr	r3, [pc, #104]	@ (80004ec <MX_TIM4_Init+0xa0>)
 8000484:	2200      	movs	r2, #0
 8000486:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000488:	4b18      	ldr	r3, [pc, #96]	@ (80004ec <MX_TIM4_Init+0xa0>)
 800048a:	2200      	movs	r2, #0
 800048c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800048e:	2303      	movs	r3, #3
 8000490:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000492:	2302      	movs	r3, #2
 8000494:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000496:	2301      	movs	r3, #1
 8000498:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80004a2:	2302      	movs	r3, #2
 80004a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004a6:	2301      	movs	r3, #1
 80004a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004aa:	2300      	movs	r3, #0
 80004ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80004b2:	f107 030c 	add.w	r3, r7, #12
 80004b6:	4619      	mov	r1, r3
 80004b8:	480c      	ldr	r0, [pc, #48]	@ (80004ec <MX_TIM4_Init+0xa0>)
 80004ba:	f001 ff20 	bl	80022fe <HAL_TIM_Encoder_Init>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80004c4:	f000 f930 	bl	8000728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c8:	2300      	movs	r3, #0
 80004ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004cc:	2300      	movs	r3, #0
 80004ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	4619      	mov	r1, r3
 80004d4:	4805      	ldr	r0, [pc, #20]	@ (80004ec <MX_TIM4_Init+0xa0>)
 80004d6:	f002 fcf3 	bl	8002ec0 <HAL_TIMEx_MasterConfigSynchronization>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80004e0:	f000 f922 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80004e4:	bf00      	nop
 80004e6:	3730      	adds	r7, #48	@ 0x30
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	200000e8 	.word	0x200000e8
 80004f0:	40000800 	.word	0x40000800

080004f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004f8:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <MX_USART1_UART_Init+0x4c>)
 80004fa:	4a12      	ldr	r2, [pc, #72]	@ (8000544 <MX_USART1_UART_Init+0x50>)
 80004fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80004fe:	4b10      	ldr	r3, [pc, #64]	@ (8000540 <MX_USART1_UART_Init+0x4c>)
 8000500:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000504:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000506:	4b0e      	ldr	r3, [pc, #56]	@ (8000540 <MX_USART1_UART_Init+0x4c>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800050c:	4b0c      	ldr	r3, [pc, #48]	@ (8000540 <MX_USART1_UART_Init+0x4c>)
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000512:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <MX_USART1_UART_Init+0x4c>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000518:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <MX_USART1_UART_Init+0x4c>)
 800051a:	220c      	movs	r2, #12
 800051c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800051e:	4b08      	ldr	r3, [pc, #32]	@ (8000540 <MX_USART1_UART_Init+0x4c>)
 8000520:	2200      	movs	r2, #0
 8000522:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <MX_USART1_UART_Init+0x4c>)
 8000526:	2200      	movs	r2, #0
 8000528:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800052a:	4805      	ldr	r0, [pc, #20]	@ (8000540 <MX_USART1_UART_Init+0x4c>)
 800052c:	f002 fd38 	bl	8002fa0 <HAL_UART_Init>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000536:	f000 f8f7 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000130 	.word	0x20000130
 8000544:	40013800 	.word	0x40013800

08000548 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054e:	f107 0310 	add.w	r3, r7, #16
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055c:	4b57      	ldr	r3, [pc, #348]	@ (80006bc <MX_GPIO_Init+0x174>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a56      	ldr	r2, [pc, #344]	@ (80006bc <MX_GPIO_Init+0x174>)
 8000562:	f043 0310 	orr.w	r3, r3, #16
 8000566:	6193      	str	r3, [r2, #24]
 8000568:	4b54      	ldr	r3, [pc, #336]	@ (80006bc <MX_GPIO_Init+0x174>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	f003 0310 	and.w	r3, r3, #16
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000574:	4b51      	ldr	r3, [pc, #324]	@ (80006bc <MX_GPIO_Init+0x174>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a50      	ldr	r2, [pc, #320]	@ (80006bc <MX_GPIO_Init+0x174>)
 800057a:	f043 0304 	orr.w	r3, r3, #4
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b4e      	ldr	r3, [pc, #312]	@ (80006bc <MX_GPIO_Init+0x174>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f003 0304 	and.w	r3, r3, #4
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058c:	4b4b      	ldr	r3, [pc, #300]	@ (80006bc <MX_GPIO_Init+0x174>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a4a      	ldr	r2, [pc, #296]	@ (80006bc <MX_GPIO_Init+0x174>)
 8000592:	f043 0308 	orr.w	r3, r3, #8
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b48      	ldr	r3, [pc, #288]	@ (80006bc <MX_GPIO_Init+0x174>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f003 0308 	and.w	r3, r3, #8
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Power_GPIO_Port, LED_Power_Pin, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005aa:	4845      	ldr	r0, [pc, #276]	@ (80006c0 <MX_GPIO_Init+0x178>)
 80005ac:	f001 f8e6 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMIT_FR_Pin|EMIT_FL_Pin|EMIT_L_Pin|ML_BWD_Pin
 80005b0:	2200      	movs	r2, #0
 80005b2:	f64f 4120 	movw	r1, #64544	@ 0xfc20
 80005b6:	4843      	ldr	r0, [pc, #268]	@ (80006c4 <MX_GPIO_Init+0x17c>)
 80005b8:	f001 f8e0 	bl	800177c <HAL_GPIO_WritePin>
                          |MR_BWD_Pin|ML_FWD_Pin|EMIT_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MR_FWD_GPIO_Port, MR_FWD_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005c2:	4841      	ldr	r0, [pc, #260]	@ (80006c8 <MX_GPIO_Init+0x180>)
 80005c4:	f001 f8da 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Blue_Pin|LED_Green_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 80005ce:	483e      	ldr	r0, [pc, #248]	@ (80006c8 <MX_GPIO_Init+0x180>)
 80005d0:	f001 f8d4 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Power_Pin */
  GPIO_InitStruct.Pin = LED_Power_Pin;
 80005d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	2301      	movs	r3, #1
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2302      	movs	r3, #2
 80005e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_Power_GPIO_Port, &GPIO_InitStruct);
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	4619      	mov	r1, r3
 80005ec:	4834      	ldr	r0, [pc, #208]	@ (80006c0 <MX_GPIO_Init+0x178>)
 80005ee:	f000 ff41 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPEED_SW2_Pin */
  GPIO_InitStruct.Pin = SPEED_SW2_Pin;
 80005f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f8:	4b34      	ldr	r3, [pc, #208]	@ (80006cc <MX_GPIO_Init+0x184>)
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPEED_SW2_GPIO_Port, &GPIO_InitStruct);
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4619      	mov	r1, r3
 8000606:	482e      	ldr	r0, [pc, #184]	@ (80006c0 <MX_GPIO_Init+0x178>)
 8000608:	f000 ff34 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pin : RECIV_R_Pin */
  GPIO_InitStruct.Pin = RECIV_R_Pin;
 800060c:	2310      	movs	r3, #16
 800060e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RECIV_R_GPIO_Port, &GPIO_InitStruct);
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	4619      	mov	r1, r3
 800061e:	482a      	ldr	r0, [pc, #168]	@ (80006c8 <MX_GPIO_Init+0x180>)
 8000620:	f000 ff28 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pins : RECIV_L_Pin LOADMAZE_SW3_Pin */
  GPIO_InitStruct.Pin = RECIV_L_Pin|LOADMAZE_SW3_Pin;
 8000624:	f240 2302 	movw	r3, #514	@ 0x202
 8000628:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000632:	f107 0310 	add.w	r3, r7, #16
 8000636:	4619      	mov	r1, r3
 8000638:	4822      	ldr	r0, [pc, #136]	@ (80006c4 <MX_GPIO_Init+0x17c>)
 800063a:	f000 ff1b 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_FR_Pin EMIT_FL_Pin EMIT_L_Pin ML_BWD_Pin
                           MR_BWD_Pin ML_FWD_Pin EMIT_R_Pin */
  GPIO_InitStruct.Pin = EMIT_FR_Pin|EMIT_FL_Pin|EMIT_L_Pin|ML_BWD_Pin
 800063e:	f64f 4320 	movw	r3, #64544	@ 0xfc20
 8000642:	613b      	str	r3, [r7, #16]
                          |MR_BWD_Pin|ML_FWD_Pin|EMIT_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2302      	movs	r3, #2
 800064e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	4619      	mov	r1, r3
 8000656:	481b      	ldr	r0, [pc, #108]	@ (80006c4 <MX_GPIO_Init+0x17c>)
 8000658:	f000 ff0c 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pins : MR_FWD_Pin LED_Red_Pin LED_Blue_Pin LED_Green_Pin */
  GPIO_InitStruct.Pin = MR_FWD_Pin|LED_Red_Pin|LED_Blue_Pin|LED_Green_Pin;
 800065c:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8000660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2302      	movs	r3, #2
 800066c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	f107 0310 	add.w	r3, r7, #16
 8000672:	4619      	mov	r1, r3
 8000674:	4814      	ldr	r0, [pc, #80]	@ (80006c8 <MX_GPIO_Init+0x180>)
 8000676:	f000 fefd 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARM_SW1_Pin */
  GPIO_InitStruct.Pin = ARM_SW1_Pin;
 800067a:	2310      	movs	r3, #16
 800067c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800067e:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <MX_GPIO_Init+0x184>)
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ARM_SW1_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	4619      	mov	r1, r3
 800068c:	480d      	ldr	r0, [pc, #52]	@ (80006c4 <MX_GPIO_Init+0x17c>)
 800068e:	f000 fef1 	bl	8001474 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	210f      	movs	r1, #15
 8000696:	200a      	movs	r0, #10
 8000698:	f000 fe03 	bl	80012a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800069c:	200a      	movs	r0, #10
 800069e:	f000 fe1c 	bl	80012da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	210f      	movs	r1, #15
 80006a6:	2028      	movs	r0, #40	@ 0x28
 80006a8:	f000 fdfb 	bl	80012a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006ac:	2028      	movs	r0, #40	@ 0x28
 80006ae:	f000 fe14 	bl	80012da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b2:	bf00      	nop
 80006b4:	3720      	adds	r7, #32
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40011000 	.word	0x40011000
 80006c4:	40010c00 	.word	0x40010c00
 80006c8:	40010800 	.word	0x40010800
 80006cc:	10210000 	.word	0x10210000

080006d0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
uint8_t txData[32];
uint8_t rxData;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000718 <HAL_UART_RxCpltCallback+0x48>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d115      	bne.n	800070e <HAL_UART_RxCpltCallback+0x3e>
		Reset_Buffers(rxData, txData);                             // Reset buffers
 80006e2:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <HAL_UART_RxCpltCallback+0x4c>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	490e      	ldr	r1, [pc, #56]	@ (8000720 <HAL_UART_RxCpltCallback+0x50>)
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 f855 	bl	8000798 <Reset_Buffers>
		HAL_UART_Receive_IT(&huart1, &rxData, sizeof(rxData));      // Receive incoming command
 80006ee:	2201      	movs	r2, #1
 80006f0:	490a      	ldr	r1, [pc, #40]	@ (800071c <HAL_UART_RxCpltCallback+0x4c>)
 80006f2:	480c      	ldr	r0, [pc, #48]	@ (8000724 <HAL_UART_RxCpltCallback+0x54>)
 80006f4:	f002 fcd9 	bl	80030aa <HAL_UART_Receive_IT>

		Parse_Receive_Data(rxData, txData);                         // Parse incoming command
 80006f8:	4b08      	ldr	r3, [pc, #32]	@ (800071c <HAL_UART_RxCpltCallback+0x4c>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4908      	ldr	r1, [pc, #32]	@ (8000720 <HAL_UART_RxCpltCallback+0x50>)
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f818 	bl	8000734 <Parse_Receive_Data>
		HAL_UART_Transmit_IT(&huart1, txData, sizeof(txData));      // Transmit response code
 8000704:	2220      	movs	r2, #32
 8000706:	4906      	ldr	r1, [pc, #24]	@ (8000720 <HAL_UART_RxCpltCallback+0x50>)
 8000708:	4806      	ldr	r0, [pc, #24]	@ (8000724 <HAL_UART_RxCpltCallback+0x54>)
 800070a:	f002 fc99 	bl	8003040 <HAL_UART_Transmit_IT>
	}
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40013800 	.word	0x40013800
 800071c:	20000198 	.word	0x20000198
 8000720:	20000178 	.word	0x20000178
 8000724:	20000130 	.word	0x20000130

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <Error_Handler+0x8>

08000734 <Parse_Receive_Data>:
#define HALT_RUN    0b0001  // HALT RUN: Trap mouse operation. Disable: control loop & motors, instantly switch to debug mode.
#define READ_BATT   0b0010  // READ BATTERY: Read battery voltage.
#define PULSE_BUZZ  0b0011  // PULSE BUZZER: Play a short noise from the buzzer.
#define START_RUN   0b0100  // START RUN: Start a maze run. For testing purposes only.

void Parse_Receive_Data(uint8_t rxBuff, uint8_t *txBuff) {
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	6039      	str	r1, [r7, #0]
 800073e:	71fb      	strb	r3, [r7, #7]
	uint8_t command = (rxBuff & 0xF0) >> 4;
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	091b      	lsrs	r3, r3, #4
 8000744:	73fb      	strb	r3, [r7, #15]
	switch(command) {
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	2b04      	cmp	r3, #4
 800074a:	d80d      	bhi.n	8000768 <Parse_Receive_Data+0x34>
 800074c:	a201      	add	r2, pc, #4	@ (adr r2, 8000754 <Parse_Receive_Data+0x20>)
 800074e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000752:	bf00      	nop
 8000754:	0800076f 	.word	0x0800076f
 8000758:	0800076f 	.word	0x0800076f
 800075c:	0800076f 	.word	0x0800076f
 8000760:	0800076f 	.word	0x0800076f
 8000764:	0800076f 	.word	0x0800076f
		case PULSE_BUZZ:
			break;
		case START_RUN:
			break;
		default:
			txBuff = (uint8_t*) "INVALID COMMAND";
 8000768:	4b04      	ldr	r3, [pc, #16]	@ (800077c <Parse_Receive_Data+0x48>)
 800076a:	603b      	str	r3, [r7, #0]
			break;
 800076c:	e000      	b.n	8000770 <Parse_Receive_Data+0x3c>
			break;
 800076e:	bf00      	nop
	}
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	08003b88 	.word	0x08003b88

08000780 <LED_Power_Init>:
 */

#include "main.h"
#include "mm_supplemental.h"

void LED_Power_Init() {
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Power_GPIO_Port, LED_Power_Pin);
 8000784:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000788:	4802      	ldr	r0, [pc, #8]	@ (8000794 <LED_Power_Init+0x14>)
 800078a:	f001 f80f 	bl	80017ac <HAL_GPIO_TogglePin>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40011000 	.word	0x40011000

08000798 <Reset_Buffers>:

void Reset_Buffers(uint8_t rxBuff, uint8_t *txBuff) {
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	71fb      	strb	r3, [r7, #7]
	bzero(&rxBuff, sizeof(rxBuff));
 80007a4:	2300      	movs	r3, #0
 80007a6:	71fb      	strb	r3, [r7, #7]
	bzero (txBuff, sizeof(txBuff));
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	461a      	mov	r2, r3
 80007ac:	2300      	movs	r3, #0
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
	...

080007bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <HAL_MspInit+0x5c>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	4a14      	ldr	r2, [pc, #80]	@ (8000818 <HAL_MspInit+0x5c>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6193      	str	r3, [r2, #24]
 80007ce:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <HAL_MspInit+0x5c>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <HAL_MspInit+0x5c>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a0e      	ldr	r2, [pc, #56]	@ (8000818 <HAL_MspInit+0x5c>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <HAL_MspInit+0x5c>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007f2:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <HAL_MspInit+0x60>)
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	4a04      	ldr	r2, [pc, #16]	@ (800081c <HAL_MspInit+0x60>)
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	40021000 	.word	0x40021000
 800081c:	40010000 	.word	0x40010000

08000820 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0318 	add.w	r3, r7, #24
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a1f      	ldr	r2, [pc, #124]	@ (80008b8 <HAL_ADC_MspInit+0x98>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d137      	bne.n	80008b0 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000840:	4b1e      	ldr	r3, [pc, #120]	@ (80008bc <HAL_ADC_MspInit+0x9c>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a1d      	ldr	r2, [pc, #116]	@ (80008bc <HAL_ADC_MspInit+0x9c>)
 8000846:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <HAL_ADC_MspInit+0x9c>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <HAL_ADC_MspInit+0x9c>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a17      	ldr	r2, [pc, #92]	@ (80008bc <HAL_ADC_MspInit+0x9c>)
 800085e:	f043 0304 	orr.w	r3, r3, #4
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <HAL_ADC_MspInit+0x9c>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0304 	and.w	r3, r3, #4
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <HAL_ADC_MspInit+0x9c>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a11      	ldr	r2, [pc, #68]	@ (80008bc <HAL_ADC_MspInit+0x9c>)
 8000876:	f043 0308 	orr.w	r3, r3, #8
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <HAL_ADC_MspInit+0x9c>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0308 	and.w	r3, r3, #8
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = RECIV_FR_Pin;
 8000888:	2320      	movs	r3, #32
 800088a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088c:	2303      	movs	r3, #3
 800088e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RECIV_FR_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0318 	add.w	r3, r7, #24
 8000894:	4619      	mov	r1, r3
 8000896:	480a      	ldr	r0, [pc, #40]	@ (80008c0 <HAL_ADC_MspInit+0xa0>)
 8000898:	f000 fdec 	bl	8001474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RECIV_FL_Pin;
 800089c:	2301      	movs	r3, #1
 800089e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a0:	2303      	movs	r3, #3
 80008a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RECIV_FL_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0318 	add.w	r3, r7, #24
 80008a8:	4619      	mov	r1, r3
 80008aa:	4806      	ldr	r0, [pc, #24]	@ (80008c4 <HAL_ADC_MspInit+0xa4>)
 80008ac:	f000 fde2 	bl	8001474 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	@ 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40012400 	.word	0x40012400
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40010800 	.word	0x40010800
 80008c4:	40010c00 	.word	0x40010c00

080008c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008d8:	d10b      	bne.n	80008f2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <HAL_TIM_Base_MspInit+0x34>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	4a07      	ldr	r2, [pc, #28]	@ (80008fc <HAL_TIM_Base_MspInit+0x34>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	61d3      	str	r3, [r2, #28]
 80008e6:	4b05      	ldr	r3, [pc, #20]	@ (80008fc <HAL_TIM_Base_MspInit+0x34>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	@ 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0318 	add.w	r3, r7, #24
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a32      	ldr	r2, [pc, #200]	@ (80009e4 <HAL_TIM_Encoder_MspInit+0xe4>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d12c      	bne.n	800097a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000920:	4b31      	ldr	r3, [pc, #196]	@ (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000922:	69db      	ldr	r3, [r3, #28]
 8000924:	4a30      	ldr	r2, [pc, #192]	@ (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	61d3      	str	r3, [r2, #28]
 800092c:	4b2e      	ldr	r3, [pc, #184]	@ (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800092e:	69db      	ldr	r3, [r3, #28]
 8000930:	f003 0302 	and.w	r3, r3, #2
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	4b2b      	ldr	r3, [pc, #172]	@ (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	4a2a      	ldr	r2, [pc, #168]	@ (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800093e:	f043 0304 	orr.w	r3, r3, #4
 8000942:	6193      	str	r3, [r2, #24]
 8000944:	4b28      	ldr	r3, [pc, #160]	@ (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f003 0304 	and.w	r3, r3, #4
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ML_ENC_A_Pin|ML_ENC_B_Pin;
 8000950:	23c0      	movs	r3, #192	@ 0xc0
 8000952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 0318 	add.w	r3, r7, #24
 8000960:	4619      	mov	r1, r3
 8000962:	4822      	ldr	r0, [pc, #136]	@ (80009ec <HAL_TIM_Encoder_MspInit+0xec>)
 8000964:	f000 fd86 	bl	8001474 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000968:	2200      	movs	r2, #0
 800096a:	2100      	movs	r1, #0
 800096c:	201d      	movs	r0, #29
 800096e:	f000 fc98 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000972:	201d      	movs	r0, #29
 8000974:	f000 fcb1 	bl	80012da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000978:	e030      	b.n	80009dc <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a1c      	ldr	r2, [pc, #112]	@ (80009f0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d12b      	bne.n	80009dc <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000984:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	4a17      	ldr	r2, [pc, #92]	@ (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	61d3      	str	r3, [r2, #28]
 8000990:	4b15      	ldr	r3, [pc, #84]	@ (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000992:	69db      	ldr	r3, [r3, #28]
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a11      	ldr	r2, [pc, #68]	@ (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80009a2:	f043 0308 	orr.w	r3, r3, #8
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0308 	and.w	r3, r3, #8
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MR_ENC_B_Pin|MR_ENC_A_Pin;
 80009b4:	23c0      	movs	r3, #192	@ 0xc0
 80009b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c0:	f107 0318 	add.w	r3, r7, #24
 80009c4:	4619      	mov	r1, r3
 80009c6:	480b      	ldr	r0, [pc, #44]	@ (80009f4 <HAL_TIM_Encoder_MspInit+0xf4>)
 80009c8:	f000 fd54 	bl	8001474 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2100      	movs	r1, #0
 80009d0:	201e      	movs	r0, #30
 80009d2:	f000 fc66 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009d6:	201e      	movs	r0, #30
 80009d8:	f000 fc7f 	bl	80012da <HAL_NVIC_EnableIRQ>
}
 80009dc:	bf00      	nop
 80009de:	3728      	adds	r7, #40	@ 0x28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40000400 	.word	0x40000400
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40010800 	.word	0x40010800
 80009f0:	40000800 	.word	0x40000800
 80009f4:	40010c00 	.word	0x40010c00

080009f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a16:	d117      	bne.n	8000a48 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <HAL_TIM_MspPostInit+0x58>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a50 <HAL_TIM_MspPostInit+0x58>)
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <HAL_TIM_MspPostInit+0x58>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ML_PWM_Pin|MR_PWM_Pin;
 8000a30:	230c      	movs	r3, #12
 8000a32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4619      	mov	r1, r3
 8000a42:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <HAL_TIM_MspPostInit+0x5c>)
 8000a44:	f000 fd16 	bl	8001474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a48:	bf00      	nop
 8000a4a:	3720      	adds	r7, #32
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40010800 	.word	0x40010800

08000a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a20      	ldr	r2, [pc, #128]	@ (8000af4 <HAL_UART_MspInit+0x9c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d139      	bne.n	8000aec <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a78:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <HAL_UART_MspInit+0xa0>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a1e      	ldr	r2, [pc, #120]	@ (8000af8 <HAL_UART_MspInit+0xa0>)
 8000a7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <HAL_UART_MspInit+0xa0>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <HAL_UART_MspInit+0xa0>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a18      	ldr	r2, [pc, #96]	@ (8000af8 <HAL_UART_MspInit+0xa0>)
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <HAL_UART_MspInit+0xa0>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000aa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 0310 	add.w	r3, r7, #16
 8000aba:	4619      	mov	r1, r3
 8000abc:	480f      	ldr	r0, [pc, #60]	@ (8000afc <HAL_UART_MspInit+0xa4>)
 8000abe:	f000 fcd9 	bl	8001474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ac2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ac6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4809      	ldr	r0, [pc, #36]	@ (8000afc <HAL_UART_MspInit+0xa4>)
 8000ad8:	f000 fccc 	bl	8001474 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2025      	movs	r0, #37	@ 0x25
 8000ae2:	f000 fbde 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ae6:	2025      	movs	r0, #37	@ 0x25
 8000ae8:	f000 fbf7 	bl	80012da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000aec:	bf00      	nop
 8000aee:	3720      	adds	r7, #32
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40013800 	.word	0x40013800
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40010800 	.word	0x40010800

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <NMI_Handler+0x4>

08000b08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <MemManage_Handler+0x4>

08000b18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b50:	f000 f8a2 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ARM_SW1_Pin);
 8000b5c:	2010      	movs	r0, #16
 8000b5e:	f000 fe3f 	bl	80017e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b6c:	4802      	ldr	r0, [pc, #8]	@ (8000b78 <TIM3_IRQHandler+0x10>)
 8000b6e:	f001 fc68 	bl	8002442 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200000a0 	.word	0x200000a0

08000b7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b80:	4802      	ldr	r0, [pc, #8]	@ (8000b8c <TIM4_IRQHandler+0x10>)
 8000b82:	f001 fc5e 	bl	8002442 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000e8 	.word	0x200000e8

08000b90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b94:	4802      	ldr	r0, [pc, #8]	@ (8000ba0 <USART1_IRQHandler+0x10>)
 8000b96:	f002 faad 	bl	80030f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000130 	.word	0x20000130

08000ba4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPEED_SW2_Pin);
 8000ba8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000bac:	f000 fe18 	bl	80017e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc0:	f7ff fff8 	bl	8000bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc4:	480b      	ldr	r0, [pc, #44]	@ (8000bf4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bc6:	490c      	ldr	r1, [pc, #48]	@ (8000bf8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bfc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a09      	ldr	r2, [pc, #36]	@ (8000c00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bdc:	4c09      	ldr	r4, [pc, #36]	@ (8000c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bea:	f002 ff9d 	bl	8003b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bee:	f7ff faad 	bl	800014c <main>
  bx lr
 8000bf2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bfc:	08003bcc 	.word	0x08003bcc
  ldr r2, =_sbss
 8000c00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c04:	200001a0 	.word	0x200001a0

08000c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC1_2_IRQHandler>
	...

08000c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c10:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <HAL_Init+0x28>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	@ (8000c34 <HAL_Init+0x28>)
 8000c16:	f043 0310 	orr.w	r3, r3, #16
 8000c1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 fb35 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c22:	200e      	movs	r0, #14
 8000c24:	f000 f808 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff fdc8 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40022000 	.word	0x40022000

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c40:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <HAL_InitTick+0x54>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <HAL_InitTick+0x58>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 fb4d 	bl	80012f6 <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 fb15 	bl	80012a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	@ (8000c94 <HAL_InitTick+0x5c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000004 	.word	0x20000004

08000c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <HAL_IncTick+0x1c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b05      	ldr	r3, [pc, #20]	@ (8000cb8 <HAL_IncTick+0x20>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a03      	ldr	r2, [pc, #12]	@ (8000cb8 <HAL_IncTick+0x20>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	2000019c 	.word	0x2000019c

08000cbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b02      	ldr	r3, [pc, #8]	@ (8000ccc <HAL_GetTick+0x10>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	2000019c 	.word	0x2000019c

08000cd0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d101      	bne.n	8000cf2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e0be      	b.n	8000e70 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d109      	bne.n	8000d14 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff fd86 	bl	8000820 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 f9ab 	bl	8001070 <ADC_ConversionStop_Disable>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d22:	f003 0310 	and.w	r3, r3, #16
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f040 8099 	bne.w	8000e5e <HAL_ADC_Init+0x18e>
 8000d2c:	7dfb      	ldrb	r3, [r7, #23]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8095 	bne.w	8000e5e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d38:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d3c:	f023 0302 	bic.w	r3, r3, #2
 8000d40:	f043 0202 	orr.w	r2, r3, #2
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d50:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	7b1b      	ldrb	r3, [r3, #12]
 8000d56:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d58:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d68:	d003      	beq.n	8000d72 <HAL_ADC_Init+0xa2>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d102      	bne.n	8000d78 <HAL_ADC_Init+0xa8>
 8000d72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d76:	e000      	b.n	8000d7a <HAL_ADC_Init+0xaa>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	7d1b      	ldrb	r3, [r3, #20]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d119      	bne.n	8000dbc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	7b1b      	ldrb	r3, [r3, #12]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d109      	bne.n	8000da4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	3b01      	subs	r3, #1
 8000d96:	035a      	lsls	r2, r3, #13
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	e00b      	b.n	8000dbc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000da8:	f043 0220 	orr.w	r2, r3, #32
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000db4:	f043 0201 	orr.w	r2, r3, #1
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	4b28      	ldr	r3, [pc, #160]	@ (8000e78 <HAL_ADC_Init+0x1a8>)
 8000dd8:	4013      	ands	r3, r2
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	6812      	ldr	r2, [r2, #0]
 8000dde:	68b9      	ldr	r1, [r7, #8]
 8000de0:	430b      	orrs	r3, r1
 8000de2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000dec:	d003      	beq.n	8000df6 <HAL_ADC_Init+0x126>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d104      	bne.n	8000e00 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	691b      	ldr	r3, [r3, #16]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	051b      	lsls	r3, r3, #20
 8000dfe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e06:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	430a      	orrs	r2, r1
 8000e12:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <HAL_ADC_Init+0x1ac>)
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d10b      	bne.n	8000e3c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e2e:	f023 0303 	bic.w	r3, r3, #3
 8000e32:	f043 0201 	orr.w	r2, r3, #1
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e3a:	e018      	b.n	8000e6e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e40:	f023 0312 	bic.w	r3, r3, #18
 8000e44:	f043 0210 	orr.w	r2, r3, #16
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e50:	f043 0201 	orr.w	r2, r3, #1
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e5c:	e007      	b.n	8000e6e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e62:	f043 0210 	orr.w	r2, r3, #16
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	ffe1f7fd 	.word	0xffe1f7fd
 8000e7c:	ff1f0efe 	.word	0xff1f0efe

08000e80 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d101      	bne.n	8000ea0 <HAL_ADC_ConfigChannel+0x20>
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	e0dc      	b.n	800105a <HAL_ADC_ConfigChannel+0x1da>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b06      	cmp	r3, #6
 8000eae:	d81c      	bhi.n	8000eea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	3b05      	subs	r3, #5
 8000ec2:	221f      	movs	r2, #31
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	4019      	ands	r1, r3
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	6818      	ldr	r0, [r3, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	3b05      	subs	r3, #5
 8000edc:	fa00 f203 	lsl.w	r2, r0, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ee8:	e03c      	b.n	8000f64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b0c      	cmp	r3, #12
 8000ef0:	d81c      	bhi.n	8000f2c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	3b23      	subs	r3, #35	@ 0x23
 8000f04:	221f      	movs	r2, #31
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	4019      	ands	r1, r3
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	3b23      	subs	r3, #35	@ 0x23
 8000f1e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	430a      	orrs	r2, r1
 8000f28:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f2a:	e01b      	b.n	8000f64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3b41      	subs	r3, #65	@ 0x41
 8000f3e:	221f      	movs	r2, #31
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	4019      	ands	r1, r3
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	3b41      	subs	r3, #65	@ 0x41
 8000f58:	fa00 f203 	lsl.w	r2, r0, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	430a      	orrs	r2, r1
 8000f62:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b09      	cmp	r3, #9
 8000f6a:	d91c      	bls.n	8000fa6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	68d9      	ldr	r1, [r3, #12]
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4613      	mov	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4413      	add	r3, r2
 8000f7c:	3b1e      	subs	r3, #30
 8000f7e:	2207      	movs	r2, #7
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	4019      	ands	r1, r3
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	6898      	ldr	r0, [r3, #8]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	3b1e      	subs	r3, #30
 8000f98:	fa00 f203 	lsl.w	r2, r0, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	e019      	b.n	8000fda <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6919      	ldr	r1, [r3, #16]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	2207      	movs	r2, #7
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	4019      	ands	r1, r3
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	6898      	ldr	r0, [r3, #8]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	fa00 f203 	lsl.w	r2, r0, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b10      	cmp	r3, #16
 8000fe0:	d003      	beq.n	8000fea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fe6:	2b11      	cmp	r3, #17
 8000fe8:	d132      	bne.n	8001050 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a1d      	ldr	r2, [pc, #116]	@ (8001064 <HAL_ADC_ConfigChannel+0x1e4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d125      	bne.n	8001040 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d126      	bne.n	8001050 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001010:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b10      	cmp	r3, #16
 8001018:	d11a      	bne.n	8001050 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800101a:	4b13      	ldr	r3, [pc, #76]	@ (8001068 <HAL_ADC_ConfigChannel+0x1e8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a13      	ldr	r2, [pc, #76]	@ (800106c <HAL_ADC_ConfigChannel+0x1ec>)
 8001020:	fba2 2303 	umull	r2, r3, r2, r3
 8001024:	0c9a      	lsrs	r2, r3, #18
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001030:	e002      	b.n	8001038 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	3b01      	subs	r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f9      	bne.n	8001032 <HAL_ADC_ConfigChannel+0x1b2>
 800103e:	e007      	b.n	8001050 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001044:	f043 0220 	orr.w	r2, r3, #32
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	40012400 	.word	0x40012400
 8001068:	20000000 	.word	0x20000000
 800106c:	431bde83 	.word	0x431bde83

08001070 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b01      	cmp	r3, #1
 8001088:	d12e      	bne.n	80010e8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0201 	bic.w	r2, r2, #1
 8001098:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800109a:	f7ff fe0f 	bl	8000cbc <HAL_GetTick>
 800109e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010a0:	e01b      	b.n	80010da <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010a2:	f7ff fe0b 	bl	8000cbc <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d914      	bls.n	80010da <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d10d      	bne.n	80010da <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c2:	f043 0210 	orr.w	r2, r3, #16
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ce:	f043 0201 	orr.w	r2, r3, #1
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e007      	b.n	80010ea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d0dc      	beq.n	80010a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001104:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001110:	4013      	ands	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800111c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001126:	4a04      	ldr	r2, [pc, #16]	@ (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	60d3      	str	r3, [r2, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001140:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <__NVIC_GetPriorityGrouping+0x18>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	f003 0307 	and.w	r3, r3, #7
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	db0b      	blt.n	8001182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	4906      	ldr	r1, [pc, #24]	@ (800118c <__NVIC_EnableIRQ+0x34>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	e000e100 	.word	0xe000e100

08001190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db0a      	blt.n	80011ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	490c      	ldr	r1, [pc, #48]	@ (80011dc <__NVIC_SetPriority+0x4c>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	440b      	add	r3, r1
 80011b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b8:	e00a      	b.n	80011d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4908      	ldr	r1, [pc, #32]	@ (80011e0 <__NVIC_SetPriority+0x50>)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	3b04      	subs	r3, #4
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	440b      	add	r3, r1
 80011ce:	761a      	strb	r2, [r3, #24]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	@ 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f1c3 0307 	rsb	r3, r3, #7
 80011fe:	2b04      	cmp	r3, #4
 8001200:	bf28      	it	cs
 8001202:	2304      	movcs	r3, #4
 8001204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3304      	adds	r3, #4
 800120a:	2b06      	cmp	r3, #6
 800120c:	d902      	bls.n	8001214 <NVIC_EncodePriority+0x30>
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3b03      	subs	r3, #3
 8001212:	e000      	b.n	8001216 <NVIC_EncodePriority+0x32>
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	f04f 32ff 	mov.w	r2, #4294967295
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	401a      	ands	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800122c:	f04f 31ff 	mov.w	r1, #4294967295
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	43d9      	mvns	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	4313      	orrs	r3, r2
         );
}
 800123e:	4618      	mov	r0, r3
 8001240:	3724      	adds	r7, #36	@ 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001258:	d301      	bcc.n	800125e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125e:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <SysTick_Config+0x40>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001266:	210f      	movs	r1, #15
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f7ff ff90 	bl	8001190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	@ (8001288 <SysTick_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	@ (8001288 <SysTick_Config+0x40>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff2d 	bl	80010f4 <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b4:	f7ff ff42 	bl	800113c <__NVIC_GetPriorityGrouping>
 80012b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff ff90 	bl	80011e4 <NVIC_EncodePriority>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff5f 	bl	8001190 <__NVIC_SetPriority>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff35 	bl	8001158 <__NVIC_EnableIRQ>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffa2 	bl	8001248 <SysTick_Config>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800130e:	b480      	push	{r7}
 8001310:	b085      	sub	sp, #20
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d008      	beq.n	8001338 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2204      	movs	r2, #4
 800132a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e020      	b.n	800137a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 020e 	bic.w	r2, r2, #14
 8001346:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001360:	2101      	movs	r1, #1
 8001362:	fa01 f202 	lsl.w	r2, r1, r2
 8001366:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001378:	7bfb      	ldrb	r3, [r7, #15]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d005      	beq.n	80013a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2204      	movs	r2, #4
 80013a0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	73fb      	strb	r3, [r7, #15]
 80013a6:	e051      	b.n	800144c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 020e 	bic.w	r2, r2, #14
 80013b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0201 	bic.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a22      	ldr	r2, [pc, #136]	@ (8001458 <HAL_DMA_Abort_IT+0xd4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d029      	beq.n	8001426 <HAL_DMA_Abort_IT+0xa2>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a21      	ldr	r2, [pc, #132]	@ (800145c <HAL_DMA_Abort_IT+0xd8>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d022      	beq.n	8001422 <HAL_DMA_Abort_IT+0x9e>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001460 <HAL_DMA_Abort_IT+0xdc>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d01a      	beq.n	800141c <HAL_DMA_Abort_IT+0x98>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001464 <HAL_DMA_Abort_IT+0xe0>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d012      	beq.n	8001416 <HAL_DMA_Abort_IT+0x92>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001468 <HAL_DMA_Abort_IT+0xe4>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00a      	beq.n	8001410 <HAL_DMA_Abort_IT+0x8c>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a1b      	ldr	r2, [pc, #108]	@ (800146c <HAL_DMA_Abort_IT+0xe8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d102      	bne.n	800140a <HAL_DMA_Abort_IT+0x86>
 8001404:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001408:	e00e      	b.n	8001428 <HAL_DMA_Abort_IT+0xa4>
 800140a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800140e:	e00b      	b.n	8001428 <HAL_DMA_Abort_IT+0xa4>
 8001410:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001414:	e008      	b.n	8001428 <HAL_DMA_Abort_IT+0xa4>
 8001416:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800141a:	e005      	b.n	8001428 <HAL_DMA_Abort_IT+0xa4>
 800141c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001420:	e002      	b.n	8001428 <HAL_DMA_Abort_IT+0xa4>
 8001422:	2310      	movs	r3, #16
 8001424:	e000      	b.n	8001428 <HAL_DMA_Abort_IT+0xa4>
 8001426:	2301      	movs	r3, #1
 8001428:	4a11      	ldr	r2, [pc, #68]	@ (8001470 <HAL_DMA_Abort_IT+0xec>)
 800142a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	4798      	blx	r3
    } 
  }
  return status;
 800144c:	7bfb      	ldrb	r3, [r7, #15]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40020008 	.word	0x40020008
 800145c:	4002001c 	.word	0x4002001c
 8001460:	40020030 	.word	0x40020030
 8001464:	40020044 	.word	0x40020044
 8001468:	40020058 	.word	0x40020058
 800146c:	4002006c 	.word	0x4002006c
 8001470:	40020000 	.word	0x40020000

08001474 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001474:	b480      	push	{r7}
 8001476:	b08b      	sub	sp, #44	@ 0x2c
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001486:	e169      	b.n	800175c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001488:	2201      	movs	r2, #1
 800148a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	69fa      	ldr	r2, [r7, #28]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	f040 8158 	bne.w	8001756 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	4a9a      	ldr	r2, [pc, #616]	@ (8001714 <HAL_GPIO_Init+0x2a0>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d05e      	beq.n	800156e <HAL_GPIO_Init+0xfa>
 80014b0:	4a98      	ldr	r2, [pc, #608]	@ (8001714 <HAL_GPIO_Init+0x2a0>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d875      	bhi.n	80015a2 <HAL_GPIO_Init+0x12e>
 80014b6:	4a98      	ldr	r2, [pc, #608]	@ (8001718 <HAL_GPIO_Init+0x2a4>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d058      	beq.n	800156e <HAL_GPIO_Init+0xfa>
 80014bc:	4a96      	ldr	r2, [pc, #600]	@ (8001718 <HAL_GPIO_Init+0x2a4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d86f      	bhi.n	80015a2 <HAL_GPIO_Init+0x12e>
 80014c2:	4a96      	ldr	r2, [pc, #600]	@ (800171c <HAL_GPIO_Init+0x2a8>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d052      	beq.n	800156e <HAL_GPIO_Init+0xfa>
 80014c8:	4a94      	ldr	r2, [pc, #592]	@ (800171c <HAL_GPIO_Init+0x2a8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d869      	bhi.n	80015a2 <HAL_GPIO_Init+0x12e>
 80014ce:	4a94      	ldr	r2, [pc, #592]	@ (8001720 <HAL_GPIO_Init+0x2ac>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d04c      	beq.n	800156e <HAL_GPIO_Init+0xfa>
 80014d4:	4a92      	ldr	r2, [pc, #584]	@ (8001720 <HAL_GPIO_Init+0x2ac>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d863      	bhi.n	80015a2 <HAL_GPIO_Init+0x12e>
 80014da:	4a92      	ldr	r2, [pc, #584]	@ (8001724 <HAL_GPIO_Init+0x2b0>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d046      	beq.n	800156e <HAL_GPIO_Init+0xfa>
 80014e0:	4a90      	ldr	r2, [pc, #576]	@ (8001724 <HAL_GPIO_Init+0x2b0>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d85d      	bhi.n	80015a2 <HAL_GPIO_Init+0x12e>
 80014e6:	2b12      	cmp	r3, #18
 80014e8:	d82a      	bhi.n	8001540 <HAL_GPIO_Init+0xcc>
 80014ea:	2b12      	cmp	r3, #18
 80014ec:	d859      	bhi.n	80015a2 <HAL_GPIO_Init+0x12e>
 80014ee:	a201      	add	r2, pc, #4	@ (adr r2, 80014f4 <HAL_GPIO_Init+0x80>)
 80014f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f4:	0800156f 	.word	0x0800156f
 80014f8:	08001549 	.word	0x08001549
 80014fc:	0800155b 	.word	0x0800155b
 8001500:	0800159d 	.word	0x0800159d
 8001504:	080015a3 	.word	0x080015a3
 8001508:	080015a3 	.word	0x080015a3
 800150c:	080015a3 	.word	0x080015a3
 8001510:	080015a3 	.word	0x080015a3
 8001514:	080015a3 	.word	0x080015a3
 8001518:	080015a3 	.word	0x080015a3
 800151c:	080015a3 	.word	0x080015a3
 8001520:	080015a3 	.word	0x080015a3
 8001524:	080015a3 	.word	0x080015a3
 8001528:	080015a3 	.word	0x080015a3
 800152c:	080015a3 	.word	0x080015a3
 8001530:	080015a3 	.word	0x080015a3
 8001534:	080015a3 	.word	0x080015a3
 8001538:	08001551 	.word	0x08001551
 800153c:	08001565 	.word	0x08001565
 8001540:	4a79      	ldr	r2, [pc, #484]	@ (8001728 <HAL_GPIO_Init+0x2b4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d013      	beq.n	800156e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001546:	e02c      	b.n	80015a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	623b      	str	r3, [r7, #32]
          break;
 800154e:	e029      	b.n	80015a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	3304      	adds	r3, #4
 8001556:	623b      	str	r3, [r7, #32]
          break;
 8001558:	e024      	b.n	80015a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	3308      	adds	r3, #8
 8001560:	623b      	str	r3, [r7, #32]
          break;
 8001562:	e01f      	b.n	80015a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	330c      	adds	r3, #12
 800156a:	623b      	str	r3, [r7, #32]
          break;
 800156c:	e01a      	b.n	80015a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d102      	bne.n	800157c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001576:	2304      	movs	r3, #4
 8001578:	623b      	str	r3, [r7, #32]
          break;
 800157a:	e013      	b.n	80015a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d105      	bne.n	8001590 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001584:	2308      	movs	r3, #8
 8001586:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	611a      	str	r2, [r3, #16]
          break;
 800158e:	e009      	b.n	80015a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001590:	2308      	movs	r3, #8
 8001592:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69fa      	ldr	r2, [r7, #28]
 8001598:	615a      	str	r2, [r3, #20]
          break;
 800159a:	e003      	b.n	80015a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800159c:	2300      	movs	r3, #0
 800159e:	623b      	str	r3, [r7, #32]
          break;
 80015a0:	e000      	b.n	80015a4 <HAL_GPIO_Init+0x130>
          break;
 80015a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2bff      	cmp	r3, #255	@ 0xff
 80015a8:	d801      	bhi.n	80015ae <HAL_GPIO_Init+0x13a>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	e001      	b.n	80015b2 <HAL_GPIO_Init+0x13e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3304      	adds	r3, #4
 80015b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	2bff      	cmp	r3, #255	@ 0xff
 80015b8:	d802      	bhi.n	80015c0 <HAL_GPIO_Init+0x14c>
 80015ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	e002      	b.n	80015c6 <HAL_GPIO_Init+0x152>
 80015c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c2:	3b08      	subs	r3, #8
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	210f      	movs	r1, #15
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	fa01 f303 	lsl.w	r3, r1, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	401a      	ands	r2, r3
 80015d8:	6a39      	ldr	r1, [r7, #32]
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	fa01 f303 	lsl.w	r3, r1, r3
 80015e0:	431a      	orrs	r2, r3
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 80b1 	beq.w	8001756 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015f4:	4b4d      	ldr	r3, [pc, #308]	@ (800172c <HAL_GPIO_Init+0x2b8>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a4c      	ldr	r2, [pc, #304]	@ (800172c <HAL_GPIO_Init+0x2b8>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b4a      	ldr	r3, [pc, #296]	@ (800172c <HAL_GPIO_Init+0x2b8>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800160c:	4a48      	ldr	r2, [pc, #288]	@ (8001730 <HAL_GPIO_Init+0x2bc>)
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	3302      	adds	r3, #2
 8001614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001618:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	220f      	movs	r2, #15
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	4013      	ands	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a40      	ldr	r2, [pc, #256]	@ (8001734 <HAL_GPIO_Init+0x2c0>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d013      	beq.n	8001660 <HAL_GPIO_Init+0x1ec>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a3f      	ldr	r2, [pc, #252]	@ (8001738 <HAL_GPIO_Init+0x2c4>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d00d      	beq.n	800165c <HAL_GPIO_Init+0x1e8>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a3e      	ldr	r2, [pc, #248]	@ (800173c <HAL_GPIO_Init+0x2c8>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d007      	beq.n	8001658 <HAL_GPIO_Init+0x1e4>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a3d      	ldr	r2, [pc, #244]	@ (8001740 <HAL_GPIO_Init+0x2cc>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d101      	bne.n	8001654 <HAL_GPIO_Init+0x1e0>
 8001650:	2303      	movs	r3, #3
 8001652:	e006      	b.n	8001662 <HAL_GPIO_Init+0x1ee>
 8001654:	2304      	movs	r3, #4
 8001656:	e004      	b.n	8001662 <HAL_GPIO_Init+0x1ee>
 8001658:	2302      	movs	r3, #2
 800165a:	e002      	b.n	8001662 <HAL_GPIO_Init+0x1ee>
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <HAL_GPIO_Init+0x1ee>
 8001660:	2300      	movs	r3, #0
 8001662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001664:	f002 0203 	and.w	r2, r2, #3
 8001668:	0092      	lsls	r2, r2, #2
 800166a:	4093      	lsls	r3, r2
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	4313      	orrs	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001672:	492f      	ldr	r1, [pc, #188]	@ (8001730 <HAL_GPIO_Init+0x2bc>)
 8001674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	3302      	adds	r3, #2
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d006      	beq.n	800169a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800168c:	4b2d      	ldr	r3, [pc, #180]	@ (8001744 <HAL_GPIO_Init+0x2d0>)
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	492c      	ldr	r1, [pc, #176]	@ (8001744 <HAL_GPIO_Init+0x2d0>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	608b      	str	r3, [r1, #8]
 8001698:	e006      	b.n	80016a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800169a:	4b2a      	ldr	r3, [pc, #168]	@ (8001744 <HAL_GPIO_Init+0x2d0>)
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	4928      	ldr	r1, [pc, #160]	@ (8001744 <HAL_GPIO_Init+0x2d0>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d006      	beq.n	80016c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016b4:	4b23      	ldr	r3, [pc, #140]	@ (8001744 <HAL_GPIO_Init+0x2d0>)
 80016b6:	68da      	ldr	r2, [r3, #12]
 80016b8:	4922      	ldr	r1, [pc, #136]	@ (8001744 <HAL_GPIO_Init+0x2d0>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	4313      	orrs	r3, r2
 80016be:	60cb      	str	r3, [r1, #12]
 80016c0:	e006      	b.n	80016d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016c2:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <HAL_GPIO_Init+0x2d0>)
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	491e      	ldr	r1, [pc, #120]	@ (8001744 <HAL_GPIO_Init+0x2d0>)
 80016cc:	4013      	ands	r3, r2
 80016ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d006      	beq.n	80016ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <HAL_GPIO_Init+0x2d0>)
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	4918      	ldr	r1, [pc, #96]	@ (8001744 <HAL_GPIO_Init+0x2d0>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
 80016e8:	e006      	b.n	80016f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016ea:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <HAL_GPIO_Init+0x2d0>)
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	4914      	ldr	r1, [pc, #80]	@ (8001744 <HAL_GPIO_Init+0x2d0>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d021      	beq.n	8001748 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001704:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <HAL_GPIO_Init+0x2d0>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	490e      	ldr	r1, [pc, #56]	@ (8001744 <HAL_GPIO_Init+0x2d0>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	600b      	str	r3, [r1, #0]
 8001710:	e021      	b.n	8001756 <HAL_GPIO_Init+0x2e2>
 8001712:	bf00      	nop
 8001714:	10320000 	.word	0x10320000
 8001718:	10310000 	.word	0x10310000
 800171c:	10220000 	.word	0x10220000
 8001720:	10210000 	.word	0x10210000
 8001724:	10120000 	.word	0x10120000
 8001728:	10110000 	.word	0x10110000
 800172c:	40021000 	.word	0x40021000
 8001730:	40010000 	.word	0x40010000
 8001734:	40010800 	.word	0x40010800
 8001738:	40010c00 	.word	0x40010c00
 800173c:	40011000 	.word	0x40011000
 8001740:	40011400 	.word	0x40011400
 8001744:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001748:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <HAL_GPIO_Init+0x304>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	43db      	mvns	r3, r3
 8001750:	4909      	ldr	r1, [pc, #36]	@ (8001778 <HAL_GPIO_Init+0x304>)
 8001752:	4013      	ands	r3, r2
 8001754:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001758:	3301      	adds	r3, #1
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001762:	fa22 f303 	lsr.w	r3, r2, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	f47f ae8e 	bne.w	8001488 <HAL_GPIO_Init+0x14>
  }
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	372c      	adds	r7, #44	@ 0x2c
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	40010400 	.word	0x40010400

0800177c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
 8001788:	4613      	mov	r3, r2
 800178a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800178c:	787b      	ldrb	r3, [r7, #1]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001798:	e003      	b.n	80017a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800179a:	887b      	ldrh	r3, [r7, #2]
 800179c:	041a      	lsls	r2, r3, #16
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	611a      	str	r2, [r3, #16]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017be:	887a      	ldrh	r2, [r7, #2]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4013      	ands	r3, r2
 80017c4:	041a      	lsls	r2, r3, #16
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	43d9      	mvns	r1, r3
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	400b      	ands	r3, r1
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	611a      	str	r2, [r3, #16]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
	...

080017e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017ea:	4b08      	ldr	r3, [pc, #32]	@ (800180c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017ec:	695a      	ldr	r2, [r3, #20]
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d006      	beq.n	8001804 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017f6:	4a05      	ldr	r2, [pc, #20]	@ (800180c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f806 	bl	8001810 <HAL_GPIO_EXTI_Callback>
  }
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40010400 	.word	0x40010400

08001810 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e272      	b.n	8001d1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8087 	beq.w	8001952 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001844:	4b92      	ldr	r3, [pc, #584]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	2b04      	cmp	r3, #4
 800184e:	d00c      	beq.n	800186a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001850:	4b8f      	ldr	r3, [pc, #572]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 030c 	and.w	r3, r3, #12
 8001858:	2b08      	cmp	r3, #8
 800185a:	d112      	bne.n	8001882 <HAL_RCC_OscConfig+0x5e>
 800185c:	4b8c      	ldr	r3, [pc, #560]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001868:	d10b      	bne.n	8001882 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186a:	4b89      	ldr	r3, [pc, #548]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d06c      	beq.n	8001950 <HAL_RCC_OscConfig+0x12c>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d168      	bne.n	8001950 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e24c      	b.n	8001d1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800188a:	d106      	bne.n	800189a <HAL_RCC_OscConfig+0x76>
 800188c:	4b80      	ldr	r3, [pc, #512]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a7f      	ldr	r2, [pc, #508]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 8001892:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	e02e      	b.n	80018f8 <HAL_RCC_OscConfig+0xd4>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0x98>
 80018a2:	4b7b      	ldr	r3, [pc, #492]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a7a      	ldr	r2, [pc, #488]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b78      	ldr	r3, [pc, #480]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a77      	ldr	r2, [pc, #476]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e01d      	b.n	80018f8 <HAL_RCC_OscConfig+0xd4>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0xbc>
 80018c6:	4b72      	ldr	r3, [pc, #456]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a71      	ldr	r2, [pc, #452]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b6f      	ldr	r3, [pc, #444]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a6e      	ldr	r2, [pc, #440]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e00b      	b.n	80018f8 <HAL_RCC_OscConfig+0xd4>
 80018e0:	4b6b      	ldr	r3, [pc, #428]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a6a      	ldr	r2, [pc, #424]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b68      	ldr	r3, [pc, #416]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a67      	ldr	r2, [pc, #412]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d013      	beq.n	8001928 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff f9dc 	bl	8000cbc <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff f9d8 	bl	8000cbc <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	@ 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e200      	b.n	8001d1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191a:	4b5d      	ldr	r3, [pc, #372]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0xe4>
 8001926:	e014      	b.n	8001952 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7ff f9c8 	bl	8000cbc <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff f9c4 	bl	8000cbc <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	@ 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e1ec      	b.n	8001d1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001942:	4b53      	ldr	r3, [pc, #332]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x10c>
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d063      	beq.n	8001a26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800195e:	4b4c      	ldr	r3, [pc, #304]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00b      	beq.n	8001982 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800196a:	4b49      	ldr	r3, [pc, #292]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b08      	cmp	r3, #8
 8001974:	d11c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x18c>
 8001976:	4b46      	ldr	r3, [pc, #280]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d116      	bne.n	80019b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001982:	4b43      	ldr	r3, [pc, #268]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d005      	beq.n	800199a <HAL_RCC_OscConfig+0x176>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d001      	beq.n	800199a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e1c0      	b.n	8001d1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4939      	ldr	r1, [pc, #228]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ae:	e03a      	b.n	8001a26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d020      	beq.n	80019fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b8:	4b36      	ldr	r3, [pc, #216]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019be:	f7ff f97d 	bl	8000cbc <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c6:	f7ff f979 	bl	8000cbc <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e1a1      	b.n	8001d1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4927      	ldr	r1, [pc, #156]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	600b      	str	r3, [r1, #0]
 80019f8:	e015      	b.n	8001a26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fa:	4b26      	ldr	r3, [pc, #152]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a00:	f7ff f95c 	bl	8000cbc <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a08:	f7ff f958 	bl	8000cbc <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e180      	b.n	8001d1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d03a      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d019      	beq.n	8001a6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a3a:	4b17      	ldr	r3, [pc, #92]	@ (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a40:	f7ff f93c 	bl	8000cbc <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a48:	f7ff f938 	bl	8000cbc <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e160      	b.n	8001d1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a90 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a66:	2001      	movs	r0, #1
 8001a68:	f000 face 	bl	8002008 <RCC_Delay>
 8001a6c:	e01c      	b.n	8001aa8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a74:	f7ff f922 	bl	8000cbc <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7a:	e00f      	b.n	8001a9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7c:	f7ff f91e 	bl	8000cbc <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d908      	bls.n	8001a9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e146      	b.n	8001d1c <HAL_RCC_OscConfig+0x4f8>
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000
 8001a94:	42420000 	.word	0x42420000
 8001a98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a9c:	4b92      	ldr	r3, [pc, #584]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1e9      	bne.n	8001a7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 80a6 	beq.w	8001c02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aba:	4b8b      	ldr	r3, [pc, #556]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10d      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	4b88      	ldr	r3, [pc, #544]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4a87      	ldr	r2, [pc, #540]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ad0:	61d3      	str	r3, [r2, #28]
 8001ad2:	4b85      	ldr	r3, [pc, #532]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae2:	4b82      	ldr	r3, [pc, #520]	@ (8001cec <HAL_RCC_OscConfig+0x4c8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d118      	bne.n	8001b20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aee:	4b7f      	ldr	r3, [pc, #508]	@ (8001cec <HAL_RCC_OscConfig+0x4c8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a7e      	ldr	r2, [pc, #504]	@ (8001cec <HAL_RCC_OscConfig+0x4c8>)
 8001af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001afa:	f7ff f8df 	bl	8000cbc <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b02:	f7ff f8db 	bl	8000cbc <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b64      	cmp	r3, #100	@ 0x64
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e103      	b.n	8001d1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b14:	4b75      	ldr	r3, [pc, #468]	@ (8001cec <HAL_RCC_OscConfig+0x4c8>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d106      	bne.n	8001b36 <HAL_RCC_OscConfig+0x312>
 8001b28:	4b6f      	ldr	r3, [pc, #444]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	4a6e      	ldr	r2, [pc, #440]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6213      	str	r3, [r2, #32]
 8001b34:	e02d      	b.n	8001b92 <HAL_RCC_OscConfig+0x36e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x334>
 8001b3e:	4b6a      	ldr	r3, [pc, #424]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	4a69      	ldr	r2, [pc, #420]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001b44:	f023 0301 	bic.w	r3, r3, #1
 8001b48:	6213      	str	r3, [r2, #32]
 8001b4a:	4b67      	ldr	r3, [pc, #412]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	4a66      	ldr	r2, [pc, #408]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	f023 0304 	bic.w	r3, r3, #4
 8001b54:	6213      	str	r3, [r2, #32]
 8001b56:	e01c      	b.n	8001b92 <HAL_RCC_OscConfig+0x36e>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d10c      	bne.n	8001b7a <HAL_RCC_OscConfig+0x356>
 8001b60:	4b61      	ldr	r3, [pc, #388]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4a60      	ldr	r2, [pc, #384]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001b66:	f043 0304 	orr.w	r3, r3, #4
 8001b6a:	6213      	str	r3, [r2, #32]
 8001b6c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4a5d      	ldr	r2, [pc, #372]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6213      	str	r3, [r2, #32]
 8001b78:	e00b      	b.n	8001b92 <HAL_RCC_OscConfig+0x36e>
 8001b7a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4a5a      	ldr	r2, [pc, #360]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	6213      	str	r3, [r2, #32]
 8001b86:	4b58      	ldr	r3, [pc, #352]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	4a57      	ldr	r2, [pc, #348]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	f023 0304 	bic.w	r3, r3, #4
 8001b90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d015      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff f88f 	bl	8000cbc <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7ff f88b 	bl	8000cbc <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e0b1      	b.n	8001d1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb8:	4b4b      	ldr	r3, [pc, #300]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0ee      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x37e>
 8001bc4:	e014      	b.n	8001bf0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc6:	f7ff f879 	bl	8000cbc <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bcc:	e00a      	b.n	8001be4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bce:	f7ff f875 	bl	8000cbc <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e09b      	b.n	8001d1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be4:	4b40      	ldr	r3, [pc, #256]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1ee      	bne.n	8001bce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d105      	bne.n	8001c02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	4a3b      	ldr	r2, [pc, #236]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001bfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 8087 	beq.w	8001d1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d061      	beq.n	8001cdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d146      	bne.n	8001cae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c20:	4b33      	ldr	r3, [pc, #204]	@ (8001cf0 <HAL_RCC_OscConfig+0x4cc>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c26:	f7ff f849 	bl	8000cbc <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2e:	f7ff f845 	bl	8000cbc <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e06d      	b.n	8001d1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c40:	4b29      	ldr	r3, [pc, #164]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f0      	bne.n	8001c2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c54:	d108      	bne.n	8001c68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c56:	4b24      	ldr	r3, [pc, #144]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	4921      	ldr	r1, [pc, #132]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a19      	ldr	r1, [r3, #32]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c78:	430b      	orrs	r3, r1
 8001c7a:	491b      	ldr	r1, [pc, #108]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c80:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf0 <HAL_RCC_OscConfig+0x4cc>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7ff f819 	bl	8000cbc <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7ff f815 	bl	8000cbc <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e03d      	b.n	8001d1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca0:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x46a>
 8001cac:	e035      	b.n	8001d1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cae:	4b10      	ldr	r3, [pc, #64]	@ (8001cf0 <HAL_RCC_OscConfig+0x4cc>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7ff f802 	bl	8000cbc <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7fe fffe 	bl	8000cbc <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e026      	b.n	8001d1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cce:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x498>
 8001cda:	e01e      	b.n	8001d1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d107      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e019      	b.n	8001d1c <HAL_RCC_OscConfig+0x4f8>
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40007000 	.word	0x40007000
 8001cf0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <HAL_RCC_OscConfig+0x500>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d106      	bne.n	8001d16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40021000 	.word	0x40021000

08001d28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0d0      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d910      	bls.n	8001d6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b67      	ldr	r3, [pc, #412]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 0207 	bic.w	r2, r3, #7
 8001d52:	4965      	ldr	r1, [pc, #404]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	4b63      	ldr	r3, [pc, #396]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0b8      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d020      	beq.n	8001dba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d84:	4b59      	ldr	r3, [pc, #356]	@ (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4a58      	ldr	r2, [pc, #352]	@ (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d9c:	4b53      	ldr	r3, [pc, #332]	@ (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4a52      	ldr	r2, [pc, #328]	@ (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001da6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da8:	4b50      	ldr	r3, [pc, #320]	@ (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	494d      	ldr	r1, [pc, #308]	@ (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d040      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	4b47      	ldr	r3, [pc, #284]	@ (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d115      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e07f      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de6:	4b41      	ldr	r3, [pc, #260]	@ (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e073      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df6:	4b3d      	ldr	r3, [pc, #244]	@ (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e06b      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e06:	4b39      	ldr	r3, [pc, #228]	@ (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f023 0203 	bic.w	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4936      	ldr	r1, [pc, #216]	@ (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e18:	f7fe ff50 	bl	8000cbc <HAL_GetTick>
 8001e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e20:	f7fe ff4c 	bl	8000cbc <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e053      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	4b2d      	ldr	r3, [pc, #180]	@ (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 020c 	and.w	r2, r3, #12
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d1eb      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e48:	4b27      	ldr	r3, [pc, #156]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d210      	bcs.n	8001e78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b24      	ldr	r3, [pc, #144]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 0207 	bic.w	r2, r3, #7
 8001e5e:	4922      	ldr	r1, [pc, #136]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e66:	4b20      	ldr	r3, [pc, #128]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e032      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e84:	4b19      	ldr	r3, [pc, #100]	@ (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4916      	ldr	r1, [pc, #88]	@ (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d009      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ea2:	4b12      	ldr	r3, [pc, #72]	@ (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	490e      	ldr	r1, [pc, #56]	@ (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eb6:	f000 f821 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	490a      	ldr	r1, [pc, #40]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec8:	5ccb      	ldrb	r3, [r1, r3]
 8001eca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ece:	4a09      	ldr	r2, [pc, #36]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ed2:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe feae 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40022000 	.word	0x40022000
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	08003b98 	.word	0x08003b98
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	20000004 	.word	0x20000004

08001efc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f16:	4b1e      	ldr	r3, [pc, #120]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d002      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x30>
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d003      	beq.n	8001f32 <HAL_RCC_GetSysClockFreq+0x36>
 8001f2a:	e027      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f2c:	4b19      	ldr	r3, [pc, #100]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f2e:	613b      	str	r3, [r7, #16]
      break;
 8001f30:	e027      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	0c9b      	lsrs	r3, r3, #18
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	4a17      	ldr	r2, [pc, #92]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f3c:	5cd3      	ldrb	r3, [r2, r3]
 8001f3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d010      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f4a:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	0c5b      	lsrs	r3, r3, #17
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	4a11      	ldr	r2, [pc, #68]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f56:	5cd3      	ldrb	r3, [r2, r3]
 8001f58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f5e:	fb03 f202 	mul.w	r2, r3, r2
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	e004      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f70:	fb02 f303 	mul.w	r3, r2, r3
 8001f74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	613b      	str	r3, [r7, #16]
      break;
 8001f7a:	e002      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f7c:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f7e:	613b      	str	r3, [r7, #16]
      break;
 8001f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f82:	693b      	ldr	r3, [r7, #16]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	371c      	adds	r7, #28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	007a1200 	.word	0x007a1200
 8001f98:	08003bb0 	.word	0x08003bb0
 8001f9c:	08003bc0 	.word	0x08003bc0
 8001fa0:	003d0900 	.word	0x003d0900

08001fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa8:	4b02      	ldr	r3, [pc, #8]	@ (8001fb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001faa:	681b      	ldr	r3, [r3, #0]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	20000000 	.word	0x20000000

08001fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fbc:	f7ff fff2 	bl	8001fa4 <HAL_RCC_GetHCLKFreq>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	0a1b      	lsrs	r3, r3, #8
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	4903      	ldr	r1, [pc, #12]	@ (8001fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fce:	5ccb      	ldrb	r3, [r1, r3]
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	08003ba8 	.word	0x08003ba8

08001fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fe4:	f7ff ffde 	bl	8001fa4 <HAL_RCC_GetHCLKFreq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	0adb      	lsrs	r3, r3, #11
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	4903      	ldr	r1, [pc, #12]	@ (8002004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ff6:	5ccb      	ldrb	r3, [r1, r3]
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	08003ba8 	.word	0x08003ba8

08002008 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002010:	4b0a      	ldr	r3, [pc, #40]	@ (800203c <RCC_Delay+0x34>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0a      	ldr	r2, [pc, #40]	@ (8002040 <RCC_Delay+0x38>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	0a5b      	lsrs	r3, r3, #9
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	fb02 f303 	mul.w	r3, r2, r3
 8002022:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002024:	bf00      	nop
  }
  while (Delay --);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1e5a      	subs	r2, r3, #1
 800202a:	60fa      	str	r2, [r7, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f9      	bne.n	8002024 <RCC_Delay+0x1c>
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	20000000 	.word	0x20000000
 8002040:	10624dd3 	.word	0x10624dd3

08002044 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d07d      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002060:	2300      	movs	r3, #0
 8002062:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002064:	4b4f      	ldr	r3, [pc, #316]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10d      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002070:	4b4c      	ldr	r3, [pc, #304]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	4a4b      	ldr	r2, [pc, #300]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800207a:	61d3      	str	r3, [r2, #28]
 800207c:	4b49      	ldr	r3, [pc, #292]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002088:	2301      	movs	r3, #1
 800208a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	4b46      	ldr	r3, [pc, #280]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d118      	bne.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002098:	4b43      	ldr	r3, [pc, #268]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a42      	ldr	r2, [pc, #264]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800209e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a4:	f7fe fe0a 	bl	8000cbc <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020aa:	e008      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ac:	f7fe fe06 	bl	8000cbc <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	@ 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e06d      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	4b3a      	ldr	r3, [pc, #232]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020ca:	4b36      	ldr	r3, [pc, #216]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d02e      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d027      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020e8:	4b2e      	ldr	r3, [pc, #184]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020f2:	4b2e      	ldr	r3, [pc, #184]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020f8:	4b2c      	ldr	r3, [pc, #176]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020fe:	4a29      	ldr	r2, [pc, #164]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d014      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7fe fdd5 	bl	8000cbc <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002114:	e00a      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002116:	f7fe fdd1 	bl	8000cbc <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002124:	4293      	cmp	r3, r2
 8002126:	d901      	bls.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e036      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212c:	4b1d      	ldr	r3, [pc, #116]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0ee      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002138:	4b1a      	ldr	r3, [pc, #104]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4917      	ldr	r1, [pc, #92]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002146:	4313      	orrs	r3, r2
 8002148:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800214a:	7dfb      	ldrb	r3, [r7, #23]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d105      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002150:	4b14      	ldr	r3, [pc, #80]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	4a13      	ldr	r2, [pc, #76]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002156:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800215a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002168:	4b0e      	ldr	r3, [pc, #56]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	490b      	ldr	r1, [pc, #44]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b00      	cmp	r3, #0
 8002184:	d008      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002186:	4b07      	ldr	r3, [pc, #28]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	4904      	ldr	r1, [pc, #16]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40007000 	.word	0x40007000
 80021ac:	42420440 	.word	0x42420440

080021b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e041      	b.n	8002246 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d106      	bne.n	80021dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7fe fb76 	bl	80008c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3304      	adds	r3, #4
 80021ec:	4619      	mov	r1, r3
 80021ee:	4610      	mov	r0, r2
 80021f0:	f000 fbe6 	bl	80029c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e041      	b.n	80022e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d106      	bne.n	800227a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f839 	bl	80022ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2202      	movs	r2, #2
 800227e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3304      	adds	r3, #4
 800228a:	4619      	mov	r1, r3
 800228c:	4610      	mov	r0, r2
 800228e:	f000 fb97 	bl	80029c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e093      	b.n	800243a <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7fe faea 	bl	8000900 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002342:	f023 0307 	bic.w	r3, r3, #7
 8002346:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3304      	adds	r3, #4
 8002350:	4619      	mov	r1, r3
 8002352:	4610      	mov	r0, r2
 8002354:	f000 fb34 	bl	80029c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	4313      	orrs	r3, r2
 8002378:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002380:	f023 0303 	bic.w	r3, r3, #3
 8002384:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	021b      	lsls	r3, r3, #8
 8002390:	4313      	orrs	r3, r2
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800239e:	f023 030c 	bic.w	r3, r3, #12
 80023a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80023aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	021b      	lsls	r3, r3, #8
 80023ba:	4313      	orrs	r3, r2
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	011a      	lsls	r2, r3, #4
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	031b      	lsls	r3, r3, #12
 80023ce:	4313      	orrs	r3, r2
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80023dc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	4313      	orrs	r3, r2
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b02      	cmp	r3, #2
 8002456:	d122      	bne.n	800249e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b02      	cmp	r3, #2
 8002464:	d11b      	bne.n	800249e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f06f 0202 	mvn.w	r2, #2
 800246e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 fa80 	bl	800298a <HAL_TIM_IC_CaptureCallback>
 800248a:	e005      	b.n	8002498 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 fa73 	bl	8002978 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 fa82 	bl	800299c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d122      	bne.n	80024f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d11b      	bne.n	80024f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f06f 0204 	mvn.w	r2, #4
 80024c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 fa56 	bl	800298a <HAL_TIM_IC_CaptureCallback>
 80024de:	e005      	b.n	80024ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 fa49 	bl	8002978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 fa58 	bl	800299c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d122      	bne.n	8002546 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b08      	cmp	r3, #8
 800250c:	d11b      	bne.n	8002546 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f06f 0208 	mvn.w	r2, #8
 8002516:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2204      	movs	r2, #4
 800251c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 fa2c 	bl	800298a <HAL_TIM_IC_CaptureCallback>
 8002532:	e005      	b.n	8002540 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 fa1f 	bl	8002978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 fa2e 	bl	800299c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b10      	cmp	r3, #16
 8002552:	d122      	bne.n	800259a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b10      	cmp	r3, #16
 8002560:	d11b      	bne.n	800259a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f06f 0210 	mvn.w	r2, #16
 800256a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2208      	movs	r2, #8
 8002570:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fa02 	bl	800298a <HAL_TIM_IC_CaptureCallback>
 8002586:	e005      	b.n	8002594 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f9f5 	bl	8002978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fa04 	bl	800299c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d10e      	bne.n	80025c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d107      	bne.n	80025c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f06f 0201 	mvn.w	r2, #1
 80025be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f9d0 	bl	8002966 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025d0:	2b80      	cmp	r3, #128	@ 0x80
 80025d2:	d10e      	bne.n	80025f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025de:	2b80      	cmp	r3, #128	@ 0x80
 80025e0:	d107      	bne.n	80025f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80025ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fcce 	bl	8002f8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025fc:	2b40      	cmp	r3, #64	@ 0x40
 80025fe:	d10e      	bne.n	800261e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800260a:	2b40      	cmp	r3, #64	@ 0x40
 800260c:	d107      	bne.n	800261e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f9c8 	bl	80029ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b20      	cmp	r3, #32
 800262a:	d10e      	bne.n	800264a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b20      	cmp	r3, #32
 8002638:	d107      	bne.n	800264a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f06f 0220 	mvn.w	r2, #32
 8002642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fc99 	bl	8002f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800266e:	2302      	movs	r3, #2
 8002670:	e0ae      	b.n	80027d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b0c      	cmp	r3, #12
 800267e:	f200 809f 	bhi.w	80027c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002682:	a201      	add	r2, pc, #4	@ (adr r2, 8002688 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002688:	080026bd 	.word	0x080026bd
 800268c:	080027c1 	.word	0x080027c1
 8002690:	080027c1 	.word	0x080027c1
 8002694:	080027c1 	.word	0x080027c1
 8002698:	080026fd 	.word	0x080026fd
 800269c:	080027c1 	.word	0x080027c1
 80026a0:	080027c1 	.word	0x080027c1
 80026a4:	080027c1 	.word	0x080027c1
 80026a8:	0800273f 	.word	0x0800273f
 80026ac:	080027c1 	.word	0x080027c1
 80026b0:	080027c1 	.word	0x080027c1
 80026b4:	080027c1 	.word	0x080027c1
 80026b8:	0800277f 	.word	0x0800277f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 f9de 	bl	8002a84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0208 	orr.w	r2, r2, #8
 80026d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0204 	bic.w	r2, r2, #4
 80026e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6999      	ldr	r1, [r3, #24]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	619a      	str	r2, [r3, #24]
      break;
 80026fa:	e064      	b.n	80027c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68b9      	ldr	r1, [r7, #8]
 8002702:	4618      	mov	r0, r3
 8002704:	f000 fa24 	bl	8002b50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699a      	ldr	r2, [r3, #24]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6999      	ldr	r1, [r3, #24]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	021a      	lsls	r2, r3, #8
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	619a      	str	r2, [r3, #24]
      break;
 800273c:	e043      	b.n	80027c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68b9      	ldr	r1, [r7, #8]
 8002744:	4618      	mov	r0, r3
 8002746:	f000 fa6d 	bl	8002c24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	69da      	ldr	r2, [r3, #28]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f042 0208 	orr.w	r2, r2, #8
 8002758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0204 	bic.w	r2, r2, #4
 8002768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69d9      	ldr	r1, [r3, #28]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	61da      	str	r2, [r3, #28]
      break;
 800277c:	e023      	b.n	80027c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68b9      	ldr	r1, [r7, #8]
 8002784:	4618      	mov	r0, r3
 8002786:	f000 fab7 	bl	8002cf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	69da      	ldr	r2, [r3, #28]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69da      	ldr	r2, [r3, #28]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69d9      	ldr	r1, [r3, #28]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	021a      	lsls	r2, r3, #8
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	61da      	str	r2, [r3, #28]
      break;
 80027be:	e002      	b.n	80027c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	75fb      	strb	r3, [r7, #23]
      break;
 80027c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_TIM_ConfigClockSource+0x1c>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e0b4      	b.n	800295e <HAL_TIM_ConfigClockSource+0x186>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800281a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800282c:	d03e      	beq.n	80028ac <HAL_TIM_ConfigClockSource+0xd4>
 800282e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002832:	f200 8087 	bhi.w	8002944 <HAL_TIM_ConfigClockSource+0x16c>
 8002836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800283a:	f000 8086 	beq.w	800294a <HAL_TIM_ConfigClockSource+0x172>
 800283e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002842:	d87f      	bhi.n	8002944 <HAL_TIM_ConfigClockSource+0x16c>
 8002844:	2b70      	cmp	r3, #112	@ 0x70
 8002846:	d01a      	beq.n	800287e <HAL_TIM_ConfigClockSource+0xa6>
 8002848:	2b70      	cmp	r3, #112	@ 0x70
 800284a:	d87b      	bhi.n	8002944 <HAL_TIM_ConfigClockSource+0x16c>
 800284c:	2b60      	cmp	r3, #96	@ 0x60
 800284e:	d050      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0x11a>
 8002850:	2b60      	cmp	r3, #96	@ 0x60
 8002852:	d877      	bhi.n	8002944 <HAL_TIM_ConfigClockSource+0x16c>
 8002854:	2b50      	cmp	r3, #80	@ 0x50
 8002856:	d03c      	beq.n	80028d2 <HAL_TIM_ConfigClockSource+0xfa>
 8002858:	2b50      	cmp	r3, #80	@ 0x50
 800285a:	d873      	bhi.n	8002944 <HAL_TIM_ConfigClockSource+0x16c>
 800285c:	2b40      	cmp	r3, #64	@ 0x40
 800285e:	d058      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0x13a>
 8002860:	2b40      	cmp	r3, #64	@ 0x40
 8002862:	d86f      	bhi.n	8002944 <HAL_TIM_ConfigClockSource+0x16c>
 8002864:	2b30      	cmp	r3, #48	@ 0x30
 8002866:	d064      	beq.n	8002932 <HAL_TIM_ConfigClockSource+0x15a>
 8002868:	2b30      	cmp	r3, #48	@ 0x30
 800286a:	d86b      	bhi.n	8002944 <HAL_TIM_ConfigClockSource+0x16c>
 800286c:	2b20      	cmp	r3, #32
 800286e:	d060      	beq.n	8002932 <HAL_TIM_ConfigClockSource+0x15a>
 8002870:	2b20      	cmp	r3, #32
 8002872:	d867      	bhi.n	8002944 <HAL_TIM_ConfigClockSource+0x16c>
 8002874:	2b00      	cmp	r3, #0
 8002876:	d05c      	beq.n	8002932 <HAL_TIM_ConfigClockSource+0x15a>
 8002878:	2b10      	cmp	r3, #16
 800287a:	d05a      	beq.n	8002932 <HAL_TIM_ConfigClockSource+0x15a>
 800287c:	e062      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800288e:	f000 faf8 	bl	8002e82 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80028a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	609a      	str	r2, [r3, #8]
      break;
 80028aa:	e04f      	b.n	800294c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028bc:	f000 fae1 	bl	8002e82 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028ce:	609a      	str	r2, [r3, #8]
      break;
 80028d0:	e03c      	b.n	800294c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028de:	461a      	mov	r2, r3
 80028e0:	f000 fa58 	bl	8002d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2150      	movs	r1, #80	@ 0x50
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 faaf 	bl	8002e4e <TIM_ITRx_SetConfig>
      break;
 80028f0:	e02c      	b.n	800294c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028fe:	461a      	mov	r2, r3
 8002900:	f000 fa76 	bl	8002df0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2160      	movs	r1, #96	@ 0x60
 800290a:	4618      	mov	r0, r3
 800290c:	f000 fa9f 	bl	8002e4e <TIM_ITRx_SetConfig>
      break;
 8002910:	e01c      	b.n	800294c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800291e:	461a      	mov	r2, r3
 8002920:	f000 fa38 	bl	8002d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2140      	movs	r1, #64	@ 0x40
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fa8f 	bl	8002e4e <TIM_ITRx_SetConfig>
      break;
 8002930:	e00c      	b.n	800294c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4619      	mov	r1, r3
 800293c:	4610      	mov	r0, r2
 800293e:	f000 fa86 	bl	8002e4e <TIM_ITRx_SetConfig>
      break;
 8002942:	e003      	b.n	800294c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
      break;
 8002948:	e000      	b.n	800294c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800294a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800295c:	7bfb      	ldrb	r3, [r7, #15]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a29      	ldr	r2, [pc, #164]	@ (8002a78 <TIM_Base_SetConfig+0xb8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d00b      	beq.n	80029f0 <TIM_Base_SetConfig+0x30>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029de:	d007      	beq.n	80029f0 <TIM_Base_SetConfig+0x30>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a26      	ldr	r2, [pc, #152]	@ (8002a7c <TIM_Base_SetConfig+0xbc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d003      	beq.n	80029f0 <TIM_Base_SetConfig+0x30>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a25      	ldr	r2, [pc, #148]	@ (8002a80 <TIM_Base_SetConfig+0xc0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d108      	bne.n	8002a02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a1c      	ldr	r2, [pc, #112]	@ (8002a78 <TIM_Base_SetConfig+0xb8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00b      	beq.n	8002a22 <TIM_Base_SetConfig+0x62>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a10:	d007      	beq.n	8002a22 <TIM_Base_SetConfig+0x62>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a19      	ldr	r2, [pc, #100]	@ (8002a7c <TIM_Base_SetConfig+0xbc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d003      	beq.n	8002a22 <TIM_Base_SetConfig+0x62>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a18      	ldr	r2, [pc, #96]	@ (8002a80 <TIM_Base_SetConfig+0xc0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d108      	bne.n	8002a34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a07      	ldr	r2, [pc, #28]	@ (8002a78 <TIM_Base_SetConfig+0xb8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d103      	bne.n	8002a68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	615a      	str	r2, [r3, #20]
}
 8002a6e:	bf00      	nop
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	40012c00 	.word	0x40012c00
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40000800 	.word	0x40000800

08002a84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	f023 0201 	bic.w	r2, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f023 0303 	bic.w	r3, r3, #3
 8002aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f023 0302 	bic.w	r3, r3, #2
 8002acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a1c      	ldr	r2, [pc, #112]	@ (8002b4c <TIM_OC1_SetConfig+0xc8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d10c      	bne.n	8002afa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f023 0308 	bic.w	r3, r3, #8
 8002ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f023 0304 	bic.w	r3, r3, #4
 8002af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a13      	ldr	r2, [pc, #76]	@ (8002b4c <TIM_OC1_SetConfig+0xc8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d111      	bne.n	8002b26 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	621a      	str	r2, [r3, #32]
}
 8002b40:	bf00      	nop
 8002b42:	371c      	adds	r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40012c00 	.word	0x40012c00

08002b50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f023 0210 	bic.w	r2, r3, #16
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	021b      	lsls	r3, r3, #8
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f023 0320 	bic.w	r3, r3, #32
 8002b9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a1d      	ldr	r2, [pc, #116]	@ (8002c20 <TIM_OC2_SetConfig+0xd0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d10d      	bne.n	8002bcc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a14      	ldr	r2, [pc, #80]	@ (8002c20 <TIM_OC2_SetConfig+0xd0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d113      	bne.n	8002bfc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002be2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	621a      	str	r2, [r3, #32]
}
 8002c16:	bf00      	nop
 8002c18:	371c      	adds	r7, #28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	40012c00 	.word	0x40012c00

08002c24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0303 	bic.w	r3, r3, #3
 8002c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002cf4 <TIM_OC3_SetConfig+0xd0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d10d      	bne.n	8002c9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a14      	ldr	r2, [pc, #80]	@ (8002cf4 <TIM_OC3_SetConfig+0xd0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d113      	bne.n	8002cce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	621a      	str	r2, [r3, #32]
}
 8002ce8:	bf00      	nop
 8002cea:	371c      	adds	r7, #28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40012c00 	.word	0x40012c00

08002cf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	021b      	lsls	r3, r3, #8
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	031b      	lsls	r3, r3, #12
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a0f      	ldr	r2, [pc, #60]	@ (8002d90 <TIM_OC4_SetConfig+0x98>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d109      	bne.n	8002d6c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	019b      	lsls	r3, r3, #6
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	621a      	str	r2, [r3, #32]
}
 8002d86:	bf00      	nop
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr
 8002d90:	40012c00 	.word	0x40012c00

08002d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	f023 0201 	bic.w	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f023 030a 	bic.w	r3, r3, #10
 8002dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	621a      	str	r2, [r3, #32]
}
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	f023 0210 	bic.w	r2, r3, #16
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	031b      	lsls	r3, r3, #12
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	621a      	str	r2, [r3, #32]
}
 8002e44:	bf00      	nop
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr

08002e4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b085      	sub	sp, #20
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f043 0307 	orr.w	r3, r3, #7
 8002e70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	609a      	str	r2, [r3, #8]
}
 8002e78:	bf00      	nop
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b087      	sub	sp, #28
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	021a      	lsls	r2, r3, #8
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	609a      	str	r2, [r3, #8]
}
 8002eb6:	bf00      	nop
 8002eb8:	371c      	adds	r7, #28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e046      	b.n	8002f66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a16      	ldr	r2, [pc, #88]	@ (8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d00e      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f24:	d009      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a12      	ldr	r2, [pc, #72]	@ (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d004      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a10      	ldr	r2, [pc, #64]	@ (8002f78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d10c      	bne.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	40000400 	.word	0x40000400
 8002f78:	40000800 	.word	0x40000800

08002f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr

08002f8e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e042      	b.n	8003038 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d106      	bne.n	8002fcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7fd fd46 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2224      	movs	r2, #36	@ 0x24
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fe2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fd09 	bl	80039fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ff8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695a      	ldr	r2, [r3, #20]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003008:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003018:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	4613      	mov	r3, r2
 800304c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b20      	cmp	r3, #32
 8003058:	d121      	bne.n	800309e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <HAL_UART_Transmit_IT+0x26>
 8003060:	88fb      	ldrh	r3, [r7, #6]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e01a      	b.n	80030a0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	88fa      	ldrh	r2, [r7, #6]
 8003074:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	88fa      	ldrh	r2, [r7, #6]
 800307a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2221      	movs	r2, #33	@ 0x21
 8003086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003098:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	e000      	b.n	80030a0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800309e:	2302      	movs	r3, #2
  }
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	4613      	mov	r3, r2
 80030b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d112      	bne.n	80030ea <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_UART_Receive_IT+0x26>
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e00b      	b.n	80030ec <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	461a      	mov	r2, r3
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 fab6 	bl	8003652 <UART_Start_Receive_IT>
 80030e6:	4603      	mov	r3, r0
 80030e8:	e000      	b.n	80030ec <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80030ea:	2302      	movs	r3, #2
  }
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b0ba      	sub	sp, #232	@ 0xe8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800311a:	2300      	movs	r3, #0
 800311c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003120:	2300      	movs	r3, #0
 8003122:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10f      	bne.n	800315a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800313a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800313e:	f003 0320 	and.w	r3, r3, #32
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <HAL_UART_IRQHandler+0x66>
 8003146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fb93 	bl	800387e <UART_Receive_IT>
      return;
 8003158:	e25b      	b.n	8003612 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800315a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 80de 	beq.w	8003320 <HAL_UART_IRQHandler+0x22c>
 8003164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d106      	bne.n	800317e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003174:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80d1 	beq.w	8003320 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800317e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00b      	beq.n	80031a2 <HAL_UART_IRQHandler+0xae>
 800318a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800318e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319a:	f043 0201 	orr.w	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00b      	beq.n	80031c6 <HAL_UART_IRQHandler+0xd2>
 80031ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d005      	beq.n	80031c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031be:	f043 0202 	orr.w	r2, r3, #2
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00b      	beq.n	80031ea <HAL_UART_IRQHandler+0xf6>
 80031d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e2:	f043 0204 	orr.w	r2, r3, #4
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d011      	beq.n	800321a <HAL_UART_IRQHandler+0x126>
 80031f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d105      	bne.n	800320e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003212:	f043 0208 	orr.w	r2, r3, #8
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 81f2 	beq.w	8003608 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_UART_IRQHandler+0x14e>
 8003230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fb1e 	bl	800387e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800324c:	2b00      	cmp	r3, #0
 800324e:	bf14      	ite	ne
 8003250:	2301      	movne	r3, #1
 8003252:	2300      	moveq	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d103      	bne.n	800326e <HAL_UART_IRQHandler+0x17a>
 8003266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800326a:	2b00      	cmp	r3, #0
 800326c:	d04f      	beq.n	800330e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fa28 	bl	80036c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d041      	beq.n	8003306 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3314      	adds	r3, #20
 8003288:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003290:	e853 3f00 	ldrex	r3, [r3]
 8003294:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003298:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800329c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3314      	adds	r3, #20
 80032aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032be:	e841 2300 	strex	r3, r2, [r1]
 80032c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1d9      	bne.n	8003282 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d013      	beq.n	80032fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032da:	4a7e      	ldr	r2, [pc, #504]	@ (80034d4 <HAL_UART_IRQHandler+0x3e0>)
 80032dc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe f84e 	bl	8001384 <HAL_DMA_Abort_IT>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d016      	beq.n	800331c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032f8:	4610      	mov	r0, r2
 80032fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032fc:	e00e      	b.n	800331c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f993 	bl	800362a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003304:	e00a      	b.n	800331c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f98f 	bl	800362a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330c:	e006      	b.n	800331c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f98b 	bl	800362a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800331a:	e175      	b.n	8003608 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	bf00      	nop
    return;
 800331e:	e173      	b.n	8003608 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003324:	2b01      	cmp	r3, #1
 8003326:	f040 814f 	bne.w	80035c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800332a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 8148 	beq.w	80035c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 8141 	beq.w	80035c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003346:	2300      	movs	r3, #0
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80b6 	beq.w	80034d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003378:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8145 	beq.w	800360c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800338a:	429a      	cmp	r2, r3
 800338c:	f080 813e 	bcs.w	800360c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003396:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b20      	cmp	r3, #32
 80033a0:	f000 8088 	beq.w	80034b4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	330c      	adds	r3, #12
 80033aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	330c      	adds	r3, #12
 80033cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80033d0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80033dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033e0:	e841 2300 	strex	r3, r2, [r1]
 80033e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80033e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1d9      	bne.n	80033a4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3314      	adds	r3, #20
 80033f6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033fa:	e853 3f00 	ldrex	r3, [r3]
 80033fe:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003400:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003402:	f023 0301 	bic.w	r3, r3, #1
 8003406:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3314      	adds	r3, #20
 8003410:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003414:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003418:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800341c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003420:	e841 2300 	strex	r3, r2, [r1]
 8003424:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003426:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1e1      	bne.n	80033f0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3314      	adds	r3, #20
 8003432:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003434:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003436:	e853 3f00 	ldrex	r3, [r3]
 800343a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800343c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800343e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003442:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	3314      	adds	r3, #20
 800344c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003450:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003452:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003454:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003456:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003458:	e841 2300 	strex	r3, r2, [r1]
 800345c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800345e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e3      	bne.n	800342c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	330c      	adds	r3, #12
 8003478:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800347c:	e853 3f00 	ldrex	r3, [r3]
 8003480:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003484:	f023 0310 	bic.w	r3, r3, #16
 8003488:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	330c      	adds	r3, #12
 8003492:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003496:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003498:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800349c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800349e:	e841 2300 	strex	r3, r2, [r1]
 80034a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80034a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1e3      	bne.n	8003472 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fd ff2d 	bl	800130e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f8b6 	bl	800363c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034d0:	e09c      	b.n	800360c <HAL_UART_IRQHandler+0x518>
 80034d2:	bf00      	nop
 80034d4:	08003789 	.word	0x08003789
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 808e 	beq.w	8003610 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80034f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 8089 	beq.w	8003610 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	330c      	adds	r3, #12
 8003504:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003508:	e853 3f00 	ldrex	r3, [r3]
 800350c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800350e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003510:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003514:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	330c      	adds	r3, #12
 800351e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003522:	647a      	str	r2, [r7, #68]	@ 0x44
 8003524:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003526:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003528:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800352a:	e841 2300 	strex	r3, r2, [r1]
 800352e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1e3      	bne.n	80034fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3314      	adds	r3, #20
 800353c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	623b      	str	r3, [r7, #32]
   return(result);
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3314      	adds	r3, #20
 8003556:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800355a:	633a      	str	r2, [r7, #48]	@ 0x30
 800355c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003560:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1e3      	bne.n	8003536 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	330c      	adds	r3, #12
 8003582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	e853 3f00 	ldrex	r3, [r3]
 800358a:	60fb      	str	r3, [r7, #12]
   return(result);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0310 	bic.w	r3, r3, #16
 8003592:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	330c      	adds	r3, #12
 800359c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80035a0:	61fa      	str	r2, [r7, #28]
 80035a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a4:	69b9      	ldr	r1, [r7, #24]
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	e841 2300 	strex	r3, r2, [r1]
 80035ac:	617b      	str	r3, [r7, #20]
   return(result);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e3      	bne.n	800357c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035be:	4619      	mov	r1, r3
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f83b 	bl	800363c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035c6:	e023      	b.n	8003610 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d009      	beq.n	80035e8 <HAL_UART_IRQHandler+0x4f4>
 80035d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f8e5 	bl	80037b0 <UART_Transmit_IT>
    return;
 80035e6:	e014      	b.n	8003612 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00e      	beq.n	8003612 <HAL_UART_IRQHandler+0x51e>
 80035f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f924 	bl	800384e <UART_EndTransmit_IT>
    return;
 8003606:	e004      	b.n	8003612 <HAL_UART_IRQHandler+0x51e>
    return;
 8003608:	bf00      	nop
 800360a:	e002      	b.n	8003612 <HAL_UART_IRQHandler+0x51e>
      return;
 800360c:	bf00      	nop
 800360e:	e000      	b.n	8003612 <HAL_UART_IRQHandler+0x51e>
      return;
 8003610:	bf00      	nop
  }
}
 8003612:	37e8      	adds	r7, #232	@ 0xe8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr

08003652 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003652:	b480      	push	{r7}
 8003654:	b085      	sub	sp, #20
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	4613      	mov	r3, r2
 800365e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	88fa      	ldrh	r2, [r7, #6]
 800366a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	88fa      	ldrh	r2, [r7, #6]
 8003670:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2222      	movs	r2, #34	@ 0x22
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d007      	beq.n	8003698 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003696:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0220 	orr.w	r2, r2, #32
 80036b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b095      	sub	sp, #84	@ 0x54
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	330c      	adds	r3, #12
 80036d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	330c      	adds	r3, #12
 80036ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80036ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036f4:	e841 2300 	strex	r3, r2, [r1]
 80036f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e5      	bne.n	80036cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3314      	adds	r3, #20
 8003706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	e853 3f00 	ldrex	r3, [r3]
 800370e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3314      	adds	r3, #20
 800371e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003720:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003722:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003724:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003726:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003728:	e841 2300 	strex	r3, r2, [r1]
 800372c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e5      	bne.n	8003700 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003738:	2b01      	cmp	r3, #1
 800373a:	d119      	bne.n	8003770 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	330c      	adds	r3, #12
 8003742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	e853 3f00 	ldrex	r3, [r3]
 800374a:	60bb      	str	r3, [r7, #8]
   return(result);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f023 0310 	bic.w	r3, r3, #16
 8003752:	647b      	str	r3, [r7, #68]	@ 0x44
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	330c      	adds	r3, #12
 800375a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800375c:	61ba      	str	r2, [r7, #24]
 800375e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003760:	6979      	ldr	r1, [r7, #20]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	e841 2300 	strex	r3, r2, [r1]
 8003768:	613b      	str	r3, [r7, #16]
   return(result);
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1e5      	bne.n	800373c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800377e:	bf00      	nop
 8003780:	3754      	adds	r7, #84	@ 0x54
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr

08003788 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003794:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f7ff ff41 	bl	800362a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037a8:	bf00      	nop
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b21      	cmp	r3, #33	@ 0x21
 80037c2:	d13e      	bne.n	8003842 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037cc:	d114      	bne.n	80037f8 <UART_Transmit_IT+0x48>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d110      	bne.n	80037f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	1c9a      	adds	r2, r3, #2
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	621a      	str	r2, [r3, #32]
 80037f6:	e008      	b.n	800380a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	1c59      	adds	r1, r3, #1
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6211      	str	r1, [r2, #32]
 8003802:	781a      	ldrb	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29b      	uxth	r3, r3
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	4619      	mov	r1, r3
 8003818:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10f      	bne.n	800383e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800382c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800383c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	e000      	b.n	8003844 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003842:	2302      	movs	r3, #2
  }
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr

0800384e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003864:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff fed2 	bl	8003618 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b08c      	sub	sp, #48	@ 0x30
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b22      	cmp	r3, #34	@ 0x22
 8003890:	f040 80ae 	bne.w	80039f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800389c:	d117      	bne.n	80038ce <UART_Receive_IT+0x50>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d113      	bne.n	80038ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038bc:	b29a      	uxth	r2, r3
 80038be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c6:	1c9a      	adds	r2, r3, #2
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80038cc:	e026      	b.n	800391c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038e0:	d007      	beq.n	80038f2 <UART_Receive_IT+0x74>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10a      	bne.n	8003900 <UART_Receive_IT+0x82>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fc:	701a      	strb	r2, [r3, #0]
 80038fe:	e008      	b.n	8003912 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800390c:	b2da      	uxtb	r2, r3
 800390e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003910:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29b      	uxth	r3, r3
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	4619      	mov	r1, r3
 800392a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800392c:	2b00      	cmp	r3, #0
 800392e:	d15d      	bne.n	80039ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0220 	bic.w	r2, r2, #32
 800393e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800394e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003972:	2b01      	cmp	r3, #1
 8003974:	d135      	bne.n	80039e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	330c      	adds	r3, #12
 8003982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	e853 3f00 	ldrex	r3, [r3]
 800398a:	613b      	str	r3, [r7, #16]
   return(result);
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f023 0310 	bic.w	r3, r3, #16
 8003992:	627b      	str	r3, [r7, #36]	@ 0x24
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	330c      	adds	r3, #12
 800399a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800399c:	623a      	str	r2, [r7, #32]
 800399e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a0:	69f9      	ldr	r1, [r7, #28]
 80039a2:	6a3a      	ldr	r2, [r7, #32]
 80039a4:	e841 2300 	strex	r3, r2, [r1]
 80039a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e5      	bne.n	800397c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0310 	and.w	r3, r3, #16
 80039ba:	2b10      	cmp	r3, #16
 80039bc:	d10a      	bne.n	80039d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039d8:	4619      	mov	r1, r3
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff fe2e 	bl	800363c <HAL_UARTEx_RxEventCallback>
 80039e0:	e002      	b.n	80039e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fc fe74 	bl	80006d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	e002      	b.n	80039f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	e000      	b.n	80039f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80039f0:	2302      	movs	r3, #2
  }
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3730      	adds	r7, #48	@ 0x30
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003a36:	f023 030c 	bic.w	r3, r3, #12
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	430b      	orrs	r3, r1
 8003a42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8003b10 <UART_SetConfig+0x114>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d103      	bne.n	8003a6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a64:	f7fe fabc 	bl	8001fe0 <HAL_RCC_GetPCLK2Freq>
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	e002      	b.n	8003a72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a6c:	f7fe faa4 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 8003a70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	009a      	lsls	r2, r3, #2
 8003a7c:	441a      	add	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	4a22      	ldr	r2, [pc, #136]	@ (8003b14 <UART_SetConfig+0x118>)
 8003a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	0119      	lsls	r1, r3, #4
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009a      	lsls	r2, r3, #2
 8003a9c:	441a      	add	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b14 <UART_SetConfig+0x118>)
 8003aaa:	fba3 0302 	umull	r0, r3, r3, r2
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	2064      	movs	r0, #100	@ 0x64
 8003ab2:	fb00 f303 	mul.w	r3, r0, r3
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	3332      	adds	r3, #50	@ 0x32
 8003abc:	4a15      	ldr	r2, [pc, #84]	@ (8003b14 <UART_SetConfig+0x118>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ac8:	4419      	add	r1, r3
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009a      	lsls	r2, r3, #2
 8003ad4:	441a      	add	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b14 <UART_SetConfig+0x118>)
 8003ae2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	2064      	movs	r0, #100	@ 0x64
 8003aea:	fb00 f303 	mul.w	r3, r0, r3
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	3332      	adds	r3, #50	@ 0x32
 8003af4:	4a07      	ldr	r2, [pc, #28]	@ (8003b14 <UART_SetConfig+0x118>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	f003 020f 	and.w	r2, r3, #15
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	440a      	add	r2, r1
 8003b06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b08:	bf00      	nop
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40013800 	.word	0x40013800
 8003b14:	51eb851f 	.word	0x51eb851f

08003b18 <memset>:
 8003b18:	4603      	mov	r3, r0
 8003b1a:	4402      	add	r2, r0
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d100      	bne.n	8003b22 <memset+0xa>
 8003b20:	4770      	bx	lr
 8003b22:	f803 1b01 	strb.w	r1, [r3], #1
 8003b26:	e7f9      	b.n	8003b1c <memset+0x4>

08003b28 <__libc_init_array>:
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	2600      	movs	r6, #0
 8003b2c:	4d0c      	ldr	r5, [pc, #48]	@ (8003b60 <__libc_init_array+0x38>)
 8003b2e:	4c0d      	ldr	r4, [pc, #52]	@ (8003b64 <__libc_init_array+0x3c>)
 8003b30:	1b64      	subs	r4, r4, r5
 8003b32:	10a4      	asrs	r4, r4, #2
 8003b34:	42a6      	cmp	r6, r4
 8003b36:	d109      	bne.n	8003b4c <__libc_init_array+0x24>
 8003b38:	f000 f81a 	bl	8003b70 <_init>
 8003b3c:	2600      	movs	r6, #0
 8003b3e:	4d0a      	ldr	r5, [pc, #40]	@ (8003b68 <__libc_init_array+0x40>)
 8003b40:	4c0a      	ldr	r4, [pc, #40]	@ (8003b6c <__libc_init_array+0x44>)
 8003b42:	1b64      	subs	r4, r4, r5
 8003b44:	10a4      	asrs	r4, r4, #2
 8003b46:	42a6      	cmp	r6, r4
 8003b48:	d105      	bne.n	8003b56 <__libc_init_array+0x2e>
 8003b4a:	bd70      	pop	{r4, r5, r6, pc}
 8003b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b50:	4798      	blx	r3
 8003b52:	3601      	adds	r6, #1
 8003b54:	e7ee      	b.n	8003b34 <__libc_init_array+0xc>
 8003b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b5a:	4798      	blx	r3
 8003b5c:	3601      	adds	r6, #1
 8003b5e:	e7f2      	b.n	8003b46 <__libc_init_array+0x1e>
 8003b60:	08003bc4 	.word	0x08003bc4
 8003b64:	08003bc4 	.word	0x08003bc4
 8003b68:	08003bc4 	.word	0x08003bc4
 8003b6c:	08003bc8 	.word	0x08003bc8

08003b70 <_init>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	bf00      	nop
 8003b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b76:	bc08      	pop	{r3}
 8003b78:	469e      	mov	lr, r3
 8003b7a:	4770      	bx	lr

08003b7c <_fini>:
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	bf00      	nop
 8003b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b82:	bc08      	pop	{r3}
 8003b84:	469e      	mov	lr, r3
 8003b86:	4770      	bx	lr
