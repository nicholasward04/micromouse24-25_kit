
CoolNameForMouseHere.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003ce0  08003ce0  00004ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d14  08003d14  00005024  2**0
                  CONTENTS
  4 .ARM          00000000  08003d14  08003d14  00005024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d14  08003d14  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d14  08003d14  00004d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d18  08003d18  00004d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08003d1c  00005000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000024  08003d40  00005024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08003d40  000051b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de30  00000000  00000000  0000504d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000228f  00000000  00000000  00012e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00015110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab3  00000000  00000000  00015ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018842  00000000  00000000  00016973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106f7  00000000  00000000  0002f1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f0d0  00000000  00000000  0003f8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce97c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038b8  00000000  00000000  000ce9c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000d2278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08003cc8 	.word	0x08003cc8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08003cc8 	.word	0x08003cc8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fe05 	bl	8000d60 <HAL_Init>

  /* USER CODE BEGIN Init */
  LED_Power_Init();
 8000156:	f000 fbaf 	bl	80008b8 <LED_Power_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f817 	bl	800018c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f9fd 	bl	800055c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000162:	f000 f86b 	bl	800023c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000166:	f000 f8a7 	bl	80002b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800016a:	f000 f925 	bl	80003b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800016e:	f000 f977 	bl	8000460 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f9c9 	bl	8000508 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t startBuff;
  HAL_UART_Receive_IT(&huart1, &startBuff, 1);
 8000176:	1dfb      	adds	r3, r7, #7
 8000178:	2201      	movs	r2, #1
 800017a:	4619      	mov	r1, r3
 800017c:	4802      	ldr	r0, [pc, #8]	@ (8000188 <main+0x3c>)
 800017e:	f003 f832 	bl	80031e6 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000182:	bf00      	nop
 8000184:	e7fd      	b.n	8000182 <main+0x36>
 8000186:	bf00      	nop
 8000188:	20000148 	.word	0x20000148

0800018c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b094      	sub	sp, #80	@ 0x50
 8000190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000192:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000196:	2228      	movs	r2, #40	@ 0x28
 8000198:	2100      	movs	r1, #0
 800019a:	4618      	mov	r0, r3
 800019c:	f003 fd5a 	bl	8003c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a0:	f107 0314 	add.w	r3, r7, #20
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
 80001a8:	605a      	str	r2, [r3, #4]
 80001aa:	609a      	str	r2, [r3, #8]
 80001ac:	60da      	str	r2, [r3, #12]
 80001ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	605a      	str	r2, [r3, #4]
 80001b8:	609a      	str	r2, [r3, #8]
 80001ba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001bc:	2302      	movs	r3, #2
 80001be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c0:	2301      	movs	r3, #1
 80001c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001c4:	2310      	movs	r3, #16
 80001c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c8:	2302      	movs	r3, #2
 80001ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001cc:	2300      	movs	r3, #0
 80001ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001da:	4618      	mov	r0, r3
 80001dc:	f001 fbcc 	bl	8001978 <HAL_RCC_OscConfig>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d001      	beq.n	80001ea <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80001e6:	f000 fa88 	bl	80006fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ea:	230f      	movs	r3, #15
 80001ec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ee:	2302      	movs	r3, #2
 80001f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000200:	f107 0314 	add.w	r3, r7, #20
 8000204:	2101      	movs	r1, #1
 8000206:	4618      	mov	r0, r3
 8000208:	f001 fe38 	bl	8001e7c <HAL_RCC_ClockConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000212:	f000 fa72 	bl	80006fa <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000216:	2302      	movs	r3, #2
 8000218:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800021a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800021e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	4618      	mov	r0, r3
 8000224:	f001 ffb8 	bl	8002198 <HAL_RCCEx_PeriphCLKConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800022e:	f000 fa64 	bl	80006fa <Error_Handler>
  }
}
 8000232:	bf00      	nop
 8000234:	3750      	adds	r7, #80	@ 0x50
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
	...

0800023c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
 800024a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800024c:	4b18      	ldr	r3, [pc, #96]	@ (80002b0 <MX_ADC1_Init+0x74>)
 800024e:	4a19      	ldr	r2, [pc, #100]	@ (80002b4 <MX_ADC1_Init+0x78>)
 8000250:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000252:	4b17      	ldr	r3, [pc, #92]	@ (80002b0 <MX_ADC1_Init+0x74>)
 8000254:	2200      	movs	r2, #0
 8000256:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000258:	4b15      	ldr	r3, [pc, #84]	@ (80002b0 <MX_ADC1_Init+0x74>)
 800025a:	2200      	movs	r2, #0
 800025c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800025e:	4b14      	ldr	r3, [pc, #80]	@ (80002b0 <MX_ADC1_Init+0x74>)
 8000260:	2200      	movs	r2, #0
 8000262:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000264:	4b12      	ldr	r3, [pc, #72]	@ (80002b0 <MX_ADC1_Init+0x74>)
 8000266:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800026a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800026c:	4b10      	ldr	r3, [pc, #64]	@ (80002b0 <MX_ADC1_Init+0x74>)
 800026e:	2200      	movs	r2, #0
 8000270:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000272:	4b0f      	ldr	r3, [pc, #60]	@ (80002b0 <MX_ADC1_Init+0x74>)
 8000274:	2201      	movs	r2, #1
 8000276:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000278:	480d      	ldr	r0, [pc, #52]	@ (80002b0 <MX_ADC1_Init+0x74>)
 800027a:	f000 fdd3 	bl	8000e24 <HAL_ADC_Init>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000284:	f000 fa39 	bl	80006fa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000288:	2305      	movs	r3, #5
 800028a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800028c:	2301      	movs	r3, #1
 800028e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	4619      	mov	r1, r3
 8000298:	4805      	ldr	r0, [pc, #20]	@ (80002b0 <MX_ADC1_Init+0x74>)
 800029a:	f000 fe9b 	bl	8000fd4 <HAL_ADC_ConfigChannel>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002a4:	f000 fa29 	bl	80006fa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002a8:	bf00      	nop
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000040 	.word	0x20000040
 80002b4:	40012400 	.word	0x40012400

080002b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b08e      	sub	sp, #56	@ 0x38
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002cc:	f107 0320 	add.w	r3, r7, #32
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
 80002de:	609a      	str	r2, [r3, #8]
 80002e0:	60da      	str	r2, [r3, #12]
 80002e2:	611a      	str	r2, [r3, #16]
 80002e4:	615a      	str	r2, [r3, #20]
 80002e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002e8:	4b32      	ldr	r3, [pc, #200]	@ (80003b4 <MX_TIM2_Init+0xfc>)
 80002ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002f0:	4b30      	ldr	r3, [pc, #192]	@ (80003b4 <MX_TIM2_Init+0xfc>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f6:	4b2f      	ldr	r3, [pc, #188]	@ (80003b4 <MX_TIM2_Init+0xfc>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2047;
 80002fc:	4b2d      	ldr	r3, [pc, #180]	@ (80003b4 <MX_TIM2_Init+0xfc>)
 80002fe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000302:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000304:	4b2b      	ldr	r3, [pc, #172]	@ (80003b4 <MX_TIM2_Init+0xfc>)
 8000306:	2200      	movs	r2, #0
 8000308:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800030a:	4b2a      	ldr	r3, [pc, #168]	@ (80003b4 <MX_TIM2_Init+0xfc>)
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000310:	4828      	ldr	r0, [pc, #160]	@ (80003b4 <MX_TIM2_Init+0xfc>)
 8000312:	f001 fff7 	bl	8002304 <HAL_TIM_Base_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800031c:	f000 f9ed 	bl	80006fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000320:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000324:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000326:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800032a:	4619      	mov	r1, r3
 800032c:	4821      	ldr	r0, [pc, #132]	@ (80003b4 <MX_TIM2_Init+0xfc>)
 800032e:	f002 fae5 	bl	80028fc <HAL_TIM_ConfigClockSource>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000338:	f000 f9df 	bl	80006fa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800033c:	481d      	ldr	r0, [pc, #116]	@ (80003b4 <MX_TIM2_Init+0xfc>)
 800033e:	f002 f830 	bl	80023a2 <HAL_TIM_PWM_Init>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000348:	f000 f9d7 	bl	80006fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800034c:	2300      	movs	r3, #0
 800034e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000350:	2300      	movs	r3, #0
 8000352:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000354:	f107 0320 	add.w	r3, r7, #32
 8000358:	4619      	mov	r1, r3
 800035a:	4816      	ldr	r0, [pc, #88]	@ (80003b4 <MX_TIM2_Init+0xfc>)
 800035c:	f002 fe4e 	bl	8002ffc <HAL_TIMEx_MasterConfigSynchronization>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000366:	f000 f9c8 	bl	80006fa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800036a:	2360      	movs	r3, #96	@ 0x60
 800036c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000376:	2300      	movs	r3, #0
 8000378:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	2208      	movs	r2, #8
 800037e:	4619      	mov	r1, r3
 8000380:	480c      	ldr	r0, [pc, #48]	@ (80003b4 <MX_TIM2_Init+0xfc>)
 8000382:	f002 f9f9 	bl	8002778 <HAL_TIM_PWM_ConfigChannel>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800038c:	f000 f9b5 	bl	80006fa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	220c      	movs	r2, #12
 8000394:	4619      	mov	r1, r3
 8000396:	4807      	ldr	r0, [pc, #28]	@ (80003b4 <MX_TIM2_Init+0xfc>)
 8000398:	f002 f9ee 	bl	8002778 <HAL_TIM_PWM_ConfigChannel>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80003a2:	f000 f9aa 	bl	80006fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003a6:	4803      	ldr	r0, [pc, #12]	@ (80003b4 <MX_TIM2_Init+0xfc>)
 80003a8:	f000 fbb0 	bl	8000b0c <HAL_TIM_MspPostInit>

}
 80003ac:	bf00      	nop
 80003ae:	3738      	adds	r7, #56	@ 0x38
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000070 	.word	0x20000070

080003b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b08c      	sub	sp, #48	@ 0x30
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80003be:	f107 030c 	add.w	r3, r7, #12
 80003c2:	2224      	movs	r2, #36	@ 0x24
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f003 fc44 	bl	8003c54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003d4:	4b20      	ldr	r3, [pc, #128]	@ (8000458 <MX_TIM3_Init+0xa0>)
 80003d6:	4a21      	ldr	r2, [pc, #132]	@ (800045c <MX_TIM3_Init+0xa4>)
 80003d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003da:	4b1f      	ldr	r3, [pc, #124]	@ (8000458 <MX_TIM3_Init+0xa0>)
 80003dc:	2200      	movs	r2, #0
 80003de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000458 <MX_TIM3_Init+0xa0>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80003e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000458 <MX_TIM3_Init+0xa0>)
 80003e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000458 <MX_TIM3_Init+0xa0>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f4:	4b18      	ldr	r3, [pc, #96]	@ (8000458 <MX_TIM3_Init+0xa0>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80003fa:	2303      	movs	r3, #3
 80003fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80003fe:	2302      	movs	r3, #2
 8000400:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000402:	2301      	movs	r3, #1
 8000404:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800040e:	2302      	movs	r3, #2
 8000410:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000412:	2301      	movs	r3, #1
 8000414:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800041e:	f107 030c 	add.w	r3, r7, #12
 8000422:	4619      	mov	r1, r3
 8000424:	480c      	ldr	r0, [pc, #48]	@ (8000458 <MX_TIM3_Init+0xa0>)
 8000426:	f002 f814 	bl	8002452 <HAL_TIM_Encoder_Init>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000430:	f000 f963 	bl	80006fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000434:	2300      	movs	r3, #0
 8000436:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000438:	2300      	movs	r3, #0
 800043a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	4619      	mov	r1, r3
 8000440:	4805      	ldr	r0, [pc, #20]	@ (8000458 <MX_TIM3_Init+0xa0>)
 8000442:	f002 fddb 	bl	8002ffc <HAL_TIMEx_MasterConfigSynchronization>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800044c:	f000 f955 	bl	80006fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000450:	bf00      	nop
 8000452:	3730      	adds	r7, #48	@ 0x30
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	200000b8 	.word	0x200000b8
 800045c:	40000400 	.word	0x40000400

08000460 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08c      	sub	sp, #48	@ 0x30
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000466:	f107 030c 	add.w	r3, r7, #12
 800046a:	2224      	movs	r2, #36	@ 0x24
 800046c:	2100      	movs	r1, #0
 800046e:	4618      	mov	r0, r3
 8000470:	f003 fbf0 	bl	8003c54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800047c:	4b20      	ldr	r3, [pc, #128]	@ (8000500 <MX_TIM4_Init+0xa0>)
 800047e:	4a21      	ldr	r2, [pc, #132]	@ (8000504 <MX_TIM4_Init+0xa4>)
 8000480:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000482:	4b1f      	ldr	r3, [pc, #124]	@ (8000500 <MX_TIM4_Init+0xa0>)
 8000484:	2200      	movs	r2, #0
 8000486:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000488:	4b1d      	ldr	r3, [pc, #116]	@ (8000500 <MX_TIM4_Init+0xa0>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800048e:	4b1c      	ldr	r3, [pc, #112]	@ (8000500 <MX_TIM4_Init+0xa0>)
 8000490:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000494:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000496:	4b1a      	ldr	r3, [pc, #104]	@ (8000500 <MX_TIM4_Init+0xa0>)
 8000498:	2200      	movs	r2, #0
 800049a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800049c:	4b18      	ldr	r3, [pc, #96]	@ (8000500 <MX_TIM4_Init+0xa0>)
 800049e:	2200      	movs	r2, #0
 80004a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80004a2:	2303      	movs	r3, #3
 80004a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80004a6:	2302      	movs	r3, #2
 80004a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004aa:	2301      	movs	r3, #1
 80004ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80004b6:	2302      	movs	r3, #2
 80004b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004ba:	2301      	movs	r3, #1
 80004bc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80004c6:	f107 030c 	add.w	r3, r7, #12
 80004ca:	4619      	mov	r1, r3
 80004cc:	480c      	ldr	r0, [pc, #48]	@ (8000500 <MX_TIM4_Init+0xa0>)
 80004ce:	f001 ffc0 	bl	8002452 <HAL_TIM_Encoder_Init>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80004d8:	f000 f90f 	bl	80006fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004dc:	2300      	movs	r3, #0
 80004de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	4619      	mov	r1, r3
 80004e8:	4805      	ldr	r0, [pc, #20]	@ (8000500 <MX_TIM4_Init+0xa0>)
 80004ea:	f002 fd87 	bl	8002ffc <HAL_TIMEx_MasterConfigSynchronization>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80004f4:	f000 f901 	bl	80006fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80004f8:	bf00      	nop
 80004fa:	3730      	adds	r7, #48	@ 0x30
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000100 	.word	0x20000100
 8000504:	40000800 	.word	0x40000800

08000508 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800050c:	4b11      	ldr	r3, [pc, #68]	@ (8000554 <MX_USART1_UART_Init+0x4c>)
 800050e:	4a12      	ldr	r2, [pc, #72]	@ (8000558 <MX_USART1_UART_Init+0x50>)
 8000510:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000512:	4b10      	ldr	r3, [pc, #64]	@ (8000554 <MX_USART1_UART_Init+0x4c>)
 8000514:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000518:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800051a:	4b0e      	ldr	r3, [pc, #56]	@ (8000554 <MX_USART1_UART_Init+0x4c>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000520:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <MX_USART1_UART_Init+0x4c>)
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000526:	4b0b      	ldr	r3, [pc, #44]	@ (8000554 <MX_USART1_UART_Init+0x4c>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800052c:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <MX_USART1_UART_Init+0x4c>)
 800052e:	220c      	movs	r2, #12
 8000530:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000532:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <MX_USART1_UART_Init+0x4c>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000538:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <MX_USART1_UART_Init+0x4c>)
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800053e:	4805      	ldr	r0, [pc, #20]	@ (8000554 <MX_USART1_UART_Init+0x4c>)
 8000540:	f002 fdcc 	bl	80030dc <HAL_UART_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800054a:	f000 f8d6 	bl	80006fa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000148 	.word	0x20000148
 8000558:	40013800 	.word	0x40013800

0800055c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	f107 0310 	add.w	r3, r7, #16
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000570:	4b57      	ldr	r3, [pc, #348]	@ (80006d0 <MX_GPIO_Init+0x174>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a56      	ldr	r2, [pc, #344]	@ (80006d0 <MX_GPIO_Init+0x174>)
 8000576:	f043 0310 	orr.w	r3, r3, #16
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b54      	ldr	r3, [pc, #336]	@ (80006d0 <MX_GPIO_Init+0x174>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0310 	and.w	r3, r3, #16
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b51      	ldr	r3, [pc, #324]	@ (80006d0 <MX_GPIO_Init+0x174>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a50      	ldr	r2, [pc, #320]	@ (80006d0 <MX_GPIO_Init+0x174>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b4e      	ldr	r3, [pc, #312]	@ (80006d0 <MX_GPIO_Init+0x174>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a0:	4b4b      	ldr	r3, [pc, #300]	@ (80006d0 <MX_GPIO_Init+0x174>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a4a      	ldr	r2, [pc, #296]	@ (80006d0 <MX_GPIO_Init+0x174>)
 80005a6:	f043 0308 	orr.w	r3, r3, #8
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b48      	ldr	r3, [pc, #288]	@ (80006d0 <MX_GPIO_Init+0x174>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0308 	and.w	r3, r3, #8
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Power_GPIO_Port, LED_Power_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005be:	4845      	ldr	r0, [pc, #276]	@ (80006d4 <MX_GPIO_Init+0x178>)
 80005c0:	f001 f986 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMIT_FR_Pin|EMIT_FL_Pin|EMIT_L_Pin|ML_BWD_Pin
 80005c4:	2200      	movs	r2, #0
 80005c6:	f64f 4120 	movw	r1, #64544	@ 0xfc20
 80005ca:	4843      	ldr	r0, [pc, #268]	@ (80006d8 <MX_GPIO_Init+0x17c>)
 80005cc:	f001 f980 	bl	80018d0 <HAL_GPIO_WritePin>
                          |MR_BWD_Pin|ML_FWD_Pin|EMIT_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MR_FWD_GPIO_Port, MR_FWD_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005d6:	4841      	ldr	r0, [pc, #260]	@ (80006dc <MX_GPIO_Init+0x180>)
 80005d8:	f001 f97a 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Blue_Pin|LED_Green_Pin, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 80005e2:	483e      	ldr	r0, [pc, #248]	@ (80006dc <MX_GPIO_Init+0x180>)
 80005e4:	f001 f974 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Power_Pin */
  GPIO_InitStruct.Pin = LED_Power_Pin;
 80005e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2302      	movs	r3, #2
 80005f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_Power_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	4619      	mov	r1, r3
 8000600:	4834      	ldr	r0, [pc, #208]	@ (80006d4 <MX_GPIO_Init+0x178>)
 8000602:	f000 ffe1 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPEED_SW2_Pin */
  GPIO_InitStruct.Pin = SPEED_SW2_Pin;
 8000606:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800060a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800060c:	4b34      	ldr	r3, [pc, #208]	@ (80006e0 <MX_GPIO_Init+0x184>)
 800060e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPEED_SW2_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	4619      	mov	r1, r3
 800061a:	482e      	ldr	r0, [pc, #184]	@ (80006d4 <MX_GPIO_Init+0x178>)
 800061c:	f000 ffd4 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RECIV_R_Pin */
  GPIO_InitStruct.Pin = RECIV_R_Pin;
 8000620:	2310      	movs	r3, #16
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RECIV_R_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	4619      	mov	r1, r3
 8000632:	482a      	ldr	r0, [pc, #168]	@ (80006dc <MX_GPIO_Init+0x180>)
 8000634:	f000 ffc8 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RECIV_L_Pin LOADMAZE_SW3_Pin */
  GPIO_InitStruct.Pin = RECIV_L_Pin|LOADMAZE_SW3_Pin;
 8000638:	f240 2302 	movw	r3, #514	@ 0x202
 800063c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000646:	f107 0310 	add.w	r3, r7, #16
 800064a:	4619      	mov	r1, r3
 800064c:	4822      	ldr	r0, [pc, #136]	@ (80006d8 <MX_GPIO_Init+0x17c>)
 800064e:	f000 ffbb 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_FR_Pin EMIT_FL_Pin EMIT_L_Pin ML_BWD_Pin
                           MR_BWD_Pin ML_FWD_Pin EMIT_R_Pin */
  GPIO_InitStruct.Pin = EMIT_FR_Pin|EMIT_FL_Pin|EMIT_L_Pin|ML_BWD_Pin
 8000652:	f64f 4320 	movw	r3, #64544	@ 0xfc20
 8000656:	613b      	str	r3, [r7, #16]
                          |MR_BWD_Pin|ML_FWD_Pin|EMIT_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2302      	movs	r3, #2
 8000662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	4619      	mov	r1, r3
 800066a:	481b      	ldr	r0, [pc, #108]	@ (80006d8 <MX_GPIO_Init+0x17c>)
 800066c:	f000 ffac 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MR_FWD_Pin LED_Red_Pin LED_Blue_Pin LED_Green_Pin */
  GPIO_InitStruct.Pin = MR_FWD_Pin|LED_Red_Pin|LED_Blue_Pin|LED_Green_Pin;
 8000670:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8000674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2302      	movs	r3, #2
 8000680:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000682:	f107 0310 	add.w	r3, r7, #16
 8000686:	4619      	mov	r1, r3
 8000688:	4814      	ldr	r0, [pc, #80]	@ (80006dc <MX_GPIO_Init+0x180>)
 800068a:	f000 ff9d 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARM_SW1_Pin */
  GPIO_InitStruct.Pin = ARM_SW1_Pin;
 800068e:	2310      	movs	r3, #16
 8000690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <MX_GPIO_Init+0x184>)
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ARM_SW1_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 0310 	add.w	r3, r7, #16
 800069e:	4619      	mov	r1, r3
 80006a0:	480d      	ldr	r0, [pc, #52]	@ (80006d8 <MX_GPIO_Init+0x17c>)
 80006a2:	f000 ff91 	bl	80015c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	210f      	movs	r1, #15
 80006aa:	200a      	movs	r0, #10
 80006ac:	f000 fea3 	bl	80013f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80006b0:	200a      	movs	r0, #10
 80006b2:	f000 febc 	bl	800142e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	210f      	movs	r1, #15
 80006ba:	2028      	movs	r0, #40	@ 0x28
 80006bc:	f000 fe9b 	bl	80013f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006c0:	2028      	movs	r0, #40	@ 0x28
 80006c2:	f000 feb4 	bl	800142e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006c6:	bf00      	nop
 80006c8:	3720      	adds	r7, #32
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40011000 	.word	0x40011000
 80006d8:	40010c00 	.word	0x40010c00
 80006dc:	40010800 	.word	0x40010800
 80006e0:	10210000 	.word	0x10210000

080006e4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	UART_Receive_Callback(huart);
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 f8bf 	bl	8000870 <UART_Receive_Callback>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fe:	b672      	cpsid	i
}
 8000700:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000702:	bf00      	nop
 8000704:	e7fd      	b.n	8000702 <Error_Handler+0x8>
	...

08000708 <Parse_Receive_Data>:
#define READ_BATT   0b0010  // READ BATTERY: Read battery voltage.
#define PULSE_BUZZ  0b0011  // PULSE BUZZER: Play a short noise from the buzzer.
#define START_RUN   0b0100  // START RUN: Start a maze run. For testing purposes only.
#define PAIRED      0b0101  // PAIRED: Send OK response to verify received.

void Parse_Receive_Data(uint8_t rxBuff) {
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	uint8_t command = (rxBuff & 0xF0) >> 4;   // Isolate command code
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	091b      	lsrs	r3, r3, #4
 8000716:	73fb      	strb	r3, [r7, #15]
	uint8_t data    = (rxBuff & 0x0F);        // Isolate other data
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	73bb      	strb	r3, [r7, #14]

	switch(command) {
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	2b07      	cmp	r3, #7
 8000724:	d82e      	bhi.n	8000784 <Parse_Receive_Data+0x7c>
 8000726:	a201      	add	r2, pc, #4	@ (adr r2, 800072c <Parse_Receive_Data+0x24>)
 8000728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072c:	0800074d 	.word	0x0800074d
 8000730:	0800076b 	.word	0x0800076b
 8000734:	08000785 	.word	0x08000785
 8000738:	08000785 	.word	0x08000785
 800073c:	08000785 	.word	0x08000785
 8000740:	08000785 	.word	0x08000785
 8000744:	08000785 	.word	0x08000785
 8000748:	0800077d 	.word	0x0800077d
		case SET_MODE:
			debugMode = (debugMode + 1) % 2;
 800074c:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <Parse_Receive_Data+0x88>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	3301      	adds	r3, #1
 8000752:	2b00      	cmp	r3, #0
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	bfb8      	it	lt
 800075a:	425b      	neglt	r3, r3
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <Parse_Receive_Data+0x88>)
 8000760:	701a      	strb	r2, [r3, #0]
			debugCounter = 0;
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <Parse_Receive_Data+0x8c>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
			break;
 8000768:	e00d      	b.n	8000786 <Parse_Receive_Data+0x7e>
		case HALT_RUN:
			HALTED = 1;
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <Parse_Receive_Data+0x90>)
 800076c:	2201      	movs	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]
			while (HALTED);
 8000770:	bf00      	nop
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <Parse_Receive_Data+0x90>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1fb      	bne.n	8000772 <Parse_Receive_Data+0x6a>
			break;
 800077a:	e004      	b.n	8000786 <Parse_Receive_Data+0x7e>
		case RESUME_RUN:
			HALTED = 0;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <Parse_Receive_Data+0x90>)
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
			break;
 8000782:	e000      	b.n	8000786 <Parse_Receive_Data+0x7e>
			// SET RUN START VAR TO TRUE
			break;
		case PAIRED:
			break;
		default:
			break;
 8000784:	bf00      	nop
	}
}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	20000190 	.word	0x20000190
 8000794:	20000191 	.word	0x20000191
 8000798:	200001ac 	.word	0x200001ac

0800079c <Create_Byte_Stream>:
uint16_t motor_2_rpm = 2048;
uint8_t direction = 1;         // East
uint8_t position = 0b00010010; // First 4 bits is x position, last 4 bits is y position (1, 2)
double battery_volt = 8.43;

void Create_Byte_Stream(uint8_t txData[24]) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	bzero(txData, 24);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	461a      	mov	r2, r3
 80007a8:	2300      	movs	r3, #0
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	6053      	str	r3, [r2, #4]
 80007ae:	6093      	str	r3, [r2, #8]
 80007b0:	60d3      	str	r3, [r2, #12]
 80007b2:	6113      	str	r3, [r2, #16]
 80007b4:	6153      	str	r3, [r2, #20]

	memcpy(txData, "Debug", 5);
 80007b6:	2205      	movs	r2, #5
 80007b8:	491e      	ldr	r1, [pc, #120]	@ (8000834 <Create_Byte_Stream+0x98>)
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f003 fa76 	bl	8003cac <memcpy>
	memcpy(txData + 5, maze, 5);                   // Current maze cell and 4 adjacent cells
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3305      	adds	r3, #5
 80007c4:	4a1c      	ldr	r2, [pc, #112]	@ (8000838 <Create_Byte_Stream+0x9c>)
 80007c6:	6810      	ldr	r0, [r2, #0]
 80007c8:	6018      	str	r0, [r3, #0]
 80007ca:	7912      	ldrb	r2, [r2, #4]
 80007cc:	711a      	strb	r2, [r3, #4]
	txData[10] = (uint8_t)(motor_1_rpm >> 8);      // High byte
 80007ce:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <Create_Byte_Stream+0xa0>)
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	0a1b      	lsrs	r3, r3, #8
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	330a      	adds	r3, #10
 80007da:	b2d2      	uxtb	r2, r2
 80007dc:	701a      	strb	r2, [r3, #0]
	txData[11] = (uint8_t)(motor_1_rpm & 0xFF);    // Low byte
 80007de:	4b17      	ldr	r3, [pc, #92]	@ (800083c <Create_Byte_Stream+0xa0>)
 80007e0:	881a      	ldrh	r2, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	330b      	adds	r3, #11
 80007e6:	b2d2      	uxtb	r2, r2
 80007e8:	701a      	strb	r2, [r3, #0]
    txData[12] = (uint8_t)(motor_2_rpm >> 8);      // High byte
 80007ea:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <Create_Byte_Stream+0xa4>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	0a1b      	lsrs	r3, r3, #8
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	330c      	adds	r3, #12
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	701a      	strb	r2, [r3, #0]
    txData[13] = (uint8_t)(motor_2_rpm & 0xFF);    // Low byte
 80007fa:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <Create_Byte_Stream+0xa4>)
 80007fc:	881a      	ldrh	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	330d      	adds	r3, #13
 8000802:	b2d2      	uxtb	r2, r2
 8000804:	701a      	strb	r2, [r3, #0]
    txData[14] = direction;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	330e      	adds	r3, #14
 800080a:	4a0e      	ldr	r2, [pc, #56]	@ (8000844 <Create_Byte_Stream+0xa8>)
 800080c:	7812      	ldrb	r2, [r2, #0]
 800080e:	701a      	strb	r2, [r3, #0]
    txData[15] = position;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	330f      	adds	r3, #15
 8000814:	4a0c      	ldr	r2, [pc, #48]	@ (8000848 <Create_Byte_Stream+0xac>)
 8000816:	7812      	ldrb	r2, [r2, #0]
 8000818:	701a      	strb	r2, [r3, #0]
    memcpy(txData + 16, &battery_volt, sizeof(battery_volt));
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f103 0110 	add.w	r1, r3, #16
 8000820:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <Create_Byte_Stream+0xb0>)
 8000822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000826:	600a      	str	r2, [r1, #0]
 8000828:	604b      	str	r3, [r1, #4]
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	08003ce0 	.word	0x08003ce0
 8000838:	20000004 	.word	0x20000004
 800083c:	2000000a 	.word	0x2000000a
 8000840:	2000000c 	.word	0x2000000c
 8000844:	2000000e 	.word	0x2000000e
 8000848:	2000000f 	.word	0x2000000f
 800084c:	20000010 	.word	0x20000010

08000850 <Debug_Packet_Send>:

// When mouse in debug mode, transmit localized maze (5 bytes), motor 1 rpm (2 bytes), motor 2 rpm (2 bytes), direction (1 byte), position (1 byte), and battery voltage (8 bytes).
// Also transmit start identifier "Debug". This totals to 24 bytes of data transmitted every 100 ms.
void Debug_Packet_Send() {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	Create_Byte_Stream(txDebug);                                  // Create byte stream
 8000854:	4804      	ldr	r0, [pc, #16]	@ (8000868 <Debug_Packet_Send+0x18>)
 8000856:	f7ff ffa1 	bl	800079c <Create_Byte_Stream>
	HAL_UART_Transmit_IT(&huart1, txDebug, sizeof(txDebug));      // Transmit data
 800085a:	2218      	movs	r2, #24
 800085c:	4902      	ldr	r1, [pc, #8]	@ (8000868 <Debug_Packet_Send+0x18>)
 800085e:	4803      	ldr	r0, [pc, #12]	@ (800086c <Debug_Packet_Send+0x1c>)
 8000860:	f002 fc8c 	bl	800317c <HAL_UART_Transmit_IT>
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000194 	.word	0x20000194
 800086c:	20000148 	.word	0x20000148

08000870 <UART_Receive_Callback>:

void UART_Receive_Callback(UART_HandleTypeDef *huart) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0a      	ldr	r2, [pc, #40]	@ (80008a8 <UART_Receive_Callback+0x38>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d10e      	bne.n	80008a0 <UART_Receive_Callback+0x30>
		Parse_Receive_Data(rxData);
 8000882:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <UART_Receive_Callback+0x3c>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff3e 	bl	8000708 <Parse_Receive_Data>
		HAL_UART_Transmit_IT(&huart1, &txData, sizeof(txData));      // Transmit response ACK (0xFF)                          // Parse incoming command
 800088c:	2201      	movs	r2, #1
 800088e:	4908      	ldr	r1, [pc, #32]	@ (80008b0 <UART_Receive_Callback+0x40>)
 8000890:	4808      	ldr	r0, [pc, #32]	@ (80008b4 <UART_Receive_Callback+0x44>)
 8000892:	f002 fc73 	bl	800317c <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart1, &rxData, sizeof(rxData));       // Receive incoming command
 8000896:	2201      	movs	r2, #1
 8000898:	4904      	ldr	r1, [pc, #16]	@ (80008ac <UART_Receive_Callback+0x3c>)
 800089a:	4806      	ldr	r0, [pc, #24]	@ (80008b4 <UART_Receive_Callback+0x44>)
 800089c:	f002 fca3 	bl	80031e6 <HAL_UART_Receive_IT>
	}
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40013800 	.word	0x40013800
 80008ac:	20000192 	.word	0x20000192
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000148 	.word	0x20000148

080008b8 <LED_Power_Init>:
 */

#include "main.h"
#include "mm_supplemental.h"

void LED_Power_Init() {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Power_GPIO_Port, LED_Power_Pin);
 80008bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c0:	4802      	ldr	r0, [pc, #8]	@ (80008cc <LED_Power_Init+0x14>)
 80008c2:	f001 f81d 	bl	8001900 <HAL_GPIO_TogglePin>
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40011000 	.word	0x40011000

080008d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008d6:	4b15      	ldr	r3, [pc, #84]	@ (800092c <HAL_MspInit+0x5c>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	4a14      	ldr	r2, [pc, #80]	@ (800092c <HAL_MspInit+0x5c>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6193      	str	r3, [r2, #24]
 80008e2:	4b12      	ldr	r3, [pc, #72]	@ (800092c <HAL_MspInit+0x5c>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <HAL_MspInit+0x5c>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	4a0e      	ldr	r2, [pc, #56]	@ (800092c <HAL_MspInit+0x5c>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f8:	61d3      	str	r3, [r2, #28]
 80008fa:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <HAL_MspInit+0x5c>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000906:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <HAL_MspInit+0x60>)
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	4a04      	ldr	r2, [pc, #16]	@ (8000930 <HAL_MspInit+0x60>)
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	40021000 	.word	0x40021000
 8000930:	40010000 	.word	0x40010000

08000934 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	@ 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0318 	add.w	r3, r7, #24
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a1f      	ldr	r2, [pc, #124]	@ (80009cc <HAL_ADC_MspInit+0x98>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d137      	bne.n	80009c4 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000954:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <HAL_ADC_MspInit+0x9c>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a1d      	ldr	r2, [pc, #116]	@ (80009d0 <HAL_ADC_MspInit+0x9c>)
 800095a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b1b      	ldr	r3, [pc, #108]	@ (80009d0 <HAL_ADC_MspInit+0x9c>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096c:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <HAL_ADC_MspInit+0x9c>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a17      	ldr	r2, [pc, #92]	@ (80009d0 <HAL_ADC_MspInit+0x9c>)
 8000972:	f043 0304 	orr.w	r3, r3, #4
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <HAL_ADC_MspInit+0x9c>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0304 	and.w	r3, r3, #4
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000984:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <HAL_ADC_MspInit+0x9c>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a11      	ldr	r2, [pc, #68]	@ (80009d0 <HAL_ADC_MspInit+0x9c>)
 800098a:	f043 0308 	orr.w	r3, r3, #8
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <HAL_ADC_MspInit+0x9c>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0308 	and.w	r3, r3, #8
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = RECIV_FR_Pin;
 800099c:	2320      	movs	r3, #32
 800099e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a0:	2303      	movs	r3, #3
 80009a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RECIV_FR_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0318 	add.w	r3, r7, #24
 80009a8:	4619      	mov	r1, r3
 80009aa:	480a      	ldr	r0, [pc, #40]	@ (80009d4 <HAL_ADC_MspInit+0xa0>)
 80009ac:	f000 fe0c 	bl	80015c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RECIV_FL_Pin;
 80009b0:	2301      	movs	r3, #1
 80009b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b4:	2303      	movs	r3, #3
 80009b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RECIV_FL_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0318 	add.w	r3, r7, #24
 80009bc:	4619      	mov	r1, r3
 80009be:	4806      	ldr	r0, [pc, #24]	@ (80009d8 <HAL_ADC_MspInit+0xa4>)
 80009c0:	f000 fe02 	bl	80015c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	@ 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40012400 	.word	0x40012400
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40010800 	.word	0x40010800
 80009d8:	40010c00 	.word	0x40010c00

080009dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009ec:	d10b      	bne.n	8000a06 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009ee:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <HAL_TIM_Base_MspInit+0x34>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	4a07      	ldr	r2, [pc, #28]	@ (8000a10 <HAL_TIM_Base_MspInit+0x34>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	61d3      	str	r3, [r2, #28]
 80009fa:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <HAL_TIM_Base_MspInit+0x34>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a06:	bf00      	nop
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	40021000 	.word	0x40021000

08000a14 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	@ 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0318 	add.w	r3, r7, #24
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a32      	ldr	r2, [pc, #200]	@ (8000af8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d12c      	bne.n	8000a8e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a34:	4b31      	ldr	r3, [pc, #196]	@ (8000afc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000a36:	69db      	ldr	r3, [r3, #28]
 8000a38:	4a30      	ldr	r2, [pc, #192]	@ (8000afc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	61d3      	str	r3, [r2, #28]
 8000a40:	4b2e      	ldr	r3, [pc, #184]	@ (8000afc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	f003 0302 	and.w	r3, r3, #2
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000afc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a2a      	ldr	r2, [pc, #168]	@ (8000afc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b28      	ldr	r3, [pc, #160]	@ (8000afc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ML_ENC_A_Pin|ML_ENC_B_Pin;
 8000a64:	23c0      	movs	r3, #192	@ 0xc0
 8000a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0318 	add.w	r3, r7, #24
 8000a74:	4619      	mov	r1, r3
 8000a76:	4822      	ldr	r0, [pc, #136]	@ (8000b00 <HAL_TIM_Encoder_MspInit+0xec>)
 8000a78:	f000 fda6 	bl	80015c8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	201d      	movs	r0, #29
 8000a82:	f000 fcb8 	bl	80013f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a86:	201d      	movs	r0, #29
 8000a88:	f000 fcd1 	bl	800142e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000a8c:	e030      	b.n	8000af0 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a1c      	ldr	r2, [pc, #112]	@ (8000b04 <HAL_TIM_Encoder_MspInit+0xf0>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d12b      	bne.n	8000af0 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a98:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000a9a:	69db      	ldr	r3, [r3, #28]
 8000a9c:	4a17      	ldr	r2, [pc, #92]	@ (8000afc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000a9e:	f043 0304 	orr.w	r3, r3, #4
 8000aa2:	61d3      	str	r3, [r2, #28]
 8000aa4:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000aa6:	69db      	ldr	r3, [r3, #28]
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a11      	ldr	r2, [pc, #68]	@ (8000afc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000ab6:	f043 0308 	orr.w	r3, r3, #8
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0308 	and.w	r3, r3, #8
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MR_ENC_B_Pin|MR_ENC_A_Pin;
 8000ac8:	23c0      	movs	r3, #192	@ 0xc0
 8000aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 0318 	add.w	r3, r7, #24
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480b      	ldr	r0, [pc, #44]	@ (8000b08 <HAL_TIM_Encoder_MspInit+0xf4>)
 8000adc:	f000 fd74 	bl	80015c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	201e      	movs	r0, #30
 8000ae6:	f000 fc86 	bl	80013f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000aea:	201e      	movs	r0, #30
 8000aec:	f000 fc9f 	bl	800142e <HAL_NVIC_EnableIRQ>
}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	@ 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40000400 	.word	0x40000400
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40010800 	.word	0x40010800
 8000b04:	40000800 	.word	0x40000800
 8000b08:	40010c00 	.word	0x40010c00

08000b0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b2a:	d117      	bne.n	8000b5c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b64 <HAL_TIM_MspPostInit+0x58>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a0c      	ldr	r2, [pc, #48]	@ (8000b64 <HAL_TIM_MspPostInit+0x58>)
 8000b32:	f043 0304 	orr.w	r3, r3, #4
 8000b36:	6193      	str	r3, [r2, #24]
 8000b38:	4b0a      	ldr	r3, [pc, #40]	@ (8000b64 <HAL_TIM_MspPostInit+0x58>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f003 0304 	and.w	r3, r3, #4
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ML_PWM_Pin|MR_PWM_Pin;
 8000b44:	230c      	movs	r3, #12
 8000b46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	4619      	mov	r1, r3
 8000b56:	4804      	ldr	r0, [pc, #16]	@ (8000b68 <HAL_TIM_MspPostInit+0x5c>)
 8000b58:	f000 fd36 	bl	80015c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b5c:	bf00      	nop
 8000b5e:	3720      	adds	r7, #32
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40010800 	.word	0x40010800

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a20      	ldr	r2, [pc, #128]	@ (8000c08 <HAL_UART_MspInit+0x9c>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d139      	bne.n	8000c00 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <HAL_UART_MspInit+0xa0>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a1e      	ldr	r2, [pc, #120]	@ (8000c0c <HAL_UART_MspInit+0xa0>)
 8000b92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <HAL_UART_MspInit+0xa0>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <HAL_UART_MspInit+0xa0>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a18      	ldr	r2, [pc, #96]	@ (8000c0c <HAL_UART_MspInit+0xa0>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <HAL_UART_MspInit+0xa0>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480f      	ldr	r0, [pc, #60]	@ (8000c10 <HAL_UART_MspInit+0xa4>)
 8000bd2:	f000 fcf9 	bl	80015c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	4619      	mov	r1, r3
 8000bea:	4809      	ldr	r0, [pc, #36]	@ (8000c10 <HAL_UART_MspInit+0xa4>)
 8000bec:	f000 fcec 	bl	80015c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2025      	movs	r0, #37	@ 0x25
 8000bf6:	f000 fbfe 	bl	80013f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bfa:	2025      	movs	r0, #37	@ 0x25
 8000bfc:	f000 fc17 	bl	800142e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c00:	bf00      	nop
 8000c02:	3720      	adds	r7, #32
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40013800 	.word	0x40013800
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40010800 	.word	0x40010800

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <NMI_Handler+0x4>

08000c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c64:	f000 f8c2 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if (debugMode) {
 8000c68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <SysTick_Handler+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d014      	beq.n	8000c9a <SysTick_Handler+0x3a>
	  debugCounter = (debugCounter + 1) % 100;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <SysTick_Handler+0x44>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	1c5a      	adds	r2, r3, #1
 8000c76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <SysTick_Handler+0x48>)
 8000c78:	fb83 1302 	smull	r1, r3, r3, r2
 8000c7c:	1159      	asrs	r1, r3, #5
 8000c7e:	17d3      	asrs	r3, r2, #31
 8000c80:	1acb      	subs	r3, r1, r3
 8000c82:	2164      	movs	r1, #100	@ 0x64
 8000c84:	fb01 f303 	mul.w	r3, r1, r3
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	4a06      	ldr	r2, [pc, #24]	@ (8000ca4 <SysTick_Handler+0x44>)
 8000c8c:	6013      	str	r3, [r2, #0]
	  if (debugCounter == 0) {
 8000c8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <SysTick_Handler+0x44>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <SysTick_Handler+0x3a>
		  Debug_Packet_Send();
 8000c96:	f7ff fddb 	bl	8000850 <Debug_Packet_Send>
	  }
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000190 	.word	0x20000190
 8000ca4:	20000191 	.word	0x20000191
 8000ca8:	51eb851f 	.word	0x51eb851f

08000cac <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ARM_SW1_Pin);
 8000cb0:	2010      	movs	r0, #16
 8000cb2:	f000 fe3f 	bl	8001934 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000cc0:	4802      	ldr	r0, [pc, #8]	@ (8000ccc <TIM3_IRQHandler+0x10>)
 8000cc2:	f001 fc68 	bl	8002596 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200000b8 	.word	0x200000b8

08000cd0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000cd4:	4802      	ldr	r0, [pc, #8]	@ (8000ce0 <TIM4_IRQHandler+0x10>)
 8000cd6:	f001 fc5e 	bl	8002596 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000100 	.word	0x20000100

08000ce4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce8:	4802      	ldr	r0, [pc, #8]	@ (8000cf4 <USART1_IRQHandler+0x10>)
 8000cea:	f002 faa1 	bl	8003230 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000148 	.word	0x20000148

08000cf8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPEED_SW2_Pin);
 8000cfc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000d00:	f000 fe18 	bl	8001934 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d14:	f7ff fff8 	bl	8000d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d18:	480b      	ldr	r0, [pc, #44]	@ (8000d48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d1a:	490c      	ldr	r1, [pc, #48]	@ (8000d4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a09      	ldr	r2, [pc, #36]	@ (8000d54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d30:	4c09      	ldr	r4, [pc, #36]	@ (8000d58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f002 ff91 	bl	8003c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d42:	f7ff fa03 	bl	800014c <main>
  bx lr
 8000d46:	4770      	bx	lr
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000d50:	08003d1c 	.word	0x08003d1c
  ldr r2, =_sbss
 8000d54:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000d58:	200001b4 	.word	0x200001b4

08000d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC1_2_IRQHandler>
	...

08000d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <HAL_Init+0x28>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a07      	ldr	r2, [pc, #28]	@ (8000d88 <HAL_Init+0x28>)
 8000d6a:	f043 0310 	orr.w	r3, r3, #16
 8000d6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 fb35 	bl	80013e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d76:	200e      	movs	r0, #14
 8000d78:	f000 f808 	bl	8000d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7c:	f7ff fda8 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40022000 	.word	0x40022000

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <HAL_InitTick+0x54>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <HAL_InitTick+0x58>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 fb4d 	bl	800144a <HAL_SYSTICK_Config>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00e      	b.n	8000dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	d80a      	bhi.n	8000dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f000 fb15 	bl	80013f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dcc:	4a06      	ldr	r2, [pc, #24]	@ (8000de8 <HAL_InitTick+0x5c>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e000      	b.n	8000dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000018 	.word	0x20000018
 8000de4:	20000020 	.word	0x20000020
 8000de8:	2000001c 	.word	0x2000001c

08000dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <HAL_IncTick+0x1c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <HAL_IncTick+0x20>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a03      	ldr	r2, [pc, #12]	@ (8000e0c <HAL_IncTick+0x20>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	20000020 	.word	0x20000020
 8000e0c:	200001b0 	.word	0x200001b0

08000e10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b02      	ldr	r3, [pc, #8]	@ (8000e20 <HAL_GetTick+0x10>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	200001b0 	.word	0x200001b0

08000e24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e0be      	b.n	8000fc4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d109      	bne.n	8000e68 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff fd66 	bl	8000934 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 f9ab 	bl	80011c4 <ADC_ConversionStop_Disable>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e76:	f003 0310 	and.w	r3, r3, #16
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f040 8099 	bne.w	8000fb2 <HAL_ADC_Init+0x18e>
 8000e80:	7dfb      	ldrb	r3, [r7, #23]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 8095 	bne.w	8000fb2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e8c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e90:	f023 0302 	bic.w	r3, r3, #2
 8000e94:	f043 0202 	orr.w	r2, r3, #2
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ea4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	7b1b      	ldrb	r3, [r3, #12]
 8000eaa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000eac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ebc:	d003      	beq.n	8000ec6 <HAL_ADC_Init+0xa2>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d102      	bne.n	8000ecc <HAL_ADC_Init+0xa8>
 8000ec6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eca:	e000      	b.n	8000ece <HAL_ADC_Init+0xaa>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7d1b      	ldrb	r3, [r3, #20]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d119      	bne.n	8000f10 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7b1b      	ldrb	r3, [r3, #12]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d109      	bne.n	8000ef8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	035a      	lsls	r2, r3, #13
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	e00b      	b.n	8000f10 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000efc:	f043 0220 	orr.w	r2, r3, #32
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f08:	f043 0201 	orr.w	r2, r3, #1
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	4b28      	ldr	r3, [pc, #160]	@ (8000fcc <HAL_ADC_Init+0x1a8>)
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	6812      	ldr	r2, [r2, #0]
 8000f32:	68b9      	ldr	r1, [r7, #8]
 8000f34:	430b      	orrs	r3, r1
 8000f36:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f40:	d003      	beq.n	8000f4a <HAL_ADC_Init+0x126>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d104      	bne.n	8000f54 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	051b      	lsls	r3, r3, #20
 8000f52:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f5a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <HAL_ADC_Init+0x1ac>)
 8000f70:	4013      	ands	r3, r2
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d10b      	bne.n	8000f90 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f82:	f023 0303 	bic.w	r3, r3, #3
 8000f86:	f043 0201 	orr.w	r2, r3, #1
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f8e:	e018      	b.n	8000fc2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f94:	f023 0312 	bic.w	r3, r3, #18
 8000f98:	f043 0210 	orr.w	r2, r3, #16
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fa4:	f043 0201 	orr.w	r2, r3, #1
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fb0:	e007      	b.n	8000fc2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fb6:	f043 0210 	orr.w	r2, r3, #16
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	ffe1f7fd 	.word	0xffe1f7fd
 8000fd0:	ff1f0efe 	.word	0xff1f0efe

08000fd4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d101      	bne.n	8000ff4 <HAL_ADC_ConfigChannel+0x20>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	e0dc      	b.n	80011ae <HAL_ADC_ConfigChannel+0x1da>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b06      	cmp	r3, #6
 8001002:	d81c      	bhi.n	800103e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	4613      	mov	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	3b05      	subs	r3, #5
 8001016:	221f      	movs	r2, #31
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	4019      	ands	r1, r3
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	3b05      	subs	r3, #5
 8001030:	fa00 f203 	lsl.w	r2, r0, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	430a      	orrs	r2, r1
 800103a:	635a      	str	r2, [r3, #52]	@ 0x34
 800103c:	e03c      	b.n	80010b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b0c      	cmp	r3, #12
 8001044:	d81c      	bhi.n	8001080 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	3b23      	subs	r3, #35	@ 0x23
 8001058:	221f      	movs	r2, #31
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	4019      	ands	r1, r3
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	3b23      	subs	r3, #35	@ 0x23
 8001072:	fa00 f203 	lsl.w	r2, r0, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	430a      	orrs	r2, r1
 800107c:	631a      	str	r2, [r3, #48]	@ 0x30
 800107e:	e01b      	b.n	80010b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	3b41      	subs	r3, #65	@ 0x41
 8001092:	221f      	movs	r2, #31
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	4019      	ands	r1, r3
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	3b41      	subs	r3, #65	@ 0x41
 80010ac:	fa00 f203 	lsl.w	r2, r0, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b09      	cmp	r3, #9
 80010be:	d91c      	bls.n	80010fa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68d9      	ldr	r1, [r3, #12]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4613      	mov	r3, r2
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	4413      	add	r3, r2
 80010d0:	3b1e      	subs	r3, #30
 80010d2:	2207      	movs	r2, #7
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	4019      	ands	r1, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	6898      	ldr	r0, [r3, #8]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	3b1e      	subs	r3, #30
 80010ec:	fa00 f203 	lsl.w	r2, r0, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	e019      	b.n	800112e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6919      	ldr	r1, [r3, #16]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4613      	mov	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4413      	add	r3, r2
 800110a:	2207      	movs	r2, #7
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	4019      	ands	r1, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	6898      	ldr	r0, [r3, #8]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4613      	mov	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4413      	add	r3, r2
 8001122:	fa00 f203 	lsl.w	r2, r0, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	430a      	orrs	r2, r1
 800112c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b10      	cmp	r3, #16
 8001134:	d003      	beq.n	800113e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800113a:	2b11      	cmp	r3, #17
 800113c:	d132      	bne.n	80011a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a1d      	ldr	r2, [pc, #116]	@ (80011b8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d125      	bne.n	8001194 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d126      	bne.n	80011a4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001164:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b10      	cmp	r3, #16
 800116c:	d11a      	bne.n	80011a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800116e:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <HAL_ADC_ConfigChannel+0x1e8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a13      	ldr	r2, [pc, #76]	@ (80011c0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001174:	fba2 2303 	umull	r2, r3, r2, r3
 8001178:	0c9a      	lsrs	r2, r3, #18
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001184:	e002      	b.n	800118c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	3b01      	subs	r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f9      	bne.n	8001186 <HAL_ADC_ConfigChannel+0x1b2>
 8001192:	e007      	b.n	80011a4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001198:	f043 0220 	orr.w	r2, r3, #32
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	40012400 	.word	0x40012400
 80011bc:	20000018 	.word	0x20000018
 80011c0:	431bde83 	.word	0x431bde83

080011c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d12e      	bne.n	800123c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0201 	bic.w	r2, r2, #1
 80011ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011ee:	f7ff fe0f 	bl	8000e10 <HAL_GetTick>
 80011f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011f4:	e01b      	b.n	800122e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011f6:	f7ff fe0b 	bl	8000e10 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d914      	bls.n	800122e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b01      	cmp	r3, #1
 8001210:	d10d      	bne.n	800122e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001216:	f043 0210 	orr.w	r2, r3, #16
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001222:	f043 0201 	orr.w	r2, r3, #1
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e007      	b.n	800123e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b01      	cmp	r3, #1
 800123a:	d0dc      	beq.n	80011f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001258:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001264:	4013      	ands	r3, r2
 8001266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001270:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127a:	4a04      	ldr	r2, [pc, #16]	@ (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	60d3      	str	r3, [r2, #12]
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001294:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	f003 0307 	and.w	r3, r3, #7
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	db0b      	blt.n	80012d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	f003 021f 	and.w	r2, r3, #31
 80012c4:	4906      	ldr	r1, [pc, #24]	@ (80012e0 <__NVIC_EnableIRQ+0x34>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	095b      	lsrs	r3, r3, #5
 80012cc:	2001      	movs	r0, #1
 80012ce:	fa00 f202 	lsl.w	r2, r0, r2
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	e000e100 	.word	0xe000e100

080012e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	db0a      	blt.n	800130e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	490c      	ldr	r1, [pc, #48]	@ (8001330 <__NVIC_SetPriority+0x4c>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	0112      	lsls	r2, r2, #4
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	440b      	add	r3, r1
 8001308:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800130c:	e00a      	b.n	8001324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4908      	ldr	r1, [pc, #32]	@ (8001334 <__NVIC_SetPriority+0x50>)
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	3b04      	subs	r3, #4
 800131c:	0112      	lsls	r2, r2, #4
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	440b      	add	r3, r1
 8001322:	761a      	strb	r2, [r3, #24]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e100 	.word	0xe000e100
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	@ 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f1c3 0307 	rsb	r3, r3, #7
 8001352:	2b04      	cmp	r3, #4
 8001354:	bf28      	it	cs
 8001356:	2304      	movcs	r3, #4
 8001358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3304      	adds	r3, #4
 800135e:	2b06      	cmp	r3, #6
 8001360:	d902      	bls.n	8001368 <NVIC_EncodePriority+0x30>
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3b03      	subs	r3, #3
 8001366:	e000      	b.n	800136a <NVIC_EncodePriority+0x32>
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	f04f 32ff 	mov.w	r2, #4294967295
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43da      	mvns	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	401a      	ands	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001380:	f04f 31ff 	mov.w	r1, #4294967295
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	43d9      	mvns	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	4313      	orrs	r3, r2
         );
}
 8001392:	4618      	mov	r0, r3
 8001394:	3724      	adds	r7, #36	@ 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013ac:	d301      	bcc.n	80013b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00f      	b.n	80013d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b2:	4a0a      	ldr	r2, [pc, #40]	@ (80013dc <SysTick_Config+0x40>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ba:	210f      	movs	r1, #15
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f7ff ff90 	bl	80012e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c4:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <SysTick_Config+0x40>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ca:	4b04      	ldr	r3, [pc, #16]	@ (80013dc <SysTick_Config+0x40>)
 80013cc:	2207      	movs	r2, #7
 80013ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	e000e010 	.word	0xe000e010

080013e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ff2d 	bl	8001248 <__NVIC_SetPriorityGrouping>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001408:	f7ff ff42 	bl	8001290 <__NVIC_GetPriorityGrouping>
 800140c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	6978      	ldr	r0, [r7, #20]
 8001414:	f7ff ff90 	bl	8001338 <NVIC_EncodePriority>
 8001418:	4602      	mov	r2, r0
 800141a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff5f 	bl	80012e4 <__NVIC_SetPriority>
}
 8001426:	bf00      	nop
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff35 	bl	80012ac <__NVIC_EnableIRQ>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ffa2 	bl	800139c <SysTick_Config>
 8001458:	4603      	mov	r3, r0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001462:	b480      	push	{r7}
 8001464:	b085      	sub	sp, #20
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d008      	beq.n	800148c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2204      	movs	r2, #4
 800147e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e020      	b.n	80014ce <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 020e 	bic.w	r2, r2, #14
 800149a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0201 	bic.w	r2, r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014b4:	2101      	movs	r1, #1
 80014b6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d005      	beq.n	80014fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2204      	movs	r2, #4
 80014f4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	73fb      	strb	r3, [r7, #15]
 80014fa:	e051      	b.n	80015a0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 020e 	bic.w	r2, r2, #14
 800150a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a22      	ldr	r2, [pc, #136]	@ (80015ac <HAL_DMA_Abort_IT+0xd4>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d029      	beq.n	800157a <HAL_DMA_Abort_IT+0xa2>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a21      	ldr	r2, [pc, #132]	@ (80015b0 <HAL_DMA_Abort_IT+0xd8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d022      	beq.n	8001576 <HAL_DMA_Abort_IT+0x9e>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a1f      	ldr	r2, [pc, #124]	@ (80015b4 <HAL_DMA_Abort_IT+0xdc>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d01a      	beq.n	8001570 <HAL_DMA_Abort_IT+0x98>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a1e      	ldr	r2, [pc, #120]	@ (80015b8 <HAL_DMA_Abort_IT+0xe0>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d012      	beq.n	800156a <HAL_DMA_Abort_IT+0x92>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a1c      	ldr	r2, [pc, #112]	@ (80015bc <HAL_DMA_Abort_IT+0xe4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d00a      	beq.n	8001564 <HAL_DMA_Abort_IT+0x8c>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a1b      	ldr	r2, [pc, #108]	@ (80015c0 <HAL_DMA_Abort_IT+0xe8>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d102      	bne.n	800155e <HAL_DMA_Abort_IT+0x86>
 8001558:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800155c:	e00e      	b.n	800157c <HAL_DMA_Abort_IT+0xa4>
 800155e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001562:	e00b      	b.n	800157c <HAL_DMA_Abort_IT+0xa4>
 8001564:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001568:	e008      	b.n	800157c <HAL_DMA_Abort_IT+0xa4>
 800156a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800156e:	e005      	b.n	800157c <HAL_DMA_Abort_IT+0xa4>
 8001570:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001574:	e002      	b.n	800157c <HAL_DMA_Abort_IT+0xa4>
 8001576:	2310      	movs	r3, #16
 8001578:	e000      	b.n	800157c <HAL_DMA_Abort_IT+0xa4>
 800157a:	2301      	movs	r3, #1
 800157c:	4a11      	ldr	r2, [pc, #68]	@ (80015c4 <HAL_DMA_Abort_IT+0xec>)
 800157e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	4798      	blx	r3
    } 
  }
  return status;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40020008 	.word	0x40020008
 80015b0:	4002001c 	.word	0x4002001c
 80015b4:	40020030 	.word	0x40020030
 80015b8:	40020044 	.word	0x40020044
 80015bc:	40020058 	.word	0x40020058
 80015c0:	4002006c 	.word	0x4002006c
 80015c4:	40020000 	.word	0x40020000

080015c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b08b      	sub	sp, #44	@ 0x2c
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015da:	e169      	b.n	80018b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015dc:	2201      	movs	r2, #1
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	f040 8158 	bne.w	80018aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4a9a      	ldr	r2, [pc, #616]	@ (8001868 <HAL_GPIO_Init+0x2a0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d05e      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
 8001604:	4a98      	ldr	r2, [pc, #608]	@ (8001868 <HAL_GPIO_Init+0x2a0>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d875      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 800160a:	4a98      	ldr	r2, [pc, #608]	@ (800186c <HAL_GPIO_Init+0x2a4>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d058      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
 8001610:	4a96      	ldr	r2, [pc, #600]	@ (800186c <HAL_GPIO_Init+0x2a4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d86f      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 8001616:	4a96      	ldr	r2, [pc, #600]	@ (8001870 <HAL_GPIO_Init+0x2a8>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d052      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
 800161c:	4a94      	ldr	r2, [pc, #592]	@ (8001870 <HAL_GPIO_Init+0x2a8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d869      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 8001622:	4a94      	ldr	r2, [pc, #592]	@ (8001874 <HAL_GPIO_Init+0x2ac>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d04c      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
 8001628:	4a92      	ldr	r2, [pc, #584]	@ (8001874 <HAL_GPIO_Init+0x2ac>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d863      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 800162e:	4a92      	ldr	r2, [pc, #584]	@ (8001878 <HAL_GPIO_Init+0x2b0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d046      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
 8001634:	4a90      	ldr	r2, [pc, #576]	@ (8001878 <HAL_GPIO_Init+0x2b0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d85d      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 800163a:	2b12      	cmp	r3, #18
 800163c:	d82a      	bhi.n	8001694 <HAL_GPIO_Init+0xcc>
 800163e:	2b12      	cmp	r3, #18
 8001640:	d859      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 8001642:	a201      	add	r2, pc, #4	@ (adr r2, 8001648 <HAL_GPIO_Init+0x80>)
 8001644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001648:	080016c3 	.word	0x080016c3
 800164c:	0800169d 	.word	0x0800169d
 8001650:	080016af 	.word	0x080016af
 8001654:	080016f1 	.word	0x080016f1
 8001658:	080016f7 	.word	0x080016f7
 800165c:	080016f7 	.word	0x080016f7
 8001660:	080016f7 	.word	0x080016f7
 8001664:	080016f7 	.word	0x080016f7
 8001668:	080016f7 	.word	0x080016f7
 800166c:	080016f7 	.word	0x080016f7
 8001670:	080016f7 	.word	0x080016f7
 8001674:	080016f7 	.word	0x080016f7
 8001678:	080016f7 	.word	0x080016f7
 800167c:	080016f7 	.word	0x080016f7
 8001680:	080016f7 	.word	0x080016f7
 8001684:	080016f7 	.word	0x080016f7
 8001688:	080016f7 	.word	0x080016f7
 800168c:	080016a5 	.word	0x080016a5
 8001690:	080016b9 	.word	0x080016b9
 8001694:	4a79      	ldr	r2, [pc, #484]	@ (800187c <HAL_GPIO_Init+0x2b4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d013      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800169a:	e02c      	b.n	80016f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	623b      	str	r3, [r7, #32]
          break;
 80016a2:	e029      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	3304      	adds	r3, #4
 80016aa:	623b      	str	r3, [r7, #32]
          break;
 80016ac:	e024      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	3308      	adds	r3, #8
 80016b4:	623b      	str	r3, [r7, #32]
          break;
 80016b6:	e01f      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	330c      	adds	r3, #12
 80016be:	623b      	str	r3, [r7, #32]
          break;
 80016c0:	e01a      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ca:	2304      	movs	r3, #4
 80016cc:	623b      	str	r3, [r7, #32]
          break;
 80016ce:	e013      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d105      	bne.n	80016e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d8:	2308      	movs	r3, #8
 80016da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	611a      	str	r2, [r3, #16]
          break;
 80016e2:	e009      	b.n	80016f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e4:	2308      	movs	r3, #8
 80016e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	615a      	str	r2, [r3, #20]
          break;
 80016ee:	e003      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
          break;
 80016f4:	e000      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          break;
 80016f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2bff      	cmp	r3, #255	@ 0xff
 80016fc:	d801      	bhi.n	8001702 <HAL_GPIO_Init+0x13a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	e001      	b.n	8001706 <HAL_GPIO_Init+0x13e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3304      	adds	r3, #4
 8001706:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	2bff      	cmp	r3, #255	@ 0xff
 800170c:	d802      	bhi.n	8001714 <HAL_GPIO_Init+0x14c>
 800170e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	e002      	b.n	800171a <HAL_GPIO_Init+0x152>
 8001714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001716:	3b08      	subs	r3, #8
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	210f      	movs	r1, #15
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	401a      	ands	r2, r3
 800172c:	6a39      	ldr	r1, [r7, #32]
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	fa01 f303 	lsl.w	r3, r1, r3
 8001734:	431a      	orrs	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 80b1 	beq.w	80018aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001748:	4b4d      	ldr	r3, [pc, #308]	@ (8001880 <HAL_GPIO_Init+0x2b8>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a4c      	ldr	r2, [pc, #304]	@ (8001880 <HAL_GPIO_Init+0x2b8>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6193      	str	r3, [r2, #24]
 8001754:	4b4a      	ldr	r3, [pc, #296]	@ (8001880 <HAL_GPIO_Init+0x2b8>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001760:	4a48      	ldr	r2, [pc, #288]	@ (8001884 <HAL_GPIO_Init+0x2bc>)
 8001762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	3302      	adds	r3, #2
 8001768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800176e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	220f      	movs	r2, #15
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	4013      	ands	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a40      	ldr	r2, [pc, #256]	@ (8001888 <HAL_GPIO_Init+0x2c0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d013      	beq.n	80017b4 <HAL_GPIO_Init+0x1ec>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a3f      	ldr	r2, [pc, #252]	@ (800188c <HAL_GPIO_Init+0x2c4>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d00d      	beq.n	80017b0 <HAL_GPIO_Init+0x1e8>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a3e      	ldr	r2, [pc, #248]	@ (8001890 <HAL_GPIO_Init+0x2c8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d007      	beq.n	80017ac <HAL_GPIO_Init+0x1e4>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a3d      	ldr	r2, [pc, #244]	@ (8001894 <HAL_GPIO_Init+0x2cc>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d101      	bne.n	80017a8 <HAL_GPIO_Init+0x1e0>
 80017a4:	2303      	movs	r3, #3
 80017a6:	e006      	b.n	80017b6 <HAL_GPIO_Init+0x1ee>
 80017a8:	2304      	movs	r3, #4
 80017aa:	e004      	b.n	80017b6 <HAL_GPIO_Init+0x1ee>
 80017ac:	2302      	movs	r3, #2
 80017ae:	e002      	b.n	80017b6 <HAL_GPIO_Init+0x1ee>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <HAL_GPIO_Init+0x1ee>
 80017b4:	2300      	movs	r3, #0
 80017b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017b8:	f002 0203 	and.w	r2, r2, #3
 80017bc:	0092      	lsls	r2, r2, #2
 80017be:	4093      	lsls	r3, r2
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017c6:	492f      	ldr	r1, [pc, #188]	@ (8001884 <HAL_GPIO_Init+0x2bc>)
 80017c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	3302      	adds	r3, #2
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d006      	beq.n	80017ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001898 <HAL_GPIO_Init+0x2d0>)
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	492c      	ldr	r1, [pc, #176]	@ (8001898 <HAL_GPIO_Init+0x2d0>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	608b      	str	r3, [r1, #8]
 80017ec:	e006      	b.n	80017fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001898 <HAL_GPIO_Init+0x2d0>)
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	4928      	ldr	r1, [pc, #160]	@ (8001898 <HAL_GPIO_Init+0x2d0>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d006      	beq.n	8001816 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001808:	4b23      	ldr	r3, [pc, #140]	@ (8001898 <HAL_GPIO_Init+0x2d0>)
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	4922      	ldr	r1, [pc, #136]	@ (8001898 <HAL_GPIO_Init+0x2d0>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	60cb      	str	r3, [r1, #12]
 8001814:	e006      	b.n	8001824 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001816:	4b20      	ldr	r3, [pc, #128]	@ (8001898 <HAL_GPIO_Init+0x2d0>)
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	43db      	mvns	r3, r3
 800181e:	491e      	ldr	r1, [pc, #120]	@ (8001898 <HAL_GPIO_Init+0x2d0>)
 8001820:	4013      	ands	r3, r2
 8001822:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d006      	beq.n	800183e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001830:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <HAL_GPIO_Init+0x2d0>)
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	4918      	ldr	r1, [pc, #96]	@ (8001898 <HAL_GPIO_Init+0x2d0>)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
 800183c:	e006      	b.n	800184c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800183e:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <HAL_GPIO_Init+0x2d0>)
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	43db      	mvns	r3, r3
 8001846:	4914      	ldr	r1, [pc, #80]	@ (8001898 <HAL_GPIO_Init+0x2d0>)
 8001848:	4013      	ands	r3, r2
 800184a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d021      	beq.n	800189c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001858:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <HAL_GPIO_Init+0x2d0>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	490e      	ldr	r1, [pc, #56]	@ (8001898 <HAL_GPIO_Init+0x2d0>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	4313      	orrs	r3, r2
 8001862:	600b      	str	r3, [r1, #0]
 8001864:	e021      	b.n	80018aa <HAL_GPIO_Init+0x2e2>
 8001866:	bf00      	nop
 8001868:	10320000 	.word	0x10320000
 800186c:	10310000 	.word	0x10310000
 8001870:	10220000 	.word	0x10220000
 8001874:	10210000 	.word	0x10210000
 8001878:	10120000 	.word	0x10120000
 800187c:	10110000 	.word	0x10110000
 8001880:	40021000 	.word	0x40021000
 8001884:	40010000 	.word	0x40010000
 8001888:	40010800 	.word	0x40010800
 800188c:	40010c00 	.word	0x40010c00
 8001890:	40011000 	.word	0x40011000
 8001894:	40011400 	.word	0x40011400
 8001898:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800189c:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <HAL_GPIO_Init+0x304>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	4909      	ldr	r1, [pc, #36]	@ (80018cc <HAL_GPIO_Init+0x304>)
 80018a6:	4013      	ands	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ac:	3301      	adds	r3, #1
 80018ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f47f ae8e 	bne.w	80015dc <HAL_GPIO_Init+0x14>
  }
}
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
 80018c4:	372c      	adds	r7, #44	@ 0x2c
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	40010400 	.word	0x40010400

080018d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
 80018dc:	4613      	mov	r3, r2
 80018de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018e0:	787b      	ldrb	r3, [r7, #1]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018ec:	e003      	b.n	80018f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	041a      	lsls	r2, r3, #16
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	611a      	str	r2, [r3, #16]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001912:	887a      	ldrh	r2, [r7, #2]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4013      	ands	r3, r2
 8001918:	041a      	lsls	r2, r3, #16
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	43d9      	mvns	r1, r3
 800191e:	887b      	ldrh	r3, [r7, #2]
 8001920:	400b      	ands	r3, r1
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	611a      	str	r2, [r3, #16]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
	...

08001934 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800193e:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	4013      	ands	r3, r2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d006      	beq.n	8001958 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800194a:	4a05      	ldr	r2, [pc, #20]	@ (8001960 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f806 	bl	8001964 <HAL_GPIO_EXTI_Callback>
  }
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40010400 	.word	0x40010400

08001964 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e272      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 8087 	beq.w	8001aa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001998:	4b92      	ldr	r3, [pc, #584]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d00c      	beq.n	80019be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019a4:	4b8f      	ldr	r3, [pc, #572]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d112      	bne.n	80019d6 <HAL_RCC_OscConfig+0x5e>
 80019b0:	4b8c      	ldr	r3, [pc, #560]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019bc:	d10b      	bne.n	80019d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019be:	4b89      	ldr	r3, [pc, #548]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d06c      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x12c>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d168      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e24c      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019de:	d106      	bne.n	80019ee <HAL_RCC_OscConfig+0x76>
 80019e0:	4b80      	ldr	r3, [pc, #512]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a7f      	ldr	r2, [pc, #508]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	e02e      	b.n	8001a4c <HAL_RCC_OscConfig+0xd4>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x98>
 80019f6:	4b7b      	ldr	r3, [pc, #492]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a7a      	ldr	r2, [pc, #488]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	4b78      	ldr	r3, [pc, #480]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a77      	ldr	r2, [pc, #476]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	e01d      	b.n	8001a4c <HAL_RCC_OscConfig+0xd4>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a18:	d10c      	bne.n	8001a34 <HAL_RCC_OscConfig+0xbc>
 8001a1a:	4b72      	ldr	r3, [pc, #456]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a71      	ldr	r2, [pc, #452]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	4b6f      	ldr	r3, [pc, #444]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a6e      	ldr	r2, [pc, #440]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e00b      	b.n	8001a4c <HAL_RCC_OscConfig+0xd4>
 8001a34:	4b6b      	ldr	r3, [pc, #428]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a6a      	ldr	r2, [pc, #424]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b68      	ldr	r3, [pc, #416]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a67      	ldr	r2, [pc, #412]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d013      	beq.n	8001a7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7ff f9dc 	bl	8000e10 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a5c:	f7ff f9d8 	bl	8000e10 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	@ 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e200      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6e:	4b5d      	ldr	r3, [pc, #372]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0xe4>
 8001a7a:	e014      	b.n	8001aa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7ff f9c8 	bl	8000e10 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a84:	f7ff f9c4 	bl	8000e10 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b64      	cmp	r3, #100	@ 0x64
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e1ec      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a96:	4b53      	ldr	r3, [pc, #332]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x10c>
 8001aa2:	e000      	b.n	8001aa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d063      	beq.n	8001b7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ab2:	4b4c      	ldr	r3, [pc, #304]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00b      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001abe:	4b49      	ldr	r3, [pc, #292]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b08      	cmp	r3, #8
 8001ac8:	d11c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x18c>
 8001aca:	4b46      	ldr	r3, [pc, #280]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d116      	bne.n	8001b04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad6:	4b43      	ldr	r3, [pc, #268]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d005      	beq.n	8001aee <HAL_RCC_OscConfig+0x176>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d001      	beq.n	8001aee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e1c0      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aee:	4b3d      	ldr	r3, [pc, #244]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4939      	ldr	r1, [pc, #228]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b02:	e03a      	b.n	8001b7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d020      	beq.n	8001b4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b0c:	4b36      	ldr	r3, [pc, #216]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff f97d 	bl	8000e10 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1a:	f7ff f979 	bl	8000e10 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e1a1      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b38:	4b2a      	ldr	r3, [pc, #168]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4927      	ldr	r1, [pc, #156]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	600b      	str	r3, [r1, #0]
 8001b4c:	e015      	b.n	8001b7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b4e:	4b26      	ldr	r3, [pc, #152]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7ff f95c 	bl	8000e10 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5c:	f7ff f958 	bl	8000e10 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e180      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d03a      	beq.n	8001bfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d019      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b8e:	4b17      	ldr	r3, [pc, #92]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b94:	f7ff f93c 	bl	8000e10 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9c:	f7ff f938 	bl	8000e10 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e160      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bae:	4b0d      	ldr	r3, [pc, #52]	@ (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f000 face 	bl	800215c <RCC_Delay>
 8001bc0:	e01c      	b.n	8001bfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc8:	f7ff f922 	bl	8000e10 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bce:	e00f      	b.n	8001bf0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd0:	f7ff f91e 	bl	8000e10 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d908      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e146      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000
 8001be8:	42420000 	.word	0x42420000
 8001bec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf0:	4b92      	ldr	r3, [pc, #584]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1e9      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80a6 	beq.w	8001d56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0e:	4b8b      	ldr	r3, [pc, #556]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10d      	bne.n	8001c36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	4b88      	ldr	r3, [pc, #544]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	4a87      	ldr	r2, [pc, #540]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c24:	61d3      	str	r3, [r2, #28]
 8001c26:	4b85      	ldr	r3, [pc, #532]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c32:	2301      	movs	r3, #1
 8001c34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c36:	4b82      	ldr	r3, [pc, #520]	@ (8001e40 <HAL_RCC_OscConfig+0x4c8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d118      	bne.n	8001c74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c42:	4b7f      	ldr	r3, [pc, #508]	@ (8001e40 <HAL_RCC_OscConfig+0x4c8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a7e      	ldr	r2, [pc, #504]	@ (8001e40 <HAL_RCC_OscConfig+0x4c8>)
 8001c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4e:	f7ff f8df 	bl	8000e10 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c56:	f7ff f8db 	bl	8000e10 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b64      	cmp	r3, #100	@ 0x64
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e103      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c68:	4b75      	ldr	r3, [pc, #468]	@ (8001e40 <HAL_RCC_OscConfig+0x4c8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x312>
 8001c7c:	4b6f      	ldr	r3, [pc, #444]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	4a6e      	ldr	r2, [pc, #440]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6213      	str	r3, [r2, #32]
 8001c88:	e02d      	b.n	8001ce6 <HAL_RCC_OscConfig+0x36e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0x334>
 8001c92:	4b6a      	ldr	r3, [pc, #424]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	4a69      	ldr	r2, [pc, #420]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	6213      	str	r3, [r2, #32]
 8001c9e:	4b67      	ldr	r3, [pc, #412]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	4a66      	ldr	r2, [pc, #408]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	f023 0304 	bic.w	r3, r3, #4
 8001ca8:	6213      	str	r3, [r2, #32]
 8001caa:	e01c      	b.n	8001ce6 <HAL_RCC_OscConfig+0x36e>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	2b05      	cmp	r3, #5
 8001cb2:	d10c      	bne.n	8001cce <HAL_RCC_OscConfig+0x356>
 8001cb4:	4b61      	ldr	r3, [pc, #388]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	4a60      	ldr	r2, [pc, #384]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001cba:	f043 0304 	orr.w	r3, r3, #4
 8001cbe:	6213      	str	r3, [r2, #32]
 8001cc0:	4b5e      	ldr	r3, [pc, #376]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	4a5d      	ldr	r2, [pc, #372]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6213      	str	r3, [r2, #32]
 8001ccc:	e00b      	b.n	8001ce6 <HAL_RCC_OscConfig+0x36e>
 8001cce:	4b5b      	ldr	r3, [pc, #364]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	4a5a      	ldr	r2, [pc, #360]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	6213      	str	r3, [r2, #32]
 8001cda:	4b58      	ldr	r3, [pc, #352]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	4a57      	ldr	r2, [pc, #348]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	f023 0304 	bic.w	r3, r3, #4
 8001ce4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d015      	beq.n	8001d1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cee:	f7ff f88f 	bl	8000e10 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf4:	e00a      	b.n	8001d0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf6:	f7ff f88b 	bl	8000e10 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e0b1      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0ee      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x37e>
 8001d18:	e014      	b.n	8001d44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1a:	f7ff f879 	bl	8000e10 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d20:	e00a      	b.n	8001d38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d22:	f7ff f875 	bl	8000e10 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e09b      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d38:	4b40      	ldr	r3, [pc, #256]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1ee      	bne.n	8001d22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d44:	7dfb      	ldrb	r3, [r7, #23]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d105      	bne.n	8001d56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	4a3b      	ldr	r2, [pc, #236]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001d50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8087 	beq.w	8001e6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d60:	4b36      	ldr	r3, [pc, #216]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 030c 	and.w	r3, r3, #12
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d061      	beq.n	8001e30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d146      	bne.n	8001e02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d74:	4b33      	ldr	r3, [pc, #204]	@ (8001e44 <HAL_RCC_OscConfig+0x4cc>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7ff f849 	bl	8000e10 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d82:	f7ff f845 	bl	8000e10 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e06d      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d94:	4b29      	ldr	r3, [pc, #164]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f0      	bne.n	8001d82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001da8:	d108      	bne.n	8001dbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001daa:	4b24      	ldr	r3, [pc, #144]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	4921      	ldr	r1, [pc, #132]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a19      	ldr	r1, [r3, #32]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	491b      	ldr	r1, [pc, #108]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e44 <HAL_RCC_OscConfig+0x4cc>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dda:	f7ff f819 	bl	8000e10 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de2:	f7ff f815 	bl	8000e10 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e03d      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df4:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x46a>
 8001e00:	e035      	b.n	8001e6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <HAL_RCC_OscConfig+0x4cc>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7ff f802 	bl	8000e10 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e10:	f7fe fffe 	bl	8000e10 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e026      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x498>
 8001e2e:	e01e      	b.n	8001e6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d107      	bne.n	8001e48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e019      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40007000 	.word	0x40007000
 8001e44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e48:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d001      	beq.n	8001e6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40021000 	.word	0x40021000

08001e7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0d0      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e90:	4b6a      	ldr	r3, [pc, #424]	@ (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d910      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9e:	4b67      	ldr	r3, [pc, #412]	@ (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 0207 	bic.w	r2, r3, #7
 8001ea6:	4965      	ldr	r1, [pc, #404]	@ (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eae:	4b63      	ldr	r3, [pc, #396]	@ (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d001      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0b8      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d020      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed8:	4b59      	ldr	r3, [pc, #356]	@ (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4a58      	ldr	r2, [pc, #352]	@ (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ee2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef0:	4b53      	ldr	r3, [pc, #332]	@ (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4a52      	ldr	r2, [pc, #328]	@ (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001efa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001efc:	4b50      	ldr	r3, [pc, #320]	@ (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	494d      	ldr	r1, [pc, #308]	@ (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d040      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b47      	ldr	r3, [pc, #284]	@ (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d115      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e07f      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3a:	4b41      	ldr	r3, [pc, #260]	@ (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e073      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e06b      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f5a:	4b39      	ldr	r3, [pc, #228]	@ (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f023 0203 	bic.w	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4936      	ldr	r1, [pc, #216]	@ (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f6c:	f7fe ff50 	bl	8000e10 <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f74:	f7fe ff4c 	bl	8000e10 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e053      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	4b2d      	ldr	r3, [pc, #180]	@ (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 020c 	and.w	r2, r3, #12
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1eb      	bne.n	8001f74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b27      	ldr	r3, [pc, #156]	@ (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d210      	bcs.n	8001fcc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b24      	ldr	r3, [pc, #144]	@ (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 0207 	bic.w	r2, r3, #7
 8001fb2:	4922      	ldr	r1, [pc, #136]	@ (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b20      	ldr	r3, [pc, #128]	@ (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e032      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd8:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4916      	ldr	r1, [pc, #88]	@ (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ff6:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	490e      	ldr	r1, [pc, #56]	@ (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800200a:	f000 f821 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 800200e:	4602      	mov	r2, r0
 8002010:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	490a      	ldr	r1, [pc, #40]	@ (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 800201c:	5ccb      	ldrb	r3, [r1, r3]
 800201e:	fa22 f303 	lsr.w	r3, r2, r3
 8002022:	4a09      	ldr	r2, [pc, #36]	@ (8002048 <HAL_RCC_ClockConfig+0x1cc>)
 8002024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002026:	4b09      	ldr	r3, [pc, #36]	@ (800204c <HAL_RCC_ClockConfig+0x1d0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe feae 	bl	8000d8c <HAL_InitTick>

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40022000 	.word	0x40022000
 8002040:	40021000 	.word	0x40021000
 8002044:	08003ce8 	.word	0x08003ce8
 8002048:	20000018 	.word	0x20000018
 800204c:	2000001c 	.word	0x2000001c

08002050 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800206a:	4b1e      	ldr	r3, [pc, #120]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b04      	cmp	r3, #4
 8002078:	d002      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0x30>
 800207a:	2b08      	cmp	r3, #8
 800207c:	d003      	beq.n	8002086 <HAL_RCC_GetSysClockFreq+0x36>
 800207e:	e027      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002080:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002082:	613b      	str	r3, [r7, #16]
      break;
 8002084:	e027      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	0c9b      	lsrs	r3, r3, #18
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	4a17      	ldr	r2, [pc, #92]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002090:	5cd3      	ldrb	r3, [r2, r3]
 8002092:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d010      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800209e:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	0c5b      	lsrs	r3, r3, #17
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	4a11      	ldr	r2, [pc, #68]	@ (80020f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020aa:	5cd3      	ldrb	r3, [r2, r3]
 80020ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a0d      	ldr	r2, [pc, #52]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80020b2:	fb03 f202 	mul.w	r2, r3, r2
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	e004      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a0c      	ldr	r2, [pc, #48]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020c4:	fb02 f303 	mul.w	r3, r2, r3
 80020c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	613b      	str	r3, [r7, #16]
      break;
 80020ce:	e002      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020d0:	4b05      	ldr	r3, [pc, #20]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80020d2:	613b      	str	r3, [r7, #16]
      break;
 80020d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020d6:	693b      	ldr	r3, [r7, #16]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	371c      	adds	r7, #28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	007a1200 	.word	0x007a1200
 80020ec:	08003d00 	.word	0x08003d00
 80020f0:	08003d10 	.word	0x08003d10
 80020f4:	003d0900 	.word	0x003d0900

080020f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020fc:	4b02      	ldr	r3, [pc, #8]	@ (8002108 <HAL_RCC_GetHCLKFreq+0x10>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	20000018 	.word	0x20000018

0800210c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002110:	f7ff fff2 	bl	80020f8 <HAL_RCC_GetHCLKFreq>
 8002114:	4602      	mov	r2, r0
 8002116:	4b05      	ldr	r3, [pc, #20]	@ (800212c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	0a1b      	lsrs	r3, r3, #8
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	4903      	ldr	r1, [pc, #12]	@ (8002130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002122:	5ccb      	ldrb	r3, [r1, r3]
 8002124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002128:	4618      	mov	r0, r3
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40021000 	.word	0x40021000
 8002130:	08003cf8 	.word	0x08003cf8

08002134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002138:	f7ff ffde 	bl	80020f8 <HAL_RCC_GetHCLKFreq>
 800213c:	4602      	mov	r2, r0
 800213e:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	0adb      	lsrs	r3, r3, #11
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	4903      	ldr	r1, [pc, #12]	@ (8002158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800214a:	5ccb      	ldrb	r3, [r1, r3]
 800214c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002150:	4618      	mov	r0, r3
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40021000 	.word	0x40021000
 8002158:	08003cf8 	.word	0x08003cf8

0800215c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002164:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <RCC_Delay+0x34>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0a      	ldr	r2, [pc, #40]	@ (8002194 <RCC_Delay+0x38>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	0a5b      	lsrs	r3, r3, #9
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002178:	bf00      	nop
  }
  while (Delay --);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1e5a      	subs	r2, r3, #1
 800217e:	60fa      	str	r2, [r7, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f9      	bne.n	8002178 <RCC_Delay+0x1c>
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	20000018 	.word	0x20000018
 8002194:	10624dd3 	.word	0x10624dd3

08002198 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d07d      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80021b4:	2300      	movs	r3, #0
 80021b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b8:	4b4f      	ldr	r3, [pc, #316]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10d      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c4:	4b4c      	ldr	r3, [pc, #304]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	4a4b      	ldr	r2, [pc, #300]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ce:	61d3      	str	r3, [r2, #28]
 80021d0:	4b49      	ldr	r3, [pc, #292]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021dc:	2301      	movs	r3, #1
 80021de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e0:	4b46      	ldr	r3, [pc, #280]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d118      	bne.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ec:	4b43      	ldr	r3, [pc, #268]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a42      	ldr	r2, [pc, #264]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f8:	f7fe fe0a 	bl	8000e10 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fe:	e008      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002200:	f7fe fe06 	bl	8000e10 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	@ 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e06d      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002212:	4b3a      	ldr	r3, [pc, #232]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800221e:	4b36      	ldr	r3, [pc, #216]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002226:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d02e      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	429a      	cmp	r2, r3
 800223a:	d027      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800223c:	4b2e      	ldr	r3, [pc, #184]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002244:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002246:	4b2e      	ldr	r3, [pc, #184]	@ (8002300 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002248:	2201      	movs	r2, #1
 800224a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800224c:	4b2c      	ldr	r3, [pc, #176]	@ (8002300 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002252:	4a29      	ldr	r2, [pc, #164]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d014      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7fe fdd5 	bl	8000e10 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002268:	e00a      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226a:	f7fe fdd1 	bl	8000e10 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002278:	4293      	cmp	r3, r2
 800227a:	d901      	bls.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e036      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002280:	4b1d      	ldr	r3, [pc, #116]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0ee      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800228c:	4b1a      	ldr	r3, [pc, #104]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4917      	ldr	r1, [pc, #92]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229a:	4313      	orrs	r3, r2
 800229c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800229e:	7dfb      	ldrb	r3, [r7, #23]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d105      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a4:	4b14      	ldr	r3, [pc, #80]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	4a13      	ldr	r2, [pc, #76]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022bc:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	490b      	ldr	r1, [pc, #44]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d008      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022da:	4b07      	ldr	r3, [pc, #28]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	4904      	ldr	r1, [pc, #16]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40007000 	.word	0x40007000
 8002300:	42420440 	.word	0x42420440

08002304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e041      	b.n	800239a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d106      	bne.n	8002330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fe fb56 	bl	80009dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2202      	movs	r2, #2
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3304      	adds	r3, #4
 8002340:	4619      	mov	r1, r3
 8002342:	4610      	mov	r0, r2
 8002344:	f000 fbce 	bl	8002ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e041      	b.n	8002438 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d106      	bne.n	80023ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f839 	bl	8002440 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2202      	movs	r2, #2
 80023d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3304      	adds	r3, #4
 80023de:	4619      	mov	r1, r3
 80023e0:	4610      	mov	r0, r2
 80023e2:	f000 fb7f 	bl	8002ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr

08002452 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b086      	sub	sp, #24
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e093      	b.n	800258e <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d106      	bne.n	8002480 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7fe faca 	bl	8000a14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002496:	f023 0307 	bic.w	r3, r3, #7
 800249a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3304      	adds	r3, #4
 80024a4:	4619      	mov	r1, r3
 80024a6:	4610      	mov	r0, r2
 80024a8:	f000 fb1c 	bl	8002ae4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024d4:	f023 0303 	bic.w	r3, r3, #3
 80024d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	4313      	orrs	r3, r2
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80024f2:	f023 030c 	bic.w	r3, r3, #12
 80024f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80024fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	021b      	lsls	r3, r3, #8
 800250e:	4313      	orrs	r3, r2
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	011a      	lsls	r2, r3, #4
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	031b      	lsls	r3, r3, #12
 8002522:	4313      	orrs	r3, r2
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002530:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	4313      	orrs	r3, r2
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d01b      	beq.n	80025fa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f06f 0202 	mvn.w	r2, #2
 80025ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 fa64 	bl	8002aae <HAL_TIM_IC_CaptureCallback>
 80025e6:	e005      	b.n	80025f4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fa57 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fa66 	bl	8002ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b00      	cmp	r3, #0
 800260c:	d01b      	beq.n	8002646 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f06f 0204 	mvn.w	r2, #4
 8002616:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2202      	movs	r2, #2
 800261c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 fa3e 	bl	8002aae <HAL_TIM_IC_CaptureCallback>
 8002632:	e005      	b.n	8002640 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fa31 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fa40 	bl	8002ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d020      	beq.n	8002692 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d01b      	beq.n	8002692 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f06f 0208 	mvn.w	r2, #8
 8002662:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2204      	movs	r2, #4
 8002668:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 fa18 	bl	8002aae <HAL_TIM_IC_CaptureCallback>
 800267e:	e005      	b.n	800268c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 fa0b 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fa1a 	bl	8002ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	2b00      	cmp	r3, #0
 800269a:	d020      	beq.n	80026de <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0310 	and.w	r3, r3, #16
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d01b      	beq.n	80026de <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f06f 0210 	mvn.w	r2, #16
 80026ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2208      	movs	r2, #8
 80026b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f9f2 	bl	8002aae <HAL_TIM_IC_CaptureCallback>
 80026ca:	e005      	b.n	80026d8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f9e5 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f9f4 	bl	8002ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00c      	beq.n	8002702 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f06f 0201 	mvn.w	r2, #1
 80026fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f9c4 	bl	8002a8a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00c      	beq.n	8002726 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002712:	2b00      	cmp	r3, #0
 8002714:	d007      	beq.n	8002726 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800271e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 fcd2 	bl	80030ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00c      	beq.n	800274a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f9c4 	bl	8002ad2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00c      	beq.n	800276e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f06f 0220 	mvn.w	r2, #32
 8002766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 fca5 	bl	80030b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002792:	2302      	movs	r3, #2
 8002794:	e0ae      	b.n	80028f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b0c      	cmp	r3, #12
 80027a2:	f200 809f 	bhi.w	80028e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80027a6:	a201      	add	r2, pc, #4	@ (adr r2, 80027ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	080027e1 	.word	0x080027e1
 80027b0:	080028e5 	.word	0x080028e5
 80027b4:	080028e5 	.word	0x080028e5
 80027b8:	080028e5 	.word	0x080028e5
 80027bc:	08002821 	.word	0x08002821
 80027c0:	080028e5 	.word	0x080028e5
 80027c4:	080028e5 	.word	0x080028e5
 80027c8:	080028e5 	.word	0x080028e5
 80027cc:	08002863 	.word	0x08002863
 80027d0:	080028e5 	.word	0x080028e5
 80027d4:	080028e5 	.word	0x080028e5
 80027d8:	080028e5 	.word	0x080028e5
 80027dc:	080028a3 	.word	0x080028a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68b9      	ldr	r1, [r7, #8]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f9ea 	bl	8002bc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699a      	ldr	r2, [r3, #24]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0208 	orr.w	r2, r2, #8
 80027fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0204 	bic.w	r2, r2, #4
 800280a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6999      	ldr	r1, [r3, #24]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	619a      	str	r2, [r3, #24]
      break;
 800281e:	e064      	b.n	80028ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	4618      	mov	r0, r3
 8002828:	f000 fa30 	bl	8002c8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699a      	ldr	r2, [r3, #24]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800283a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699a      	ldr	r2, [r3, #24]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800284a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6999      	ldr	r1, [r3, #24]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	021a      	lsls	r2, r3, #8
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	619a      	str	r2, [r3, #24]
      break;
 8002860:	e043      	b.n	80028ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68b9      	ldr	r1, [r7, #8]
 8002868:	4618      	mov	r0, r3
 800286a:	f000 fa79 	bl	8002d60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	69da      	ldr	r2, [r3, #28]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 0208 	orr.w	r2, r2, #8
 800287c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69da      	ldr	r2, [r3, #28]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0204 	bic.w	r2, r2, #4
 800288c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	69d9      	ldr	r1, [r3, #28]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	61da      	str	r2, [r3, #28]
      break;
 80028a0:	e023      	b.n	80028ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 fac3 	bl	8002e34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	69da      	ldr	r2, [r3, #28]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	69da      	ldr	r2, [r3, #28]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69d9      	ldr	r1, [r3, #28]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	021a      	lsls	r2, r3, #8
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	61da      	str	r2, [r3, #28]
      break;
 80028e2:	e002      	b.n	80028ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	75fb      	strb	r3, [r7, #23]
      break;
 80028e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_TIM_ConfigClockSource+0x1c>
 8002914:	2302      	movs	r3, #2
 8002916:	e0b4      	b.n	8002a82 <HAL_TIM_ConfigClockSource+0x186>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800293e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002950:	d03e      	beq.n	80029d0 <HAL_TIM_ConfigClockSource+0xd4>
 8002952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002956:	f200 8087 	bhi.w	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 800295a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800295e:	f000 8086 	beq.w	8002a6e <HAL_TIM_ConfigClockSource+0x172>
 8002962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002966:	d87f      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 8002968:	2b70      	cmp	r3, #112	@ 0x70
 800296a:	d01a      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0xa6>
 800296c:	2b70      	cmp	r3, #112	@ 0x70
 800296e:	d87b      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 8002970:	2b60      	cmp	r3, #96	@ 0x60
 8002972:	d050      	beq.n	8002a16 <HAL_TIM_ConfigClockSource+0x11a>
 8002974:	2b60      	cmp	r3, #96	@ 0x60
 8002976:	d877      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 8002978:	2b50      	cmp	r3, #80	@ 0x50
 800297a:	d03c      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0xfa>
 800297c:	2b50      	cmp	r3, #80	@ 0x50
 800297e:	d873      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 8002980:	2b40      	cmp	r3, #64	@ 0x40
 8002982:	d058      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x13a>
 8002984:	2b40      	cmp	r3, #64	@ 0x40
 8002986:	d86f      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 8002988:	2b30      	cmp	r3, #48	@ 0x30
 800298a:	d064      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x15a>
 800298c:	2b30      	cmp	r3, #48	@ 0x30
 800298e:	d86b      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 8002990:	2b20      	cmp	r3, #32
 8002992:	d060      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x15a>
 8002994:	2b20      	cmp	r3, #32
 8002996:	d867      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 8002998:	2b00      	cmp	r3, #0
 800299a:	d05c      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x15a>
 800299c:	2b10      	cmp	r3, #16
 800299e:	d05a      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x15a>
 80029a0:	e062      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029b2:	f000 fb04 	bl	8002fbe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	609a      	str	r2, [r3, #8]
      break;
 80029ce:	e04f      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029e0:	f000 faed 	bl	8002fbe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029f2:	609a      	str	r2, [r3, #8]
      break;
 80029f4:	e03c      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a02:	461a      	mov	r2, r3
 8002a04:	f000 fa64 	bl	8002ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2150      	movs	r1, #80	@ 0x50
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fabb 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002a14:	e02c      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a22:	461a      	mov	r2, r3
 8002a24:	f000 fa82 	bl	8002f2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2160      	movs	r1, #96	@ 0x60
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 faab 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002a34:	e01c      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a42:	461a      	mov	r2, r3
 8002a44:	f000 fa44 	bl	8002ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2140      	movs	r1, #64	@ 0x40
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fa9b 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002a54:	e00c      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4610      	mov	r0, r2
 8002a62:	f000 fa92 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002a66:	e003      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a6c:	e000      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr

08002a9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a2f      	ldr	r2, [pc, #188]	@ (8002bb4 <TIM_Base_SetConfig+0xd0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d00b      	beq.n	8002b14 <TIM_Base_SetConfig+0x30>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b02:	d007      	beq.n	8002b14 <TIM_Base_SetConfig+0x30>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a2c      	ldr	r2, [pc, #176]	@ (8002bb8 <TIM_Base_SetConfig+0xd4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d003      	beq.n	8002b14 <TIM_Base_SetConfig+0x30>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a2b      	ldr	r2, [pc, #172]	@ (8002bbc <TIM_Base_SetConfig+0xd8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d108      	bne.n	8002b26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a22      	ldr	r2, [pc, #136]	@ (8002bb4 <TIM_Base_SetConfig+0xd0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00b      	beq.n	8002b46 <TIM_Base_SetConfig+0x62>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b34:	d007      	beq.n	8002b46 <TIM_Base_SetConfig+0x62>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb8 <TIM_Base_SetConfig+0xd4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d003      	beq.n	8002b46 <TIM_Base_SetConfig+0x62>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a1e      	ldr	r2, [pc, #120]	@ (8002bbc <TIM_Base_SetConfig+0xd8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d108      	bne.n	8002b58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb4 <TIM_Base_SetConfig+0xd0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d103      	bne.n	8002b8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d005      	beq.n	8002baa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f023 0201 	bic.w	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	611a      	str	r2, [r3, #16]
  }
}
 8002baa:	bf00      	nop
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr
 8002bb4:	40012c00 	.word	0x40012c00
 8002bb8:	40000400 	.word	0x40000400
 8002bbc:	40000800 	.word	0x40000800

08002bc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	f023 0201 	bic.w	r2, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0303 	bic.w	r3, r3, #3
 8002bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f023 0302 	bic.w	r3, r3, #2
 8002c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a1c      	ldr	r2, [pc, #112]	@ (8002c88 <TIM_OC1_SetConfig+0xc8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d10c      	bne.n	8002c36 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f023 0308 	bic.w	r3, r3, #8
 8002c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f023 0304 	bic.w	r3, r3, #4
 8002c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a13      	ldr	r2, [pc, #76]	@ (8002c88 <TIM_OC1_SetConfig+0xc8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d111      	bne.n	8002c62 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	621a      	str	r2, [r3, #32]
}
 8002c7c:	bf00      	nop
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40012c00 	.word	0x40012c00

08002c8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	f023 0210 	bic.w	r2, r3, #16
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f023 0320 	bic.w	r3, r3, #32
 8002cd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d5c <TIM_OC2_SetConfig+0xd0>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d10d      	bne.n	8002d08 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a14      	ldr	r2, [pc, #80]	@ (8002d5c <TIM_OC2_SetConfig+0xd0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d113      	bne.n	8002d38 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	621a      	str	r2, [r3, #32]
}
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	40012c00 	.word	0x40012c00

08002d60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 0303 	bic.w	r3, r3, #3
 8002d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	021b      	lsls	r3, r3, #8
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a1d      	ldr	r2, [pc, #116]	@ (8002e30 <TIM_OC3_SetConfig+0xd0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d10d      	bne.n	8002dda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a14      	ldr	r2, [pc, #80]	@ (8002e30 <TIM_OC3_SetConfig+0xd0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d113      	bne.n	8002e0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	621a      	str	r2, [r3, #32]
}
 8002e24:	bf00      	nop
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40012c00 	.word	0x40012c00

08002e34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	031b      	lsls	r3, r3, #12
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a0f      	ldr	r2, [pc, #60]	@ (8002ecc <TIM_OC4_SetConfig+0x98>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d109      	bne.n	8002ea8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	019b      	lsls	r3, r3, #6
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	621a      	str	r2, [r3, #32]
}
 8002ec2:	bf00      	nop
 8002ec4:	371c      	adds	r7, #28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	40012c00 	.word	0x40012c00

08002ed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	f023 0201 	bic.w	r2, r3, #1
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f023 030a 	bic.w	r3, r3, #10
 8002f0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	621a      	str	r2, [r3, #32]
}
 8002f22:	bf00      	nop
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	f023 0210 	bic.w	r2, r3, #16
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	031b      	lsls	r3, r3, #12
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f68:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	621a      	str	r2, [r3, #32]
}
 8002f80:	bf00      	nop
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f043 0307 	orr.w	r3, r3, #7
 8002fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	609a      	str	r2, [r3, #8]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b087      	sub	sp, #28
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	021a      	lsls	r2, r3, #8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	609a      	str	r2, [r3, #8]
}
 8002ff2:	bf00      	nop
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr

08002ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003010:	2302      	movs	r3, #2
 8003012:	e046      	b.n	80030a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800303a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a16      	ldr	r2, [pc, #88]	@ (80030ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00e      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003060:	d009      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a12      	ldr	r2, [pc, #72]	@ (80030b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a10      	ldr	r2, [pc, #64]	@ (80030b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d10c      	bne.n	8003090 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800307c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	4313      	orrs	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	40012c00 	.word	0x40012c00
 80030b0:	40000400 	.word	0x40000400
 80030b4:	40000800 	.word	0x40000800

080030b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e042      	b.n	8003174 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fd fd32 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2224      	movs	r2, #36	@ 0x24
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800311e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fd09 	bl	8003b38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003134:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003144:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003154:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	4613      	mov	r3, r2
 8003188:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b20      	cmp	r3, #32
 8003194:	d121      	bne.n	80031da <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_UART_Transmit_IT+0x26>
 800319c:	88fb      	ldrh	r3, [r7, #6]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e01a      	b.n	80031dc <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	88fa      	ldrh	r2, [r7, #6]
 80031b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	88fa      	ldrh	r2, [r7, #6]
 80031b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2221      	movs	r2, #33	@ 0x21
 80031c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031d4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	e000      	b.n	80031dc <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80031da:	2302      	movs	r3, #2
  }
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b084      	sub	sp, #16
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	4613      	mov	r3, r2
 80031f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b20      	cmp	r3, #32
 80031fe:	d112      	bne.n	8003226 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <HAL_UART_Receive_IT+0x26>
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e00b      	b.n	8003228 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	461a      	mov	r2, r3
 800321a:	68b9      	ldr	r1, [r7, #8]
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 fab6 	bl	800378e <UART_Start_Receive_IT>
 8003222:	4603      	mov	r3, r0
 8003224:	e000      	b.n	8003228 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003226:	2302      	movs	r3, #2
  }
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b0ba      	sub	sp, #232	@ 0xe8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003256:	2300      	movs	r3, #0
 8003258:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800325c:	2300      	movs	r3, #0
 800325e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800326e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10f      	bne.n	8003296 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	d009      	beq.n	8003296 <HAL_UART_IRQHandler+0x66>
 8003282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fb93 	bl	80039ba <UART_Receive_IT>
      return;
 8003294:	e25b      	b.n	800374e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003296:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 80de 	beq.w	800345c <HAL_UART_IRQHandler+0x22c>
 80032a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d106      	bne.n	80032ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 80d1 	beq.w	800345c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00b      	beq.n	80032de <HAL_UART_IRQHandler+0xae>
 80032c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d6:	f043 0201 	orr.w	r2, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00b      	beq.n	8003302 <HAL_UART_IRQHandler+0xd2>
 80032ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fa:	f043 0202 	orr.w	r2, r3, #2
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00b      	beq.n	8003326 <HAL_UART_IRQHandler+0xf6>
 800330e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331e:	f043 0204 	orr.w	r2, r3, #4
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d011      	beq.n	8003356 <HAL_UART_IRQHandler+0x126>
 8003332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b00      	cmp	r3, #0
 800333c:	d105      	bne.n	800334a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800333e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334e:	f043 0208 	orr.w	r2, r3, #8
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 81f2 	beq.w	8003744 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_UART_IRQHandler+0x14e>
 800336c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fb1e 	bl	80039ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf14      	ite	ne
 800338c:	2301      	movne	r3, #1
 800338e:	2300      	moveq	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d103      	bne.n	80033aa <HAL_UART_IRQHandler+0x17a>
 80033a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d04f      	beq.n	800344a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fa28 	bl	8003800 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d041      	beq.n	8003442 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	3314      	adds	r3, #20
 80033c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033cc:	e853 3f00 	ldrex	r3, [r3]
 80033d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80033d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3314      	adds	r3, #20
 80033e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80033ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80033ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80033f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80033fa:	e841 2300 	strex	r3, r2, [r1]
 80033fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1d9      	bne.n	80033be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800340e:	2b00      	cmp	r3, #0
 8003410:	d013      	beq.n	800343a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003416:	4a7e      	ldr	r2, [pc, #504]	@ (8003610 <HAL_UART_IRQHandler+0x3e0>)
 8003418:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe f85a 	bl	80014d8 <HAL_DMA_Abort_IT>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d016      	beq.n	8003458 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003434:	4610      	mov	r0, r2
 8003436:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003438:	e00e      	b.n	8003458 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f993 	bl	8003766 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003440:	e00a      	b.n	8003458 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f98f 	bl	8003766 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003448:	e006      	b.n	8003458 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f98b 	bl	8003766 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003456:	e175      	b.n	8003744 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003458:	bf00      	nop
    return;
 800345a:	e173      	b.n	8003744 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003460:	2b01      	cmp	r3, #1
 8003462:	f040 814f 	bne.w	8003704 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800346a:	f003 0310 	and.w	r3, r3, #16
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 8148 	beq.w	8003704 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 8141 	beq.w	8003704 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 80b6 	beq.w	8003614 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8145 	beq.w	8003748 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034c6:	429a      	cmp	r2, r3
 80034c8:	f080 813e 	bcs.w	8003748 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b20      	cmp	r3, #32
 80034dc:	f000 8088 	beq.w	80035f0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	330c      	adds	r3, #12
 80034e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034ee:	e853 3f00 	ldrex	r3, [r3]
 80034f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80034f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	330c      	adds	r3, #12
 8003508:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800350c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003510:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003514:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003518:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800351c:	e841 2300 	strex	r3, r2, [r1]
 8003520:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003524:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1d9      	bne.n	80034e0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3314      	adds	r3, #20
 8003532:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003534:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003536:	e853 3f00 	ldrex	r3, [r3]
 800353a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800353c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800353e:	f023 0301 	bic.w	r3, r3, #1
 8003542:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3314      	adds	r3, #20
 800354c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003550:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003554:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003556:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003558:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800355c:	e841 2300 	strex	r3, r2, [r1]
 8003560:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003562:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e1      	bne.n	800352c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3314      	adds	r3, #20
 800356e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003570:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003572:	e853 3f00 	ldrex	r3, [r3]
 8003576:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003578:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800357a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800357e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3314      	adds	r3, #20
 8003588:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800358c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800358e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003590:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003592:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003594:	e841 2300 	strex	r3, r2, [r1]
 8003598:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800359a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1e3      	bne.n	8003568 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	330c      	adds	r3, #12
 80035b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035b8:	e853 3f00 	ldrex	r3, [r3]
 80035bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80035be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035c0:	f023 0310 	bic.w	r3, r3, #16
 80035c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	330c      	adds	r3, #12
 80035ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80035d2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80035d4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035da:	e841 2300 	strex	r3, r2, [r1]
 80035de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80035e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1e3      	bne.n	80035ae <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fd ff39 	bl	8001462 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035fe:	b29b      	uxth	r3, r3
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	b29b      	uxth	r3, r3
 8003604:	4619      	mov	r1, r3
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f8b6 	bl	8003778 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800360c:	e09c      	b.n	8003748 <HAL_UART_IRQHandler+0x518>
 800360e:	bf00      	nop
 8003610:	080038c5 	.word	0x080038c5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800361c:	b29b      	uxth	r3, r3
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 808e 	beq.w	800374c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003630:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 8089 	beq.w	800374c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	330c      	adds	r3, #12
 8003640:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003644:	e853 3f00 	ldrex	r3, [r3]
 8003648:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800364a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003650:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	330c      	adds	r3, #12
 800365a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800365e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003660:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003662:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003664:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003666:	e841 2300 	strex	r3, r2, [r1]
 800366a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800366c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1e3      	bne.n	800363a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3314      	adds	r3, #20
 8003678:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367c:	e853 3f00 	ldrex	r3, [r3]
 8003680:	623b      	str	r3, [r7, #32]
   return(result);
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	f023 0301 	bic.w	r3, r3, #1
 8003688:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3314      	adds	r3, #20
 8003692:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003696:	633a      	str	r2, [r7, #48]	@ 0x30
 8003698:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800369c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800369e:	e841 2300 	strex	r3, r2, [r1]
 80036a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1e3      	bne.n	8003672 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	330c      	adds	r3, #12
 80036be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	e853 3f00 	ldrex	r3, [r3]
 80036c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 0310 	bic.w	r3, r3, #16
 80036ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	330c      	adds	r3, #12
 80036d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80036dc:	61fa      	str	r2, [r7, #28]
 80036de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	69b9      	ldr	r1, [r7, #24]
 80036e2:	69fa      	ldr	r2, [r7, #28]
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	617b      	str	r3, [r7, #20]
   return(result);
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e3      	bne.n	80036b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036fa:	4619      	mov	r1, r3
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f83b 	bl	8003778 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003702:	e023      	b.n	800374c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800370c:	2b00      	cmp	r3, #0
 800370e:	d009      	beq.n	8003724 <HAL_UART_IRQHandler+0x4f4>
 8003710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f8e5 	bl	80038ec <UART_Transmit_IT>
    return;
 8003722:	e014      	b.n	800374e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00e      	beq.n	800374e <HAL_UART_IRQHandler+0x51e>
 8003730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f924 	bl	800398a <UART_EndTransmit_IT>
    return;
 8003742:	e004      	b.n	800374e <HAL_UART_IRQHandler+0x51e>
    return;
 8003744:	bf00      	nop
 8003746:	e002      	b.n	800374e <HAL_UART_IRQHandler+0x51e>
      return;
 8003748:	bf00      	nop
 800374a:	e000      	b.n	800374e <HAL_UART_IRQHandler+0x51e>
      return;
 800374c:	bf00      	nop
  }
}
 800374e:	37e8      	adds	r7, #232	@ 0xe8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr

08003766 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr

0800378e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800378e:	b480      	push	{r7}
 8003790:	b085      	sub	sp, #20
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	4613      	mov	r3, r2
 800379a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	88fa      	ldrh	r2, [r7, #6]
 80037a6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	88fa      	ldrh	r2, [r7, #6]
 80037ac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2222      	movs	r2, #34	@ 0x22
 80037b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d007      	beq.n	80037d4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037d2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695a      	ldr	r2, [r3, #20]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0220 	orr.w	r2, r2, #32
 80037f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr

08003800 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003800:	b480      	push	{r7}
 8003802:	b095      	sub	sp, #84	@ 0x54
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	330c      	adds	r3, #12
 800380e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003812:	e853 3f00 	ldrex	r3, [r3]
 8003816:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800381e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	330c      	adds	r3, #12
 8003826:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003828:	643a      	str	r2, [r7, #64]	@ 0x40
 800382a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800382e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003830:	e841 2300 	strex	r3, r2, [r1]
 8003834:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1e5      	bne.n	8003808 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3314      	adds	r3, #20
 8003842:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	e853 3f00 	ldrex	r3, [r3]
 800384a:	61fb      	str	r3, [r7, #28]
   return(result);
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f023 0301 	bic.w	r3, r3, #1
 8003852:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3314      	adds	r3, #20
 800385a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800385c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800385e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003860:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003864:	e841 2300 	strex	r3, r2, [r1]
 8003868:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800386a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1e5      	bne.n	800383c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003874:	2b01      	cmp	r3, #1
 8003876:	d119      	bne.n	80038ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	330c      	adds	r3, #12
 800387e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	e853 3f00 	ldrex	r3, [r3]
 8003886:	60bb      	str	r3, [r7, #8]
   return(result);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f023 0310 	bic.w	r3, r3, #16
 800388e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	330c      	adds	r3, #12
 8003896:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003898:	61ba      	str	r2, [r7, #24]
 800389a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389c:	6979      	ldr	r1, [r7, #20]
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	e841 2300 	strex	r3, r2, [r1]
 80038a4:	613b      	str	r3, [r7, #16]
   return(result);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1e5      	bne.n	8003878 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80038ba:	bf00      	nop
 80038bc:	3754      	adds	r7, #84	@ 0x54
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f7ff ff41 	bl	8003766 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038e4:	bf00      	nop
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b21      	cmp	r3, #33	@ 0x21
 80038fe:	d13e      	bne.n	800397e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003908:	d114      	bne.n	8003934 <UART_Transmit_IT+0x48>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d110      	bne.n	8003934 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003926:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	1c9a      	adds	r2, r3, #2
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	621a      	str	r2, [r3, #32]
 8003932:	e008      	b.n	8003946 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	1c59      	adds	r1, r3, #1
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6211      	str	r1, [r2, #32]
 800393e:	781a      	ldrb	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29b      	uxth	r3, r3
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	4619      	mov	r1, r3
 8003954:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10f      	bne.n	800397a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003968:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003978:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	e000      	b.n	8003980 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800397e:	2302      	movs	r3, #2
  }
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr

0800398a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff fed2 	bl	8003754 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b08c      	sub	sp, #48	@ 0x30
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b22      	cmp	r3, #34	@ 0x22
 80039cc:	f040 80ae 	bne.w	8003b2c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039d8:	d117      	bne.n	8003a0a <UART_Receive_IT+0x50>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d113      	bne.n	8003a0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a02:	1c9a      	adds	r2, r3, #2
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a08:	e026      	b.n	8003a58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a1c:	d007      	beq.n	8003a2e <UART_Receive_IT+0x74>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <UART_Receive_IT+0x82>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a38:	701a      	strb	r2, [r3, #0]
 8003a3a:	e008      	b.n	8003a4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	4619      	mov	r1, r3
 8003a66:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d15d      	bne.n	8003b28 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0220 	bic.w	r2, r2, #32
 8003a7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d135      	bne.n	8003b1e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	330c      	adds	r3, #12
 8003abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	e853 3f00 	ldrex	r3, [r3]
 8003ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f023 0310 	bic.w	r3, r3, #16
 8003ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	330c      	adds	r3, #12
 8003ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad8:	623a      	str	r2, [r7, #32]
 8003ada:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003adc:	69f9      	ldr	r1, [r7, #28]
 8003ade:	6a3a      	ldr	r2, [r7, #32]
 8003ae0:	e841 2300 	strex	r3, r2, [r1]
 8003ae4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e5      	bne.n	8003ab8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	2b10      	cmp	r3, #16
 8003af8:	d10a      	bne.n	8003b10 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b14:	4619      	mov	r1, r3
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff fe2e 	bl	8003778 <HAL_UARTEx_RxEventCallback>
 8003b1c:	e002      	b.n	8003b24 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fc fde0 	bl	80006e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	e002      	b.n	8003b2e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	e000      	b.n	8003b2e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b2c:	2302      	movs	r3, #2
  }
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3730      	adds	r7, #48	@ 0x30
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003b72:	f023 030c 	bic.w	r3, r3, #12
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6812      	ldr	r2, [r2, #0]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a2c      	ldr	r2, [pc, #176]	@ (8003c4c <UART_SetConfig+0x114>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d103      	bne.n	8003ba8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ba0:	f7fe fac8 	bl	8002134 <HAL_RCC_GetPCLK2Freq>
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	e002      	b.n	8003bae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ba8:	f7fe fab0 	bl	800210c <HAL_RCC_GetPCLK1Freq>
 8003bac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009a      	lsls	r2, r3, #2
 8003bb8:	441a      	add	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc4:	4a22      	ldr	r2, [pc, #136]	@ (8003c50 <UART_SetConfig+0x118>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	0119      	lsls	r1, r3, #4
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009a      	lsls	r2, r3, #2
 8003bd8:	441a      	add	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003be4:	4b1a      	ldr	r3, [pc, #104]	@ (8003c50 <UART_SetConfig+0x118>)
 8003be6:	fba3 0302 	umull	r0, r3, r3, r2
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	2064      	movs	r0, #100	@ 0x64
 8003bee:	fb00 f303 	mul.w	r3, r0, r3
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	3332      	adds	r3, #50	@ 0x32
 8003bf8:	4a15      	ldr	r2, [pc, #84]	@ (8003c50 <UART_SetConfig+0x118>)
 8003bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c04:	4419      	add	r1, r3
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009a      	lsls	r2, r3, #2
 8003c10:	441a      	add	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c50 <UART_SetConfig+0x118>)
 8003c1e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	2064      	movs	r0, #100	@ 0x64
 8003c26:	fb00 f303 	mul.w	r3, r0, r3
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	3332      	adds	r3, #50	@ 0x32
 8003c30:	4a07      	ldr	r2, [pc, #28]	@ (8003c50 <UART_SetConfig+0x118>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	f003 020f 	and.w	r2, r3, #15
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	440a      	add	r2, r1
 8003c42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c44:	bf00      	nop
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40013800 	.word	0x40013800
 8003c50:	51eb851f 	.word	0x51eb851f

08003c54 <memset>:
 8003c54:	4603      	mov	r3, r0
 8003c56:	4402      	add	r2, r0
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d100      	bne.n	8003c5e <memset+0xa>
 8003c5c:	4770      	bx	lr
 8003c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c62:	e7f9      	b.n	8003c58 <memset+0x4>

08003c64 <__libc_init_array>:
 8003c64:	b570      	push	{r4, r5, r6, lr}
 8003c66:	2600      	movs	r6, #0
 8003c68:	4d0c      	ldr	r5, [pc, #48]	@ (8003c9c <__libc_init_array+0x38>)
 8003c6a:	4c0d      	ldr	r4, [pc, #52]	@ (8003ca0 <__libc_init_array+0x3c>)
 8003c6c:	1b64      	subs	r4, r4, r5
 8003c6e:	10a4      	asrs	r4, r4, #2
 8003c70:	42a6      	cmp	r6, r4
 8003c72:	d109      	bne.n	8003c88 <__libc_init_array+0x24>
 8003c74:	f000 f828 	bl	8003cc8 <_init>
 8003c78:	2600      	movs	r6, #0
 8003c7a:	4d0a      	ldr	r5, [pc, #40]	@ (8003ca4 <__libc_init_array+0x40>)
 8003c7c:	4c0a      	ldr	r4, [pc, #40]	@ (8003ca8 <__libc_init_array+0x44>)
 8003c7e:	1b64      	subs	r4, r4, r5
 8003c80:	10a4      	asrs	r4, r4, #2
 8003c82:	42a6      	cmp	r6, r4
 8003c84:	d105      	bne.n	8003c92 <__libc_init_array+0x2e>
 8003c86:	bd70      	pop	{r4, r5, r6, pc}
 8003c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c8c:	4798      	blx	r3
 8003c8e:	3601      	adds	r6, #1
 8003c90:	e7ee      	b.n	8003c70 <__libc_init_array+0xc>
 8003c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c96:	4798      	blx	r3
 8003c98:	3601      	adds	r6, #1
 8003c9a:	e7f2      	b.n	8003c82 <__libc_init_array+0x1e>
 8003c9c:	08003d14 	.word	0x08003d14
 8003ca0:	08003d14 	.word	0x08003d14
 8003ca4:	08003d14 	.word	0x08003d14
 8003ca8:	08003d18 	.word	0x08003d18

08003cac <memcpy>:
 8003cac:	440a      	add	r2, r1
 8003cae:	4291      	cmp	r1, r2
 8003cb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cb4:	d100      	bne.n	8003cb8 <memcpy+0xc>
 8003cb6:	4770      	bx	lr
 8003cb8:	b510      	push	{r4, lr}
 8003cba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cbe:	4291      	cmp	r1, r2
 8003cc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cc4:	d1f9      	bne.n	8003cba <memcpy+0xe>
 8003cc6:	bd10      	pop	{r4, pc}

08003cc8 <_init>:
 8003cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cca:	bf00      	nop
 8003ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cce:	bc08      	pop	{r3}
 8003cd0:	469e      	mov	lr, r3
 8003cd2:	4770      	bx	lr

08003cd4 <_fini>:
 8003cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd6:	bf00      	nop
 8003cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cda:	bc08      	pop	{r3}
 8003cdc:	469e      	mov	lr, r3
 8003cde:	4770      	bx	lr
