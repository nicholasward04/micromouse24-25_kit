
TheHammer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007944  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007a50  08007a50  00008a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ac0  08007ac0  000090f8  2**0
                  CONTENTS
  4 .ARM          00000000  08007ac0  08007ac0  000090f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ac0  08007ac0  000090f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ac0  08007ac0  00008ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ac4  08007ac4  00008ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  08007ac8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d00  200000f8  08007bc0  000090f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000df8  08007bc0  00009df8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000090f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001203d  00000000  00000000  00009121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000310c  00000000  00000000  0001b15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0001e270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c69  00000000  00000000  0001f278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1a4  00000000  00000000  0001fee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158f0  00000000  00000000  0003a085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090e43  00000000  00000000  0004f975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e07b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046ec  00000000  00000000  000e07fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000e4ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f8 	.word	0x200000f8
 8000128:	00000000 	.word	0x00000000
 800012c:	08007a38 	.word	0x08007a38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000fc 	.word	0x200000fc
 8000148:	08007a38 	.word	0x08007a38

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_d2f>:
 8000938:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800093c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000940:	bf24      	itt	cs
 8000942:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000946:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800094a:	d90d      	bls.n	8000968 <__aeabi_d2f+0x30>
 800094c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000950:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000954:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000958:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800095c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000960:	bf08      	it	eq
 8000962:	f020 0001 	biceq.w	r0, r0, #1
 8000966:	4770      	bx	lr
 8000968:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800096c:	d121      	bne.n	80009b2 <__aeabi_d2f+0x7a>
 800096e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000972:	bfbc      	itt	lt
 8000974:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000978:	4770      	bxlt	lr
 800097a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000982:	f1c2 0218 	rsb	r2, r2, #24
 8000986:	f1c2 0c20 	rsb	ip, r2, #32
 800098a:	fa10 f30c 	lsls.w	r3, r0, ip
 800098e:	fa20 f002 	lsr.w	r0, r0, r2
 8000992:	bf18      	it	ne
 8000994:	f040 0001 	orrne.w	r0, r0, #1
 8000998:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a4:	ea40 000c 	orr.w	r0, r0, ip
 80009a8:	fa23 f302 	lsr.w	r3, r3, r2
 80009ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b0:	e7cc      	b.n	800094c <__aeabi_d2f+0x14>
 80009b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009b6:	d107      	bne.n	80009c8 <__aeabi_d2f+0x90>
 80009b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009bc:	bf1e      	ittt	ne
 80009be:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009c2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009c6:	4770      	bxne	lr
 80009c8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <__aeabi_frsub>:
 80009d8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009dc:	e002      	b.n	80009e4 <__addsf3>
 80009de:	bf00      	nop

080009e0 <__aeabi_fsub>:
 80009e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009e4 <__addsf3>:
 80009e4:	0042      	lsls	r2, r0, #1
 80009e6:	bf1f      	itttt	ne
 80009e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009ec:	ea92 0f03 	teqne	r2, r3
 80009f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009f8:	d06a      	beq.n	8000ad0 <__addsf3+0xec>
 80009fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a02:	bfc1      	itttt	gt
 8000a04:	18d2      	addgt	r2, r2, r3
 8000a06:	4041      	eorgt	r1, r0
 8000a08:	4048      	eorgt	r0, r1
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	bfb8      	it	lt
 8000a0e:	425b      	neglt	r3, r3
 8000a10:	2b19      	cmp	r3, #25
 8000a12:	bf88      	it	hi
 8000a14:	4770      	bxhi	lr
 8000a16:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a1a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a1e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a22:	bf18      	it	ne
 8000a24:	4240      	negne	r0, r0
 8000a26:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a2a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a2e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a32:	bf18      	it	ne
 8000a34:	4249      	negne	r1, r1
 8000a36:	ea92 0f03 	teq	r2, r3
 8000a3a:	d03f      	beq.n	8000abc <__addsf3+0xd8>
 8000a3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a40:	fa41 fc03 	asr.w	ip, r1, r3
 8000a44:	eb10 000c 	adds.w	r0, r0, ip
 8000a48:	f1c3 0320 	rsb	r3, r3, #32
 8000a4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a50:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a54:	d502      	bpl.n	8000a5c <__addsf3+0x78>
 8000a56:	4249      	negs	r1, r1
 8000a58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a5c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a60:	d313      	bcc.n	8000a8a <__addsf3+0xa6>
 8000a62:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a66:	d306      	bcc.n	8000a76 <__addsf3+0x92>
 8000a68:	0840      	lsrs	r0, r0, #1
 8000a6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a6e:	f102 0201 	add.w	r2, r2, #1
 8000a72:	2afe      	cmp	r2, #254	@ 0xfe
 8000a74:	d251      	bcs.n	8000b1a <__addsf3+0x136>
 8000a76:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a7e:	bf08      	it	eq
 8000a80:	f020 0001 	biceq.w	r0, r0, #1
 8000a84:	ea40 0003 	orr.w	r0, r0, r3
 8000a88:	4770      	bx	lr
 8000a8a:	0049      	lsls	r1, r1, #1
 8000a8c:	eb40 0000 	adc.w	r0, r0, r0
 8000a90:	3a01      	subs	r2, #1
 8000a92:	bf28      	it	cs
 8000a94:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a98:	d2ed      	bcs.n	8000a76 <__addsf3+0x92>
 8000a9a:	fab0 fc80 	clz	ip, r0
 8000a9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa2:	ebb2 020c 	subs.w	r2, r2, ip
 8000aa6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aaa:	bfaa      	itet	ge
 8000aac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab0:	4252      	neglt	r2, r2
 8000ab2:	4318      	orrge	r0, r3
 8000ab4:	bfbc      	itt	lt
 8000ab6:	40d0      	lsrlt	r0, r2
 8000ab8:	4318      	orrlt	r0, r3
 8000aba:	4770      	bx	lr
 8000abc:	f092 0f00 	teq	r2, #0
 8000ac0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ac4:	bf06      	itte	eq
 8000ac6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000aca:	3201      	addeq	r2, #1
 8000acc:	3b01      	subne	r3, #1
 8000ace:	e7b5      	b.n	8000a3c <__addsf3+0x58>
 8000ad0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ad8:	bf18      	it	ne
 8000ada:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ade:	d021      	beq.n	8000b24 <__addsf3+0x140>
 8000ae0:	ea92 0f03 	teq	r2, r3
 8000ae4:	d004      	beq.n	8000af0 <__addsf3+0x10c>
 8000ae6:	f092 0f00 	teq	r2, #0
 8000aea:	bf08      	it	eq
 8000aec:	4608      	moveq	r0, r1
 8000aee:	4770      	bx	lr
 8000af0:	ea90 0f01 	teq	r0, r1
 8000af4:	bf1c      	itt	ne
 8000af6:	2000      	movne	r0, #0
 8000af8:	4770      	bxne	lr
 8000afa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000afe:	d104      	bne.n	8000b0a <__addsf3+0x126>
 8000b00:	0040      	lsls	r0, r0, #1
 8000b02:	bf28      	it	cs
 8000b04:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b08:	4770      	bx	lr
 8000b0a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b0e:	bf3c      	itt	cc
 8000b10:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b14:	4770      	bxcc	lr
 8000b16:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b1a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b22:	4770      	bx	lr
 8000b24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b28:	bf16      	itet	ne
 8000b2a:	4608      	movne	r0, r1
 8000b2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b30:	4601      	movne	r1, r0
 8000b32:	0242      	lsls	r2, r0, #9
 8000b34:	bf06      	itte	eq
 8000b36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3a:	ea90 0f01 	teqeq	r0, r1
 8000b3e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_ui2f>:
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e004      	b.n	8000b54 <__aeabi_i2f+0x8>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_i2f>:
 8000b4c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b50:	bf48      	it	mi
 8000b52:	4240      	negmi	r0, r0
 8000b54:	ea5f 0c00 	movs.w	ip, r0
 8000b58:	bf08      	it	eq
 8000b5a:	4770      	bxeq	lr
 8000b5c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b60:	4601      	mov	r1, r0
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	e01c      	b.n	8000ba2 <__aeabi_l2f+0x2a>

08000b68 <__aeabi_ul2f>:
 8000b68:	ea50 0201 	orrs.w	r2, r0, r1
 8000b6c:	bf08      	it	eq
 8000b6e:	4770      	bxeq	lr
 8000b70:	f04f 0300 	mov.w	r3, #0
 8000b74:	e00a      	b.n	8000b8c <__aeabi_l2f+0x14>
 8000b76:	bf00      	nop

08000b78 <__aeabi_l2f>:
 8000b78:	ea50 0201 	orrs.w	r2, r0, r1
 8000b7c:	bf08      	it	eq
 8000b7e:	4770      	bxeq	lr
 8000b80:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__aeabi_l2f+0x14>
 8000b86:	4240      	negs	r0, r0
 8000b88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8c:	ea5f 0c01 	movs.w	ip, r1
 8000b90:	bf02      	ittt	eq
 8000b92:	4684      	moveq	ip, r0
 8000b94:	4601      	moveq	r1, r0
 8000b96:	2000      	moveq	r0, #0
 8000b98:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ba2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ba6:	fabc f28c 	clz	r2, ip
 8000baa:	3a08      	subs	r2, #8
 8000bac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb0:	db10      	blt.n	8000bd4 <__aeabi_l2f+0x5c>
 8000bb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb6:	4463      	add	r3, ip
 8000bb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bbc:	f1c2 0220 	rsb	r2, r2, #32
 8000bc0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000bc8:	eb43 0002 	adc.w	r0, r3, r2
 8000bcc:	bf08      	it	eq
 8000bce:	f020 0001 	biceq.w	r0, r0, #1
 8000bd2:	4770      	bx	lr
 8000bd4:	f102 0220 	add.w	r2, r2, #32
 8000bd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bdc:	f1c2 0220 	rsb	r2, r2, #32
 8000be0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be4:	fa21 f202 	lsr.w	r2, r1, r2
 8000be8:	eb43 0002 	adc.w	r0, r3, r2
 8000bec:	bf08      	it	eq
 8000bee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_fmul>:
 8000bf4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c02:	ea92 0f0c 	teqne	r2, ip
 8000c06:	ea93 0f0c 	teqne	r3, ip
 8000c0a:	d06f      	beq.n	8000cec <__aeabi_fmul+0xf8>
 8000c0c:	441a      	add	r2, r3
 8000c0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c12:	0240      	lsls	r0, r0, #9
 8000c14:	bf18      	it	ne
 8000c16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1a:	d01e      	beq.n	8000c5a <__aeabi_fmul+0x66>
 8000c1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c28:	fba0 3101 	umull	r3, r1, r0, r1
 8000c2c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c30:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c34:	bf3e      	ittt	cc
 8000c36:	0049      	lslcc	r1, r1, #1
 8000c38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c3c:	005b      	lslcc	r3, r3, #1
 8000c3e:	ea40 0001 	orr.w	r0, r0, r1
 8000c42:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c46:	2afd      	cmp	r2, #253	@ 0xfd
 8000c48:	d81d      	bhi.n	8000c86 <__aeabi_fmul+0x92>
 8000c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c52:	bf08      	it	eq
 8000c54:	f020 0001 	biceq.w	r0, r0, #1
 8000c58:	4770      	bx	lr
 8000c5a:	f090 0f00 	teq	r0, #0
 8000c5e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c62:	bf08      	it	eq
 8000c64:	0249      	lsleq	r1, r1, #9
 8000c66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c6e:	3a7f      	subs	r2, #127	@ 0x7f
 8000c70:	bfc2      	ittt	gt
 8000c72:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7a:	4770      	bxgt	lr
 8000c7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	3a01      	subs	r2, #1
 8000c86:	dc5d      	bgt.n	8000d44 <__aeabi_fmul+0x150>
 8000c88:	f112 0f19 	cmn.w	r2, #25
 8000c8c:	bfdc      	itt	le
 8000c8e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c92:	4770      	bxle	lr
 8000c94:	f1c2 0200 	rsb	r2, r2, #0
 8000c98:	0041      	lsls	r1, r0, #1
 8000c9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c9e:	f1c2 0220 	rsb	r2, r2, #32
 8000ca2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000caa:	f140 0000 	adc.w	r0, r0, #0
 8000cae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb2:	bf08      	it	eq
 8000cb4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb8:	4770      	bx	lr
 8000cba:	f092 0f00 	teq	r2, #0
 8000cbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cc2:	bf02      	ittt	eq
 8000cc4:	0040      	lsleq	r0, r0, #1
 8000cc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cca:	3a01      	subeq	r2, #1
 8000ccc:	d0f9      	beq.n	8000cc2 <__aeabi_fmul+0xce>
 8000cce:	ea40 000c 	orr.w	r0, r0, ip
 8000cd2:	f093 0f00 	teq	r3, #0
 8000cd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cda:	bf02      	ittt	eq
 8000cdc:	0049      	lsleq	r1, r1, #1
 8000cde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ce2:	3b01      	subeq	r3, #1
 8000ce4:	d0f9      	beq.n	8000cda <__aeabi_fmul+0xe6>
 8000ce6:	ea41 010c 	orr.w	r1, r1, ip
 8000cea:	e78f      	b.n	8000c0c <__aeabi_fmul+0x18>
 8000cec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf0:	ea92 0f0c 	teq	r2, ip
 8000cf4:	bf18      	it	ne
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d00a      	beq.n	8000d12 <__aeabi_fmul+0x11e>
 8000cfc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d00:	bf18      	it	ne
 8000d02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d06:	d1d8      	bne.n	8000cba <__aeabi_fmul+0xc6>
 8000d08:	ea80 0001 	eor.w	r0, r0, r1
 8000d0c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d10:	4770      	bx	lr
 8000d12:	f090 0f00 	teq	r0, #0
 8000d16:	bf17      	itett	ne
 8000d18:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d1c:	4608      	moveq	r0, r1
 8000d1e:	f091 0f00 	teqne	r1, #0
 8000d22:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d26:	d014      	beq.n	8000d52 <__aeabi_fmul+0x15e>
 8000d28:	ea92 0f0c 	teq	r2, ip
 8000d2c:	d101      	bne.n	8000d32 <__aeabi_fmul+0x13e>
 8000d2e:	0242      	lsls	r2, r0, #9
 8000d30:	d10f      	bne.n	8000d52 <__aeabi_fmul+0x15e>
 8000d32:	ea93 0f0c 	teq	r3, ip
 8000d36:	d103      	bne.n	8000d40 <__aeabi_fmul+0x14c>
 8000d38:	024b      	lsls	r3, r1, #9
 8000d3a:	bf18      	it	ne
 8000d3c:	4608      	movne	r0, r1
 8000d3e:	d108      	bne.n	8000d52 <__aeabi_fmul+0x15e>
 8000d40:	ea80 0001 	eor.w	r0, r0, r1
 8000d44:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d50:	4770      	bx	lr
 8000d52:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d56:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_fdiv>:
 8000d5c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d64:	bf1e      	ittt	ne
 8000d66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6a:	ea92 0f0c 	teqne	r2, ip
 8000d6e:	ea93 0f0c 	teqne	r3, ip
 8000d72:	d069      	beq.n	8000e48 <__aeabi_fdiv+0xec>
 8000d74:	eba2 0203 	sub.w	r2, r2, r3
 8000d78:	ea80 0c01 	eor.w	ip, r0, r1
 8000d7c:	0249      	lsls	r1, r1, #9
 8000d7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d82:	d037      	beq.n	8000df4 <__aeabi_fdiv+0x98>
 8000d84:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d94:	428b      	cmp	r3, r1
 8000d96:	bf38      	it	cc
 8000d98:	005b      	lslcc	r3, r3, #1
 8000d9a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d9e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000da2:	428b      	cmp	r3, r1
 8000da4:	bf24      	itt	cs
 8000da6:	1a5b      	subcs	r3, r3, r1
 8000da8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db0:	bf24      	itt	cs
 8000db2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000db6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dbe:	bf24      	itt	cs
 8000dc0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dc8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dcc:	bf24      	itt	cs
 8000dce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dd6:	011b      	lsls	r3, r3, #4
 8000dd8:	bf18      	it	ne
 8000dda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dde:	d1e0      	bne.n	8000da2 <__aeabi_fdiv+0x46>
 8000de0:	2afd      	cmp	r2, #253	@ 0xfd
 8000de2:	f63f af50 	bhi.w	8000c86 <__aeabi_fmul+0x92>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfc:	327f      	adds	r2, #127	@ 0x7f
 8000dfe:	bfc2      	ittt	gt
 8000e00:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e08:	4770      	bxgt	lr
 8000e0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e0e:	f04f 0300 	mov.w	r3, #0
 8000e12:	3a01      	subs	r2, #1
 8000e14:	e737      	b.n	8000c86 <__aeabi_fmul+0x92>
 8000e16:	f092 0f00 	teq	r2, #0
 8000e1a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e1e:	bf02      	ittt	eq
 8000e20:	0040      	lsleq	r0, r0, #1
 8000e22:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e26:	3a01      	subeq	r2, #1
 8000e28:	d0f9      	beq.n	8000e1e <__aeabi_fdiv+0xc2>
 8000e2a:	ea40 000c 	orr.w	r0, r0, ip
 8000e2e:	f093 0f00 	teq	r3, #0
 8000e32:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e36:	bf02      	ittt	eq
 8000e38:	0049      	lsleq	r1, r1, #1
 8000e3a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e3e:	3b01      	subeq	r3, #1
 8000e40:	d0f9      	beq.n	8000e36 <__aeabi_fdiv+0xda>
 8000e42:	ea41 010c 	orr.w	r1, r1, ip
 8000e46:	e795      	b.n	8000d74 <__aeabi_fdiv+0x18>
 8000e48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	d108      	bne.n	8000e64 <__aeabi_fdiv+0x108>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	f47f af7d 	bne.w	8000d52 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	f47f af70 	bne.w	8000d40 <__aeabi_fmul+0x14c>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e776      	b.n	8000d52 <__aeabi_fmul+0x15e>
 8000e64:	ea93 0f0c 	teq	r3, ip
 8000e68:	d104      	bne.n	8000e74 <__aeabi_fdiv+0x118>
 8000e6a:	024b      	lsls	r3, r1, #9
 8000e6c:	f43f af4c 	beq.w	8000d08 <__aeabi_fmul+0x114>
 8000e70:	4608      	mov	r0, r1
 8000e72:	e76e      	b.n	8000d52 <__aeabi_fmul+0x15e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e7e:	d1ca      	bne.n	8000e16 <__aeabi_fdiv+0xba>
 8000e80:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e84:	f47f af5c 	bne.w	8000d40 <__aeabi_fmul+0x14c>
 8000e88:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e8c:	f47f af3c 	bne.w	8000d08 <__aeabi_fmul+0x114>
 8000e90:	e75f      	b.n	8000d52 <__aeabi_fmul+0x15e>
 8000e92:	bf00      	nop

08000e94 <__gesf2>:
 8000e94:	f04f 3cff 	mov.w	ip, #4294967295
 8000e98:	e006      	b.n	8000ea8 <__cmpsf2+0x4>
 8000e9a:	bf00      	nop

08000e9c <__lesf2>:
 8000e9c:	f04f 0c01 	mov.w	ip, #1
 8000ea0:	e002      	b.n	8000ea8 <__cmpsf2+0x4>
 8000ea2:	bf00      	nop

08000ea4 <__cmpsf2>:
 8000ea4:	f04f 0c01 	mov.w	ip, #1
 8000ea8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eb8:	bf18      	it	ne
 8000eba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ebe:	d011      	beq.n	8000ee4 <__cmpsf2+0x40>
 8000ec0:	b001      	add	sp, #4
 8000ec2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ec6:	bf18      	it	ne
 8000ec8:	ea90 0f01 	teqne	r0, r1
 8000ecc:	bf58      	it	pl
 8000ece:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed2:	bf88      	it	hi
 8000ed4:	17c8      	asrhi	r0, r1, #31
 8000ed6:	bf38      	it	cc
 8000ed8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000edc:	bf18      	it	ne
 8000ede:	f040 0001 	orrne.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ee8:	d102      	bne.n	8000ef0 <__cmpsf2+0x4c>
 8000eea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eee:	d105      	bne.n	8000efc <__cmpsf2+0x58>
 8000ef0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef4:	d1e4      	bne.n	8000ec0 <__cmpsf2+0x1c>
 8000ef6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efa:	d0e1      	beq.n	8000ec0 <__cmpsf2+0x1c>
 8000efc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <__aeabi_cfrcmple>:
 8000f04:	4684      	mov	ip, r0
 8000f06:	4608      	mov	r0, r1
 8000f08:	4661      	mov	r1, ip
 8000f0a:	e7ff      	b.n	8000f0c <__aeabi_cfcmpeq>

08000f0c <__aeabi_cfcmpeq>:
 8000f0c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f0e:	f7ff ffc9 	bl	8000ea4 <__cmpsf2>
 8000f12:	2800      	cmp	r0, #0
 8000f14:	bf48      	it	mi
 8000f16:	f110 0f00 	cmnmi.w	r0, #0
 8000f1a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f1c <__aeabi_fcmpeq>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff fff4 	bl	8000f0c <__aeabi_cfcmpeq>
 8000f24:	bf0c      	ite	eq
 8000f26:	2001      	moveq	r0, #1
 8000f28:	2000      	movne	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmplt>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffea 	bl	8000f0c <__aeabi_cfcmpeq>
 8000f38:	bf34      	ite	cc
 8000f3a:	2001      	movcc	r0, #1
 8000f3c:	2000      	movcs	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_fcmple>:
 8000f44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f48:	f7ff ffe0 	bl	8000f0c <__aeabi_cfcmpeq>
 8000f4c:	bf94      	ite	ls
 8000f4e:	2001      	movls	r0, #1
 8000f50:	2000      	movhi	r0, #0
 8000f52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f56:	bf00      	nop

08000f58 <__aeabi_fcmpge>:
 8000f58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f5c:	f7ff ffd2 	bl	8000f04 <__aeabi_cfrcmple>
 8000f60:	bf94      	ite	ls
 8000f62:	2001      	movls	r0, #1
 8000f64:	2000      	movhi	r0, #0
 8000f66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6a:	bf00      	nop

08000f6c <__aeabi_fcmpgt>:
 8000f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f70:	f7ff ffc8 	bl	8000f04 <__aeabi_cfrcmple>
 8000f74:	bf34      	ite	cc
 8000f76:	2001      	movcc	r0, #1
 8000f78:	2000      	movcs	r0, #0
 8000f7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7e:	bf00      	nop

08000f80 <__aeabi_f2uiz>:
 8000f80:	0042      	lsls	r2, r0, #1
 8000f82:	d20e      	bcs.n	8000fa2 <__aeabi_f2uiz+0x22>
 8000f84:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f88:	d30b      	bcc.n	8000fa2 <__aeabi_f2uiz+0x22>
 8000f8a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f8e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f92:	d409      	bmi.n	8000fa8 <__aeabi_f2uiz+0x28>
 8000f94:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f9c:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa0:	4770      	bx	lr
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	4770      	bx	lr
 8000fa8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fac:	d101      	bne.n	8000fb2 <__aeabi_f2uiz+0x32>
 8000fae:	0242      	lsls	r2, r0, #9
 8000fb0:	d102      	bne.n	8000fb8 <__aeabi_f2uiz+0x38>
 8000fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb6:	4770      	bx	lr
 8000fb8:	f04f 0000 	mov.w	r0, #0
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc6:	f002 ffe3 	bl	8003f90 <HAL_Init>

  /* USER CODE BEGIN Init */
  LED_Power_Init();
 8000fca:	f002 f939 	bl	8003240 <LED_Power_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fce:	f000 f875 	bl	80010bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd2:	f000 fa97 	bl	8001504 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fd6:	f000 f8c7 	bl	8001168 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000fda:	f000 f941 	bl	8001260 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fde:	f000 f9bf 	bl	8001360 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fe2:	f000 fa11 	bl	8001408 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000fe6:	f000 fa63 	bl	80014b0 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8000fea:	f000 f8fb 	bl	80011e4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t startBuff;
  HAL_UART_Receive_IT(&huart1, &startBuff, 1);
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4826      	ldr	r0, [pc, #152]	@ (8001090 <main+0xd0>)
 8000ff6:	f005 fe90 	bl	8006d1a <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000ffa:	2108      	movs	r1, #8
 8000ffc:	4825      	ldr	r0, [pc, #148]	@ (8001094 <main+0xd4>)
 8000ffe:	f004 fe57 	bl	8005cb0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001002:	210c      	movs	r1, #12
 8001004:	4823      	ldr	r0, [pc, #140]	@ (8001094 <main+0xd4>)
 8001006:	f004 fe53 	bl	8005cb0 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800100a:	213c      	movs	r1, #60	@ 0x3c
 800100c:	4822      	ldr	r0, [pc, #136]	@ (8001098 <main+0xd8>)
 800100e:	f004 ff93 	bl	8005f38 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001012:	213c      	movs	r1, #60	@ 0x3c
 8001014:	4821      	ldr	r0, [pc, #132]	@ (800109c <main+0xdc>)
 8001016:	f004 ff8f 	bl	8005f38 <HAL_TIM_Encoder_Start_IT>

  // Initialize maze and set initial goal cells (center of 16x16 maze)
  Maze_Init(&maze);
 800101a:	4821      	ldr	r0, [pc, #132]	@ (80010a0 <main+0xe0>)
 800101c:	f001 fbd1 	bl	80027c2 <Maze_Init>
  Set_Goal_Cell(&maze, 4);
 8001020:	2104      	movs	r1, #4
 8001022:	481f      	ldr	r0, [pc, #124]	@ (80010a0 <main+0xe0>)
 8001024:	f001 f9b6 	bl	8002394 <Set_Goal_Cell>

  // Initialize mouse state to 0
  bzero(&mouse_state, sizeof(mouse_state_t));
 8001028:	4b1e      	ldr	r3, [pc, #120]	@ (80010a4 <main+0xe4>)
 800102a:	4618      	mov	r0, r3
 800102c:	2320      	movs	r3, #32
 800102e:	461a      	mov	r2, r3
 8001030:	2100      	movs	r1, #0
 8001032:	f006 fc67 	bl	8007904 <memset>

  Clear_Profile(&forward_profile);
 8001036:	481c      	ldr	r0, [pc, #112]	@ (80010a8 <main+0xe8>)
 8001038:	f001 fef8 	bl	8002e2c <Clear_Profile>
  Clear_Profile(&rotational_profile);
 800103c:	481b      	ldr	r0, [pc, #108]	@ (80010ac <main+0xec>)
 800103e:	f001 fef5 	bl	8002e2c <Clear_Profile>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (armed) {
 8001042:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <main+0xf0>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d01e      	beq.n	8001088 <main+0xc8>
		  adjust_steering = true;
 800104a:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <main+0xf4>)
 800104c:	2201      	movs	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]
		  switch (mouse_mode) {
 8001050:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <main+0xf8>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d005      	beq.n	8001064 <main+0xa4>
 8001058:	2b02      	cmp	r3, #2
 800105a:	dcf2      	bgt.n	8001042 <main+0x82>
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00c      	beq.n	800107a <main+0xba>
 8001060:	2b01      	cmp	r3, #1
			  case SEARCHING:
				  adjust_steering = true;
				  Search_Mode(&maze);
				  break;
			  case RACING:
				  break;
 8001062:	e014      	b.n	800108e <main+0xce>
				  Set_Direction(MOTOR_LEFT, FORWARD);
 8001064:	2100      	movs	r1, #0
 8001066:	2000      	movs	r0, #0
 8001068:	f001 fdb2 	bl	8002bd0 <Set_Direction>
				  Set_PWM(MOTOR_LEFT, 1000);
 800106c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001070:	2000      	movs	r0, #0
 8001072:	f001 fd81 	bl	8002b78 <Set_PWM>
				  while(1);
 8001076:	bf00      	nop
 8001078:	e7fd      	b.n	8001076 <main+0xb6>
				  adjust_steering = true;
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <main+0xf4>)
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]
				  Search_Mode(&maze);
 8001080:	4807      	ldr	r0, [pc, #28]	@ (80010a0 <main+0xe0>)
 8001082:	f001 fbcd 	bl	8002820 <Search_Mode>
				  break;
 8001086:	e002      	b.n	800108e <main+0xce>
		  }
	  }
	  else {
		  adjust_steering = false;
 8001088:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <main+0xf4>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
	  if (armed) {
 800108e:	e7d8      	b.n	8001042 <main+0x82>
 8001090:	2000024c 	.word	0x2000024c
 8001094:	20000174 	.word	0x20000174
 8001098:	20000204 	.word	0x20000204
 800109c:	200001bc 	.word	0x200001bc
 80010a0:	200002cc 	.word	0x200002cc
 80010a4:	20000298 	.word	0x20000298
 80010a8:	20000bf8 	.word	0x20000bf8
 80010ac:	20000c1c 	.word	0x20000c1c
 80010b0:	200002c0 	.word	0x200002c0
 80010b4:	20000ca3 	.word	0x20000ca3
 80010b8:	20000000 	.word	0x20000000

080010bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b094      	sub	sp, #80	@ 0x50
 80010c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010c6:	2228      	movs	r2, #40	@ 0x28
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f006 fc1a 	bl	8007904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ec:	2302      	movs	r3, #2
 80010ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f0:	2301      	movs	r3, #1
 80010f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f4:	2310      	movs	r3, #16
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f8:	2302      	movs	r3, #2
 80010fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80010fc:	2300      	movs	r3, #0
 80010fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001100:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001104:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001106:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800110a:	4618      	mov	r0, r3
 800110c:	f003 ffac 	bl	8005068 <HAL_RCC_OscConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001116:	f000 fad4 	bl	80016c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111a:	230f      	movs	r3, #15
 800111c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111e:	2302      	movs	r3, #2
 8001120:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	2101      	movs	r1, #1
 8001134:	4618      	mov	r0, r3
 8001136:	f004 fa19 	bl	800556c <HAL_RCC_ClockConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001140:	f000 fabf 	bl	80016c2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001144:	2302      	movs	r3, #2
 8001146:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001148:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800114c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	4618      	mov	r0, r3
 8001152:	f004 fb99 	bl	8005888 <HAL_RCCEx_PeriphCLKConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800115c:	f000 fab1 	bl	80016c2 <Error_Handler>
  }
}
 8001160:	bf00      	nop
 8001162:	3750      	adds	r7, #80	@ 0x50
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001178:	4b18      	ldr	r3, [pc, #96]	@ (80011dc <MX_ADC1_Init+0x74>)
 800117a:	4a19      	ldr	r2, [pc, #100]	@ (80011e0 <MX_ADC1_Init+0x78>)
 800117c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800117e:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <MX_ADC1_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001184:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <MX_ADC1_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800118a:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <MX_ADC1_Init+0x74>)
 800118c:	2200      	movs	r2, #0
 800118e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <MX_ADC1_Init+0x74>)
 8001192:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001196:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001198:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <MX_ADC1_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800119e:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <MX_ADC1_Init+0x74>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a4:	480d      	ldr	r0, [pc, #52]	@ (80011dc <MX_ADC1_Init+0x74>)
 80011a6:	f002 ff79 	bl	800409c <HAL_ADC_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80011b0:	f000 fa87 	bl	80016c2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011b4:	2305      	movs	r3, #5
 80011b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b8:	2301      	movs	r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_ADC1_Init+0x74>)
 80011c6:	f003 fa2d 	bl	8004624 <HAL_ADC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80011d0:	f000 fa77 	bl	80016c2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000114 	.word	0x20000114
 80011e0:	40012400 	.word	0x40012400

080011e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011f4:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <MX_ADC2_Init+0x74>)
 80011f6:	4a19      	ldr	r2, [pc, #100]	@ (800125c <MX_ADC2_Init+0x78>)
 80011f8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011fa:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <MX_ADC2_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001200:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <MX_ADC2_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001206:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <MX_ADC2_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <MX_ADC2_Init+0x74>)
 800120e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001212:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001214:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <MX_ADC2_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800121a:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <MX_ADC2_Init+0x74>)
 800121c:	2201      	movs	r2, #1
 800121e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001220:	480d      	ldr	r0, [pc, #52]	@ (8001258 <MX_ADC2_Init+0x74>)
 8001222:	f002 ff3b 	bl	800409c <HAL_ADC_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800122c:	f000 fa49 	bl	80016c2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001230:	2301      	movs	r3, #1
 8001232:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001234:	2301      	movs	r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4619      	mov	r1, r3
 8001240:	4805      	ldr	r0, [pc, #20]	@ (8001258 <MX_ADC2_Init+0x74>)
 8001242:	f003 f9ef 	bl	8004624 <HAL_ADC_ConfigChannel>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800124c:	f000 fa39 	bl	80016c2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000144 	.word	0x20000144
 800125c:	40012800 	.word	0x40012800

08001260 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08e      	sub	sp, #56	@ 0x38
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001266:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001274:	f107 0320 	add.w	r3, r7, #32
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	615a      	str	r2, [r3, #20]
 800128e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001290:	4b32      	ldr	r3, [pc, #200]	@ (800135c <MX_TIM2_Init+0xfc>)
 8001292:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001296:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001298:	4b30      	ldr	r3, [pc, #192]	@ (800135c <MX_TIM2_Init+0xfc>)
 800129a:	2200      	movs	r2, #0
 800129c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129e:	4b2f      	ldr	r3, [pc, #188]	@ (800135c <MX_TIM2_Init+0xfc>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2047;
 80012a4:	4b2d      	ldr	r3, [pc, #180]	@ (800135c <MX_TIM2_Init+0xfc>)
 80012a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80012aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ac:	4b2b      	ldr	r3, [pc, #172]	@ (800135c <MX_TIM2_Init+0xfc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012b2:	4b2a      	ldr	r3, [pc, #168]	@ (800135c <MX_TIM2_Init+0xfc>)
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012b8:	4828      	ldr	r0, [pc, #160]	@ (800135c <MX_TIM2_Init+0xfc>)
 80012ba:	f004 fc51 	bl	8005b60 <HAL_TIM_Base_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80012c4:	f000 f9fd 	bl	80016c2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4821      	ldr	r0, [pc, #132]	@ (800135c <MX_TIM2_Init+0xfc>)
 80012d6:	f005 f88f 	bl	80063f8 <HAL_TIM_ConfigClockSource>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80012e0:	f000 f9ef 	bl	80016c2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012e4:	481d      	ldr	r0, [pc, #116]	@ (800135c <MX_TIM2_Init+0xfc>)
 80012e6:	f004 fc8a 	bl	8005bfe <HAL_TIM_PWM_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80012f0:	f000 f9e7 	bl	80016c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012fc:	f107 0320 	add.w	r3, r7, #32
 8001300:	4619      	mov	r1, r3
 8001302:	4816      	ldr	r0, [pc, #88]	@ (800135c <MX_TIM2_Init+0xfc>)
 8001304:	f005 fc14 	bl	8006b30 <HAL_TIMEx_MasterConfigSynchronization>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800130e:	f000 f9d8 	bl	80016c2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001312:	2360      	movs	r3, #96	@ 0x60
 8001314:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2208      	movs	r2, #8
 8001326:	4619      	mov	r1, r3
 8001328:	480c      	ldr	r0, [pc, #48]	@ (800135c <MX_TIM2_Init+0xfc>)
 800132a:	f004 ffa3 	bl	8006274 <HAL_TIM_PWM_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001334:	f000 f9c5 	bl	80016c2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	220c      	movs	r2, #12
 800133c:	4619      	mov	r1, r3
 800133e:	4807      	ldr	r0, [pc, #28]	@ (800135c <MX_TIM2_Init+0xfc>)
 8001340:	f004 ff98 	bl	8006274 <HAL_TIM_PWM_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800134a:	f000 f9ba 	bl	80016c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800134e:	4803      	ldr	r0, [pc, #12]	@ (800135c <MX_TIM2_Init+0xfc>)
 8001350:	f002 fcdc 	bl	8003d0c <HAL_TIM_MspPostInit>

}
 8001354:	bf00      	nop
 8001356:	3738      	adds	r7, #56	@ 0x38
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000174 	.word	0x20000174

08001360 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08c      	sub	sp, #48	@ 0x30
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	2224      	movs	r2, #36	@ 0x24
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f006 fac8 	bl	8007904 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800137c:	4b20      	ldr	r3, [pc, #128]	@ (8001400 <MX_TIM3_Init+0xa0>)
 800137e:	4a21      	ldr	r2, [pc, #132]	@ (8001404 <MX_TIM3_Init+0xa4>)
 8001380:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001382:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <MX_TIM3_Init+0xa0>)
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b1d      	ldr	r3, [pc, #116]	@ (8001400 <MX_TIM3_Init+0xa0>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800138e:	4b1c      	ldr	r3, [pc, #112]	@ (8001400 <MX_TIM3_Init+0xa0>)
 8001390:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001394:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001396:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <MX_TIM3_Init+0xa0>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139c:	4b18      	ldr	r3, [pc, #96]	@ (8001400 <MX_TIM3_Init+0xa0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013a2:	2303      	movs	r3, #3
 80013a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80013a6:	2302      	movs	r3, #2
 80013a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013aa:	2301      	movs	r3, #1
 80013ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80013b6:	2302      	movs	r3, #2
 80013b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013ba:	2301      	movs	r3, #1
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	4619      	mov	r1, r3
 80013cc:	480c      	ldr	r0, [pc, #48]	@ (8001400 <MX_TIM3_Init+0xa0>)
 80013ce:	f004 fd11 	bl	8005df4 <HAL_TIM_Encoder_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80013d8:	f000 f973 	bl	80016c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	@ (8001400 <MX_TIM3_Init+0xa0>)
 80013ea:	f005 fba1 	bl	8006b30 <HAL_TIMEx_MasterConfigSynchronization>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80013f4:	f000 f965 	bl	80016c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	3730      	adds	r7, #48	@ 0x30
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200001bc 	.word	0x200001bc
 8001404:	40000400 	.word	0x40000400

08001408 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08c      	sub	sp, #48	@ 0x30
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	2224      	movs	r2, #36	@ 0x24
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f006 fa74 	bl	8007904 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001424:	4b20      	ldr	r3, [pc, #128]	@ (80014a8 <MX_TIM4_Init+0xa0>)
 8001426:	4a21      	ldr	r2, [pc, #132]	@ (80014ac <MX_TIM4_Init+0xa4>)
 8001428:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800142a:	4b1f      	ldr	r3, [pc, #124]	@ (80014a8 <MX_TIM4_Init+0xa0>)
 800142c:	2200      	movs	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001430:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <MX_TIM4_Init+0xa0>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001436:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <MX_TIM4_Init+0xa0>)
 8001438:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800143c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143e:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <MX_TIM4_Init+0xa0>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001444:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <MX_TIM4_Init+0xa0>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800144a:	2303      	movs	r3, #3
 800144c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800144e:	2302      	movs	r3, #2
 8001450:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001452:	2301      	movs	r3, #1
 8001454:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800145e:	2302      	movs	r3, #2
 8001460:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001462:	2301      	movs	r3, #1
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	4619      	mov	r1, r3
 8001474:	480c      	ldr	r0, [pc, #48]	@ (80014a8 <MX_TIM4_Init+0xa0>)
 8001476:	f004 fcbd 	bl	8005df4 <HAL_TIM_Encoder_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001480:	f000 f91f 	bl	80016c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001484:	2300      	movs	r3, #0
 8001486:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <MX_TIM4_Init+0xa0>)
 8001492:	f005 fb4d 	bl	8006b30 <HAL_TIMEx_MasterConfigSynchronization>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800149c:	f000 f911 	bl	80016c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	3730      	adds	r7, #48	@ 0x30
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000204 	.word	0x20000204
 80014ac:	40000800 	.word	0x40000800

080014b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014b4:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014b6:	4a12      	ldr	r2, [pc, #72]	@ (8001500 <MX_USART1_UART_Init+0x50>)
 80014b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014bc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ce:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d4:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014d6:	220c      	movs	r2, #12
 80014d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014da:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014e6:	4805      	ldr	r0, [pc, #20]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014e8:	f005 fb92 	bl	8006c10 <HAL_UART_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014f2:	f000 f8e6 	bl	80016c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000024c 	.word	0x2000024c
 8001500:	40013800 	.word	0x40013800

08001504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001518:	4b51      	ldr	r3, [pc, #324]	@ (8001660 <MX_GPIO_Init+0x15c>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a50      	ldr	r2, [pc, #320]	@ (8001660 <MX_GPIO_Init+0x15c>)
 800151e:	f043 0310 	orr.w	r3, r3, #16
 8001522:	6193      	str	r3, [r2, #24]
 8001524:	4b4e      	ldr	r3, [pc, #312]	@ (8001660 <MX_GPIO_Init+0x15c>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f003 0310 	and.w	r3, r3, #16
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001530:	4b4b      	ldr	r3, [pc, #300]	@ (8001660 <MX_GPIO_Init+0x15c>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	4a4a      	ldr	r2, [pc, #296]	@ (8001660 <MX_GPIO_Init+0x15c>)
 8001536:	f043 0304 	orr.w	r3, r3, #4
 800153a:	6193      	str	r3, [r2, #24]
 800153c:	4b48      	ldr	r3, [pc, #288]	@ (8001660 <MX_GPIO_Init+0x15c>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001548:	4b45      	ldr	r3, [pc, #276]	@ (8001660 <MX_GPIO_Init+0x15c>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a44      	ldr	r2, [pc, #272]	@ (8001660 <MX_GPIO_Init+0x15c>)
 800154e:	f043 0308 	orr.w	r3, r3, #8
 8001552:	6193      	str	r3, [r2, #24]
 8001554:	4b42      	ldr	r3, [pc, #264]	@ (8001660 <MX_GPIO_Init+0x15c>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Power_GPIO_Port, LED_Power_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001566:	483f      	ldr	r0, [pc, #252]	@ (8001664 <MX_GPIO_Init+0x160>)
 8001568:	f003 fd34 	bl	8004fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMIT_L_Pin|EMIT_R_Pin|EMIT_FR_Pin|MR_FWD_Pin
 800156c:	2200      	movs	r2, #0
 800156e:	f64f 5120 	movw	r1, #64800	@ 0xfd20
 8001572:	483d      	ldr	r0, [pc, #244]	@ (8001668 <MX_GPIO_Init+0x164>)
 8001574:	f003 fd2e 	bl	8004fd4 <HAL_GPIO_WritePin>
                          |ML_FWD_Pin|MR_BWD_Pin|EMIT_FL_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800157e:	483b      	ldr	r0, [pc, #236]	@ (800166c <MX_GPIO_Init+0x168>)
 8001580:	f003 fd28 	bl	8004fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Blue_Pin|LED_Green_Pin, GPIO_PIN_SET);
 8001584:	2201      	movs	r2, #1
 8001586:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 800158a:	4838      	ldr	r0, [pc, #224]	@ (800166c <MX_GPIO_Init+0x168>)
 800158c:	f003 fd22 	bl	8004fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Power_Pin */
  GPIO_InitStruct.Pin = LED_Power_Pin;
 8001590:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2302      	movs	r3, #2
 80015a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_Power_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	4619      	mov	r1, r3
 80015a8:	482e      	ldr	r0, [pc, #184]	@ (8001664 <MX_GPIO_Init+0x160>)
 80015aa:	f003 fb8f 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : RACE_SW2_Pin */
  GPIO_InitStruct.Pin = RACE_SW2_Pin;
 80015ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001670 <MX_GPIO_Init+0x16c>)
 80015b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RACE_SW2_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	4619      	mov	r1, r3
 80015c2:	4828      	ldr	r0, [pc, #160]	@ (8001664 <MX_GPIO_Init+0x160>)
 80015c4:	f003 fb82 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_L_Pin EMIT_R_Pin EMIT_FR_Pin MR_FWD_Pin
                           ML_FWD_Pin MR_BWD_Pin EMIT_FL_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = EMIT_L_Pin|EMIT_R_Pin|EMIT_FR_Pin|MR_FWD_Pin
 80015c8:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80015cc:	613b      	str	r3, [r7, #16]
                          |ML_FWD_Pin|MR_BWD_Pin|EMIT_FL_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	4619      	mov	r1, r3
 80015e0:	4821      	ldr	r0, [pc, #132]	@ (8001668 <MX_GPIO_Init+0x164>)
 80015e2:	f003 fb73 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : ML_BWD_Pin LED_Red_Pin LED_Blue_Pin LED_Green_Pin */
  GPIO_InitStruct.Pin = ML_BWD_Pin|LED_Red_Pin|LED_Blue_Pin|LED_Green_Pin;
 80015e6:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 80015ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	4619      	mov	r1, r3
 80015fe:	481b      	ldr	r0, [pc, #108]	@ (800166c <MX_GPIO_Init+0x168>)
 8001600:	f003 fb64 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARM_SW1_Pin */
  GPIO_InitStruct.Pin = ARM_SW1_Pin;
 8001604:	2310      	movs	r3, #16
 8001606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001608:	4b19      	ldr	r3, [pc, #100]	@ (8001670 <MX_GPIO_Init+0x16c>)
 800160a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ARM_SW1_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 0310 	add.w	r3, r7, #16
 8001614:	4619      	mov	r1, r3
 8001616:	4814      	ldr	r0, [pc, #80]	@ (8001668 <MX_GPIO_Init+0x164>)
 8001618:	f003 fb58 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : LOADMAZE_SW3_Pin */
  GPIO_InitStruct.Pin = LOADMAZE_SW3_Pin;
 800161c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LOADMAZE_SW3_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	4619      	mov	r1, r3
 8001630:	480d      	ldr	r0, [pc, #52]	@ (8001668 <MX_GPIO_Init+0x164>)
 8001632:	f003 fb4b 	bl	8004ccc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	210f      	movs	r1, #15
 800163a:	200a      	movs	r0, #10
 800163c:	f003 fa5d 	bl	8004afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001640:	200a      	movs	r0, #10
 8001642:	f003 fa76 	bl	8004b32 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	210f      	movs	r1, #15
 800164a:	2028      	movs	r0, #40	@ 0x28
 800164c:	f003 fa55 	bl	8004afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001650:	2028      	movs	r0, #40	@ 0x28
 8001652:	f003 fa6e 	bl	8004b32 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001656:	bf00      	nop
 8001658:	3720      	adds	r7, #32
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	40011000 	.word	0x40011000
 8001668:	40010c00 	.word	0x40010c00
 800166c:	40010800 	.word	0x40010800
 8001670:	10210000 	.word	0x10210000

08001674 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ARM_SW1_Pin) {       // Set to arm mode
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	2b10      	cmp	r3, #16
 8001682:	d102      	bne.n	800168a <HAL_GPIO_EXTI_Callback+0x16>
		ARM_Button();
 8001684:	f001 fe6c 	bl	8003360 <ARM_Button>
		RACE_Button();
	}
	else if (GPIO_Pin == LOADMAZE_SW3_Pin) { // Load maze from memory into maze struct
		LOADMAZE_Button();
	}
}
 8001688:	e00c      	b.n	80016a4 <HAL_GPIO_EXTI_Callback+0x30>
	else if (GPIO_Pin == RACE_SW2_Pin) { // Set to race mode
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001690:	d102      	bne.n	8001698 <HAL_GPIO_EXTI_Callback+0x24>
		RACE_Button();
 8001692:	f001 fe81 	bl	8003398 <RACE_Button>
}
 8001696:	e005      	b.n	80016a4 <HAL_GPIO_EXTI_Callback+0x30>
	else if (GPIO_Pin == LOADMAZE_SW3_Pin) { // Load maze from memory into maze struct
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800169e:	d101      	bne.n	80016a4 <HAL_GPIO_EXTI_Callback+0x30>
		LOADMAZE_Button();
 80016a0:	f001 fe94 	bl	80033cc <LOADMAZE_Button>
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	UART_Receive_Callback(huart);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 f8cb 	bl	8001850 <UART_Receive_Callback>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c6:	b672      	cpsid	i
}
 80016c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ca:	bf00      	nop
 80016cc:	e7fd      	b.n	80016ca <Error_Handler+0x8>
	...

080016d0 <Parse_Receive_Data>:
#define READ_BATT   0b0010  // READ BATTERY: Read battery voltage.
#define PULSE_BUZZ  0b0011  // PULSE BUZZER: Play a short noise from the buzzer.
#define START_RUN   0b0100  // START RUN: Start a maze run. For testing purposes only.
#define PAIRED      0b0101  // PAIRED: Send OK response to verify received.

void Parse_Receive_Data(uint8_t rxBuff) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
	uint8_t command = (rxBuff & 0xF0) >> 4;   // Isolate command code
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	73fb      	strb	r3, [r7, #15]
	uint8_t data    = (rxBuff & 0x0F);        // Isolate other data (not used currently)
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	73bb      	strb	r3, [r7, #14]
	(void) data;                              // Temporary to remove warning for unused variable

	switch(command) {
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	2b07      	cmp	r3, #7
 80016ec:	d837      	bhi.n	800175e <Parse_Receive_Data+0x8e>
 80016ee:	a201      	add	r2, pc, #4	@ (adr r2, 80016f4 <Parse_Receive_Data+0x24>)
 80016f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f4:	08001715 	.word	0x08001715
 80016f8:	08001733 	.word	0x08001733
 80016fc:	08001743 	.word	0x08001743
 8001700:	0800174f 	.word	0x0800174f
 8001704:	08001757 	.word	0x08001757
 8001708:	0800175f 	.word	0x0800175f
 800170c:	0800175f 	.word	0x0800175f
 8001710:	0800173b 	.word	0x0800173b
		case SET_MODE:
			debugMode = (debugMode + 1) % 2;
 8001714:	4b14      	ldr	r3, [pc, #80]	@ (8001768 <Parse_Receive_Data+0x98>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	bfb8      	it	lt
 8001722:	425b      	neglt	r3, r3
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <Parse_Receive_Data+0x98>)
 8001728:	701a      	strb	r2, [r3, #0]
			debugCounter = 0;
 800172a:	4b10      	ldr	r3, [pc, #64]	@ (800176c <Parse_Receive_Data+0x9c>)
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
			break;
 8001730:	e016      	b.n	8001760 <Parse_Receive_Data+0x90>
		case HALT_RUN:
			armed = false;
 8001732:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <Parse_Receive_Data+0xa0>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
			break;
 8001738:	e012      	b.n	8001760 <Parse_Receive_Data+0x90>
		case RESUME_RUN:
			HALTED = 0;
 800173a:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <Parse_Receive_Data+0xa4>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
			break;
 8001740:	e00e      	b.n	8001760 <Parse_Receive_Data+0x90>
		case READ_BATT:
			HAL_UART_Transmit_IT(&huart1, (uint8_t*)&(mouse_state.battery_voltage), sizeof(double));
 8001742:	2208      	movs	r2, #8
 8001744:	490c      	ldr	r1, [pc, #48]	@ (8001778 <Parse_Receive_Data+0xa8>)
 8001746:	480d      	ldr	r0, [pc, #52]	@ (800177c <Parse_Receive_Data+0xac>)
 8001748:	f005 fab2 	bl	8006cb0 <HAL_UART_Transmit_IT>
			break;
 800174c:	e008      	b.n	8001760 <Parse_Receive_Data+0x90>
		case PULSE_BUZZ:
			Pulse_Buzzer(100);
 800174e:	2064      	movs	r0, #100	@ 0x64
 8001750:	f001 fd82 	bl	8003258 <Pulse_Buzzer>
			break;
 8001754:	e004      	b.n	8001760 <Parse_Receive_Data+0x90>
		case START_RUN:
			armed = true;
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <Parse_Receive_Data+0xa0>)
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
			break;
 800175c:	e000      	b.n	8001760 <Parse_Receive_Data+0x90>
		case PAIRED:
			break;
		default:
			break;
 800175e:	bf00      	nop
	}
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200002b8 	.word	0x200002b8
 800176c:	200002b9 	.word	0x200002b9
 8001770:	200002c0 	.word	0x200002c0
 8001774:	20000c60 	.word	0x20000c60
 8001778:	200002b0 	.word	0x200002b0
 800177c:	2000024c 	.word	0x2000024c

08001780 <Create_Byte_Stream>:

void Create_Byte_Stream(uint8_t txData[PACKET_SIZE]) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	bzero(txData, PACKET_SIZE);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	461a      	mov	r2, r3
 800178c:	2300      	movs	r3, #0
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	6053      	str	r3, [r2, #4]
 8001792:	6093      	str	r3, [r2, #8]
 8001794:	60d3      	str	r3, [r2, #12]
 8001796:	6113      	str	r3, [r2, #16]
 8001798:	6153      	str	r3, [r2, #20]
 800179a:	6193      	str	r3, [r2, #24]

	memcpy(txData, "Debug", 5);
 800179c:	2205      	movs	r2, #5
 800179e:	4922      	ldr	r1, [pc, #136]	@ (8001828 <Create_Byte_Stream+0xa8>)
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f006 f8f3 	bl	800798c <memcpy>
	memcpy(txData + 5, &mouse_state.current_cell, sizeof(uint8_t));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3305      	adds	r3, #5
 80017aa:	4a20      	ldr	r2, [pc, #128]	@ (800182c <Create_Byte_Stream+0xac>)
 80017ac:	7812      	ldrb	r2, [r2, #0]
 80017ae:	701a      	strb	r2, [r3, #0]
	memcpy(txData + 6, &mouse_state.rpm.left_rpm, sizeof(uint16_t));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3306      	adds	r3, #6
 80017b4:	4a1d      	ldr	r2, [pc, #116]	@ (800182c <Create_Byte_Stream+0xac>)
 80017b6:	8892      	ldrh	r2, [r2, #4]
 80017b8:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 8, &mouse_state.rpm.right_rpm, sizeof(uint16_t));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3308      	adds	r3, #8
 80017be:	4a1b      	ldr	r2, [pc, #108]	@ (800182c <Create_Byte_Stream+0xac>)
 80017c0:	88d2      	ldrh	r2, [r2, #6]
 80017c2:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 10, &mouse_state.mouse_direction, sizeof(uint8_t));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	330a      	adds	r3, #10
 80017c8:	4a18      	ldr	r2, [pc, #96]	@ (800182c <Create_Byte_Stream+0xac>)
 80017ca:	78d2      	ldrb	r2, [r2, #3]
 80017cc:	701a      	strb	r2, [r3, #0]
	memset(txData + 11, ((mouse_state.mouse_position[0] << 4) | mouse_state.mouse_position[1]), sizeof(uint8_t));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f103 000b 	add.w	r0, r3, #11
 80017d4:	4b15      	ldr	r3, [pc, #84]	@ (800182c <Create_Byte_Stream+0xac>)
 80017d6:	785b      	ldrb	r3, [r3, #1]
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	4a14      	ldr	r2, [pc, #80]	@ (800182c <Create_Byte_Stream+0xac>)
 80017dc:	7892      	ldrb	r2, [r2, #2]
 80017de:	4313      	orrs	r3, r2
 80017e0:	2201      	movs	r2, #1
 80017e2:	4619      	mov	r1, r3
 80017e4:	f006 f88e 	bl	8007904 <memset>
	memcpy(txData + 12, &mouse_state.battery_voltage, sizeof(double));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f103 010c 	add.w	r1, r3, #12
 80017ee:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <Create_Byte_Stream+0xac>)
 80017f0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80017f4:	600a      	str	r2, [r1, #0]
 80017f6:	604b      	str	r3, [r1, #4]
	memcpy(txData + 20, &mouse_state.raw.front_left, sizeof(uint16_t));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3314      	adds	r3, #20
 80017fc:	4a0b      	ldr	r2, [pc, #44]	@ (800182c <Create_Byte_Stream+0xac>)
 80017fe:	8912      	ldrh	r2, [r2, #8]
 8001800:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 22, &mouse_state.raw.left, sizeof(uint16_t));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3316      	adds	r3, #22
 8001806:	4a09      	ldr	r2, [pc, #36]	@ (800182c <Create_Byte_Stream+0xac>)
 8001808:	8952      	ldrh	r2, [r2, #10]
 800180a:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 24, &mouse_state.raw.right, sizeof(uint16_t));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3318      	adds	r3, #24
 8001810:	4a06      	ldr	r2, [pc, #24]	@ (800182c <Create_Byte_Stream+0xac>)
 8001812:	8992      	ldrh	r2, [r2, #12]
 8001814:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 26, &mouse_state.raw.front_right, sizeof(uint16_t));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	331a      	adds	r3, #26
 800181a:	4a04      	ldr	r2, [pc, #16]	@ (800182c <Create_Byte_Stream+0xac>)
 800181c:	89d2      	ldrh	r2, [r2, #14]
 800181e:	801a      	strh	r2, [r3, #0]
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	08007a50 	.word	0x08007a50
 800182c:	20000298 	.word	0x20000298

08001830 <Debug_Packet_Send>:

// When mouse in debug mode transmit above data.
//  Also transmit start identifier "Debug". This totals to 28 bytes of data transmitted every 50 ms.
void Debug_Packet_Send() {
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	Create_Byte_Stream(txDebug);                                  // Create byte stream
 8001834:	4804      	ldr	r0, [pc, #16]	@ (8001848 <Debug_Packet_Send+0x18>)
 8001836:	f7ff ffa3 	bl	8001780 <Create_Byte_Stream>
	HAL_UART_Transmit_IT(&huart1, txDebug, sizeof(txDebug));      // Transmit data
 800183a:	221c      	movs	r2, #28
 800183c:	4902      	ldr	r1, [pc, #8]	@ (8001848 <Debug_Packet_Send+0x18>)
 800183e:	4803      	ldr	r0, [pc, #12]	@ (800184c <Debug_Packet_Send+0x1c>)
 8001840:	f005 fa36 	bl	8006cb0 <HAL_UART_Transmit_IT>
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000c44 	.word	0x20000c44
 800184c:	2000024c 	.word	0x2000024c

08001850 <UART_Receive_Callback>:

void UART_Receive_Callback(UART_HandleTypeDef *huart) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <UART_Receive_Callback+0x38>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d10e      	bne.n	8001880 <UART_Receive_Callback+0x30>
		Parse_Receive_Data(rxData);
 8001862:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <UART_Receive_Callback+0x3c>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff32 	bl	80016d0 <Parse_Receive_Data>
		HAL_UART_Transmit_IT(&huart1, &txData, sizeof(txData));      // Transmit response ACK (0xFF)                          // Parse incoming command
 800186c:	2201      	movs	r2, #1
 800186e:	4908      	ldr	r1, [pc, #32]	@ (8001890 <UART_Receive_Callback+0x40>)
 8001870:	4808      	ldr	r0, [pc, #32]	@ (8001894 <UART_Receive_Callback+0x44>)
 8001872:	f005 fa1d 	bl	8006cb0 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart1, &rxData, sizeof(rxData));       // Receive incoming command
 8001876:	2201      	movs	r2, #1
 8001878:	4904      	ldr	r1, [pc, #16]	@ (800188c <UART_Receive_Callback+0x3c>)
 800187a:	4806      	ldr	r0, [pc, #24]	@ (8001894 <UART_Receive_Callback+0x44>)
 800187c:	f005 fa4d 	bl	8006d1a <HAL_UART_Receive_IT>
	}
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40013800 	.word	0x40013800
 800188c:	20000c40 	.word	0x20000c40
 8001890:	20000001 	.word	0x20000001
 8001894:	2000024c 	.word	0x2000024c

08001898 <HAL_TIM_IC_CaptureCallback>:
float mouse_position = 0;

uint32_t last_calculated_time[2] = { 0, 0 }; // { last calculated time left, last calculated time right }
uint32_t last_tick_count[2] = { 0, 0 };

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	uint16_t current_count = __HAL_TIM_GET_COUNTER(htim);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a6:	81fb      	strh	r3, [r7, #14]
	if (htim == &htim4) { // Motor right
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a14      	ldr	r2, [pc, #80]	@ (80018fc <HAL_TIM_IC_CaptureCallback+0x64>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d10d      	bne.n	80018cc <HAL_TIM_IC_CaptureCallback+0x34>
		objective_R -= (int16_t)(current_count - counter_R);
 80018b0:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <HAL_TIM_IC_CaptureCallback+0x68>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a13      	ldr	r2, [pc, #76]	@ (8001904 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80018b6:	8812      	ldrh	r2, [r2, #0]
 80018b8:	89f9      	ldrh	r1, [r7, #14]
 80018ba:	1a8a      	subs	r2, r1, r2
 80018bc:	b292      	uxth	r2, r2
 80018be:	b212      	sxth	r2, r2
 80018c0:	1a9b      	subs	r3, r3, r2
 80018c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001900 <HAL_TIM_IC_CaptureCallback+0x68>)
 80018c4:	6013      	str	r3, [r2, #0]
		counter_R = current_count;
 80018c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001904 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80018c8:	89fb      	ldrh	r3, [r7, #14]
 80018ca:	8013      	strh	r3, [r2, #0]
	}
	if (htim == &htim3) { // Motor left
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001908 <HAL_TIM_IC_CaptureCallback+0x70>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d10d      	bne.n	80018f0 <HAL_TIM_IC_CaptureCallback+0x58>
		objective_L -= (int16_t)(current_count - counter_L);
 80018d4:	4b0d      	ldr	r3, [pc, #52]	@ (800190c <HAL_TIM_IC_CaptureCallback+0x74>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001910 <HAL_TIM_IC_CaptureCallback+0x78>)
 80018da:	8812      	ldrh	r2, [r2, #0]
 80018dc:	89f9      	ldrh	r1, [r7, #14]
 80018de:	1a8a      	subs	r2, r1, r2
 80018e0:	b292      	uxth	r2, r2
 80018e2:	b212      	sxth	r2, r2
 80018e4:	1a9b      	subs	r3, r3, r2
 80018e6:	4a09      	ldr	r2, [pc, #36]	@ (800190c <HAL_TIM_IC_CaptureCallback+0x74>)
 80018e8:	6013      	str	r3, [r2, #0]
		counter_L = current_count;
 80018ea:	4a09      	ldr	r2, [pc, #36]	@ (8001910 <HAL_TIM_IC_CaptureCallback+0x78>)
 80018ec:	89fb      	ldrh	r3, [r7, #14]
 80018ee:	8013      	strh	r3, [r2, #0]
	}
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000204 	.word	0x20000204
 8001900:	200002c8 	.word	0x200002c8
 8001904:	20000c64 	.word	0x20000c64
 8001908:	200001bc 	.word	0x200001bc
 800190c:	200002c4 	.word	0x200002c4
 8001910:	20000c62 	.word	0x20000c62

08001914 <Calculate_RPM>:

// LIKELY WILL HAVE TO CHANGE
uint16_t Calculate_RPM(int32_t current_ticks, uint8_t motor) {
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	70fb      	strb	r3, [r7, #3]
	uint32_t time_difference = global_time - last_calculated_time[motor];
 8001920:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <Calculate_RPM+0x90>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	4920      	ldr	r1, [pc, #128]	@ (80019a8 <Calculate_RPM+0x94>)
 8001928:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	60fb      	str	r3, [r7, #12]
	last_calculated_time[motor] = global_time;
 8001930:	78fb      	ldrb	r3, [r7, #3]
 8001932:	4a1c      	ldr	r2, [pc, #112]	@ (80019a4 <Calculate_RPM+0x90>)
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	491c      	ldr	r1, [pc, #112]	@ (80019a8 <Calculate_RPM+0x94>)
 8001938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	int32_t tick_difference = abs(current_ticks - last_tick_count[motor]);
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	491a      	ldr	r1, [pc, #104]	@ (80019ac <Calculate_RPM+0x98>)
 8001942:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	bfb8      	it	lt
 800194c:	425b      	neglt	r3, r3
 800194e:	60bb      	str	r3, [r7, #8]
	last_tick_count[motor] = current_ticks;
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	4915      	ldr	r1, [pc, #84]	@ (80019ac <Calculate_RPM+0x98>)
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return ((MS_PER_SEC * SEC_PER_MIN * tick_difference) / (TICKS_PER_ROTATION * time_difference));
 800195a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800195e:	223c      	movs	r2, #60	@ 0x3c
 8001960:	fb02 f303 	mul.w	r3, r2, r3
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	fb02 f303 	mul.w	r3, r2, r3
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff f8ee 	bl	8000b4c <__aeabi_i2f>
 8001970:	4604      	mov	r4, r0
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f7ff f8e6 	bl	8000b44 <__aeabi_ui2f>
 8001978:	4603      	mov	r3, r0
 800197a:	4a0d      	ldr	r2, [pc, #52]	@ (80019b0 <Calculate_RPM+0x9c>)
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f938 	bl	8000bf4 <__aeabi_fmul>
 8001984:	4603      	mov	r3, r0
 8001986:	4619      	mov	r1, r3
 8001988:	4620      	mov	r0, r4
 800198a:	f7ff f9e7 	bl	8000d5c <__aeabi_fdiv>
 800198e:	4603      	mov	r3, r0
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff faf5 	bl	8000f80 <__aeabi_f2uiz>
 8001996:	4603      	mov	r3, r0
 8001998:	b29b      	uxth	r3, r3
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd90      	pop	{r4, r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200002bc 	.word	0x200002bc
 80019a8:	20000c78 	.word	0x20000c78
 80019ac:	20000c80 	.word	0x20000c80
 80019b0:	43b328f6 	.word	0x43b328f6

080019b4 <Update_Encoders>:

void Update_Encoders() {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
	int32_t delta_tick_right = objective_R;
 80019ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001a70 <Update_Encoders+0xbc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	60fb      	str	r3, [r7, #12]
	int32_t delta_tick_left = objective_L;
 80019c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a74 <Update_Encoders+0xc0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60bb      	str	r3, [r7, #8]
	objective_R = 0;
 80019c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a70 <Update_Encoders+0xbc>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
	objective_L = 0;
 80019cc:	4b29      	ldr	r3, [pc, #164]	@ (8001a74 <Update_Encoders+0xc0>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]

	float delta_position_right = delta_tick_right * MM_PER_TICK_LEFT;
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f7ff f8ba 	bl	8000b4c <__aeabi_i2f>
 80019d8:	4603      	mov	r3, r0
 80019da:	4a27      	ldr	r2, [pc, #156]	@ (8001a78 <Update_Encoders+0xc4>)
 80019dc:	4611      	mov	r1, r2
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f908 	bl	8000bf4 <__aeabi_fmul>
 80019e4:	4603      	mov	r3, r0
 80019e6:	607b      	str	r3, [r7, #4]
	float delta_position_left = delta_tick_left * MM_PER_TICK_RIGHT;
 80019e8:	68b8      	ldr	r0, [r7, #8]
 80019ea:	f7ff f8af 	bl	8000b4c <__aeabi_i2f>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4a22      	ldr	r2, [pc, #136]	@ (8001a7c <Update_Encoders+0xc8>)
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff f8fd 	bl	8000bf4 <__aeabi_fmul>
 80019fa:	4603      	mov	r3, r0
 80019fc:	603b      	str	r3, [r7, #0]
	delta_position_forward = (delta_position_right + delta_position_left) / 2; // average change in position
 80019fe:	6839      	ldr	r1, [r7, #0]
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7fe ffef 	bl	80009e4 <__addsf3>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff f9a5 	bl	8000d5c <__aeabi_fdiv>
 8001a12:	4603      	mov	r3, r0
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b1a      	ldr	r3, [pc, #104]	@ (8001a80 <Update_Encoders+0xcc>)
 8001a18:	601a      	str	r2, [r3, #0]
	mouse_position += delta_position_forward;
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <Update_Encoders+0xd0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a18      	ldr	r2, [pc, #96]	@ (8001a80 <Update_Encoders+0xcc>)
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe ffdd 	bl	80009e4 <__addsf3>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <Update_Encoders+0xd0>)
 8001a30:	601a      	str	r2, [r3, #0]
	delta_position_rotational = (delta_position_right - delta_position_left) * DEG_PER_MM_DIFFERENCE;
 8001a32:	6839      	ldr	r1, [r7, #0]
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7fe ffd3 	bl	80009e0 <__aeabi_fsub>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <Update_Encoders+0xd4>)
 8001a40:	4619      	mov	r1, r3
 8001a42:	4610      	mov	r0, r2
 8001a44:	f7ff f8d6 	bl	8000bf4 <__aeabi_fmul>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a8c <Update_Encoders+0xd8>)
 8001a4e:	601a      	str	r2, [r3, #0]
	mouse_angle += delta_position_rotational;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <Update_Encoders+0xdc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0d      	ldr	r2, [pc, #52]	@ (8001a8c <Update_Encoders+0xd8>)
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe ffc2 	bl	80009e4 <__addsf3>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b0a      	ldr	r3, [pc, #40]	@ (8001a90 <Update_Encoders+0xdc>)
 8001a66:	601a      	str	r2, [r3, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200002c8 	.word	0x200002c8
 8001a74:	200002c4 	.word	0x200002c4
 8001a78:	3e834128 	.word	0x3e834128
 8001a7c:	3e970366 	.word	0x3e970366
 8001a80:	20000c68 	.word	0x20000c68
 8001a84:	20000c74 	.word	0x20000c74
 8001a88:	3f3f2f61 	.word	0x3f3f2f61
 8001a8c:	20000c6c 	.word	0x20000c6c
 8001a90:	20000c70 	.word	0x20000c70

08001a94 <Off_Maze>:
char dir_chars[4] = {'n', 'e', 's', 'w'};
enum DirectionBitmask mask_array[4] = {NORTH_MASK, EAST_MASK, SOUTH_MASK, WEST_MASK};

prev_action_t prev_action = ABOUT_FACE;

bool Off_Maze(int mouse_pos_x, int mouse_pos_y) {
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
    if (mouse_pos_x < 0 || mouse_pos_x > 15 || mouse_pos_y < 0 || mouse_pos_y > 15) {
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db08      	blt.n	8001ab6 <Off_Maze+0x22>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b0f      	cmp	r3, #15
 8001aa8:	dc05      	bgt.n	8001ab6 <Off_Maze+0x22>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	db02      	blt.n	8001ab6 <Off_Maze+0x22>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2b0f      	cmp	r3, #15
 8001ab4:	dd01      	ble.n	8001aba <Off_Maze+0x26>
        return false; // False means a cell is off of the maze
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e000      	b.n	8001abc <Off_Maze+0x28>
    }
    return true;
 8001aba:	2301      	movs	r3, #1
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr

08001ac6 <Get_Neighbor_Cells>:
param_t ROT_ABOUT = { .distance = 180,
					  .max_speed = 500,
					  .end_speed = 0,
					  .acceleration = 2500 };

struct CellList* Get_Neighbor_Cells(struct Maze* maze, struct Coord* pos) {
 8001ac6:	b590      	push	{r4, r7, lr}
 8001ac8:	b093      	sub	sp, #76	@ 0x4c
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	6039      	str	r1, [r7, #0]
	struct CellList* cell_list = (struct CellList*)malloc(sizeof(struct CellList));
 8001ad0:	2008      	movs	r0, #8
 8001ad2:	f005 fe59 	bl	8007788 <malloc>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c

    bool north_cell = false, east_cell = false, south_cell = false, west_cell = false;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8001aec:	2300      	movs	r3, #0
 8001aee:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t x_coord = pos->x, y_coord = pos->y;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    uint8_t num_cells = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    // If a cell is adjacent to the cell represented by pos, exists in the 16x16 maze, and is not blocked by a wall, add it to the cell list
    if (Off_Maze(x_coord, y_coord+1) && !(maze->cellWalls[y_coord][x_coord] & NORTH_MASK)) { north_cell = true; num_cells++; } // NORTH
 8001b08:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8001b0c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001b10:	3301      	adds	r3, #1
 8001b12:	4619      	mov	r1, r3
 8001b14:	4610      	mov	r0, r2
 8001b16:	f7ff ffbd 	bl	8001a94 <Off_Maze>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d017      	beq.n	8001b50 <Get_Neighbor_Cells+0x8a>
 8001b20:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8001b24:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	0109      	lsls	r1, r1, #4
 8001b2c:	440b      	add	r3, r1
 8001b2e:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d107      	bne.n	8001b50 <Get_Neighbor_Cells+0x8a>
 8001b40:	2301      	movs	r3, #1
 8001b42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001b46:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (Off_Maze(x_coord+1, y_coord) && !(maze->cellWalls[y_coord][x_coord] & EAST_MASK)) { east_cell = true; num_cells++; }   // EAST
 8001b50:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001b54:	3301      	adds	r3, #1
 8001b56:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff99 	bl	8001a94 <Off_Maze>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d017      	beq.n	8001b98 <Get_Neighbor_Cells+0xd2>
 8001b68:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8001b6c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	0109      	lsls	r1, r1, #4
 8001b74:	440b      	add	r3, r1
 8001b76:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d107      	bne.n	8001b98 <Get_Neighbor_Cells+0xd2>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001b8e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001b92:	3301      	adds	r3, #1
 8001b94:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (Off_Maze(x_coord, y_coord-1) && !(maze->cellWalls[y_coord][x_coord] & SOUTH_MASK)) { south_cell = true; num_cells++; } // SOUTH
 8001b98:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8001b9c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	f7ff ff75 	bl	8001a94 <Off_Maze>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d017      	beq.n	8001be0 <Get_Neighbor_Cells+0x11a>
 8001bb0:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8001bb4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	0109      	lsls	r1, r1, #4
 8001bbc:	440b      	add	r3, r1
 8001bbe:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d107      	bne.n	8001be0 <Get_Neighbor_Cells+0x11a>
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8001bd6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (Off_Maze(x_coord-1, y_coord) && !(maze->cellWalls[y_coord][x_coord] & WEST_MASK)) { west_cell = true; num_cells++; }   // WEST
 8001be0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001be4:	3b01      	subs	r3, #1
 8001be6:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff51 	bl	8001a94 <Off_Maze>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d017      	beq.n	8001c28 <Get_Neighbor_Cells+0x162>
 8001bf8:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8001bfc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	0109      	lsls	r1, r1, #4
 8001c04:	440b      	add	r3, r1
 8001c06:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d107      	bne.n	8001c28 <Get_Neighbor_Cells+0x162>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8001c1e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001c22:	3301      	adds	r3, #1
 8001c24:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    cell_list->size = num_cells;
 8001c28:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8001c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c2e:	601a      	str	r2, [r3, #0]
    cell_list->cells = (struct Cell*)malloc(num_cells*sizeof(struct Cell));
 8001c30:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8001c34:	4613      	mov	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f005 fda3 	bl	8007788 <malloc>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c48:	605a      	str	r2, [r3, #4]

    uint8_t i = 0; // Create new cells with appropriate coordinate and direction and add to the cell list if it is not blocked or off the maze
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    if (north_cell) {
 8001c50:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d01e      	beq.n	8001c96 <Get_Neighbor_Cells+0x1d0>
    	struct Cell new_cell = {{x_coord, y_coord+1}, NORTH}; // NORTH
 8001c58:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c5e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001c62:	3301      	adds	r3, #1
 8001c64:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c66:	2300      	movs	r3, #0
 8001c68:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        cell_list->cells[i] = new_cell; i++;
 8001c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c6e:	6859      	ldr	r1, [r3, #4]
 8001c70:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8001c74:	4613      	mov	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	461c      	mov	r4, r3
 8001c80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c84:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c8c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001c90:	3301      	adds	r3, #1
 8001c92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    }
    if (east_cell) {
 8001c96:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d01e      	beq.n	8001cdc <Get_Neighbor_Cells+0x216>
    	struct Cell new_cell = {{x_coord+1, y_coord}, EAST};  // EAST
 8001c9e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	623b      	str	r3, [r7, #32]
 8001ca6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cac:	2301      	movs	r3, #1
 8001cae:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        cell_list->cells[i] = new_cell; i++;
 8001cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cb4:	6859      	ldr	r1, [r3, #4]
 8001cb6:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	461c      	mov	r4, r3
 8001cc6:	f107 0320 	add.w	r3, r7, #32
 8001cca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001cce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cd2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    }
    if (south_cell) {
 8001cdc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d01d      	beq.n	8001d20 <Get_Neighbor_Cells+0x25a>
    	struct Cell new_cell = {{x_coord, y_coord-1}, SOUTH}; // SOUTH
 8001ce4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	61bb      	str	r3, [r7, #24]
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	773b      	strb	r3, [r7, #28]
        cell_list->cells[i] = new_cell; i++;
 8001cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cf8:	6859      	ldr	r1, [r3, #4]
 8001cfa:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	461c      	mov	r4, r3
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d16:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    }
    if (west_cell) {
 8001d20:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d01d      	beq.n	8001d64 <Get_Neighbor_Cells+0x29e>
    	struct Cell new_cell = {{x_coord-1, y_coord}, WEST}; // WEST
 8001d28:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	2303      	movs	r3, #3
 8001d38:	743b      	strb	r3, [r7, #16]
        cell_list->cells[i] = new_cell; i++;
 8001d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d3c:	6859      	ldr	r1, [r3, #4]
 8001d3e:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	461c      	mov	r4, r3
 8001d4e:	f107 0308 	add.w	r3, r7, #8
 8001d52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d5a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001d5e:	3301      	adds	r3, #1
 8001d60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    }
    return cell_list;
 8001d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	374c      	adds	r7, #76	@ 0x4c
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd90      	pop	{r4, r7, pc}
	...

08001d70 <Scan_Walls>:

uint8_t Scan_Walls(struct Maze* maze) { // Checks wall information based on mouse's current position and updates maze walls. Returns an integer 0-3 depending on # of walls spotted
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
    enum Direction cur_dir = maze->mouse_dir;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	7a1b      	ldrb	r3, [r3, #8]
 8001d7c:	75bb      	strb	r3, [r7, #22]
    struct Coord cur_pos = maze->mouse_pos;
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d88:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t walls_changed = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	75fb      	strb	r3, [r7, #23]

    if (Wall_Front()) {
 8001d90:	f001 fd62 	bl	8003858 <Wall_Front>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 80d0 	beq.w	8001f3c <Scan_Walls+0x1cc>
        maze->cellWalls[cur_pos.y][cur_pos.x] |= mask_array[cur_dir];
 8001d9c:	6939      	ldr	r1, [r7, #16]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	0109      	lsls	r1, r1, #4
 8001da4:	440b      	add	r3, r1
 8001da6:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	7dbb      	ldrb	r3, [r7, #22]
 8001db2:	49a7      	ldr	r1, [pc, #668]	@ (8002050 <Scan_Walls+0x2e0>)
 8001db4:	5ccb      	ldrb	r3, [r1, r3]
 8001db6:	4619      	mov	r1, r3
 8001db8:	6938      	ldr	r0, [r7, #16]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	0100      	lsls	r0, r0, #4
 8001dc2:	4403      	add	r3, r0
 8001dc4:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	605a      	str	r2, [r3, #4]
        walls_changed += 1;
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	75fb      	strb	r3, [r7, #23]
        switch (cur_dir) { // Update adjacent walls with relevant wall information
 8001dd4:	7dbb      	ldrb	r3, [r7, #22]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	f200 80b0 	bhi.w	8001f3c <Scan_Walls+0x1cc>
 8001ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8001de4 <Scan_Walls+0x74>)
 8001dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de2:	bf00      	nop
 8001de4:	08001df5 	.word	0x08001df5
 8001de8:	08001e45 	.word	0x08001e45
 8001dec:	08001e93 	.word	0x08001e93
 8001df0:	08001ee1 	.word	0x08001ee1
            case (NORTH):
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	f7ff fe49 	bl	8001a94 <Off_Maze>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 8092 	beq.w	8001f2e <Scan_Walls+0x1be>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	1c59      	adds	r1, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	0109      	lsls	r1, r1, #4
 8001e18:	440b      	add	r3, r1
 8001e1a:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	1c58      	adds	r0, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0202 	orr.w	r2, r2, #2
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	0100      	lsls	r0, r0, #4
 8001e36:	4403      	add	r3, r0
 8001e38:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	e074      	b.n	8001f2e <Scan_Walls+0x1be>
            case (EAST):
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3301      	adds	r3, #1
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fe21 	bl	8001a94 <Off_Maze>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d06c      	beq.n	8001f32 <Scan_Walls+0x1c2>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6859      	ldr	r1, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3301      	adds	r3, #1
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	0109      	lsls	r1, r1, #4
 8001e66:	440b      	add	r3, r1
 8001e68:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6858      	ldr	r0, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	0100      	lsls	r0, r0, #4
 8001e84:	4403      	add	r3, r0
 8001e86:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	e04f      	b.n	8001f32 <Scan_Walls+0x1c2>
            case (SOUTH):
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	f7ff fdfa 	bl	8001a94 <Off_Maze>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d047      	beq.n	8001f36 <Scan_Walls+0x1c6>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	1e59      	subs	r1, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	0109      	lsls	r1, r1, #4
 8001eb4:	440b      	add	r3, r1
 8001eb6:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	1e58      	subs	r0, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0208 	orr.w	r2, r2, #8
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	0100      	lsls	r0, r0, #4
 8001ed2:	4403      	add	r3, r0
 8001ed4:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	e02a      	b.n	8001f36 <Scan_Walls+0x1c6>
            case (WEST):
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fdd3 	bl	8001a94 <Off_Maze>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d022      	beq.n	8001f3a <Scan_Walls+0x1ca>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	0109      	lsls	r1, r1, #4
 8001f02:	440b      	add	r3, r1
 8001f04:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6858      	ldr	r0, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	f042 0204 	orr.w	r2, r2, #4
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	0100      	lsls	r0, r0, #4
 8001f20:	4403      	add	r3, r0
 8001f22:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	e005      	b.n	8001f3a <Scan_Walls+0x1ca>
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 8001f2e:	bf00      	nop
 8001f30:	e004      	b.n	8001f3c <Scan_Walls+0x1cc>
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 8001f32:	bf00      	nop
 8001f34:	e002      	b.n	8001f3c <Scan_Walls+0x1cc>
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 8001f36:	bf00      	nop
 8001f38:	e000      	b.n	8001f3c <Scan_Walls+0x1cc>
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 8001f3a:	bf00      	nop
        }
    }
    if (Wall_Right()) {
 8001f3c:	f001 fcec 	bl	8003918 <Wall_Right>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 80db 	beq.w	80020fe <Scan_Walls+0x38e>
        maze->cellWalls[cur_pos.y][cur_pos.x] |= mask_array[(cur_dir + 3) % 4];
 8001f48:	6939      	ldr	r1, [r7, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	0109      	lsls	r1, r1, #4
 8001f50:	440b      	add	r3, r1
 8001f52:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	7dbb      	ldrb	r3, [r7, #22]
 8001f5e:	3303      	adds	r3, #3
 8001f60:	4259      	negs	r1, r3
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	f001 0103 	and.w	r1, r1, #3
 8001f6a:	bf58      	it	pl
 8001f6c:	424b      	negpl	r3, r1
 8001f6e:	4938      	ldr	r1, [pc, #224]	@ (8002050 <Scan_Walls+0x2e0>)
 8001f70:	5ccb      	ldrb	r3, [r1, r3]
 8001f72:	4619      	mov	r1, r3
 8001f74:	6938      	ldr	r0, [r7, #16]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	0100      	lsls	r0, r0, #4
 8001f7e:	4403      	add	r3, r0
 8001f80:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	440b      	add	r3, r1
 8001f88:	605a      	str	r2, [r3, #4]
        walls_changed += 1;
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	75fb      	strb	r3, [r7, #23]
        switch (cur_dir) {
 8001f90:	7dbb      	ldrb	r3, [r7, #22]
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	f200 80b3 	bhi.w	80020fe <Scan_Walls+0x38e>
 8001f98:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa0 <Scan_Walls+0x230>)
 8001f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9e:	bf00      	nop
 8001fa0:	08001fb1 	.word	0x08001fb1
 8001fa4:	08002001 	.word	0x08002001
 8001fa8:	08002055 	.word	0x08002055
 8001fac:	080020a3 	.word	0x080020a3
            case (NORTH):
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fd6b 	bl	8001a94 <Off_Maze>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 8095 	beq.w	80020f0 <Scan_Walls+0x380>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6859      	ldr	r1, [r3, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	0109      	lsls	r1, r1, #4
 8001fd4:	440b      	add	r3, r1
 8001fd6:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6858      	ldr	r0, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	f042 0204 	orr.w	r2, r2, #4
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	0100      	lsls	r0, r0, #4
 8001ff2:	4403      	add	r3, r0
 8001ff4:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	e077      	b.n	80020f0 <Scan_Walls+0x380>
            case (EAST):
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	3301      	adds	r3, #1
 8002006:	4619      	mov	r1, r3
 8002008:	4610      	mov	r0, r2
 800200a:	f7ff fd43 	bl	8001a94 <Off_Maze>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d06f      	beq.n	80020f4 <Scan_Walls+0x384>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	1c59      	adds	r1, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	0109      	lsls	r1, r1, #4
 8002022:	440b      	add	r3, r1
 8002024:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	1c58      	adds	r0, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0202 	orr.w	r2, r2, #2
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	0100      	lsls	r0, r0, #4
 8002040:	4403      	add	r3, r0
 8002042:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	e052      	b.n	80020f4 <Scan_Walls+0x384>
 800204e:	bf00      	nop
 8002050:	20000004 	.word	0x20000004
            case (SOUTH):
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3301      	adds	r3, #1
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fd19 	bl	8001a94 <Off_Maze>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d047      	beq.n	80020f8 <Scan_Walls+0x388>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6859      	ldr	r1, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	3301      	adds	r3, #1
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	0109      	lsls	r1, r1, #4
 8002076:	440b      	add	r3, r1
 8002078:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6858      	ldr	r0, [r3, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3301      	adds	r3, #1
 800208c:	f042 0201 	orr.w	r2, r2, #1
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	0100      	lsls	r0, r0, #4
 8002094:	4403      	add	r3, r0
 8002096:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	e02a      	b.n	80020f8 <Scan_Walls+0x388>
            case (WEST):
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	4619      	mov	r1, r3
 80020aa:	4610      	mov	r0, r2
 80020ac:	f7ff fcf2 	bl	8001a94 <Off_Maze>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d022      	beq.n	80020fc <Scan_Walls+0x38c>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	1e59      	subs	r1, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	0109      	lsls	r1, r1, #4
 80020c4:	440b      	add	r3, r1
 80020c6:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	1e58      	subs	r0, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0208 	orr.w	r2, r2, #8
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	0100      	lsls	r0, r0, #4
 80020e2:	4403      	add	r3, r0
 80020e4:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	e005      	b.n	80020fc <Scan_Walls+0x38c>
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 80020f0:	bf00      	nop
 80020f2:	e004      	b.n	80020fe <Scan_Walls+0x38e>
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 80020f4:	bf00      	nop
 80020f6:	e002      	b.n	80020fe <Scan_Walls+0x38e>
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 80020f8:	bf00      	nop
 80020fa:	e000      	b.n	80020fe <Scan_Walls+0x38e>
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 80020fc:	bf00      	nop
        }
    }
    if (Wall_Left()) {
 80020fe:	f001 fbe1 	bl	80038c4 <Wall_Left>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80d7 	beq.w	80022b8 <Scan_Walls+0x548>
        maze->cellWalls[cur_pos.y][cur_pos.x] |= mask_array[(cur_dir + 1) % 4];
 800210a:	6939      	ldr	r1, [r7, #16]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	0109      	lsls	r1, r1, #4
 8002112:	440b      	add	r3, r1
 8002114:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	7dbb      	ldrb	r3, [r7, #22]
 8002120:	3301      	adds	r3, #1
 8002122:	4259      	negs	r1, r3
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	f001 0103 	and.w	r1, r1, #3
 800212c:	bf58      	it	pl
 800212e:	424b      	negpl	r3, r1
 8002130:	4964      	ldr	r1, [pc, #400]	@ (80022c4 <Scan_Walls+0x554>)
 8002132:	5ccb      	ldrb	r3, [r1, r3]
 8002134:	4619      	mov	r1, r3
 8002136:	6938      	ldr	r0, [r7, #16]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	430a      	orrs	r2, r1
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	0100      	lsls	r0, r0, #4
 8002140:	4403      	add	r3, r0
 8002142:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	605a      	str	r2, [r3, #4]
        walls_changed += 1;
 800214c:	7dfb      	ldrb	r3, [r7, #23]
 800214e:	3301      	adds	r3, #1
 8002150:	75fb      	strb	r3, [r7, #23]
        switch (cur_dir) {
 8002152:	7dbb      	ldrb	r3, [r7, #22]
 8002154:	2b03      	cmp	r3, #3
 8002156:	f200 80af 	bhi.w	80022b8 <Scan_Walls+0x548>
 800215a:	a201      	add	r2, pc, #4	@ (adr r2, 8002160 <Scan_Walls+0x3f0>)
 800215c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002160:	08002171 	.word	0x08002171
 8002164:	080021c1 	.word	0x080021c1
 8002168:	0800220f 	.word	0x0800220f
 800216c:	0800225d 	.word	0x0800225d
            case (NORTH):
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	3301      	adds	r3, #1
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fc8b 	bl	8001a94 <Off_Maze>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 8092 	beq.w	80022aa <Scan_Walls+0x53a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6859      	ldr	r1, [r3, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	3301      	adds	r3, #1
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	0109      	lsls	r1, r1, #4
 8002194:	440b      	add	r3, r1
 8002196:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6858      	ldr	r0, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	3301      	adds	r3, #1
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	0100      	lsls	r0, r0, #4
 80021b2:	4403      	add	r3, r0
 80021b4:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	e074      	b.n	80022aa <Scan_Walls+0x53a>
            case (EAST):
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	4619      	mov	r1, r3
 80021c8:	4610      	mov	r0, r2
 80021ca:	f7ff fc63 	bl	8001a94 <Off_Maze>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d06c      	beq.n	80022ae <Scan_Walls+0x53e>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	1e59      	subs	r1, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	0109      	lsls	r1, r1, #4
 80021e2:	440b      	add	r3, r1
 80021e4:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	1e58      	subs	r0, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0208 	orr.w	r2, r2, #8
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	0100      	lsls	r0, r0, #4
 8002200:	4403      	add	r3, r0
 8002202:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	e04f      	b.n	80022ae <Scan_Walls+0x53e>
            case (SOUTH):
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	3b01      	subs	r3, #1
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4611      	mov	r1, r2
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fc3c 	bl	8001a94 <Off_Maze>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d047      	beq.n	80022b2 <Scan_Walls+0x542>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6859      	ldr	r1, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	3b01      	subs	r3, #1
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	0109      	lsls	r1, r1, #4
 8002230:	440b      	add	r3, r1
 8002232:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6858      	ldr	r0, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	3b01      	subs	r3, #1
 8002246:	f042 0204 	orr.w	r2, r2, #4
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	0100      	lsls	r0, r0, #4
 800224e:	4403      	add	r3, r0
 8002250:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	e02a      	b.n	80022b2 <Scan_Walls+0x542>
            case (WEST):
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	3301      	adds	r3, #1
 8002262:	4619      	mov	r1, r3
 8002264:	4610      	mov	r0, r2
 8002266:	f7ff fc15 	bl	8001a94 <Off_Maze>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d022      	beq.n	80022b6 <Scan_Walls+0x546>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	1c59      	adds	r1, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	0109      	lsls	r1, r1, #4
 800227e:	440b      	add	r3, r1
 8002280:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	1c58      	adds	r0, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0202 	orr.w	r2, r2, #2
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	0100      	lsls	r0, r0, #4
 800229c:	4403      	add	r3, r0
 800229e:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	e005      	b.n	80022b6 <Scan_Walls+0x546>
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 80022aa:	bf00      	nop
 80022ac:	e004      	b.n	80022b8 <Scan_Walls+0x548>
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 80022ae:	bf00      	nop
 80022b0:	e002      	b.n	80022b8 <Scan_Walls+0x548>
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 80022b2:	bf00      	nop
 80022b4:	e000      	b.n	80022b8 <Scan_Walls+0x548>
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 80022b6:	bf00      	nop
        }
    }
    return walls_changed;
 80022b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000004 	.word	0x20000004

080022c8 <Update_Mouse_Pos>:

void Update_Mouse_Pos(struct Coord *pos, enum Direction dir)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	70fb      	strb	r3, [r7, #3]
	maze.exploredCells[pos->y][pos->x] = true;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	492b      	ldr	r1, [pc, #172]	@ (800238c <Update_Mouse_Pos+0xc4>)
 80022de:	0112      	lsls	r2, r2, #4
 80022e0:	440a      	add	r2, r1
 80022e2:	4413      	add	r3, r2
 80022e4:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]

    if      (dir == NORTH) { pos->y++; }
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d105      	bne.n	80022fe <Update_Mouse_Pos+0x36>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	e019      	b.n	8002332 <Update_Mouse_Pos+0x6a>
    else if (dir == SOUTH) { pos->y--; }
 80022fe:	78fb      	ldrb	r3, [r7, #3]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d105      	bne.n	8002310 <Update_Mouse_Pos+0x48>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	1e5a      	subs	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	e010      	b.n	8002332 <Update_Mouse_Pos+0x6a>
    else if (dir == WEST)  { pos->x--; }
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	2b03      	cmp	r3, #3
 8002314:	d105      	bne.n	8002322 <Update_Mouse_Pos+0x5a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	1e5a      	subs	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e007      	b.n	8002332 <Update_Mouse_Pos+0x6a>
    else if (dir == EAST)  { pos->x++; }
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d104      	bne.n	8002332 <Update_Mouse_Pos+0x6a>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	601a      	str	r2, [r3, #0]

    maze.exploredCells[pos->y][pos->x] = true;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4914      	ldr	r1, [pc, #80]	@ (800238c <Update_Mouse_Pos+0xc4>)
 800233c:	0112      	lsls	r2, r2, #4
 800233e:	440a      	add	r2, r1
 8002340:	4413      	add	r3, r2
 8002342:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]

    mouse_state.current_cell = maze.cellWalls[pos->y][pos->x];
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	490e      	ldr	r1, [pc, #56]	@ (800238c <Update_Mouse_Pos+0xc4>)
 8002354:	0112      	lsls	r2, r2, #4
 8002356:	4413      	add	r3, r2
 8002358:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	4b0a      	ldr	r3, [pc, #40]	@ (8002390 <Update_Mouse_Pos+0xc8>)
 8002366:	701a      	strb	r2, [r3, #0]
	mouse_state.mouse_position[0] = (uint8_t)pos->x;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	b2da      	uxtb	r2, r3
 800236e:	4b08      	ldr	r3, [pc, #32]	@ (8002390 <Update_Mouse_Pos+0xc8>)
 8002370:	705a      	strb	r2, [r3, #1]
	mouse_state.mouse_position[1] = (uint8_t)pos->y;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b05      	ldr	r3, [pc, #20]	@ (8002390 <Update_Mouse_Pos+0xc8>)
 800237a:	709a      	strb	r2, [r3, #2]
	mouse_state.mouse_direction = dir;
 800237c:	4a04      	ldr	r2, [pc, #16]	@ (8002390 <Update_Mouse_Pos+0xc8>)
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	70d3      	strb	r3, [r2, #3]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr
 800238c:	200002cc 	.word	0x200002cc
 8002390:	20000298 	.word	0x20000298

08002394 <Set_Goal_Cell>:

void Set_Goal_Cell(struct Maze* maze, int num_of_goals) {
 8002394:	b480      	push	{r7}
 8002396:	b08d      	sub	sp, #52	@ 0x34
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
    if (num_of_goals == 1) {
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d108      	bne.n	80023b6 <Set_Goal_Cell+0x22>
		maze->goalPos[0] = (struct Coord){0, 0};
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f8c3 2910 	str.w	r2, [r3, #2320]	@ 0x910
    	maze->goalPos[0] = (struct Coord){7, 7};
		maze->goalPos[1] = (struct Coord){7, 8};
		maze->goalPos[2] = (struct Coord){8, 7};
		maze->goalPos[3] = (struct Coord){8, 8};
    }
}
 80023b4:	e022      	b.n	80023fc <Set_Goal_Cell+0x68>
    else if (num_of_goals == 4) {
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d11f      	bne.n	80023fc <Set_Goal_Cell+0x68>
    	maze->goalPos[0] = (struct Coord){7, 7};
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a12      	ldr	r2, [pc, #72]	@ (8002408 <Set_Goal_Cell+0x74>)
 80023c0:	f603 130c 	addw	r3, r3, #2316	@ 0x90c
 80023c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023c8:	e883 0003 	stmia.w	r3, {r0, r1}
		maze->goalPos[1] = (struct Coord){7, 8};
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a0f      	ldr	r2, [pc, #60]	@ (800240c <Set_Goal_Cell+0x78>)
 80023d0:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 80023d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023d8:	e883 0003 	stmia.w	r3, {r0, r1}
		maze->goalPos[2] = (struct Coord){8, 7};
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a0c      	ldr	r2, [pc, #48]	@ (8002410 <Set_Goal_Cell+0x7c>)
 80023e0:	f603 131c 	addw	r3, r3, #2332	@ 0x91c
 80023e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023e8:	e883 0003 	stmia.w	r3, {r0, r1}
		maze->goalPos[3] = (struct Coord){8, 8};
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a09      	ldr	r2, [pc, #36]	@ (8002414 <Set_Goal_Cell+0x80>)
 80023f0:	f603 1324 	addw	r3, r3, #2340	@ 0x924
 80023f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023f8:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80023fc:	bf00      	nop
 80023fe:	3734      	adds	r7, #52	@ 0x34
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	08007a58 	.word	0x08007a58
 800240c:	08007a60 	.word	0x08007a60
 8002410:	08007a68 	.word	0x08007a68
 8002414:	08007a70 	.word	0x08007a70

08002418 <Floodfill>:

void Floodfill(struct Maze* maze) {
 8002418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800241c:	b08d      	sub	sp, #52	@ 0x34
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	466b      	mov	r3, sp
 8002424:	461e      	mov	r6, r3
    for (uint8_t y=0; y<16; y++) { for (uint8_t x=0; x<16; x++) { maze->distances[y][x] = MAX_COST; } } // Initialize all maze costs/distances to the maximum = 255
 8002426:	2300      	movs	r3, #0
 8002428:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800242c:	e01f      	b.n	800246e <Floodfill+0x56>
 800242e:	2300      	movs	r3, #0
 8002430:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002434:	e012      	b.n	800245c <Floodfill+0x44>
 8002436:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800243a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800243e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002442:	4610      	mov	r0, r2
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	0109      	lsls	r1, r1, #4
 8002448:	440b      	add	r3, r1
 800244a:	3302      	adds	r3, #2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	6058      	str	r0, [r3, #4]
 8002452:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002456:	3301      	adds	r3, #1
 8002458:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800245c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002460:	2b0f      	cmp	r3, #15
 8002462:	d9e8      	bls.n	8002436 <Floodfill+0x1e>
 8002464:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002468:	3301      	adds	r3, #1
 800246a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800246e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002472:	2b0f      	cmp	r3, #15
 8002474:	d9db      	bls.n	800242e <Floodfill+0x16>

    uint8_t goal_count = 4;
 8002476:	2304      	movs	r3, #4
 8002478:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    if (maze->goalPos[0].x == 0) { goal_count = 1; }                                                    // Check if goal is maze center or start cell
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 8002482:	2b00      	cmp	r3, #0
 8002484:	d102      	bne.n	800248c <Floodfill+0x74>
 8002486:	2301      	movs	r3, #1
 8002488:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    struct Coord queue[MAX_COST];                                                                       // Initialize queue
 800248c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002490:	3b01      	subs	r3, #1
 8002492:	623b      	str	r3, [r7, #32]
 8002494:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002498:	b29b      	uxth	r3, r3
 800249a:	2200      	movs	r2, #0
 800249c:	4698      	mov	r8, r3
 800249e:	4691      	mov	r9, r2
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024ac:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024b0:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2200      	movs	r2, #0
 80024bc:	461c      	mov	r4, r3
 80024be:	4615      	mov	r5, r2
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	01ab      	lsls	r3, r5, #6
 80024ca:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80024ce:	01a2      	lsls	r2, r4, #6
 80024d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	3307      	adds	r3, #7
 80024d8:	08db      	lsrs	r3, r3, #3
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	ebad 0d03 	sub.w	sp, sp, r3
 80024e0:	466b      	mov	r3, sp
 80024e2:	3303      	adds	r3, #3
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	61fb      	str	r3, [r7, #28]
    uint16_t head = 0, tail = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80024ee:	2300      	movs	r3, #0
 80024f0:	853b      	strh	r3, [r7, #40]	@ 0x28
    for (uint8_t cell = 0; cell < goal_count; cell++) {
 80024f2:	2300      	movs	r3, #0
 80024f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80024f8:	e02f      	b.n	800255a <Floodfill+0x142>
        maze->distances[maze->goalPos[cell].y][maze->goalPos[cell].x] = 0;                              // Set goal cells to cost/distance minimum = 0
 80024fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	f203 1321 	addw	r3, r3, #289	@ 0x121
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	6899      	ldr	r1, [r3, #8]
 800250a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	f203 1321 	addw	r3, r3, #289	@ 0x121
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	0109      	lsls	r1, r1, #4
 800251e:	440b      	add	r3, r1
 8002520:	3302      	adds	r3, #2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	2200      	movs	r2, #0
 8002528:	605a      	str	r2, [r3, #4]
        queue[tail] = maze->goalPos[cell]; tail++;                                                      // Add goal cells to queue, increment tail
 800252a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800252e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002530:	69f9      	ldr	r1, [r7, #28]
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f202 1221 	addw	r2, r2, #289	@ 0x121
 8002538:	00d2      	lsls	r2, r2, #3
 800253a:	4402      	add	r2, r0
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	440b      	add	r3, r1
 8002540:	3204      	adds	r2, #4
 8002542:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002546:	e883 0003 	stmia.w	r3, {r0, r1}
 800254a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800254c:	3301      	adds	r3, #1
 800254e:	853b      	strh	r3, [r7, #40]	@ 0x28
    for (uint8_t cell = 0; cell < goal_count; cell++) {
 8002550:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002554:	3301      	adds	r3, #1
 8002556:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800255a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800255e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002562:	429a      	cmp	r2, r3
 8002564:	d3c9      	bcc.n	80024fa <Floodfill+0xe2>
    }

    struct Coord curr_pos;
    while (head != tail) {
 8002566:	e085      	b.n	8002674 <Floodfill+0x25c>
        curr_pos = queue[head];
 8002568:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800256a:	69f9      	ldr	r1, [r7, #28]
 800256c:	f107 020c 	add.w	r2, r7, #12
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	440b      	add	r3, r1
 8002574:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002578:	e882 0003 	stmia.w	r2, {r0, r1}
        head++;
 800257c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800257e:	3301      	adds	r3, #1
 8002580:	857b      	strh	r3, [r7, #42]	@ 0x2a
        uint8_t new_distance = maze->distances[curr_pos.y][curr_pos.x] + 1;                             // Calculate cost for adjacent cells
 8002582:	6939      	ldr	r1, [r7, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	0109      	lsls	r1, r1, #4
 800258a:	440b      	add	r3, r1
 800258c:	3302      	adds	r3, #2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	3301      	adds	r3, #1
 8002598:	76fb      	strb	r3, [r7, #27]

        struct CellList* neighbors = Get_Neighbor_Cells(maze, &curr_pos);
 800259a:	f107 030c 	add.w	r3, r7, #12
 800259e:	4619      	mov	r1, r3
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff fa90 	bl	8001ac6 <Get_Neighbor_Cells>
 80025a6:	6178      	str	r0, [r7, #20]

        for (uint8_t neighbor = 0; neighbor < neighbors->size; neighbor++) {                            // For each neighbor cell, check if its cost/distance is > new distance -- if so, update its value
 80025a8:	2300      	movs	r3, #0
 80025aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80025ae:	e053      	b.n	8002658 <Floodfill+0x240>
            if (maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] > new_distance) {
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	6859      	ldr	r1, [r3, #4]
 80025b4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	6859      	ldr	r1, [r3, #4]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	6858      	ldr	r0, [r3, #4]
 80025c8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4403      	add	r3, r0
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	0109      	lsls	r1, r1, #4
 80025dc:	440b      	add	r3, r1
 80025de:	3302      	adds	r3, #2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	7efb      	ldrb	r3, [r7, #27]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	dd30      	ble.n	800264e <Floodfill+0x236>
                maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] = new_distance;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80025f4:	4613      	mov	r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	6858      	ldr	r0, [r3, #4]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	6859      	ldr	r1, [r3, #4]
 8002604:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002608:	4613      	mov	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	7efa      	ldrb	r2, [r7, #27]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	0100      	lsls	r0, r0, #4
 800261a:	4403      	add	r3, r0
 800261c:	3302      	adds	r3, #2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	605a      	str	r2, [r3, #4]
                queue[tail] = neighbors->cells[neighbor].pos; tail++;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	6859      	ldr	r1, [r3, #4]
 8002628:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4419      	add	r1, r3
 8002636:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	460a      	mov	r2, r1
 8002640:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002644:	e883 0003 	stmia.w	r3, {r0, r1}
 8002648:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800264a:	3301      	adds	r3, #1
 800264c:	853b      	strh	r3, [r7, #40]	@ 0x28
        for (uint8_t neighbor = 0; neighbor < neighbors->size; neighbor++) {                            // For each neighbor cell, check if its cost/distance is > new distance -- if so, update its value
 800264e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002652:	3301      	adds	r3, #1
 8002654:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002658:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	dba5      	blt.n	80025b0 <Floodfill+0x198>
            }
        }
        free(neighbors->cells); free(neighbors);
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4618      	mov	r0, r3
 800266a:	f005 f895 	bl	8007798 <free>
 800266e:	6978      	ldr	r0, [r7, #20]
 8002670:	f005 f892 	bl	8007798 <free>
    while (head != tail) {
 8002674:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002676:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002678:	429a      	cmp	r2, r3
 800267a:	f47f af75 	bne.w	8002568 <Floodfill+0x150>
 800267e:	46b5      	mov	sp, r6
    }
}
 8002680:	bf00      	nop
 8002682:	3734      	adds	r7, #52	@ 0x34
 8002684:	46bd      	mov	sp, r7
 8002686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800268a <Best_Cell>:

enum Direction Best_Cell(struct Maze* maze, struct Coord mouse_pos) {
 800268a:	b580      	push	{r7, lr}
 800268c:	b088      	sub	sp, #32
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	e883 0006 	stmia.w	r3, {r1, r2}
	struct CellList* neighbors = Get_Neighbor_Cells(maze, &mouse_pos);
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	4619      	mov	r1, r3
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f7ff fa12 	bl	8001ac6 <Get_Neighbor_Cells>
 80026a2:	61b8      	str	r0, [r7, #24]

    uint8_t best_cell_index = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	77fb      	strb	r3, [r7, #31]
    uint8_t lowest_cost = maze->distances[mouse_pos.y][mouse_pos.x];
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	0109      	lsls	r1, r1, #4
 80026b0:	440b      	add	r3, r1
 80026b2:	3302      	adds	r3, #2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	77bb      	strb	r3, [r7, #30]

    for (uint8_t neighbor = 0; neighbor < neighbors->size; neighbor++) {
 80026bc:	2300      	movs	r3, #0
 80026be:	777b      	strb	r3, [r7, #29]
 80026c0:	e063      	b.n	800278a <Best_Cell+0x100>
        if ((maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] < lowest_cost) ||  // For each neighbor cell, check if its cost is the lowest seen
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	6859      	ldr	r1, [r3, #4]
 80026c6:	7f7a      	ldrb	r2, [r7, #29]
 80026c8:	4613      	mov	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	6858      	ldr	r0, [r3, #4]
 80026d8:	7f7a      	ldrb	r2, [r7, #29]
 80026da:	4613      	mov	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4403      	add	r3, r0
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	0109      	lsls	r1, r1, #4
 80026ea:	440b      	add	r3, r1
 80026ec:	3302      	adds	r3, #2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	7fbb      	ldrb	r3, [r7, #30]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	db28      	blt.n	800274c <Best_Cell+0xc2>
           ((maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] == lowest_cost) && // Or check cost == lowest and the dir of the cell matches that of the mouse (prioritize forward)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	6859      	ldr	r1, [r3, #4]
 80026fe:	7f7a      	ldrb	r2, [r7, #29]
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	6858      	ldr	r0, [r3, #4]
 8002710:	7f7a      	ldrb	r2, [r7, #29]
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4403      	add	r3, r0
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	440b      	add	r3, r1
 8002724:	3302      	adds	r3, #2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	7fbb      	ldrb	r3, [r7, #30]
        if ((maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] < lowest_cost) ||  // For each neighbor cell, check if its cost is the lowest seen
 800272e:	429a      	cmp	r2, r3
 8002730:	d128      	bne.n	8002784 <Best_Cell+0xfa>
           (maze->mouse_dir == neighbors->cells[neighbor].dir))) {
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	7a19      	ldrb	r1, [r3, #8]
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	6858      	ldr	r0, [r3, #4]
 800273a:	7f7a      	ldrb	r2, [r7, #29]
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4403      	add	r3, r0
 8002746:	7a1b      	ldrb	r3, [r3, #8]
           ((maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] == lowest_cost) && // Or check cost == lowest and the dir of the cell matches that of the mouse (prioritize forward)
 8002748:	4299      	cmp	r1, r3
 800274a:	d11b      	bne.n	8002784 <Best_Cell+0xfa>
                best_cell_index = neighbor;
 800274c:	7f7b      	ldrb	r3, [r7, #29]
 800274e:	77fb      	strb	r3, [r7, #31]
                lowest_cost = maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x];  // Update best cell index and lowest cost seen
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	6859      	ldr	r1, [r3, #4]
 8002754:	7f7a      	ldrb	r2, [r7, #29]
 8002756:	4613      	mov	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4413      	add	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	6859      	ldr	r1, [r3, #4]
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	6858      	ldr	r0, [r3, #4]
 8002766:	7f7a      	ldrb	r2, [r7, #29]
 8002768:	4613      	mov	r3, r2
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4403      	add	r3, r0
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	0109      	lsls	r1, r1, #4
 8002778:	440b      	add	r3, r1
 800277a:	3302      	adds	r3, #2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	77bb      	strb	r3, [r7, #30]
    for (uint8_t neighbor = 0; neighbor < neighbors->size; neighbor++) {
 8002784:	7f7b      	ldrb	r3, [r7, #29]
 8002786:	3301      	adds	r3, #1
 8002788:	777b      	strb	r3, [r7, #29]
 800278a:	7f7a      	ldrb	r2, [r7, #29]
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	db96      	blt.n	80026c2 <Best_Cell+0x38>
           }
    }
    enum Direction ret_dir = neighbors->cells[best_cell_index].dir;
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	7ffa      	ldrb	r2, [r7, #31]
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	7a1b      	ldrb	r3, [r3, #8]
 80027a6:	75fb      	strb	r3, [r7, #23]
    free(neighbors->cells); free(neighbors);
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f004 fff3 	bl	8007798 <free>
 80027b2:	69b8      	ldr	r0, [r7, #24]
 80027b4:	f004 fff0 	bl	8007798 <free>

    return ret_dir;                                                                                                 // Return direction of lowest cost cell
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3720      	adds	r7, #32
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <Maze_Init>:

void Maze_Init(struct Maze* maze) {
 80027c2:	b480      	push	{r7}
 80027c4:	b087      	sub	sp, #28
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
    for (uint8_t y = 0; y < 16; y++) { for (uint8_t x = 0; x < 16; x++) { maze->cellWalls[y][x] = 0; } }            // Initialize all wall values to 0
 80027ca:	2300      	movs	r3, #0
 80027cc:	75fb      	strb	r3, [r7, #23]
 80027ce:	e016      	b.n	80027fe <Maze_Init+0x3c>
 80027d0:	2300      	movs	r3, #0
 80027d2:	75bb      	strb	r3, [r7, #22]
 80027d4:	e00d      	b.n	80027f2 <Maze_Init+0x30>
 80027d6:	7df9      	ldrb	r1, [r7, #23]
 80027d8:	7dbb      	ldrb	r3, [r7, #22]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	0109      	lsls	r1, r1, #4
 80027de:	440b      	add	r3, r1
 80027e0:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	2200      	movs	r2, #0
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	7dbb      	ldrb	r3, [r7, #22]
 80027ee:	3301      	adds	r3, #1
 80027f0:	75bb      	strb	r3, [r7, #22]
 80027f2:	7dbb      	ldrb	r3, [r7, #22]
 80027f4:	2b0f      	cmp	r3, #15
 80027f6:	d9ee      	bls.n	80027d6 <Maze_Init+0x14>
 80027f8:	7dfb      	ldrb	r3, [r7, #23]
 80027fa:	3301      	adds	r3, #1
 80027fc:	75fb      	strb	r3, [r7, #23]
 80027fe:	7dfb      	ldrb	r3, [r7, #23]
 8002800:	2b0f      	cmp	r3, #15
 8002802:	d9e5      	bls.n	80027d0 <Maze_Init+0xe>
    maze->mouse_dir = NORTH;                                                                                        // Mouse starting direction/pos always NORTH/{0,0}
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	721a      	strb	r2, [r3, #8]
    maze->mouse_pos = (struct Coord){0,0};
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	605a      	str	r2, [r3, #4]
}
 8002816:	bf00      	nop
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <Search_Mode>:

void Search_Mode(struct Maze* maze) {
 8002820:	b5b0      	push	{r4, r5, r7, lr}
 8002822:	b08a      	sub	sp, #40	@ 0x28
 8002824:	af06      	add	r7, sp, #24
 8002826:	6078      	str	r0, [r7, #4]
	Scan_Walls(maze);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff faa1 	bl	8001d70 <Scan_Walls>
	Floodfill(maze);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff fdf2 	bl	8002418 <Floodfill>

	enum Direction best_dir = Best_Cell(maze, maze->mouse_pos);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	e893 0006 	ldmia.w	r3, {r1, r2}
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff ff25 	bl	800268a <Best_Cell>
 8002840:	4603      	mov	r3, r0
 8002842:	73fb      	strb	r3, [r7, #15]

	if (best_dir == (enum Direction)((maze->mouse_dir + 3) % 4)) { // Right Turn
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7a1b      	ldrb	r3, [r3, #8]
 8002848:	3303      	adds	r3, #3
 800284a:	425a      	negs	r2, r3
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	f002 0203 	and.w	r2, r2, #3
 8002854:	bf58      	it	pl
 8002856:	4253      	negpl	r3, r2
 8002858:	b2db      	uxtb	r3, r3
 800285a:	7bfa      	ldrb	r2, [r7, #15]
 800285c:	429a      	cmp	r2, r3
 800285e:	d11e      	bne.n	800289e <Search_Mode+0x7e>
			Turn_Container(SEARCH_TURN_FWD, SEARCH_ROT_RIGHT, &forward_profile, &rotational_profile);
 8002860:	4d83      	ldr	r5, [pc, #524]	@ (8002a70 <Search_Mode+0x250>)
 8002862:	4b84      	ldr	r3, [pc, #528]	@ (8002a74 <Search_Mode+0x254>)
 8002864:	9305      	str	r3, [sp, #20]
 8002866:	4b84      	ldr	r3, [pc, #528]	@ (8002a78 <Search_Mode+0x258>)
 8002868:	9304      	str	r3, [sp, #16]
 800286a:	4b84      	ldr	r3, [pc, #528]	@ (8002a7c <Search_Mode+0x25c>)
 800286c:	466c      	mov	r4, sp
 800286e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002870:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002874:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002878:	f000 fbaa 	bl	8002fd0 <Turn_Container>
			maze->mouse_dir = (enum Direction)((maze->mouse_dir + 3) % 4);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7a1b      	ldrb	r3, [r3, #8]
 8002880:	3303      	adds	r3, #3
 8002882:	425a      	negs	r2, r3
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	f002 0203 	and.w	r2, r2, #3
 800288c:	bf58      	it	pl
 800288e:	4253      	negpl	r3, r2
 8002890:	b2da      	uxtb	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	721a      	strb	r2, [r3, #8]
			prev_action = RIGHT_TURN;
 8002896:	4b7a      	ldr	r3, [pc, #488]	@ (8002a80 <Search_Mode+0x260>)
 8002898:	2201      	movs	r2, #1
 800289a:	701a      	strb	r2, [r3, #0]
 800289c:	e087      	b.n	80029ae <Search_Mode+0x18e>
		}
	else if (best_dir == (enum Direction)((maze->mouse_dir + 1) % 4)) { // Left Turn
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	7a1b      	ldrb	r3, [r3, #8]
 80028a2:	3301      	adds	r3, #1
 80028a4:	425a      	negs	r2, r3
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	f002 0203 	and.w	r2, r2, #3
 80028ae:	bf58      	it	pl
 80028b0:	4253      	negpl	r3, r2
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	7bfa      	ldrb	r2, [r7, #15]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d11e      	bne.n	80028f8 <Search_Mode+0xd8>
			Turn_Container(SEARCH_TURN_FWD, SEARCH_ROT_LEFT, &forward_profile, &rotational_profile);
 80028ba:	4d6d      	ldr	r5, [pc, #436]	@ (8002a70 <Search_Mode+0x250>)
 80028bc:	4b6d      	ldr	r3, [pc, #436]	@ (8002a74 <Search_Mode+0x254>)
 80028be:	9305      	str	r3, [sp, #20]
 80028c0:	4b6d      	ldr	r3, [pc, #436]	@ (8002a78 <Search_Mode+0x258>)
 80028c2:	9304      	str	r3, [sp, #16]
 80028c4:	4b6f      	ldr	r3, [pc, #444]	@ (8002a84 <Search_Mode+0x264>)
 80028c6:	466c      	mov	r4, sp
 80028c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80028ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80028d2:	f000 fb7d 	bl	8002fd0 <Turn_Container>
			maze->mouse_dir = (enum Direction)((maze->mouse_dir + 1) % 4);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7a1b      	ldrb	r3, [r3, #8]
 80028da:	3301      	adds	r3, #1
 80028dc:	425a      	negs	r2, r3
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	f002 0203 	and.w	r2, r2, #3
 80028e6:	bf58      	it	pl
 80028e8:	4253      	negpl	r3, r2
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	721a      	strb	r2, [r3, #8]
			prev_action = LEFT_TURN;
 80028f0:	4b63      	ldr	r3, [pc, #396]	@ (8002a80 <Search_Mode+0x260>)
 80028f2:	2202      	movs	r2, #2
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	e05a      	b.n	80029ae <Search_Mode+0x18e>
		}
	else if (best_dir == (enum Direction)((maze->mouse_dir + 2) % 4)) { // About turn
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7a1b      	ldrb	r3, [r3, #8]
 80028fc:	3302      	adds	r3, #2
 80028fe:	425a      	negs	r2, r3
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	f002 0203 	and.w	r2, r2, #3
 8002908:	bf58      	it	pl
 800290a:	4253      	negpl	r3, r2
 800290c:	b2db      	uxtb	r3, r3
 800290e:	7bfa      	ldrb	r2, [r7, #15]
 8002910:	429a      	cmp	r2, r3
 8002912:	d14c      	bne.n	80029ae <Search_Mode+0x18e>
		if (wall_front) { // Back up into wall to realign, continue from there
 8002914:	4b5c      	ldr	r3, [pc, #368]	@ (8002a88 <Search_Mode+0x268>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d032      	beq.n	8002982 <Search_Mode+0x162>
				Profile_Container(SEARCH_STOP_FWD, &forward_profile);
 800291c:	4b5b      	ldr	r3, [pc, #364]	@ (8002a8c <Search_Mode+0x26c>)
 800291e:	4a56      	ldr	r2, [pc, #344]	@ (8002a78 <Search_Mode+0x258>)
 8002920:	9200      	str	r2, [sp, #0]
 8002922:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002924:	f000 fb26 	bl	8002f74 <Profile_Container>
				Profile_Container(ROT_ABOUT, &rotational_profile);
 8002928:	4b59      	ldr	r3, [pc, #356]	@ (8002a90 <Search_Mode+0x270>)
 800292a:	4a52      	ldr	r2, [pc, #328]	@ (8002a74 <Search_Mode+0x254>)
 800292c:	9200      	str	r2, [sp, #0]
 800292e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002930:	f000 fb20 	bl	8002f74 <Profile_Container>
				Clear_Profile(&rotational_profile);
 8002934:	484f      	ldr	r0, [pc, #316]	@ (8002a74 <Search_Mode+0x254>)
 8002936:	f000 fa79 	bl	8002e2c <Clear_Profile>
				Profile_Container(SEARCH_REVERSE_FWD, &forward_profile);
 800293a:	4b56      	ldr	r3, [pc, #344]	@ (8002a94 <Search_Mode+0x274>)
 800293c:	4a4e      	ldr	r2, [pc, #312]	@ (8002a78 <Search_Mode+0x258>)
 800293e:	9200      	str	r2, [sp, #0]
 8002940:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002942:	f000 fb17 	bl	8002f74 <Profile_Container>
				forward_profile.direction *= -1;
 8002946:	4b4c      	ldr	r3, [pc, #304]	@ (8002a78 <Search_Mode+0x258>)
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	425b      	negs	r3, r3
 800294c:	4a4a      	ldr	r2, [pc, #296]	@ (8002a78 <Search_Mode+0x258>)
 800294e:	6213      	str	r3, [r2, #32]
				forward_profile.position = 0;
 8002950:	4b49      	ldr	r3, [pc, #292]	@ (8002a78 <Search_Mode+0x258>)
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	619a      	str	r2, [r3, #24]
				HAL_Delay(500);
 8002958:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800295c:	f001 fb7a 	bl	8004054 <HAL_Delay>
				maze->mouse_dir = (enum Direction)((maze->mouse_dir + 2) % 4);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	7a1b      	ldrb	r3, [r3, #8]
 8002964:	3302      	adds	r3, #2
 8002966:	425a      	negs	r2, r3
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	f002 0203 	and.w	r2, r2, #3
 8002970:	bf58      	it	pl
 8002972:	4253      	negpl	r3, r2
 8002974:	b2da      	uxtb	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	721a      	strb	r2, [r3, #8]
				prev_action = ABOUT_FACE;
 800297a:	4b41      	ldr	r3, [pc, #260]	@ (8002a80 <Search_Mode+0x260>)
 800297c:	2203      	movs	r2, #3
 800297e:	701a      	strb	r2, [r3, #0]
 8002980:	e015      	b.n	80029ae <Search_Mode+0x18e>
			}
		else { // If no wall, simply turn 180 degrees
				Profile_Container(ROT_ABOUT, &rotational_profile);
 8002982:	4b43      	ldr	r3, [pc, #268]	@ (8002a90 <Search_Mode+0x270>)
 8002984:	4a3b      	ldr	r2, [pc, #236]	@ (8002a74 <Search_Mode+0x254>)
 8002986:	9200      	str	r2, [sp, #0]
 8002988:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800298a:	f000 faf3 	bl	8002f74 <Profile_Container>
				maze->mouse_dir = (enum Direction)((maze->mouse_dir + 2) % 4);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	7a1b      	ldrb	r3, [r3, #8]
 8002992:	3302      	adds	r3, #2
 8002994:	425a      	negs	r2, r3
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	f002 0203 	and.w	r2, r2, #3
 800299e:	bf58      	it	pl
 80029a0:	4253      	negpl	r3, r2
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	721a      	strb	r2, [r3, #8]
				prev_action = NONE;
 80029a8:	4b35      	ldr	r3, [pc, #212]	@ (8002a80 <Search_Mode+0x260>)
 80029aa:	2204      	movs	r2, #4
 80029ac:	701a      	strb	r2, [r3, #0]
			}
	}

	if (prev_action == FORWARD_DRIVE) { // Normal forward movement
 80029ae:	4b34      	ldr	r3, [pc, #208]	@ (8002a80 <Search_Mode+0x260>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <Search_Mode+0x1a4>
		Profile_Container(SEARCH_FWD, &forward_profile);
 80029b6:	4b38      	ldr	r3, [pc, #224]	@ (8002a98 <Search_Mode+0x278>)
 80029b8:	4a2f      	ldr	r2, [pc, #188]	@ (8002a78 <Search_Mode+0x258>)
 80029ba:	9200      	str	r2, [sp, #0]
 80029bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029be:	f000 fad9 	bl	8002f74 <Profile_Container>
 80029c2:	e009      	b.n	80029d8 <Search_Mode+0x1b8>
	}
	else if (prev_action == ABOUT_FACE){ // Distance to travel is less than after a forward movement or turn
 80029c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002a80 <Search_Mode+0x260>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d105      	bne.n	80029d8 <Search_Mode+0x1b8>
		Profile_Container(SEARCH_BACK_TO_WALL_FWD, &forward_profile);
 80029cc:	4b33      	ldr	r3, [pc, #204]	@ (8002a9c <Search_Mode+0x27c>)
 80029ce:	4a2a      	ldr	r2, [pc, #168]	@ (8002a78 <Search_Mode+0x258>)
 80029d0:	9200      	str	r2, [sp, #0]
 80029d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029d4:	f000 face 	bl	8002f74 <Profile_Container>
	}
	else { // On a turn don't make any additional movement

	}

	prev_action = FORWARD_DRIVE;
 80029d8:	4b29      	ldr	r3, [pc, #164]	@ (8002a80 <Search_Mode+0x260>)
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]

	Update_Mouse_Pos(&maze->mouse_pos, maze->mouse_dir);
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	7a1b      	ldrb	r3, [r3, #8]
 80029e4:	4619      	mov	r1, r3
 80029e6:	4610      	mov	r0, r2
 80029e8:	f7ff fc6e 	bl	80022c8 <Update_Mouse_Pos>

	// Check if mouse is in goal, if so change goal back to start location
	if (maze->distances[maze->mouse_pos.y][maze->mouse_pos.x] == 0) {
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	0109      	lsls	r1, r1, #4
 80029f8:	440b      	add	r3, r1
 80029fa:	3302      	adds	r3, #2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d130      	bne.n	8002a68 <Search_Mode+0x248>
		if (!((maze->goalPos[0].x == 0) && (maze->goalPos[0].y == 0))) {
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d104      	bne.n	8002a1a <Search_Mode+0x1fa>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f8d3 3910 	ldr.w	r3, [r3, #2320]	@ 0x910
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d004      	beq.n	8002a24 <Search_Mode+0x204>
			Set_Goal_Cell(maze, 1); // Change goal cell back to origin
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff fcb9 	bl	8002394 <Set_Goal_Cell>
			maze->mouse_dir = NORTH;
			prev_action = ABOUT_FACE;
		}
	}

}
 8002a22:	e021      	b.n	8002a68 <Search_Mode+0x248>
			armed = false;
 8002a24:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa0 <Search_Mode+0x280>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
			Set_Goal_Cell(maze, 4); // Change goal cell back to center of maze
 8002a2a:	2104      	movs	r1, #4
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff fcb1 	bl	8002394 <Set_Goal_Cell>
			maze->mouse_dir = NORTH;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	721a      	strb	r2, [r3, #8]
			Profile_Container(SEARCH_STOP_FWD, &forward_profile);
 8002a38:	4b14      	ldr	r3, [pc, #80]	@ (8002a8c <Search_Mode+0x26c>)
 8002a3a:	4a0f      	ldr	r2, [pc, #60]	@ (8002a78 <Search_Mode+0x258>)
 8002a3c:	9200      	str	r2, [sp, #0]
 8002a3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a40:	f000 fa98 	bl	8002f74 <Profile_Container>
			Profile_Container(ROT_ABOUT, &rotational_profile);
 8002a44:	4b12      	ldr	r3, [pc, #72]	@ (8002a90 <Search_Mode+0x270>)
 8002a46:	4a0b      	ldr	r2, [pc, #44]	@ (8002a74 <Search_Mode+0x254>)
 8002a48:	9200      	str	r2, [sp, #0]
 8002a4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a4c:	f000 fa92 	bl	8002f74 <Profile_Container>
			Profile_Container(SEARCH_REVERSE_FWD, &forward_profile);
 8002a50:	4b10      	ldr	r3, [pc, #64]	@ (8002a94 <Search_Mode+0x274>)
 8002a52:	4a09      	ldr	r2, [pc, #36]	@ (8002a78 <Search_Mode+0x258>)
 8002a54:	9200      	str	r2, [sp, #0]
 8002a56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a58:	f000 fa8c 	bl	8002f74 <Profile_Container>
			maze->mouse_dir = NORTH;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	721a      	strb	r2, [r3, #8]
			prev_action = ABOUT_FACE;
 8002a62:	4b07      	ldr	r3, [pc, #28]	@ (8002a80 <Search_Mode+0x260>)
 8002a64:	2203      	movs	r2, #3
 8002a66:	701a      	strb	r2, [r3, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a70:	2000002c 	.word	0x2000002c
 8002a74:	20000c1c 	.word	0x20000c1c
 8002a78:	20000bf8 	.word	0x20000bf8
 8002a7c:	2000006c 	.word	0x2000006c
 8002a80:	20000008 	.word	0x20000008
 8002a84:	2000005c 	.word	0x2000005c
 8002a88:	20000ca0 	.word	0x20000ca0
 8002a8c:	2000003c 	.word	0x2000003c
 8002a90:	2000007c 	.word	0x2000007c
 8002a94:	2000004c 	.word	0x2000004c
 8002a98:	2000001c 	.word	0x2000001c
 8002a9c:	2000000c 	.word	0x2000000c
 8002aa0:	200002c0 	.word	0x200002c0

08002aa4 <Set_Motor_Volts>:
float motor_left_previous_speed = 0;
float motor_right_previous_speed = 0;

bool motor_controller_enabled = false;

void Set_Motor_Volts(motor_t motor, float voltage_to_translate) {
 8002aa4:	b590      	push	{r4, r7, lr}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	6039      	str	r1, [r7, #0]
 8002aae:	71fb      	strb	r3, [r7, #7]
	voltage_to_translate = voltage_to_translate > MAX_MOTOR_VOLTAGE ? MAX_MOTOR_VOLTAGE : voltage_to_translate;
 8002ab0:	4b2f      	ldr	r3, [pc, #188]	@ (8002b70 <Set_Motor_Volts+0xcc>)
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6838      	ldr	r0, [r7, #0]
 8002ab6:	f7fe fa59 	bl	8000f6c <__aeabi_fcmpgt>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <Set_Motor_Volts+0x20>
 8002ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8002b70 <Set_Motor_Volts+0xcc>)
 8002ac2:	e000      	b.n	8002ac6 <Set_Motor_Volts+0x22>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	603b      	str	r3, [r7, #0]
	voltage_to_translate = voltage_to_translate < -MAX_MOTOR_VOLTAGE ? -MAX_MOTOR_VOLTAGE : voltage_to_translate;
 8002ac8:	4b29      	ldr	r3, [pc, #164]	@ (8002b70 <Set_Motor_Volts+0xcc>)
 8002aca:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002ace:	4619      	mov	r1, r3
 8002ad0:	6838      	ldr	r0, [r7, #0]
 8002ad2:	f7fe fa2d 	bl	8000f30 <__aeabi_fcmplt>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <Set_Motor_Volts+0x40>
 8002adc:	4b24      	ldr	r3, [pc, #144]	@ (8002b70 <Set_Motor_Volts+0xcc>)
 8002ade:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002ae2:	e000      	b.n	8002ae6 <Set_Motor_Volts+0x42>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	603b      	str	r3, [r7, #0]

	int counter_period = MAX_PWM * (voltage_to_translate + Calculate_Battery_Bias(voltage_to_translate)) / mouse_state.battery_voltage;
 8002ae8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fe f82d 	bl	8000b4c <__aeabi_i2f>
 8002af2:	4604      	mov	r4, r0
 8002af4:	6838      	ldr	r0, [r7, #0]
 8002af6:	f000 fbdd 	bl	80032b4 <Calculate_Battery_Bias>
 8002afa:	4603      	mov	r3, r0
 8002afc:	6839      	ldr	r1, [r7, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fd ff70 	bl	80009e4 <__addsf3>
 8002b04:	4603      	mov	r3, r0
 8002b06:	4619      	mov	r1, r3
 8002b08:	4620      	mov	r0, r4
 8002b0a:	f7fe f873 	bl	8000bf4 <__aeabi_fmul>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fd fc7f 	bl	8000414 <__aeabi_f2d>
 8002b16:	4b17      	ldr	r3, [pc, #92]	@ (8002b74 <Set_Motor_Volts+0xd0>)
 8002b18:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002b1c:	f7fd fdfc 	bl	8000718 <__aeabi_ddiv>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	f7fd fede 	bl	80008e8 <__aeabi_d2iz>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	60fb      	str	r3, [r7, #12]
	if (counter_period < 0) {
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	da08      	bge.n	8002b48 <Set_Motor_Volts+0xa4>
		Set_Direction(motor, REVERSE);
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	2101      	movs	r1, #1
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f848 	bl	8002bd0 <Set_Direction>
		counter_period = -counter_period;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	425b      	negs	r3, r3
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	e007      	b.n	8002b58 <Set_Motor_Volts+0xb4>
	}
	else if (counter_period > 0) {
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	dd04      	ble.n	8002b58 <Set_Motor_Volts+0xb4>
		Set_Direction(motor, FORWARD);
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f83c 	bl	8002bd0 <Set_Direction>
	}

	Set_PWM(motor, counter_period);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 f809 	bl	8002b78 <Set_PWM>
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd90      	pop	{r4, r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40c00000 	.word	0x40c00000
 8002b74:	20000298 	.word	0x20000298

08002b78 <Set_PWM>:

void Set_PWM(motor_t motor, uint16_t counter_period) {
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	460a      	mov	r2, r1
 8002b82:	71fb      	strb	r3, [r7, #7]
 8002b84:	4613      	mov	r3, r2
 8002b86:	80bb      	strh	r3, [r7, #4]
	// Software limit for motor voltage ~6V
	counter_period = counter_period > PWM_LIMIT ? PWM_LIMIT: counter_period;
 8002b88:	f44f 62b3 	mov.w	r2, #1432	@ 0x598
 8002b8c:	88bb      	ldrh	r3, [r7, #4]
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	bf28      	it	cs
 8002b92:	4613      	movcs	r3, r2
 8002b94:	80bb      	strh	r3, [r7, #4]
	counter_period = counter_period < 10 ? 0: counter_period;
 8002b96:	88bb      	ldrh	r3, [r7, #4]
 8002b98:	2b09      	cmp	r3, #9
 8002b9a:	d901      	bls.n	8002ba0 <Set_PWM+0x28>
 8002b9c:	88bb      	ldrh	r3, [r7, #4]
 8002b9e:	e000      	b.n	8002ba2 <Set_PWM+0x2a>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	80bb      	strh	r3, [r7, #4]
	switch(motor) {
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <Set_PWM+0x38>
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d005      	beq.n	8002bba <Set_PWM+0x42>
			break;
		case MOTOR_RIGHT:
			TIM2->CCR3 = counter_period;
			break;
	}
}
 8002bae:	e009      	b.n	8002bc4 <Set_PWM+0x4c>
			TIM2->CCR4 = counter_period;
 8002bb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002bb4:	88bb      	ldrh	r3, [r7, #4]
 8002bb6:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8002bb8:	e004      	b.n	8002bc4 <Set_PWM+0x4c>
			TIM2->CCR3 = counter_period;
 8002bba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002bbe:	88bb      	ldrh	r3, [r7, #4]
 8002bc0:	63d3      	str	r3, [r2, #60]	@ 0x3c
			break;
 8002bc2:	bf00      	nop
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr
	...

08002bd0 <Set_Direction>:

void Set_Direction(motor_t motor, motor_direction_t direction) {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	460a      	mov	r2, r1
 8002bda:	71fb      	strb	r3, [r7, #7]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	71bb      	strb	r3, [r7, #6]
	switch(motor) {
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <Set_Direction+0x1c>
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d032      	beq.n	8002c50 <Set_Direction+0x80>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
					break;
			}
			break;
	}
}
 8002bea:	e066      	b.n	8002cba <Set_Direction+0xea>
			switch(direction) {
 8002bec:	79bb      	ldrb	r3, [r7, #6]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d020      	beq.n	8002c34 <Set_Direction+0x64>
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	dc5e      	bgt.n	8002cb4 <Set_Direction+0xe4>
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <Set_Direction+0x30>
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d00d      	beq.n	8002c1a <Set_Direction+0x4a>
			break;
 8002bfe:	e059      	b.n	8002cb4 <Set_Direction+0xe4>
					HAL_GPIO_WritePin(ML_FWD_GPIO_Port,  ML_FWD_Pin, 1);
 8002c00:	2201      	movs	r2, #1
 8002c02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002c06:	482f      	ldr	r0, [pc, #188]	@ (8002cc4 <Set_Direction+0xf4>)
 8002c08:	f002 f9e4 	bl	8004fd4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c12:	482d      	ldr	r0, [pc, #180]	@ (8002cc8 <Set_Direction+0xf8>)
 8002c14:	f002 f9de 	bl	8004fd4 <HAL_GPIO_WritePin>
					break;
 8002c18:	e019      	b.n	8002c4e <Set_Direction+0x7e>
					HAL_GPIO_WritePin(ML_FWD_GPIO_Port,  ML_FWD_Pin, 0);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002c20:	4828      	ldr	r0, [pc, #160]	@ (8002cc4 <Set_Direction+0xf4>)
 8002c22:	f002 f9d7 	bl	8004fd4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 1);
 8002c26:	2201      	movs	r2, #1
 8002c28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c2c:	4826      	ldr	r0, [pc, #152]	@ (8002cc8 <Set_Direction+0xf8>)
 8002c2e:	f002 f9d1 	bl	8004fd4 <HAL_GPIO_WritePin>
					break;
 8002c32:	e00c      	b.n	8002c4e <Set_Direction+0x7e>
					HAL_GPIO_WritePin(ML_FWD_GPIO_Port,  ML_FWD_Pin, 0);
 8002c34:	2200      	movs	r2, #0
 8002c36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002c3a:	4822      	ldr	r0, [pc, #136]	@ (8002cc4 <Set_Direction+0xf4>)
 8002c3c:	f002 f9ca 	bl	8004fd4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 8002c40:	2200      	movs	r2, #0
 8002c42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c46:	4820      	ldr	r0, [pc, #128]	@ (8002cc8 <Set_Direction+0xf8>)
 8002c48:	f002 f9c4 	bl	8004fd4 <HAL_GPIO_WritePin>
					break;
 8002c4c:	bf00      	nop
			break;
 8002c4e:	e031      	b.n	8002cb4 <Set_Direction+0xe4>
			switch(direction) {
 8002c50:	79bb      	ldrb	r3, [r7, #6]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d020      	beq.n	8002c98 <Set_Direction+0xc8>
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	dc2e      	bgt.n	8002cb8 <Set_Direction+0xe8>
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <Set_Direction+0x94>
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d00d      	beq.n	8002c7e <Set_Direction+0xae>
			break;
 8002c62:	e029      	b.n	8002cb8 <Set_Direction+0xe8>
					HAL_GPIO_WritePin(MR_FWD_GPIO_Port,  MR_FWD_Pin, 1);
 8002c64:	2201      	movs	r2, #1
 8002c66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c6a:	4816      	ldr	r0, [pc, #88]	@ (8002cc4 <Set_Direction+0xf4>)
 8002c6c:	f002 f9b2 	bl	8004fd4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
 8002c70:	2200      	movs	r2, #0
 8002c72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c76:	4813      	ldr	r0, [pc, #76]	@ (8002cc4 <Set_Direction+0xf4>)
 8002c78:	f002 f9ac 	bl	8004fd4 <HAL_GPIO_WritePin>
					break;
 8002c7c:	e019      	b.n	8002cb2 <Set_Direction+0xe2>
					HAL_GPIO_WritePin(MR_FWD_GPIO_Port,  MR_FWD_Pin, 0);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c84:	480f      	ldr	r0, [pc, #60]	@ (8002cc4 <Set_Direction+0xf4>)
 8002c86:	f002 f9a5 	bl	8004fd4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 1);
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c90:	480c      	ldr	r0, [pc, #48]	@ (8002cc4 <Set_Direction+0xf4>)
 8002c92:	f002 f99f 	bl	8004fd4 <HAL_GPIO_WritePin>
					break;
 8002c96:	e00c      	b.n	8002cb2 <Set_Direction+0xe2>
					HAL_GPIO_WritePin(MR_FWD_GPIO_Port,  MR_FWD_Pin, 0);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c9e:	4809      	ldr	r0, [pc, #36]	@ (8002cc4 <Set_Direction+0xf4>)
 8002ca0:	f002 f998 	bl	8004fd4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002caa:	4806      	ldr	r0, [pc, #24]	@ (8002cc4 <Set_Direction+0xf4>)
 8002cac:	f002 f992 	bl	8004fd4 <HAL_GPIO_WritePin>
					break;
 8002cb0:	bf00      	nop
			break;
 8002cb2:	e001      	b.n	8002cb8 <Set_Direction+0xe8>
			break;
 8002cb4:	bf00      	nop
 8002cb6:	e000      	b.n	8002cba <Set_Direction+0xea>
			break;
 8002cb8:	bf00      	nop
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40010c00 	.word	0x40010c00
 8002cc8:	40010800 	.word	0x40010800

08002ccc <Position_Controller>:

float Position_Controller(float velocity) {
 8002ccc:	b590      	push	{r4, r7, lr}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
	float increment = velocity * SYSTICK_INTERVAL;
 8002cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d54 <Position_Controller+0x88>)
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7fd ff8b 	bl	8000bf4 <__aeabi_fmul>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	60fb      	str	r3, [r7, #12]
	forward_error += increment - delta_position_forward;
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d58 <Position_Controller+0x8c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f7fd fe79 	bl	80009e0 <__aeabi_fsub>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d5c <Position_Controller+0x90>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	f7fd fe73 	bl	80009e4 <__addsf3>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	461a      	mov	r2, r3
 8002d02:	4b16      	ldr	r3, [pc, #88]	@ (8002d5c <Position_Controller+0x90>)
 8002d04:	601a      	str	r2, [r3, #0]
	float forward_error_difference = forward_error - previous_forward_error;
 8002d06:	4b15      	ldr	r3, [pc, #84]	@ (8002d5c <Position_Controller+0x90>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a15      	ldr	r2, [pc, #84]	@ (8002d60 <Position_Controller+0x94>)
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd fe65 	bl	80009e0 <__aeabi_fsub>
 8002d16:	4603      	mov	r3, r0
 8002d18:	60bb      	str	r3, [r7, #8]
	previous_forward_error = forward_error;
 8002d1a:	4b10      	ldr	r3, [pc, #64]	@ (8002d5c <Position_Controller+0x90>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a10      	ldr	r2, [pc, #64]	@ (8002d60 <Position_Controller+0x94>)
 8002d20:	6013      	str	r3, [r2, #0]

	return FWD_KP * forward_error + FWD_KD * forward_error_difference;
 8002d22:	4a10      	ldr	r2, [pc, #64]	@ (8002d64 <Position_Controller+0x98>)
 8002d24:	4b0d      	ldr	r3, [pc, #52]	@ (8002d5c <Position_Controller+0x90>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	f7fd ff62 	bl	8000bf4 <__aeabi_fmul>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461c      	mov	r4, r3
 8002d34:	4b0c      	ldr	r3, [pc, #48]	@ (8002d68 <Position_Controller+0x9c>)
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fd ff5b 	bl	8000bf4 <__aeabi_fmul>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4619      	mov	r1, r3
 8002d42:	4620      	mov	r0, r4
 8002d44:	f7fd fe4e 	bl	80009e4 <__addsf3>
 8002d48:	4603      	mov	r3, r0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd90      	pop	{r4, r7, pc}
 8002d52:	bf00      	nop
 8002d54:	3b03126f 	.word	0x3b03126f
 8002d58:	20000c68 	.word	0x20000c68
 8002d5c:	20000c88 	.word	0x20000c88
 8002d60:	20000c8c 	.word	0x20000c8c
 8002d64:	3ef04ea3 	.word	0x3ef04ea3
 8002d68:	4134a52a 	.word	0x4134a52a

08002d6c <Update_Motors>:
	feedforward += acceleration_feedforward;

	return feedforward;
}

void Update_Motors(float velocity, float omega, float steering_adjustment) {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08c      	sub	sp, #48	@ 0x30
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
	steering_adjustment = rotational_profile.state == IDLE || rotational_profile.state == COMPLETE ? steering_adjustment : 0;
 8002d78:	4b28      	ldr	r3, [pc, #160]	@ (8002e1c <Update_Motors+0xb0>)
 8002d7a:	7c1b      	ldrb	r3, [r3, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <Update_Motors+0x1c>
 8002d80:	4b26      	ldr	r3, [pc, #152]	@ (8002e1c <Update_Motors+0xb0>)
 8002d82:	7c1b      	ldrb	r3, [r3, #16]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d101      	bne.n	8002d8c <Update_Motors+0x20>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	e001      	b.n	8002d90 <Update_Motors+0x24>
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	607b      	str	r3, [r7, #4]

	float position_output = Position_Controller(velocity);
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f7ff ff9a 	bl	8002ccc <Position_Controller>
 8002d98:	62f8      	str	r0, [r7, #44]	@ 0x2c
	float rotational_output = 0;//Rotational_Controller(steering_adjustment, omega);
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	62bb      	str	r3, [r7, #40]	@ 0x28

	float motor_left_voltage = 0;
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	627b      	str	r3, [r7, #36]	@ 0x24
	float motor_right_voltage = 0;
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	623b      	str	r3, [r7, #32]
	motor_left_voltage = position_output - rotational_output;
 8002dac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002db0:	f7fd fe16 	bl	80009e0 <__aeabi_fsub>
 8002db4:	4603      	mov	r3, r0
 8002db6:	627b      	str	r3, [r7, #36]	@ 0x24
	motor_right_voltage = position_output + rotational_output;
 8002db8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002dbc:	f7fd fe12 	bl	80009e4 <__addsf3>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	623b      	str	r3, [r7, #32]

	float tangent_speed = omega * MOUSE_RADIUS * RADIANS_PER_DEGREE;
 8002dc4:	4b16      	ldr	r3, [pc, #88]	@ (8002e20 <Update_Motors+0xb4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fd ff12 	bl	8000bf4 <__aeabi_fmul>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4b13      	ldr	r3, [pc, #76]	@ (8002e24 <Update_Motors+0xb8>)
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4610      	mov	r0, r2
 8002dda:	f7fd ff0b 	bl	8000bf4 <__aeabi_fmul>
 8002dde:	4603      	mov	r3, r0
 8002de0:	61fb      	str	r3, [r7, #28]
	float motor_left_speed = velocity - tangent_speed;
 8002de2:	69f9      	ldr	r1, [r7, #28]
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f7fd fdfb 	bl	80009e0 <__aeabi_fsub>
 8002dea:	4603      	mov	r3, r0
 8002dec:	61bb      	str	r3, [r7, #24]
	float motor_right_speed = velocity + tangent_speed;
 8002dee:	69f9      	ldr	r1, [r7, #28]
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f7fd fdf7 	bl	80009e4 <__addsf3>
 8002df6:	4603      	mov	r3, r0
 8002df8:	617b      	str	r3, [r7, #20]
	#ifdef FEEDFORWARD_ENABLE
		motor_left_voltage += 0.1*Feed_Forward(MOTOR_LEFT, motor_left_speed);
		motor_right_voltage += 0.1*Feed_Forward(MOTOR_RIGHT, motor_right_speed);
	#endif
	if (motor_controller_enabled) {
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <Update_Motors+0xbc>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <Update_Motors+0xa6>
		Set_Motor_Volts(MOTOR_LEFT, motor_left_voltage);
 8002e02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e04:	2000      	movs	r0, #0
 8002e06:	f7ff fe4d 	bl	8002aa4 <Set_Motor_Volts>
		Set_Motor_Volts(MOTOR_RIGHT, motor_right_voltage);
 8002e0a:	6a39      	ldr	r1, [r7, #32]
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	f7ff fe49 	bl	8002aa4 <Set_Motor_Volts>
	}
}
 8002e12:	bf00      	nop
 8002e14:	3730      	adds	r7, #48	@ 0x30
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000c1c 	.word	0x20000c1c
 8002e20:	08007a78 	.word	0x08007a78
 8002e24:	3c8efa35 	.word	0x3c8efa35
 8002e28:	20000c90 	.word	0x20000c90

08002e2c <Clear_Profile>:
extern float mouse_angle;

float on_completion_error_forward = 0;
float on_completion_error_rotational = 0;

void Clear_Profile(profile_t* profile) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	bzero(profile, sizeof(profile_t));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4618      	mov	r0, r3
 8002e38:	2324      	movs	r3, #36	@ 0x24
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	f004 fd61 	bl	8007904 <memset>
	profile->state = IDLE; // Should be handled above, just make sure it's IDLE
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	741a      	strb	r2, [r3, #16]
	profile->direction = 1;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	621a      	str	r2, [r3, #32]
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <Start_Profile>:

void Start_Profile(param_t parameters, profile_t* profile) {
 8002e58:	b590      	push	{r4, r7, lr}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	463c      	mov	r4, r7
 8002e60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (parameters.distance < 0) {
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	f04f 0100 	mov.w	r1, #0
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe f860 	bl	8000f30 <__aeabi_fcmplt>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d007      	beq.n	8002e86 <Start_Profile+0x2e>
		profile->direction = -1;
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	f04f 32ff 	mov.w	r2, #4294967295
 8002e7c:	621a      	str	r2, [r3, #32]
		parameters.distance *= -1;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002e84:	603b      	str	r3, [r7, #0]
	}
	if (parameters.distance < 1.0) {
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe f84f 	bl	8000f30 <__aeabi_fcmplt>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <Start_Profile+0x48>
		profile->state = COMPLETE;
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	741a      	strb	r2, [r3, #16]
		return;
 8002e9e:	e062      	b.n	8002f66 <Start_Profile+0x10e>
	}
	if (parameters.end_speed > parameters.max_speed) {
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe f860 	bl	8000f6c <__aeabi_fcmpgt>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <Start_Profile+0x5e>
		parameters.end_speed = parameters.max_speed;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	60bb      	str	r3, [r7, #8]
	}

	profile->position = 0;
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	619a      	str	r2, [r3, #24]
	profile->parameters.distance += profile == &forward_profile ? on_completion_error_forward : 0;
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	4929      	ldr	r1, [pc, #164]	@ (8002f6c <Start_Profile+0x114>)
 8002ec6:	428b      	cmp	r3, r1
 8002ec8:	d102      	bne.n	8002ed0 <Start_Profile+0x78>
 8002eca:	4b29      	ldr	r3, [pc, #164]	@ (8002f70 <Start_Profile+0x118>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	e001      	b.n	8002ed4 <Start_Profile+0x7c>
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fd fd84 	bl	80009e4 <__addsf3>
 8002edc:	4603      	mov	r3, r0
 8002ede:	461a      	mov	r2, r3
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	601a      	str	r2, [r3, #0]
	parameters.max_speed = profile->direction * fabsf(parameters.max_speed);
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd fe2f 	bl	8000b4c <__aeabi_i2f>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4610      	mov	r0, r2
 8002efa:	f7fd fe7b 	bl	8000bf4 <__aeabi_fmul>
 8002efe:	4603      	mov	r3, r0
 8002f00:	607b      	str	r3, [r7, #4]
	parameters.end_speed = profile->direction * fabsf(parameters.end_speed);
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd fe20 	bl	8000b4c <__aeabi_i2f>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f14:	4619      	mov	r1, r3
 8002f16:	4610      	mov	r0, r2
 8002f18:	f7fd fe6c 	bl	8000bf4 <__aeabi_fmul>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	60bb      	str	r3, [r7, #8]
	parameters.acceleration = fabsf(parameters.acceleration);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f26:	60fb      	str	r3, [r7, #12]
	memcpy(&(profile->parameters), &parameters, sizeof(param_t));
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	4639      	mov	r1, r7
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f004 fd2c 	bl	800798c <memcpy>
	profile->inverse_acceleration = parameters.acceleration >= 1 ? (1.0f / parameters.acceleration) : 1.0;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe f80c 	bl	8000f58 <__aeabi_fcmpge>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <Start_Profile+0x100>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002f4e:	f7fd ff05 	bl	8000d5c <__aeabi_fdiv>
 8002f52:	4603      	mov	r3, r0
 8002f54:	461a      	mov	r2, r3
 8002f56:	e001      	b.n	8002f5c <Start_Profile+0x104>
 8002f58:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	61da      	str	r2, [r3, #28]

	profile->state = ACCELERATING;
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	2201      	movs	r2, #1
 8002f64:	741a      	strb	r2, [r3, #16]
}
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd90      	pop	{r4, r7, pc}
 8002f6c:	20000bf8 	.word	0x20000bf8
 8002f70:	20000c94 	.word	0x20000c94

08002f74 <Profile_Container>:

void Profile_Container(param_t parameters, profile_t* profile) {
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b089      	sub	sp, #36	@ 0x24
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	463c      	mov	r4, r7
 8002f7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float original_position = mouse_position;
 8002f80:	4b11      	ldr	r3, [pc, #68]	@ (8002fc8 <Profile_Container+0x54>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	617b      	str	r3, [r7, #20]
	Start_Profile(parameters, profile);
 8002f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	463b      	mov	r3, r7
 8002f8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f8e:	f7ff ff63 	bl	8002e58 <Start_Profile>
	while (profile->state != COMPLETE);
 8002f92:	bf00      	nop
 8002f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f96:	7c1b      	ldrb	r3, [r3, #16]
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d1fb      	bne.n	8002f94 <Profile_Container+0x20>
	float delta_position = mouse_position - original_position;
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc8 <Profile_Container+0x54>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6979      	ldr	r1, [r7, #20]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fd fd1c 	bl	80009e0 <__aeabi_fsub>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	613b      	str	r3, [r7, #16]
	on_completion_error_forward = parameters.distance - delta_position;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	6939      	ldr	r1, [r7, #16]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fd fd15 	bl	80009e0 <__aeabi_fsub>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4b04      	ldr	r3, [pc, #16]	@ (8002fcc <Profile_Container+0x58>)
 8002fbc:	601a      	str	r2, [r3, #0]
}
 8002fbe:	bf00      	nop
 8002fc0:	371c      	adds	r7, #28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd90      	pop	{r4, r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20000c74 	.word	0x20000c74
 8002fcc:	20000c94 	.word	0x20000c94

08002fd0 <Turn_Container>:

void Turn_Container(param_t fwd_parameters, param_t rot_parameters, profile_t* fwd_profile, profile_t* rot_profile) {
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	463c      	mov	r4, r7
 8002fd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Profile_Container(fwd_parameters, fwd_profile);
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	463b      	mov	r3, r7
 8002fe2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fe4:	f7ff ffc6 	bl	8002f74 <Profile_Container>
    adjust_steering = false;
 8002fe8:	4b10      	ldr	r3, [pc, #64]	@ (800302c <Turn_Container+0x5c>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	701a      	strb	r2, [r3, #0]
    Start_Profile(rot_parameters, rot_profile);
 8002fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	f107 0320 	add.w	r3, r7, #32
 8002ff6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ff8:	f7ff ff2e 	bl	8002e58 <Start_Profile>
    while(rot_profile->state != COMPLETE);
 8002ffc:	bf00      	nop
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003000:	7c1b      	ldrb	r3, [r3, #16]
 8003002:	2b03      	cmp	r3, #3
 8003004:	d1fb      	bne.n	8002ffe <Turn_Container+0x2e>
    Clear_Profile(rot_profile);
 8003006:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003008:	f7ff ff10 	bl	8002e2c <Clear_Profile>
    adjust_steering = true;
 800300c:	4b07      	ldr	r3, [pc, #28]	@ (800302c <Turn_Container+0x5c>)
 800300e:	2201      	movs	r2, #1
 8003010:	701a      	strb	r2, [r3, #0]
    fwd_parameters.end_speed = fwd_parameters.max_speed;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	60bb      	str	r3, [r7, #8]
    Profile_Container(fwd_parameters, fwd_profile);
 8003016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	463b      	mov	r3, r7
 800301c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800301e:	f7ff ffa9 	bl	8002f74 <Profile_Container>
}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	bd90      	pop	{r4, r7, pc}
 800302a:	bf00      	nop
 800302c:	20000ca3 	.word	0x20000ca3

08003030 <Calculate_Braking_Distance>:
	Clear_Profile(rot_profile);
	adjust_steering = true;
	Profile_Container(fwd_parameters, fwd_profile);
}

float Calculate_Braking_Distance(float current_speed, float end_speed, float inverse_acceleration) {
 8003030:	b5b0      	push	{r4, r5, r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
	return fabsf(current_speed * current_speed - end_speed * end_speed) * 0.5 * inverse_acceleration;
 800303c:	68f9      	ldr	r1, [r7, #12]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f7fd fdd8 	bl	8000bf4 <__aeabi_fmul>
 8003044:	4603      	mov	r3, r0
 8003046:	461c      	mov	r4, r3
 8003048:	68b9      	ldr	r1, [r7, #8]
 800304a:	68b8      	ldr	r0, [r7, #8]
 800304c:	f7fd fdd2 	bl	8000bf4 <__aeabi_fmul>
 8003050:	4603      	mov	r3, r0
 8003052:	4619      	mov	r1, r3
 8003054:	4620      	mov	r0, r4
 8003056:	f7fd fcc3 	bl	80009e0 <__aeabi_fsub>
 800305a:	4603      	mov	r3, r0
 800305c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003060:	4618      	mov	r0, r3
 8003062:	f7fd f9d7 	bl	8000414 <__aeabi_f2d>
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	4b0d      	ldr	r3, [pc, #52]	@ (80030a0 <Calculate_Braking_Distance+0x70>)
 800306c:	f7fd fa2a 	bl	80004c4 <__aeabi_dmul>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4614      	mov	r4, r2
 8003076:	461d      	mov	r5, r3
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7fd f9cb 	bl	8000414 <__aeabi_f2d>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4620      	mov	r0, r4
 8003084:	4629      	mov	r1, r5
 8003086:	f7fd fa1d 	bl	80004c4 <__aeabi_dmul>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4610      	mov	r0, r2
 8003090:	4619      	mov	r1, r3
 8003092:	f7fd fc51 	bl	8000938 <__aeabi_d2f>
 8003096:	4603      	mov	r3, r0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bdb0      	pop	{r4, r5, r7, pc}
 80030a0:	3fe00000 	.word	0x3fe00000

080030a4 <Update_Profile>:

void Update_Profile(profile_t* profile) {
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
	if (profile->state == IDLE) {
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	7c1b      	ldrb	r3, [r3, #16]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80bc 	beq.w	800322e <Update_Profile+0x18a>
		return;
	}

	float delta_v = profile->parameters.acceleration * SYSTICK_INTERVAL;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	4a5f      	ldr	r2, [pc, #380]	@ (8003238 <Update_Profile+0x194>)
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	4611      	mov	r1, r2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd fd97 	bl	8000bf4 <__aeabi_fmul>
 80030c6:	4603      	mov	r3, r0
 80030c8:	617b      	str	r3, [r7, #20]
	float remaining_distance = fabsf(profile->parameters.distance) - fabsf(profile->position);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030da:	4619      	mov	r1, r3
 80030dc:	4610      	mov	r0, r2
 80030de:	f7fd fc7f 	bl	80009e0 <__aeabi_fsub>
 80030e2:	4603      	mov	r3, r0
 80030e4:	613b      	str	r3, [r7, #16]
	if (profile->state == ACCELERATING) {
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	7c1b      	ldrb	r3, [r3, #16]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d130      	bne.n	8003150 <Update_Profile+0xac>
		float braking_distance = Calculate_Braking_Distance(profile->speed, profile->parameters.end_speed, profile->inverse_acceleration);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6958      	ldr	r0, [r3, #20]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6899      	ldr	r1, [r3, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	461a      	mov	r2, r3
 80030fc:	f7ff ff98 	bl	8003030 <Calculate_Braking_Distance>
 8003100:	60f8      	str	r0, [r7, #12]
		if (remaining_distance < braking_distance) {
 8003102:	68f9      	ldr	r1, [r7, #12]
 8003104:	6938      	ldr	r0, [r7, #16]
 8003106:	f7fd ff13 	bl	8000f30 <__aeabi_fcmplt>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01f      	beq.n	8003150 <Update_Profile+0xac>
			profile->state = BRAKING;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	741a      	strb	r2, [r3, #16]
			if (profile->parameters.end_speed == 0) {
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f04f 0100 	mov.w	r1, #0
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd fefc 	bl	8000f1c <__aeabi_fcmpeq>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00e      	beq.n	8003148 <Update_Profile+0xa4>
				profile->parameters.max_speed = profile->direction * 5.0f;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd fd0c 	bl	8000b4c <__aeabi_i2f>
 8003134:	4603      	mov	r3, r0
 8003136:	4941      	ldr	r1, [pc, #260]	@ (800323c <Update_Profile+0x198>)
 8003138:	4618      	mov	r0, r3
 800313a:	f7fd fd5b 	bl	8000bf4 <__aeabi_fmul>
 800313e:	4603      	mov	r3, r0
 8003140:	461a      	mov	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	e003      	b.n	8003150 <Update_Profile+0xac>
			}
			else {
				profile->parameters.max_speed = profile->parameters.end_speed;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	605a      	str	r2, [r3, #4]
			}
		}
	}

	if (profile->speed < profile->parameters.max_speed) {
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	4619      	mov	r1, r3
 800315a:	4610      	mov	r0, r2
 800315c:	f7fd fee8 	bl	8000f30 <__aeabi_fcmplt>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d018      	beq.n	8003198 <Update_Profile+0xf4>
		profile->speed += delta_v;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	6979      	ldr	r1, [r7, #20]
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd fc39 	bl	80009e4 <__addsf3>
 8003172:	4603      	mov	r3, r0
 8003174:	461a      	mov	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	615a      	str	r2, [r3, #20]
		if (profile->speed > profile->parameters.max_speed) {
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4619      	mov	r1, r3
 8003184:	4610      	mov	r0, r2
 8003186:	f7fd fef1 	bl	8000f6c <__aeabi_fcmpgt>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <Update_Profile+0xf4>
			profile->speed = profile->parameters.max_speed;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	615a      	str	r2, [r3, #20]
		}
	}
	if (profile->speed > profile->parameters.max_speed) {
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	695a      	ldr	r2, [r3, #20]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4619      	mov	r1, r3
 80031a2:	4610      	mov	r0, r2
 80031a4:	f7fd fee2 	bl	8000f6c <__aeabi_fcmpgt>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d018      	beq.n	80031e0 <Update_Profile+0x13c>
		profile->speed -= delta_v;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	6979      	ldr	r1, [r7, #20]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fd fc13 	bl	80009e0 <__aeabi_fsub>
 80031ba:	4603      	mov	r3, r0
 80031bc:	461a      	mov	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	615a      	str	r2, [r3, #20]
		if (profile->speed < profile->parameters.max_speed) {
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4619      	mov	r1, r3
 80031cc:	4610      	mov	r0, r2
 80031ce:	f7fd feaf 	bl	8000f30 <__aeabi_fcmplt>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <Update_Profile+0x13c>
			profile->speed = profile->parameters.max_speed;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	615a      	str	r2, [r3, #20]
		}
	}

	profile->position += profile->speed * SYSTICK_INTERVAL;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699c      	ldr	r4, [r3, #24]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	4a13      	ldr	r2, [pc, #76]	@ (8003238 <Update_Profile+0x194>)
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd fd00 	bl	8000bf4 <__aeabi_fmul>
 80031f4:	4603      	mov	r3, r0
 80031f6:	4619      	mov	r1, r3
 80031f8:	4620      	mov	r0, r4
 80031fa:	f7fd fbf3 	bl	80009e4 <__addsf3>
 80031fe:	4603      	mov	r3, r0
 8003200:	461a      	mov	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	619a      	str	r2, [r3, #24]
	if (profile->state != COMPLETE && remaining_distance < 0.125) {
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	7c1b      	ldrb	r3, [r3, #16]
 800320a:	2b03      	cmp	r3, #3
 800320c:	d010      	beq.n	8003230 <Update_Profile+0x18c>
 800320e:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8003212:	6938      	ldr	r0, [r7, #16]
 8003214:	f7fd fe8c 	bl	8000f30 <__aeabi_fcmplt>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d008      	beq.n	8003230 <Update_Profile+0x18c>
		profile->state = COMPLETE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2203      	movs	r2, #3
 8003222:	741a      	strb	r2, [r3, #16]
		profile->parameters.max_speed = profile->parameters.end_speed;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	605a      	str	r2, [r3, #4]
 800322c:	e000      	b.n	8003230 <Update_Profile+0x18c>
		return;
 800322e:	bf00      	nop
	}
}
 8003230:	371c      	adds	r7, #28
 8003232:	46bd      	mov	sp, r7
 8003234:	bd90      	pop	{r4, r7, pc}
 8003236:	bf00      	nop
 8003238:	08007a7c 	.word	0x08007a7c
 800323c:	40a00000 	.word	0x40a00000

08003240 <LED_Power_Init>:
const float ADC_MAX_READING = 4096.0;
const float ADC_REFERENCE_V = 3.3;

const float BATTERY_MULTIPLIER = (ADC_REFERENCE_V / ADC_MAX_READING / DIVIDER_RATIO);

void LED_Power_Init() {
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Power_GPIO_Port, LED_Power_Pin);
 8003244:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003248:	4802      	ldr	r0, [pc, #8]	@ (8003254 <LED_Power_Init+0x14>)
 800324a:	f001 fedb 	bl	8005004 <HAL_GPIO_TogglePin>
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40011000 	.word	0x40011000

08003258 <Pulse_Buzzer>:
void Reset_Buffers(uint8_t rxBuff, uint8_t txBuff) {
	rxBuff = 0;
	txBuff = 0;
}

void Pulse_Buzzer(uint16_t delay) {
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8003262:	2201      	movs	r2, #1
 8003264:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003268:	4804      	ldr	r0, [pc, #16]	@ (800327c <Pulse_Buzzer+0x24>)
 800326a:	f001 feb3 	bl	8004fd4 <HAL_GPIO_WritePin>
	buzzerDelay = delay;
 800326e:	4a04      	ldr	r2, [pc, #16]	@ (8003280 <Pulse_Buzzer+0x28>)
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	8013      	strh	r3, [r2, #0]
}
 8003274:	bf00      	nop
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40010c00 	.word	0x40010c00
 8003280:	20000c98 	.word	0x20000c98

08003284 <LED_Red_Toggle>:

void LED_Red_Toggle() {
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 8003288:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800328c:	4802      	ldr	r0, [pc, #8]	@ (8003298 <LED_Red_Toggle+0x14>)
 800328e:	f001 feb9 	bl	8005004 <HAL_GPIO_TogglePin>
}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40010800 	.word	0x40010800

0800329c <LED_Blue_Toggle>:

void LED_Green_Toggle() {
	HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
}

void LED_Blue_Toggle() {
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 80032a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80032a4:	4802      	ldr	r0, [pc, #8]	@ (80032b0 <LED_Blue_Toggle+0x14>)
 80032a6:	f001 fead 	bl	8005004 <HAL_GPIO_TogglePin>
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40010800 	.word	0x40010800

080032b4 <Calculate_Battery_Bias>:

float Calculate_Battery_Bias(float commanded_voltage) {
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
	return (BATTERY_BIAS_SLOPE * commanded_voltage + BATTERY_BIAS_OFFSET) / BATTERY_RATIO;
 80032bc:	4b0b      	ldr	r3, [pc, #44]	@ (80032ec <Calculate_Battery_Bias+0x38>)
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd fc97 	bl	8000bf4 <__aeabi_fmul>
 80032c6:	4603      	mov	r3, r0
 80032c8:	461a      	mov	r2, r3
 80032ca:	4b09      	ldr	r3, [pc, #36]	@ (80032f0 <Calculate_Battery_Bias+0x3c>)
 80032cc:	4619      	mov	r1, r3
 80032ce:	4610      	mov	r0, r2
 80032d0:	f7fd fb88 	bl	80009e4 <__addsf3>
 80032d4:	4603      	mov	r3, r0
 80032d6:	461a      	mov	r2, r3
 80032d8:	4b06      	ldr	r3, [pc, #24]	@ (80032f4 <Calculate_Battery_Bias+0x40>)
 80032da:	4619      	mov	r1, r3
 80032dc:	4610      	mov	r0, r2
 80032de:	f7fd fd3d 	bl	8000d5c <__aeabi_fdiv>
 80032e2:	4603      	mov	r3, r0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	3d9b089a 	.word	0x3d9b089a
 80032f0:	3cbb98c8 	.word	0x3cbb98c8
 80032f4:	3f69ba5e 	.word	0x3f69ba5e

080032f8 <Read_Battery>:

double Read_Battery() {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 80032fe:	4815      	ldr	r0, [pc, #84]	@ (8003354 <Read_Battery+0x5c>)
 8003300:	f000 ffa4 	bl	800424c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8003304:	f04f 31ff 	mov.w	r1, #4294967295
 8003308:	4812      	ldr	r0, [pc, #72]	@ (8003354 <Read_Battery+0x5c>)
 800330a:	f001 f879 	bl	8004400 <HAL_ADC_PollForConversion>
	uint16_t raw_adc = HAL_ADC_GetValue(&hadc2);
 800330e:	4811      	ldr	r0, [pc, #68]	@ (8003354 <Read_Battery+0x5c>)
 8003310:	f001 f97c 	bl	800460c <HAL_ADC_GetValue>
 8003314:	4603      	mov	r3, r0
 8003316:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc2);
 8003318:	480e      	ldr	r0, [pc, #56]	@ (8003354 <Read_Battery+0x5c>)
 800331a:	f001 f845 	bl	80043a8 <HAL_ADC_Stop>

	return raw_adc * BATTERY_MULTIPLIER + 1.0;
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	4618      	mov	r0, r3
 8003322:	f7fd fc13 	bl	8000b4c <__aeabi_i2f>
 8003326:	4603      	mov	r3, r0
 8003328:	4a0b      	ldr	r2, [pc, #44]	@ (8003358 <Read_Battery+0x60>)
 800332a:	4611      	mov	r1, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f7fd fc61 	bl	8000bf4 <__aeabi_fmul>
 8003332:	4603      	mov	r3, r0
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd f86d 	bl	8000414 <__aeabi_f2d>
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	4b07      	ldr	r3, [pc, #28]	@ (800335c <Read_Battery+0x64>)
 8003340:	f7fc ff0a 	bl	8000158 <__adddf3>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
}
 8003348:	4610      	mov	r0, r2
 800334a:	4619      	mov	r1, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000144 	.word	0x20000144
 8003358:	3b1e6666 	.word	0x3b1e6666
 800335c:	3ff00000 	.word	0x3ff00000

08003360 <ARM_Button>:

void ARM_Button() {
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
	for (uint8_t i=0; i < 5; i++) {
 8003366:	2300      	movs	r3, #0
 8003368:	71fb      	strb	r3, [r7, #7]
 800336a:	e008      	b.n	800337e <ARM_Button+0x1e>
		LED_Red_Toggle();
 800336c:	f7ff ff8a 	bl	8003284 <LED_Red_Toggle>
		HAL_Delay(500);
 8003370:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003374:	f000 fe6e 	bl	8004054 <HAL_Delay>
	for (uint8_t i=0; i < 5; i++) {
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	3301      	adds	r3, #1
 800337c:	71fb      	strb	r3, [r7, #7]
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	2b04      	cmp	r3, #4
 8003382:	d9f3      	bls.n	800336c <ARM_Button+0xc>
	}
	armed = true;
 8003384:	4b03      	ldr	r3, [pc, #12]	@ (8003394 <ARM_Button+0x34>)
 8003386:	2201      	movs	r2, #1
 8003388:	701a      	strb	r2, [r3, #0]
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	200002c0 	.word	0x200002c0

08003398 <RACE_Button>:

void RACE_Button() {
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
	switch (mouse_mode) {
 800339c:	4b0a      	ldr	r3, [pc, #40]	@ (80033c8 <RACE_Button+0x30>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <RACE_Button+0x12>
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d004      	beq.n	80033b2 <RACE_Button+0x1a>
			break;
		case RACING:
			mouse_mode = SEARCHING;
			break;
		default:
			return;
 80033a8:	e00d      	b.n	80033c6 <RACE_Button+0x2e>
			mouse_mode = RACING;
 80033aa:	4b07      	ldr	r3, [pc, #28]	@ (80033c8 <RACE_Button+0x30>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	701a      	strb	r2, [r3, #0]
			break;
 80033b0:	e003      	b.n	80033ba <RACE_Button+0x22>
			mouse_mode = SEARCHING;
 80033b2:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <RACE_Button+0x30>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]
			break;
 80033b8:	bf00      	nop
	}

	LED_Blue_Toggle();
 80033ba:	f7ff ff6f 	bl	800329c <LED_Blue_Toggle>
	HAL_Delay(1000);
 80033be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80033c2:	f000 fe47 	bl	8004054 <HAL_Delay>
}
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20000000 	.word	0x20000000

080033cc <LOADMAZE_Button>:

void LOADMAZE_Button() {
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
	// TODO: Implement load from flash
}
 80033d0:	bf00      	nop
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <Systick>:

extern float steering_adjustment;

uint32_t time_last_updated_ms = 0;

void Systick() {
 80033d8:	b5b0      	push	{r4, r5, r7, lr}
 80033da:	af00      	add	r7, sp, #0
	global_time = HAL_GetTick();
 80033dc:	f000 fe30 	bl	8004040 <HAL_GetTick>
 80033e0:	4603      	mov	r3, r0
 80033e2:	4a27      	ldr	r2, [pc, #156]	@ (8003480 <Systick+0xa8>)
 80033e4:	6013      	str	r3, [r2, #0]

	Debug_Mode();
 80033e6:	f000 f85b 	bl	80034a0 <Debug_Mode>
	Buzzer_Check();
 80033ea:	f000 f897 	bl	800351c <Buzzer_Check>

	if (global_time > time_last_updated_ms + (SYSTICK_INTERVAL * 1000)) {
 80033ee:	4b24      	ldr	r3, [pc, #144]	@ (8003480 <Systick+0xa8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fd fba6 	bl	8000b44 <__aeabi_ui2f>
 80033f8:	4604      	mov	r4, r0
 80033fa:	4b22      	ldr	r3, [pc, #136]	@ (8003484 <Systick+0xac>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fd fba0 	bl	8000b44 <__aeabi_ui2f>
 8003404:	4605      	mov	r5, r0
 8003406:	4b20      	ldr	r3, [pc, #128]	@ (8003488 <Systick+0xb0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4920      	ldr	r1, [pc, #128]	@ (800348c <Systick+0xb4>)
 800340c:	4618      	mov	r0, r3
 800340e:	f7fd fbf1 	bl	8000bf4 <__aeabi_fmul>
 8003412:	4603      	mov	r3, r0
 8003414:	4619      	mov	r1, r3
 8003416:	4628      	mov	r0, r5
 8003418:	f7fd fae4 	bl	80009e4 <__addsf3>
 800341c:	4603      	mov	r3, r0
 800341e:	4619      	mov	r1, r3
 8003420:	4620      	mov	r0, r4
 8003422:	f7fd fda3 	bl	8000f6c <__aeabi_fcmpgt>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d100      	bne.n	800342e <Systick+0x56>
		// Update motor voltages
		Update_Motors(forward_profile.speed, rotational_profile.speed, steering_adjustment);

		time_last_updated_ms = global_time;
	}
}
 800342c:	e026      	b.n	800347c <Systick+0xa4>
		Update_Encoders();
 800342e:	f7fe fac1 	bl	80019b4 <Update_Encoders>
		Update_Profile(&forward_profile);
 8003432:	4817      	ldr	r0, [pc, #92]	@ (8003490 <Systick+0xb8>)
 8003434:	f7ff fe36 	bl	80030a4 <Update_Profile>
		Update_Profile(&rotational_profile);
 8003438:	4816      	ldr	r0, [pc, #88]	@ (8003494 <Systick+0xbc>)
 800343a:	f7ff fe33 	bl	80030a4 <Update_Profile>
		Poll_Sensors(&mouse_state);
 800343e:	4816      	ldr	r0, [pc, #88]	@ (8003498 <Systick+0xc0>)
 8003440:	f000 f9e2 	bl	8003808 <Poll_Sensors>
		Wall_Front();
 8003444:	f000 fa08 	bl	8003858 <Wall_Front>
		Wall_Left();
 8003448:	f000 fa3c 	bl	80038c4 <Wall_Left>
		Wall_Right();
 800344c:	f000 fa64 	bl	8003918 <Wall_Right>
		Calculate_Error();
 8003450:	f000 fad2 	bl	80039f8 <Calculate_Error>
		mouse_state.battery_voltage = Read_Battery();
 8003454:	f7ff ff50 	bl	80032f8 <Read_Battery>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	490e      	ldr	r1, [pc, #56]	@ (8003498 <Systick+0xc0>)
 800345e:	e9c1 2306 	strd	r2, r3, [r1, #24]
		Update_Motors(forward_profile.speed, rotational_profile.speed, steering_adjustment);
 8003462:	4b0b      	ldr	r3, [pc, #44]	@ (8003490 <Systick+0xb8>)
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	4a0b      	ldr	r2, [pc, #44]	@ (8003494 <Systick+0xbc>)
 8003468:	6951      	ldr	r1, [r2, #20]
 800346a:	4a0c      	ldr	r2, [pc, #48]	@ (800349c <Systick+0xc4>)
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff fc7c 	bl	8002d6c <Update_Motors>
		time_last_updated_ms = global_time;
 8003474:	4b02      	ldr	r3, [pc, #8]	@ (8003480 <Systick+0xa8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a02      	ldr	r2, [pc, #8]	@ (8003484 <Systick+0xac>)
 800347a:	6013      	str	r3, [r2, #0]
}
 800347c:	bf00      	nop
 800347e:	bdb0      	pop	{r4, r5, r7, pc}
 8003480:	200002bc 	.word	0x200002bc
 8003484:	20000c9c 	.word	0x20000c9c
 8003488:	08007a7c 	.word	0x08007a7c
 800348c:	447a0000 	.word	0x447a0000
 8003490:	20000bf8 	.word	0x20000bf8
 8003494:	20000c1c 	.word	0x20000c1c
 8003498:	20000298 	.word	0x20000298
 800349c:	20000ca4 	.word	0x20000ca4

080034a0 <Debug_Mode>:

void Debug_Mode() {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
	if (debugMode) {
 80034a4:	4b17      	ldr	r3, [pc, #92]	@ (8003504 <Debug_Mode+0x64>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d029      	beq.n	8003500 <Debug_Mode+0x60>
		debugCounter = (debugCounter + 1) % DEBUG_PERIOD;
 80034ac:	4b16      	ldr	r3, [pc, #88]	@ (8003508 <Debug_Mode+0x68>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	3301      	adds	r3, #1
 80034b2:	4a16      	ldr	r2, [pc, #88]	@ (800350c <Debug_Mode+0x6c>)
 80034b4:	fb82 1203 	smull	r1, r2, r2, r3
 80034b8:	1111      	asrs	r1, r2, #4
 80034ba:	17da      	asrs	r2, r3, #31
 80034bc:	1a8a      	subs	r2, r1, r2
 80034be:	2132      	movs	r1, #50	@ 0x32
 80034c0:	fb01 f202 	mul.w	r2, r1, r2
 80034c4:	1a9a      	subs	r2, r3, r2
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003508 <Debug_Mode+0x68>)
 80034ca:	701a      	strb	r2, [r3, #0]
		if (debugCounter == 0) {
 80034cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003508 <Debug_Mode+0x68>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d115      	bne.n	8003500 <Debug_Mode+0x60>
			mouse_state.rpm.left_rpm = Calculate_RPM(objective_L, MOTOR_LEFT);
 80034d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003510 <Debug_Mode+0x70>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fe fa1a 	bl	8001914 <Calculate_RPM>
 80034e0:	4603      	mov	r3, r0
 80034e2:	461a      	mov	r2, r3
 80034e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <Debug_Mode+0x74>)
 80034e6:	809a      	strh	r2, [r3, #4]
			mouse_state.rpm.right_rpm  = Calculate_RPM(objective_R, MOTOR_RIGHT);
 80034e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003518 <Debug_Mode+0x78>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2101      	movs	r1, #1
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fe fa10 	bl	8001914 <Calculate_RPM>
 80034f4:	4603      	mov	r3, r0
 80034f6:	461a      	mov	r2, r3
 80034f8:	4b06      	ldr	r3, [pc, #24]	@ (8003514 <Debug_Mode+0x74>)
 80034fa:	80da      	strh	r2, [r3, #6]

			Debug_Packet_Send();
 80034fc:	f7fe f998 	bl	8001830 <Debug_Packet_Send>
		}
	}
}
 8003500:	bf00      	nop
 8003502:	bd80      	pop	{r7, pc}
 8003504:	200002b8 	.word	0x200002b8
 8003508:	200002b9 	.word	0x200002b9
 800350c:	51eb851f 	.word	0x51eb851f
 8003510:	200002c4 	.word	0x200002c4
 8003514:	20000298 	.word	0x20000298
 8003518:	200002c8 	.word	0x200002c8

0800351c <Buzzer_Check>:

void Buzzer_Check() {
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
	if (buzzerDelay > 0) {
 8003520:	4b0a      	ldr	r3, [pc, #40]	@ (800354c <Buzzer_Check+0x30>)
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	b29b      	uxth	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d007      	beq.n	800353a <Buzzer_Check+0x1e>
		buzzerDelay--;
 800352a:	4b08      	ldr	r3, [pc, #32]	@ (800354c <Buzzer_Check+0x30>)
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	4b05      	ldr	r3, [pc, #20]	@ (800354c <Buzzer_Check+0x30>)
 8003536:	801a      	strh	r2, [r3, #0]
	}
	else {
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
	}
}
 8003538:	e005      	b.n	8003546 <Buzzer_Check+0x2a>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800353a:	2200      	movs	r2, #0
 800353c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003540:	4803      	ldr	r0, [pc, #12]	@ (8003550 <Buzzer_Check+0x34>)
 8003542:	f001 fd47 	bl	8004fd4 <HAL_GPIO_WritePin>
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000c98 	.word	0x20000c98
 8003550:	40010c00 	.word	0x40010c00

08003554 <ADC1_Select_CH9>:
bool wall_right = false;

bool adjust_steering = false;
float steering_adjustment = 0;

static void ADC1_Select_CH9(void) {
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800355a:	1d3b      	adds	r3, r7, #4
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_9;
 8003564:	2309      	movs	r3, #9
 8003566:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003568:	2301      	movs	r3, #1
 800356a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800356c:	2301      	movs	r3, #1
 800356e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel (&hadc1, &sConfig) != HAL_OK) {
 8003570:	1d3b      	adds	r3, r7, #4
 8003572:	4619      	mov	r1, r3
 8003574:	4805      	ldr	r0, [pc, #20]	@ (800358c <ADC1_Select_CH9+0x38>)
 8003576:	f001 f855 	bl	8004624 <HAL_ADC_ConfigChannel>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <ADC1_Select_CH9+0x30>
		Error_Handler();
 8003580:	f7fe f89f 	bl	80016c2 <Error_Handler>
	}
}
 8003584:	bf00      	nop
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	20000114 	.word	0x20000114

08003590 <ADC1_Select_CH8>:

static void ADC1_Select_CH8(void) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003596:	1d3b      	adds	r3, r7, #4
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_8;
 80035a0:	2308      	movs	r3, #8
 80035a2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80035a4:	2301      	movs	r3, #1
 80035a6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80035a8:	2301      	movs	r3, #1
 80035aa:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80035ac:	1d3b      	adds	r3, r7, #4
 80035ae:	4619      	mov	r1, r3
 80035b0:	4805      	ldr	r0, [pc, #20]	@ (80035c8 <ADC1_Select_CH8+0x38>)
 80035b2:	f001 f837 	bl	8004624 <HAL_ADC_ConfigChannel>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <ADC1_Select_CH8+0x30>
		Error_Handler();
 80035bc:	f7fe f881 	bl	80016c2 <Error_Handler>
	}
}
 80035c0:	bf00      	nop
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20000114 	.word	0x20000114

080035cc <ADC1_Select_CH5>:

static void ADC1_Select_CH5(void) {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80035d2:	1d3b      	adds	r3, r7, #4
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	605a      	str	r2, [r3, #4]
 80035da:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_5;
 80035dc:	2305      	movs	r3, #5
 80035de:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80035e0:	2301      	movs	r3, #1
 80035e2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80035e4:	2301      	movs	r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80035e8:	1d3b      	adds	r3, r7, #4
 80035ea:	4619      	mov	r1, r3
 80035ec:	4805      	ldr	r0, [pc, #20]	@ (8003604 <ADC1_Select_CH5+0x38>)
 80035ee:	f001 f819 	bl	8004624 <HAL_ADC_ConfigChannel>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <ADC1_Select_CH5+0x30>
		Error_Handler();
 80035f8:	f7fe f863 	bl	80016c2 <Error_Handler>
	}
}
 80035fc:	bf00      	nop
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	20000114 	.word	0x20000114

08003608 <ADC1_Select_CH4>:

static void ADC1_Select_CH4(void) {
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800360e:	1d3b      	adds	r3, r7, #4
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_4;
 8003618:	2304      	movs	r3, #4
 800361a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800361c:	2301      	movs	r3, #1
 800361e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8003620:	2301      	movs	r3, #1
 8003622:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel (&hadc1, &sConfig) != HAL_OK) {
 8003624:	1d3b      	adds	r3, r7, #4
 8003626:	4619      	mov	r1, r3
 8003628:	4805      	ldr	r0, [pc, #20]	@ (8003640 <ADC1_Select_CH4+0x38>)
 800362a:	f000 fffb 	bl	8004624 <HAL_ADC_ConfigChannel>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <ADC1_Select_CH4+0x30>
		Error_Handler();
 8003634:	f7fe f845 	bl	80016c2 <Error_Handler>
	}
}
 8003638:	bf00      	nop
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000114 	.word	0x20000114

08003644 <Measure_Dist>:

uint16_t Measure_Dist(dist_t dist) { // Poll raw IR sensors
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef* emitter_port;
	uint16_t emitter_pin;

	switch(dist) {
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	2b03      	cmp	r3, #3
 8003652:	d82a      	bhi.n	80036aa <Measure_Dist+0x66>
 8003654:	a201      	add	r2, pc, #4	@ (adr r2, 800365c <Measure_Dist+0x18>)
 8003656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365a:	bf00      	nop
 800365c:	0800366d 	.word	0x0800366d
 8003660:	0800367b 	.word	0x0800367b
 8003664:	0800368b 	.word	0x0800368b
 8003668:	0800369b 	.word	0x0800369b
	case DIST_FL:
		emitter_port = EMIT_FL_GPIO_Port;
 800366c:	4b20      	ldr	r3, [pc, #128]	@ (80036f0 <Measure_Dist+0xac>)
 800366e:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_FL_Pin;
 8003670:	2320      	movs	r3, #32
 8003672:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH4();
 8003674:	f7ff ffc8 	bl	8003608 <ADC1_Select_CH4>
		break;
 8003678:	e018      	b.n	80036ac <Measure_Dist+0x68>
	case DIST_L:
		emitter_port = EMIT_L_GPIO_Port;
 800367a:	4b1d      	ldr	r3, [pc, #116]	@ (80036f0 <Measure_Dist+0xac>)
 800367c:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_L_Pin;
 800367e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003682:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH5();
 8003684:	f7ff ffa2 	bl	80035cc <ADC1_Select_CH5>
		break;
 8003688:	e010      	b.n	80036ac <Measure_Dist+0x68>
	case DIST_R:
		emitter_port = EMIT_R_GPIO_Port;
 800368a:	4b19      	ldr	r3, [pc, #100]	@ (80036f0 <Measure_Dist+0xac>)
 800368c:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_R_Pin;
 800368e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003692:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH8();
 8003694:	f7ff ff7c 	bl	8003590 <ADC1_Select_CH8>
		break;
 8003698:	e008      	b.n	80036ac <Measure_Dist+0x68>
	case DIST_FR:
		emitter_port = EMIT_FR_GPIO_Port;
 800369a:	4b15      	ldr	r3, [pc, #84]	@ (80036f0 <Measure_Dist+0xac>)
 800369c:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_FR_Pin;
 800369e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036a2:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH9();
 80036a4:	f7ff ff56 	bl	8003554 <ADC1_Select_CH9>
		break;
 80036a8:	e000      	b.n	80036ac <Measure_Dist+0x68>
	default:
		break;
 80036aa:	bf00      	nop
	}
	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_SET);
 80036ac:	897b      	ldrh	r3, [r7, #10]
 80036ae:	2201      	movs	r2, #1
 80036b0:	4619      	mov	r1, r3
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f001 fc8e 	bl	8004fd4 <HAL_GPIO_WritePin>

	HAL_ADC_Start(&hadc1);
 80036b8:	480e      	ldr	r0, [pc, #56]	@ (80036f4 <Measure_Dist+0xb0>)
 80036ba:	f000 fdc7 	bl	800424c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80036be:	f04f 31ff 	mov.w	r1, #4294967295
 80036c2:	480c      	ldr	r0, [pc, #48]	@ (80036f4 <Measure_Dist+0xb0>)
 80036c4:	f000 fe9c 	bl	8004400 <HAL_ADC_PollForConversion>
	uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 80036c8:	480a      	ldr	r0, [pc, #40]	@ (80036f4 <Measure_Dist+0xb0>)
 80036ca:	f000 ff9f 	bl	800460c <HAL_ADC_GetValue>
 80036ce:	4603      	mov	r3, r0
 80036d0:	813b      	strh	r3, [r7, #8]
	HAL_ADC_Stop(&hadc1);
 80036d2:	4808      	ldr	r0, [pc, #32]	@ (80036f4 <Measure_Dist+0xb0>)
 80036d4:	f000 fe68 	bl	80043a8 <HAL_ADC_Stop>

	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_RESET);
 80036d8:	897b      	ldrh	r3, [r7, #10]
 80036da:	2200      	movs	r2, #0
 80036dc:	4619      	mov	r1, r3
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f001 fc78 	bl	8004fd4 <HAL_GPIO_WritePin>

	return adc_val;
 80036e4:	893b      	ldrh	r3, [r7, #8]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40010c00 	.word	0x40010c00
 80036f4:	20000114 	.word	0x20000114

080036f8 <Calibrate_Readings>:

void Calibrate_Readings(mouse_state_t* mouse_state) { // Normalize raw IR values
 80036f8:	b590      	push	{r4, r7, lr}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
	mouse_state->cal.front_left  = 200 * ((float)mouse_state->raw.front_left / (float)translation_FL);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	891b      	ldrh	r3, [r3, #8]
 8003704:	4618      	mov	r0, r3
 8003706:	f7fd fa1d 	bl	8000b44 <__aeabi_ui2f>
 800370a:	4604      	mov	r4, r0
 800370c:	4b38      	ldr	r3, [pc, #224]	@ (80037f0 <Calibrate_Readings+0xf8>)
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f7fd fa17 	bl	8000b44 <__aeabi_ui2f>
 8003716:	4603      	mov	r3, r0
 8003718:	4619      	mov	r1, r3
 800371a:	4620      	mov	r0, r4
 800371c:	f7fd fb1e 	bl	8000d5c <__aeabi_fdiv>
 8003720:	4603      	mov	r3, r0
 8003722:	4934      	ldr	r1, [pc, #208]	@ (80037f4 <Calibrate_Readings+0xfc>)
 8003724:	4618      	mov	r0, r3
 8003726:	f7fd fa65 	bl	8000bf4 <__aeabi_fmul>
 800372a:	4603      	mov	r3, r0
 800372c:	4618      	mov	r0, r3
 800372e:	f7fd fc27 	bl	8000f80 <__aeabi_f2uiz>
 8003732:	4603      	mov	r3, r0
 8003734:	b29a      	uxth	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	821a      	strh	r2, [r3, #16]
	mouse_state->cal.left        = 100 * ((float)mouse_state->raw.left / (float)translation_L);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	895b      	ldrh	r3, [r3, #10]
 800373e:	4618      	mov	r0, r3
 8003740:	f7fd fa00 	bl	8000b44 <__aeabi_ui2f>
 8003744:	4604      	mov	r4, r0
 8003746:	4b2c      	ldr	r3, [pc, #176]	@ (80037f8 <Calibrate_Readings+0x100>)
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fd f9fa 	bl	8000b44 <__aeabi_ui2f>
 8003750:	4603      	mov	r3, r0
 8003752:	4619      	mov	r1, r3
 8003754:	4620      	mov	r0, r4
 8003756:	f7fd fb01 	bl	8000d5c <__aeabi_fdiv>
 800375a:	4603      	mov	r3, r0
 800375c:	4927      	ldr	r1, [pc, #156]	@ (80037fc <Calibrate_Readings+0x104>)
 800375e:	4618      	mov	r0, r3
 8003760:	f7fd fa48 	bl	8000bf4 <__aeabi_fmul>
 8003764:	4603      	mov	r3, r0
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd fc0a 	bl	8000f80 <__aeabi_f2uiz>
 800376c:	4603      	mov	r3, r0
 800376e:	b29a      	uxth	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	825a      	strh	r2, [r3, #18]
	mouse_state->cal.right       = 100 * ((float)mouse_state->raw.right / (float)translation_R);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	899b      	ldrh	r3, [r3, #12]
 8003778:	4618      	mov	r0, r3
 800377a:	f7fd f9e3 	bl	8000b44 <__aeabi_ui2f>
 800377e:	4604      	mov	r4, r0
 8003780:	4b1f      	ldr	r3, [pc, #124]	@ (8003800 <Calibrate_Readings+0x108>)
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7fd f9dd 	bl	8000b44 <__aeabi_ui2f>
 800378a:	4603      	mov	r3, r0
 800378c:	4619      	mov	r1, r3
 800378e:	4620      	mov	r0, r4
 8003790:	f7fd fae4 	bl	8000d5c <__aeabi_fdiv>
 8003794:	4603      	mov	r3, r0
 8003796:	4919      	ldr	r1, [pc, #100]	@ (80037fc <Calibrate_Readings+0x104>)
 8003798:	4618      	mov	r0, r3
 800379a:	f7fd fa2b 	bl	8000bf4 <__aeabi_fmul>
 800379e:	4603      	mov	r3, r0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fd fbed 	bl	8000f80 <__aeabi_f2uiz>
 80037a6:	4603      	mov	r3, r0
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	829a      	strh	r2, [r3, #20]
	mouse_state->cal.front_right = 200 * ((float)mouse_state->raw.front_right / (float)translation_FR);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	89db      	ldrh	r3, [r3, #14]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fd f9c6 	bl	8000b44 <__aeabi_ui2f>
 80037b8:	4604      	mov	r4, r0
 80037ba:	4b12      	ldr	r3, [pc, #72]	@ (8003804 <Calibrate_Readings+0x10c>)
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fd f9c0 	bl	8000b44 <__aeabi_ui2f>
 80037c4:	4603      	mov	r3, r0
 80037c6:	4619      	mov	r1, r3
 80037c8:	4620      	mov	r0, r4
 80037ca:	f7fd fac7 	bl	8000d5c <__aeabi_fdiv>
 80037ce:	4603      	mov	r3, r0
 80037d0:	4908      	ldr	r1, [pc, #32]	@ (80037f4 <Calibrate_Readings+0xfc>)
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fd fa0e 	bl	8000bf4 <__aeabi_fmul>
 80037d8:	4603      	mov	r3, r0
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fd fbd0 	bl	8000f80 <__aeabi_f2uiz>
 80037e0:	4603      	mov	r3, r0
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	82da      	strh	r2, [r3, #22]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd90      	pop	{r4, r7, pc}
 80037f0:	2000008c 	.word	0x2000008c
 80037f4:	43480000 	.word	0x43480000
 80037f8:	2000008e 	.word	0x2000008e
 80037fc:	42c80000 	.word	0x42c80000
 8003800:	20000090 	.word	0x20000090
 8003804:	20000092 	.word	0x20000092

08003808 <Poll_Sensors>:

void Poll_Sensors(mouse_state_t* mouse_state){ // Gather all raw IR values
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
	mouse_state->raw.front_left = Measure_Dist(DIST_FL);
 8003810:	2000      	movs	r0, #0
 8003812:	f7ff ff17 	bl	8003644 <Measure_Dist>
 8003816:	4603      	mov	r3, r0
 8003818:	461a      	mov	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	811a      	strh	r2, [r3, #8]
	mouse_state->raw.left = Measure_Dist(DIST_L);
 800381e:	2001      	movs	r0, #1
 8003820:	f7ff ff10 	bl	8003644 <Measure_Dist>
 8003824:	4603      	mov	r3, r0
 8003826:	461a      	mov	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	815a      	strh	r2, [r3, #10]
	mouse_state->raw.right = Measure_Dist(DIST_R);
 800382c:	2002      	movs	r0, #2
 800382e:	f7ff ff09 	bl	8003644 <Measure_Dist>
 8003832:	4603      	mov	r3, r0
 8003834:	461a      	mov	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	819a      	strh	r2, [r3, #12]
	mouse_state->raw.front_right = Measure_Dist(DIST_FR);
 800383a:	2003      	movs	r0, #3
 800383c:	f7ff ff02 	bl	8003644 <Measure_Dist>
 8003840:	4603      	mov	r3, r0
 8003842:	461a      	mov	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	81da      	strh	r2, [r3, #14]

	Calibrate_Readings(mouse_state);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff ff55 	bl	80036f8 <Calibrate_Readings>
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <Wall_Front>:

bool Wall_Front() {
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
	Poll_Sensors(&mouse_state);
 800385e:	4815      	ldr	r0, [pc, #84]	@ (80038b4 <Wall_Front+0x5c>)
 8003860:	f7ff ffd2 	bl	8003808 <Poll_Sensors>
	uint16_t front_avg = (mouse_state.cal.front_left + mouse_state.cal.front_right) / 2;
 8003864:	4b13      	ldr	r3, [pc, #76]	@ (80038b4 <Wall_Front+0x5c>)
 8003866:	8a1b      	ldrh	r3, [r3, #16]
 8003868:	461a      	mov	r2, r3
 800386a:	4b12      	ldr	r3, [pc, #72]	@ (80038b4 <Wall_Front+0x5c>)
 800386c:	8adb      	ldrh	r3, [r3, #22]
 800386e:	4413      	add	r3, r2
 8003870:	0fda      	lsrs	r2, r3, #31
 8003872:	4413      	add	r3, r2
 8003874:	105b      	asrs	r3, r3, #1
 8003876:	80fb      	strh	r3, [r7, #6]
	if (front_avg > wall_front_thresh) {
 8003878:	4b0f      	ldr	r3, [pc, #60]	@ (80038b8 <Wall_Front+0x60>)
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	88fa      	ldrh	r2, [r7, #6]
 800387e:	429a      	cmp	r2, r3
 8003880:	d909      	bls.n	8003896 <Wall_Front+0x3e>
		wall_front = true;
 8003882:	4b0e      	ldr	r3, [pc, #56]	@ (80038bc <Wall_Front+0x64>)
 8003884:	2201      	movs	r2, #1
 8003886:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8003888:	2200      	movs	r2, #0
 800388a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800388e:	480c      	ldr	r0, [pc, #48]	@ (80038c0 <Wall_Front+0x68>)
 8003890:	f001 fba0 	bl	8004fd4 <HAL_GPIO_WritePin>
 8003894:	e008      	b.n	80038a8 <Wall_Front+0x50>

	}
	else {
		wall_front = false;
 8003896:	4b09      	ldr	r3, [pc, #36]	@ (80038bc <Wall_Front+0x64>)
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 800389c:	2201      	movs	r2, #1
 800389e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80038a2:	4807      	ldr	r0, [pc, #28]	@ (80038c0 <Wall_Front+0x68>)
 80038a4:	f001 fb96 	bl	8004fd4 <HAL_GPIO_WritePin>
	}
	return wall_front;
 80038a8:	4b04      	ldr	r3, [pc, #16]	@ (80038bc <Wall_Front+0x64>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	20000298 	.word	0x20000298
 80038b8:	20000094 	.word	0x20000094
 80038bc:	20000ca0 	.word	0x20000ca0
 80038c0:	40010800 	.word	0x40010800

080038c4 <Wall_Left>:

bool Wall_Left() {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
	Poll_Sensors(&mouse_state);
 80038c8:	480f      	ldr	r0, [pc, #60]	@ (8003908 <Wall_Left+0x44>)
 80038ca:	f7ff ff9d 	bl	8003808 <Poll_Sensors>
	if (mouse_state.cal.left > wall_left_thresh) {
 80038ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003908 <Wall_Left+0x44>)
 80038d0:	8a5a      	ldrh	r2, [r3, #18]
 80038d2:	4b0e      	ldr	r3, [pc, #56]	@ (800390c <Wall_Left+0x48>)
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d909      	bls.n	80038ee <Wall_Left+0x2a>
		wall_left = true;
 80038da:	4b0d      	ldr	r3, [pc, #52]	@ (8003910 <Wall_Left+0x4c>)
 80038dc:	2201      	movs	r2, #1
 80038de:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 80038e0:	2200      	movs	r2, #0
 80038e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80038e6:	480b      	ldr	r0, [pc, #44]	@ (8003914 <Wall_Left+0x50>)
 80038e8:	f001 fb74 	bl	8004fd4 <HAL_GPIO_WritePin>
 80038ec:	e008      	b.n	8003900 <Wall_Left+0x3c>
	}
	else {
		wall_left = false;
 80038ee:	4b08      	ldr	r3, [pc, #32]	@ (8003910 <Wall_Left+0x4c>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 80038f4:	2201      	movs	r2, #1
 80038f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80038fa:	4806      	ldr	r0, [pc, #24]	@ (8003914 <Wall_Left+0x50>)
 80038fc:	f001 fb6a 	bl	8004fd4 <HAL_GPIO_WritePin>
	}
	return wall_left;
 8003900:	4b03      	ldr	r3, [pc, #12]	@ (8003910 <Wall_Left+0x4c>)
 8003902:	781b      	ldrb	r3, [r3, #0]
}
 8003904:	4618      	mov	r0, r3
 8003906:	bd80      	pop	{r7, pc}
 8003908:	20000298 	.word	0x20000298
 800390c:	20000096 	.word	0x20000096
 8003910:	20000ca1 	.word	0x20000ca1
 8003914:	40010800 	.word	0x40010800

08003918 <Wall_Right>:

bool Wall_Right() {
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
	Poll_Sensors(&mouse_state);
 800391c:	480f      	ldr	r0, [pc, #60]	@ (800395c <Wall_Right+0x44>)
 800391e:	f7ff ff73 	bl	8003808 <Poll_Sensors>
	if (mouse_state.cal.right > wall_right_thresh) {
 8003922:	4b0e      	ldr	r3, [pc, #56]	@ (800395c <Wall_Right+0x44>)
 8003924:	8a9a      	ldrh	r2, [r3, #20]
 8003926:	4b0e      	ldr	r3, [pc, #56]	@ (8003960 <Wall_Right+0x48>)
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d909      	bls.n	8003942 <Wall_Right+0x2a>
		wall_right = true;
 800392e:	4b0d      	ldr	r3, [pc, #52]	@ (8003964 <Wall_Right+0x4c>)
 8003930:	2201      	movs	r2, #1
 8003932:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8003934:	2200      	movs	r2, #0
 8003936:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800393a:	480b      	ldr	r0, [pc, #44]	@ (8003968 <Wall_Right+0x50>)
 800393c:	f001 fb4a 	bl	8004fd4 <HAL_GPIO_WritePin>
 8003940:	e008      	b.n	8003954 <Wall_Right+0x3c>

	}
	else {
		wall_right = false;
 8003942:	4b08      	ldr	r3, [pc, #32]	@ (8003964 <Wall_Right+0x4c>)
 8003944:	2200      	movs	r2, #0
 8003946:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 8003948:	2201      	movs	r2, #1
 800394a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800394e:	4806      	ldr	r0, [pc, #24]	@ (8003968 <Wall_Right+0x50>)
 8003950:	f001 fb40 	bl	8004fd4 <HAL_GPIO_WritePin>
	}
	return wall_right;
 8003954:	4b03      	ldr	r3, [pc, #12]	@ (8003964 <Wall_Right+0x4c>)
 8003956:	781b      	ldrb	r3, [r3, #0]
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20000298 	.word	0x20000298
 8003960:	20000098 	.word	0x20000098
 8003964:	20000ca2 	.word	0x20000ca2
 8003968:	40010800 	.word	0x40010800

0800396c <Calculate_Steering_Adjustment>:

void Calculate_Steering_Adjustment(int error) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
	float adjustment = IR_KP * error;
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7fd f8e9 	bl	8000b4c <__aeabi_i2f>
 800397a:	4603      	mov	r3, r0
 800397c:	4a1a      	ldr	r2, [pc, #104]	@ (80039e8 <Calculate_Steering_Adjustment+0x7c>)
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f7fd f937 	bl	8000bf4 <__aeabi_fmul>
 8003986:	4603      	mov	r3, r0
 8003988:	60fb      	str	r3, [r7, #12]

	adjustment = adjustment > STEERING_ADJUSTMENT_LIMIT ? STEERING_ADJUSTMENT_LIMIT: adjustment;
 800398a:	4b18      	ldr	r3, [pc, #96]	@ (80039ec <Calculate_Steering_Adjustment+0x80>)
 800398c:	4619      	mov	r1, r3
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f7fd faec 	bl	8000f6c <__aeabi_fcmpgt>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <Calculate_Steering_Adjustment+0x32>
 800399a:	4b14      	ldr	r3, [pc, #80]	@ (80039ec <Calculate_Steering_Adjustment+0x80>)
 800399c:	e000      	b.n	80039a0 <Calculate_Steering_Adjustment+0x34>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	60fb      	str	r3, [r7, #12]
	adjustment = adjustment < -STEERING_ADJUSTMENT_LIMIT ? -STEERING_ADJUSTMENT_LIMIT: adjustment;
 80039a2:	4b12      	ldr	r3, [pc, #72]	@ (80039ec <Calculate_Steering_Adjustment+0x80>)
 80039a4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80039a8:	4619      	mov	r1, r3
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f7fd fac0 	bl	8000f30 <__aeabi_fcmplt>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <Calculate_Steering_Adjustment+0x52>
 80039b6:	4b0d      	ldr	r3, [pc, #52]	@ (80039ec <Calculate_Steering_Adjustment+0x80>)
 80039b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80039bc:	e000      	b.n	80039c0 <Calculate_Steering_Adjustment+0x54>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	60fb      	str	r3, [r7, #12]

	steering_adjustment = rotational_profile.state == COMPLETE || rotational_profile.state == IDLE ? adjustment : 0;
 80039c2:	4b0b      	ldr	r3, [pc, #44]	@ (80039f0 <Calculate_Steering_Adjustment+0x84>)
 80039c4:	7c1b      	ldrb	r3, [r3, #16]
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d003      	beq.n	80039d2 <Calculate_Steering_Adjustment+0x66>
 80039ca:	4b09      	ldr	r3, [pc, #36]	@ (80039f0 <Calculate_Steering_Adjustment+0x84>)
 80039cc:	7c1b      	ldrb	r3, [r3, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <Calculate_Steering_Adjustment+0x6a>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	e001      	b.n	80039da <Calculate_Steering_Adjustment+0x6e>
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	4a06      	ldr	r2, [pc, #24]	@ (80039f4 <Calculate_Steering_Adjustment+0x88>)
 80039dc:	6013      	str	r3, [r2, #0]
}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	3b449ba6 	.word	0x3b449ba6
 80039ec:	40a00000 	.word	0x40a00000
 80039f0:	20000c1c 	.word	0x20000c1c
 80039f4:	20000ca4 	.word	0x20000ca4

080039f8 <Calculate_Error>:

void Calculate_Error() {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
	int error = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
	int right_error = 100 - mouse_state.cal.right;
 8003a02:	4b1a      	ldr	r3, [pc, #104]	@ (8003a6c <Calculate_Error+0x74>)
 8003a04:	8a9b      	ldrh	r3, [r3, #20]
 8003a06:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8003a0a:	60bb      	str	r3, [r7, #8]
	int left_error = 100 - mouse_state.cal.left;
 8003a0c:	4b17      	ldr	r3, [pc, #92]	@ (8003a6c <Calculate_Error+0x74>)
 8003a0e:	8a5b      	ldrh	r3, [r3, #18]
 8003a10:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8003a14:	607b      	str	r3, [r7, #4]

	if (adjust_steering) {
 8003a16:	4b16      	ldr	r3, [pc, #88]	@ (8003a70 <Calculate_Error+0x78>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d01e      	beq.n	8003a5c <Calculate_Error+0x64>
		if (wall_left && wall_right) {
 8003a1e:	4b15      	ldr	r3, [pc, #84]	@ (8003a74 <Calculate_Error+0x7c>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d008      	beq.n	8003a38 <Calculate_Error+0x40>
 8003a26:	4b14      	ldr	r3, [pc, #80]	@ (8003a78 <Calculate_Error+0x80>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d004      	beq.n	8003a38 <Calculate_Error+0x40>
			error = right_error - left_error;
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	e011      	b.n	8003a5c <Calculate_Error+0x64>
		}
		else if (wall_left) {
 8003a38:	4b0e      	ldr	r3, [pc, #56]	@ (8003a74 <Calculate_Error+0x7c>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d006      	beq.n	8003a4e <Calculate_Error+0x56>
			error = -2 * left_error;
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	07db      	lsls	r3, r3, #31
 8003a46:	1a9b      	subs	r3, r3, r2
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	e006      	b.n	8003a5c <Calculate_Error+0x64>
		}
		else if (wall_right) {
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a78 <Calculate_Error+0x80>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <Calculate_Error+0x64>
			error = 2 * right_error;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	60fb      	str	r3, [r7, #12]
		}
	}

	Calculate_Steering_Adjustment(error);
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f7ff ff85 	bl	800396c <Calculate_Steering_Adjustment>
}
 8003a62:	bf00      	nop
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000298 	.word	0x20000298
 8003a70:	20000ca3 	.word	0x20000ca3
 8003a74:	20000ca1 	.word	0x20000ca1
 8003a78:	20000ca2 	.word	0x20000ca2

08003a7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a82:	4b15      	ldr	r3, [pc, #84]	@ (8003ad8 <HAL_MspInit+0x5c>)
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	4a14      	ldr	r2, [pc, #80]	@ (8003ad8 <HAL_MspInit+0x5c>)
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	6193      	str	r3, [r2, #24]
 8003a8e:	4b12      	ldr	r3, [pc, #72]	@ (8003ad8 <HAL_MspInit+0x5c>)
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad8 <HAL_MspInit+0x5c>)
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8003ad8 <HAL_MspInit+0x5c>)
 8003aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aa4:	61d3      	str	r3, [r2, #28]
 8003aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad8 <HAL_MspInit+0x5c>)
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aae:	607b      	str	r3, [r7, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8003adc <HAL_MspInit+0x60>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	4a04      	ldr	r2, [pc, #16]	@ (8003adc <HAL_MspInit+0x60>)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	40010000 	.word	0x40010000

08003ae0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08c      	sub	sp, #48	@ 0x30
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae8:	f107 0320 	add.w	r3, r7, #32
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	609a      	str	r2, [r3, #8]
 8003af4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a33      	ldr	r2, [pc, #204]	@ (8003bc8 <HAL_ADC_MspInit+0xe8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d138      	bne.n	8003b72 <HAL_ADC_MspInit+0x92>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003b00:	4b32      	ldr	r3, [pc, #200]	@ (8003bcc <HAL_ADC_MspInit+0xec>)
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	4a31      	ldr	r2, [pc, #196]	@ (8003bcc <HAL_ADC_MspInit+0xec>)
 8003b06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b0a:	6193      	str	r3, [r2, #24]
 8003b0c:	4b2f      	ldr	r3, [pc, #188]	@ (8003bcc <HAL_ADC_MspInit+0xec>)
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b18:	4b2c      	ldr	r3, [pc, #176]	@ (8003bcc <HAL_ADC_MspInit+0xec>)
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	4a2b      	ldr	r2, [pc, #172]	@ (8003bcc <HAL_ADC_MspInit+0xec>)
 8003b1e:	f043 0304 	orr.w	r3, r3, #4
 8003b22:	6193      	str	r3, [r2, #24]
 8003b24:	4b29      	ldr	r3, [pc, #164]	@ (8003bcc <HAL_ADC_MspInit+0xec>)
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	61bb      	str	r3, [r7, #24]
 8003b2e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b30:	4b26      	ldr	r3, [pc, #152]	@ (8003bcc <HAL_ADC_MspInit+0xec>)
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	4a25      	ldr	r2, [pc, #148]	@ (8003bcc <HAL_ADC_MspInit+0xec>)
 8003b36:	f043 0308 	orr.w	r3, r3, #8
 8003b3a:	6193      	str	r3, [r2, #24]
 8003b3c:	4b23      	ldr	r3, [pc, #140]	@ (8003bcc <HAL_ADC_MspInit+0xec>)
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	697b      	ldr	r3, [r7, #20]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RECIV_FL_Pin|RECIV_L_Pin;
 8003b48:	2330      	movs	r3, #48	@ 0x30
 8003b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b50:	f107 0320 	add.w	r3, r7, #32
 8003b54:	4619      	mov	r1, r3
 8003b56:	481e      	ldr	r0, [pc, #120]	@ (8003bd0 <HAL_ADC_MspInit+0xf0>)
 8003b58:	f001 f8b8 	bl	8004ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RECIV_R_Pin|RECIV_FR_Pin;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b60:	2303      	movs	r3, #3
 8003b62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b64:	f107 0320 	add.w	r3, r7, #32
 8003b68:	4619      	mov	r1, r3
 8003b6a:	481a      	ldr	r0, [pc, #104]	@ (8003bd4 <HAL_ADC_MspInit+0xf4>)
 8003b6c:	f001 f8ae 	bl	8004ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003b70:	e026      	b.n	8003bc0 <HAL_ADC_MspInit+0xe0>
  else if(hadc->Instance==ADC2)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a18      	ldr	r2, [pc, #96]	@ (8003bd8 <HAL_ADC_MspInit+0xf8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d121      	bne.n	8003bc0 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003b7c:	4b13      	ldr	r3, [pc, #76]	@ (8003bcc <HAL_ADC_MspInit+0xec>)
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	4a12      	ldr	r2, [pc, #72]	@ (8003bcc <HAL_ADC_MspInit+0xec>)
 8003b82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b86:	6193      	str	r3, [r2, #24]
 8003b88:	4b10      	ldr	r3, [pc, #64]	@ (8003bcc <HAL_ADC_MspInit+0xec>)
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b94:	4b0d      	ldr	r3, [pc, #52]	@ (8003bcc <HAL_ADC_MspInit+0xec>)
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	4a0c      	ldr	r2, [pc, #48]	@ (8003bcc <HAL_ADC_MspInit+0xec>)
 8003b9a:	f043 0304 	orr.w	r3, r3, #4
 8003b9e:	6193      	str	r3, [r2, #24]
 8003ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bcc <HAL_ADC_MspInit+0xec>)
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_METER_Pin;
 8003bac:	2302      	movs	r3, #2
 8003bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(V_METER_GPIO_Port, &GPIO_InitStruct);
 8003bb4:	f107 0320 	add.w	r3, r7, #32
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4805      	ldr	r0, [pc, #20]	@ (8003bd0 <HAL_ADC_MspInit+0xf0>)
 8003bbc:	f001 f886 	bl	8004ccc <HAL_GPIO_Init>
}
 8003bc0:	bf00      	nop
 8003bc2:	3730      	adds	r7, #48	@ 0x30
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40012400 	.word	0x40012400
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40010800 	.word	0x40010800
 8003bd4:	40010c00 	.word	0x40010c00
 8003bd8:	40012800 	.word	0x40012800

08003bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bec:	d10b      	bne.n	8003c06 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bee:	4b08      	ldr	r3, [pc, #32]	@ (8003c10 <HAL_TIM_Base_MspInit+0x34>)
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	4a07      	ldr	r2, [pc, #28]	@ (8003c10 <HAL_TIM_Base_MspInit+0x34>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	61d3      	str	r3, [r2, #28]
 8003bfa:	4b05      	ldr	r3, [pc, #20]	@ (8003c10 <HAL_TIM_Base_MspInit+0x34>)
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003c06:	bf00      	nop
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr
 8003c10:	40021000 	.word	0x40021000

08003c14 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08a      	sub	sp, #40	@ 0x28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c1c:	f107 0318 	add.w	r3, r7, #24
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	605a      	str	r2, [r3, #4]
 8003c26:	609a      	str	r2, [r3, #8]
 8003c28:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a32      	ldr	r2, [pc, #200]	@ (8003cf8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d12c      	bne.n	8003c8e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c34:	4b31      	ldr	r3, [pc, #196]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	4a30      	ldr	r2, [pc, #192]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003c3a:	f043 0302 	orr.w	r3, r3, #2
 8003c3e:	61d3      	str	r3, [r2, #28]
 8003c40:	4b2e      	ldr	r3, [pc, #184]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	4a2a      	ldr	r2, [pc, #168]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003c52:	f043 0304 	orr.w	r3, r3, #4
 8003c56:	6193      	str	r3, [r2, #24]
 8003c58:	4b28      	ldr	r3, [pc, #160]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ML_ENC_A_Pin|ML_ENC_B_Pin;
 8003c64:	23c0      	movs	r3, #192	@ 0xc0
 8003c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c70:	f107 0318 	add.w	r3, r7, #24
 8003c74:	4619      	mov	r1, r3
 8003c76:	4822      	ldr	r0, [pc, #136]	@ (8003d00 <HAL_TIM_Encoder_MspInit+0xec>)
 8003c78:	f001 f828 	bl	8004ccc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2100      	movs	r1, #0
 8003c80:	201d      	movs	r0, #29
 8003c82:	f000 ff3a 	bl	8004afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003c86:	201d      	movs	r0, #29
 8003c88:	f000 ff53 	bl	8004b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003c8c:	e030      	b.n	8003cf0 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a1c      	ldr	r2, [pc, #112]	@ (8003d04 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d12b      	bne.n	8003cf0 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c98:	4b18      	ldr	r3, [pc, #96]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	4a17      	ldr	r2, [pc, #92]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003c9e:	f043 0304 	orr.w	r3, r3, #4
 8003ca2:	61d3      	str	r3, [r2, #28]
 8003ca4:	4b15      	ldr	r3, [pc, #84]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb0:	4b12      	ldr	r3, [pc, #72]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	4a11      	ldr	r2, [pc, #68]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003cb6:	f043 0308 	orr.w	r3, r3, #8
 8003cba:	6193      	str	r3, [r2, #24]
 8003cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003cfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MR_ENC_B_Pin|MR_ENC_A_Pin;
 8003cc8:	23c0      	movs	r3, #192	@ 0xc0
 8003cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd4:	f107 0318 	add.w	r3, r7, #24
 8003cd8:	4619      	mov	r1, r3
 8003cda:	480b      	ldr	r0, [pc, #44]	@ (8003d08 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003cdc:	f000 fff6 	bl	8004ccc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	201e      	movs	r0, #30
 8003ce6:	f000 ff08 	bl	8004afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003cea:	201e      	movs	r0, #30
 8003cec:	f000 ff21 	bl	8004b32 <HAL_NVIC_EnableIRQ>
}
 8003cf0:	bf00      	nop
 8003cf2:	3728      	adds	r7, #40	@ 0x28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40010800 	.word	0x40010800
 8003d04:	40000800 	.word	0x40000800
 8003d08:	40010c00 	.word	0x40010c00

08003d0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d14:	f107 0310 	add.w	r3, r7, #16
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d2a:	d117      	bne.n	8003d5c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003d64 <HAL_TIM_MspPostInit+0x58>)
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	4a0c      	ldr	r2, [pc, #48]	@ (8003d64 <HAL_TIM_MspPostInit+0x58>)
 8003d32:	f043 0304 	orr.w	r3, r3, #4
 8003d36:	6193      	str	r3, [r2, #24]
 8003d38:	4b0a      	ldr	r3, [pc, #40]	@ (8003d64 <HAL_TIM_MspPostInit+0x58>)
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ML_PWM_Pin|MR_PWM_Pin;
 8003d44:	230c      	movs	r3, #12
 8003d46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d50:	f107 0310 	add.w	r3, r7, #16
 8003d54:	4619      	mov	r1, r3
 8003d56:	4804      	ldr	r0, [pc, #16]	@ (8003d68 <HAL_TIM_MspPostInit+0x5c>)
 8003d58:	f000 ffb8 	bl	8004ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003d5c:	bf00      	nop
 8003d5e:	3720      	adds	r7, #32
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40010800 	.word	0x40010800

08003d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d74:	f107 0310 	add.w	r3, r7, #16
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	605a      	str	r2, [r3, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a20      	ldr	r2, [pc, #128]	@ (8003e08 <HAL_UART_MspInit+0x9c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d139      	bne.n	8003e00 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003e0c <HAL_UART_MspInit+0xa0>)
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	4a1e      	ldr	r2, [pc, #120]	@ (8003e0c <HAL_UART_MspInit+0xa0>)
 8003d92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d96:	6193      	str	r3, [r2, #24]
 8003d98:	4b1c      	ldr	r3, [pc, #112]	@ (8003e0c <HAL_UART_MspInit+0xa0>)
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003da4:	4b19      	ldr	r3, [pc, #100]	@ (8003e0c <HAL_UART_MspInit+0xa0>)
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	4a18      	ldr	r2, [pc, #96]	@ (8003e0c <HAL_UART_MspInit+0xa0>)
 8003daa:	f043 0304 	orr.w	r3, r3, #4
 8003dae:	6193      	str	r3, [r2, #24]
 8003db0:	4b16      	ldr	r3, [pc, #88]	@ (8003e0c <HAL_UART_MspInit+0xa0>)
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003dbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dca:	f107 0310 	add.w	r3, r7, #16
 8003dce:	4619      	mov	r1, r3
 8003dd0:	480f      	ldr	r0, [pc, #60]	@ (8003e10 <HAL_UART_MspInit+0xa4>)
 8003dd2:	f000 ff7b 	bl	8004ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003dd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003de4:	f107 0310 	add.w	r3, r7, #16
 8003de8:	4619      	mov	r1, r3
 8003dea:	4809      	ldr	r0, [pc, #36]	@ (8003e10 <HAL_UART_MspInit+0xa4>)
 8003dec:	f000 ff6e 	bl	8004ccc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003df0:	2200      	movs	r2, #0
 8003df2:	2100      	movs	r1, #0
 8003df4:	2025      	movs	r0, #37	@ 0x25
 8003df6:	f000 fe80 	bl	8004afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003dfa:	2025      	movs	r0, #37	@ 0x25
 8003dfc:	f000 fe99 	bl	8004b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003e00:	bf00      	nop
 8003e02:	3720      	adds	r7, #32
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40013800 	.word	0x40013800
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	40010800 	.word	0x40010800

08003e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e18:	bf00      	nop
 8003e1a:	e7fd      	b.n	8003e18 <NMI_Handler+0x4>

08003e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e20:	bf00      	nop
 8003e22:	e7fd      	b.n	8003e20 <HardFault_Handler+0x4>

08003e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e28:	bf00      	nop
 8003e2a:	e7fd      	b.n	8003e28 <MemManage_Handler+0x4>

08003e2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e30:	bf00      	nop
 8003e32:	e7fd      	b.n	8003e30 <BusFault_Handler+0x4>

08003e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e38:	bf00      	nop
 8003e3a:	e7fd      	b.n	8003e38 <UsageFault_Handler+0x4>

08003e3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e4c:	bf00      	nop
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr

08003e54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e58:	bf00      	nop
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr

08003e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e64:	f000 f8da 	bl	800401c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Systick();
 8003e68:	f7ff fab6 	bl	80033d8 <Systick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003e6c:	bf00      	nop
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ARM_SW1_Pin);
 8003e74:	2010      	movs	r0, #16
 8003e76:	f001 f8df 	bl	8005038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003e7a:	bf00      	nop
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003e84:	4802      	ldr	r0, [pc, #8]	@ (8003e90 <TIM3_IRQHandler+0x10>)
 8003e86:	f002 f905 	bl	8006094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	200001bc 	.word	0x200001bc

08003e94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003e98:	4802      	ldr	r0, [pc, #8]	@ (8003ea4 <TIM4_IRQHandler+0x10>)
 8003e9a:	f002 f8fb 	bl	8006094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003e9e:	bf00      	nop
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000204 	.word	0x20000204

08003ea8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003eac:	4802      	ldr	r0, [pc, #8]	@ (8003eb8 <USART1_IRQHandler+0x10>)
 8003eae:	f002 ff59 	bl	8006d64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003eb2:	bf00      	nop
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	2000024c 	.word	0x2000024c

08003ebc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RACE_SW2_Pin);
 8003ec0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003ec4:	f001 f8b8 	bl	8005038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003ec8:	bf00      	nop
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ed4:	4a14      	ldr	r2, [pc, #80]	@ (8003f28 <_sbrk+0x5c>)
 8003ed6:	4b15      	ldr	r3, [pc, #84]	@ (8003f2c <_sbrk+0x60>)
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ee0:	4b13      	ldr	r3, [pc, #76]	@ (8003f30 <_sbrk+0x64>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d102      	bne.n	8003eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ee8:	4b11      	ldr	r3, [pc, #68]	@ (8003f30 <_sbrk+0x64>)
 8003eea:	4a12      	ldr	r2, [pc, #72]	@ (8003f34 <_sbrk+0x68>)
 8003eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003eee:	4b10      	ldr	r3, [pc, #64]	@ (8003f30 <_sbrk+0x64>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d207      	bcs.n	8003f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003efc:	f003 fd1a 	bl	8007934 <__errno>
 8003f00:	4603      	mov	r3, r0
 8003f02:	220c      	movs	r2, #12
 8003f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f06:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0a:	e009      	b.n	8003f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f0c:	4b08      	ldr	r3, [pc, #32]	@ (8003f30 <_sbrk+0x64>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f12:	4b07      	ldr	r3, [pc, #28]	@ (8003f30 <_sbrk+0x64>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4413      	add	r3, r2
 8003f1a:	4a05      	ldr	r2, [pc, #20]	@ (8003f30 <_sbrk+0x64>)
 8003f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	20005000 	.word	0x20005000
 8003f2c:	00000400 	.word	0x00000400
 8003f30:	20000ca8 	.word	0x20000ca8
 8003f34:	20000df8 	.word	0x20000df8

08003f38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f3c:	bf00      	nop
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f44:	f7ff fff8 	bl	8003f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f48:	480b      	ldr	r0, [pc, #44]	@ (8003f78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003f4a:	490c      	ldr	r1, [pc, #48]	@ (8003f7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003f4c:	4a0c      	ldr	r2, [pc, #48]	@ (8003f80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f50:	e002      	b.n	8003f58 <LoopCopyDataInit>

08003f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f56:	3304      	adds	r3, #4

08003f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f5c:	d3f9      	bcc.n	8003f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f5e:	4a09      	ldr	r2, [pc, #36]	@ (8003f84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003f60:	4c09      	ldr	r4, [pc, #36]	@ (8003f88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f64:	e001      	b.n	8003f6a <LoopFillZerobss>

08003f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f68:	3204      	adds	r2, #4

08003f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f6c:	d3fb      	bcc.n	8003f66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f6e:	f003 fce7 	bl	8007940 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f72:	f7fd f825 	bl	8000fc0 <main>
  bx lr
 8003f76:	4770      	bx	lr
  ldr r0, =_sdata
 8003f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f7c:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8003f80:	08007ac8 	.word	0x08007ac8
  ldr r2, =_sbss
 8003f84:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8003f88:	20000df8 	.word	0x20000df8

08003f8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f8c:	e7fe      	b.n	8003f8c <ADC1_2_IRQHandler>
	...

08003f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f94:	4b08      	ldr	r3, [pc, #32]	@ (8003fb8 <HAL_Init+0x28>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a07      	ldr	r2, [pc, #28]	@ (8003fb8 <HAL_Init+0x28>)
 8003f9a:	f043 0310 	orr.w	r3, r3, #16
 8003f9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fa0:	2003      	movs	r0, #3
 8003fa2:	f000 fd9f 	bl	8004ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fa6:	200e      	movs	r0, #14
 8003fa8:	f000 f808 	bl	8003fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fac:	f7ff fd66 	bl	8003a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40022000 	.word	0x40022000

08003fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fc4:	4b12      	ldr	r3, [pc, #72]	@ (8004010 <HAL_InitTick+0x54>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	4b12      	ldr	r3, [pc, #72]	@ (8004014 <HAL_InitTick+0x58>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	4619      	mov	r1, r3
 8003fce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fdb7 	bl	8004b4e <HAL_SYSTICK_Config>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e00e      	b.n	8004008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b0f      	cmp	r3, #15
 8003fee:	d80a      	bhi.n	8004006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff8:	f000 fd7f 	bl	8004afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ffc:	4a06      	ldr	r2, [pc, #24]	@ (8004018 <HAL_InitTick+0x5c>)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	e000      	b.n	8004008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
}
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	2000009c 	.word	0x2000009c
 8004014:	200000a4 	.word	0x200000a4
 8004018:	200000a0 	.word	0x200000a0

0800401c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004020:	4b05      	ldr	r3, [pc, #20]	@ (8004038 <HAL_IncTick+0x1c>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	4b05      	ldr	r3, [pc, #20]	@ (800403c <HAL_IncTick+0x20>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4413      	add	r3, r2
 800402c:	4a03      	ldr	r2, [pc, #12]	@ (800403c <HAL_IncTick+0x20>)
 800402e:	6013      	str	r3, [r2, #0]
}
 8004030:	bf00      	nop
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr
 8004038:	200000a4 	.word	0x200000a4
 800403c:	20000cac 	.word	0x20000cac

08004040 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  return uwTick;
 8004044:	4b02      	ldr	r3, [pc, #8]	@ (8004050 <HAL_GetTick+0x10>)
 8004046:	681b      	ldr	r3, [r3, #0]
}
 8004048:	4618      	mov	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr
 8004050:	20000cac 	.word	0x20000cac

08004054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800405c:	f7ff fff0 	bl	8004040 <HAL_GetTick>
 8004060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406c:	d005      	beq.n	800407a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800406e:	4b0a      	ldr	r3, [pc, #40]	@ (8004098 <HAL_Delay+0x44>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4413      	add	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800407a:	bf00      	nop
 800407c:	f7ff ffe0 	bl	8004040 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	429a      	cmp	r2, r3
 800408a:	d8f7      	bhi.n	800407c <HAL_Delay+0x28>
  {
  }
}
 800408c:	bf00      	nop
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	200000a4 	.word	0x200000a4

0800409c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e0be      	b.n	800423c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d109      	bne.n	80040e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff fd00 	bl	8003ae0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 fbf1 	bl	80048c8 <ADC_ConversionStop_Disable>
 80040e6:	4603      	mov	r3, r0
 80040e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f040 8099 	bne.w	800422a <HAL_ADC_Init+0x18e>
 80040f8:	7dfb      	ldrb	r3, [r7, #23]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f040 8095 	bne.w	800422a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004104:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004108:	f023 0302 	bic.w	r3, r3, #2
 800410c:	f043 0202 	orr.w	r2, r3, #2
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800411c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7b1b      	ldrb	r3, [r3, #12]
 8004122:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004124:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	4313      	orrs	r3, r2
 800412a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004134:	d003      	beq.n	800413e <HAL_ADC_Init+0xa2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d102      	bne.n	8004144 <HAL_ADC_Init+0xa8>
 800413e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004142:	e000      	b.n	8004146 <HAL_ADC_Init+0xaa>
 8004144:	2300      	movs	r3, #0
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	7d1b      	ldrb	r3, [r3, #20]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d119      	bne.n	8004188 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	7b1b      	ldrb	r3, [r3, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d109      	bne.n	8004170 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	3b01      	subs	r3, #1
 8004162:	035a      	lsls	r2, r3, #13
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	e00b      	b.n	8004188 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004174:	f043 0220 	orr.w	r2, r3, #32
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004180:	f043 0201 	orr.w	r2, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	430a      	orrs	r2, r1
 800419a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	4b28      	ldr	r3, [pc, #160]	@ (8004244 <HAL_ADC_Init+0x1a8>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6812      	ldr	r2, [r2, #0]
 80041aa:	68b9      	ldr	r1, [r7, #8]
 80041ac:	430b      	orrs	r3, r1
 80041ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041b8:	d003      	beq.n	80041c2 <HAL_ADC_Init+0x126>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d104      	bne.n	80041cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	051b      	lsls	r3, r3, #20
 80041ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	430a      	orrs	r2, r1
 80041de:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	4b18      	ldr	r3, [pc, #96]	@ (8004248 <HAL_ADC_Init+0x1ac>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d10b      	bne.n	8004208 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fa:	f023 0303 	bic.w	r3, r3, #3
 80041fe:	f043 0201 	orr.w	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004206:	e018      	b.n	800423a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420c:	f023 0312 	bic.w	r3, r3, #18
 8004210:	f043 0210 	orr.w	r2, r3, #16
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421c:	f043 0201 	orr.w	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004228:	e007      	b.n	800423a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422e:	f043 0210 	orr.w	r2, r3, #16
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800423a:	7dfb      	ldrb	r3, [r7, #23]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	ffe1f7fd 	.word	0xffe1f7fd
 8004248:	ff1f0efe 	.word	0xff1f0efe

0800424c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <HAL_ADC_Start+0x1a>
 8004262:	2302      	movs	r3, #2
 8004264:	e098      	b.n	8004398 <HAL_ADC_Start+0x14c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fad0 	bl	8004814 <ADC_Enable>
 8004274:	4603      	mov	r3, r0
 8004276:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	2b00      	cmp	r3, #0
 800427c:	f040 8087 	bne.w	800438e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a41      	ldr	r2, [pc, #260]	@ (80043a0 <HAL_ADC_Start+0x154>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d105      	bne.n	80042aa <HAL_ADC_Start+0x5e>
 800429e:	4b41      	ldr	r3, [pc, #260]	@ (80043a4 <HAL_ADC_Start+0x158>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d115      	bne.n	80042d6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d026      	beq.n	8004312 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80042cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80042d4:	e01d      	b.n	8004312 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a2f      	ldr	r2, [pc, #188]	@ (80043a4 <HAL_ADC_Start+0x158>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d004      	beq.n	80042f6 <HAL_ADC_Start+0xaa>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a2b      	ldr	r2, [pc, #172]	@ (80043a0 <HAL_ADC_Start+0x154>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d10d      	bne.n	8004312 <HAL_ADC_Start+0xc6>
 80042f6:	4b2b      	ldr	r3, [pc, #172]	@ (80043a4 <HAL_ADC_Start+0x158>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d007      	beq.n	8004312 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004306:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800430a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004316:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d006      	beq.n	800432c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004322:	f023 0206 	bic.w	r2, r3, #6
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	62da      	str	r2, [r3, #44]	@ 0x2c
 800432a:	e002      	b.n	8004332 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f06f 0202 	mvn.w	r2, #2
 8004342:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800434e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004352:	d113      	bne.n	800437c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004358:	4a11      	ldr	r2, [pc, #68]	@ (80043a0 <HAL_ADC_Start+0x154>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d105      	bne.n	800436a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800435e:	4b11      	ldr	r3, [pc, #68]	@ (80043a4 <HAL_ADC_Start+0x158>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004366:	2b00      	cmp	r3, #0
 8004368:	d108      	bne.n	800437c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8004378:	609a      	str	r2, [r3, #8]
 800437a:	e00c      	b.n	8004396 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800438a:	609a      	str	r2, [r3, #8]
 800438c:	e003      	b.n	8004396 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004396:	7bfb      	ldrb	r3, [r7, #15]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40012800 	.word	0x40012800
 80043a4:	40012400 	.word	0x40012400

080043a8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043b0:	2300      	movs	r3, #0
 80043b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d101      	bne.n	80043c2 <HAL_ADC_Stop+0x1a>
 80043be:	2302      	movs	r3, #2
 80043c0:	e01a      	b.n	80043f8 <HAL_ADC_Stop+0x50>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fa7c 	bl	80048c8 <ADC_ConversionStop_Disable>
 80043d0:	4603      	mov	r3, r0
 80043d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d109      	bne.n	80043ee <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	f043 0201 	orr.w	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004400:	b590      	push	{r4, r7, lr}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004416:	f7ff fe13 	bl	8004040 <HAL_GetTick>
 800441a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442e:	f043 0220 	orr.w	r2, r3, #32
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e0d3      	b.n	80045ea <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800444c:	2b00      	cmp	r3, #0
 800444e:	d131      	bne.n	80044b4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004456:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800445a:	2b00      	cmp	r3, #0
 800445c:	d12a      	bne.n	80044b4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800445e:	e021      	b.n	80044a4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004466:	d01d      	beq.n	80044a4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d007      	beq.n	800447e <HAL_ADC_PollForConversion+0x7e>
 800446e:	f7ff fde7 	bl	8004040 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d212      	bcs.n	80044a4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10b      	bne.n	80044a4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004490:	f043 0204 	orr.w	r2, r3, #4
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e0a2      	b.n	80045ea <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0d6      	beq.n	8004460 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80044b2:	e070      	b.n	8004596 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80044b4:	4b4f      	ldr	r3, [pc, #316]	@ (80045f4 <HAL_ADC_PollForConversion+0x1f4>)
 80044b6:	681c      	ldr	r4, [r3, #0]
 80044b8:	2002      	movs	r0, #2
 80044ba:	f001 fa9b 	bl	80059f4 <HAL_RCCEx_GetPeriphCLKFreq>
 80044be:	4603      	mov	r3, r0
 80044c0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6919      	ldr	r1, [r3, #16]
 80044ca:	4b4b      	ldr	r3, [pc, #300]	@ (80045f8 <HAL_ADC_PollForConversion+0x1f8>)
 80044cc:	400b      	ands	r3, r1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d118      	bne.n	8004504 <HAL_ADC_PollForConversion+0x104>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68d9      	ldr	r1, [r3, #12]
 80044d8:	4b48      	ldr	r3, [pc, #288]	@ (80045fc <HAL_ADC_PollForConversion+0x1fc>)
 80044da:	400b      	ands	r3, r1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d111      	bne.n	8004504 <HAL_ADC_PollForConversion+0x104>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6919      	ldr	r1, [r3, #16]
 80044e6:	4b46      	ldr	r3, [pc, #280]	@ (8004600 <HAL_ADC_PollForConversion+0x200>)
 80044e8:	400b      	ands	r3, r1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d108      	bne.n	8004500 <HAL_ADC_PollForConversion+0x100>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68d9      	ldr	r1, [r3, #12]
 80044f4:	4b43      	ldr	r3, [pc, #268]	@ (8004604 <HAL_ADC_PollForConversion+0x204>)
 80044f6:	400b      	ands	r3, r1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_ADC_PollForConversion+0x100>
 80044fc:	2314      	movs	r3, #20
 80044fe:	e020      	b.n	8004542 <HAL_ADC_PollForConversion+0x142>
 8004500:	2329      	movs	r3, #41	@ 0x29
 8004502:	e01e      	b.n	8004542 <HAL_ADC_PollForConversion+0x142>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6919      	ldr	r1, [r3, #16]
 800450a:	4b3d      	ldr	r3, [pc, #244]	@ (8004600 <HAL_ADC_PollForConversion+0x200>)
 800450c:	400b      	ands	r3, r1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_ADC_PollForConversion+0x120>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68d9      	ldr	r1, [r3, #12]
 8004518:	4b3a      	ldr	r3, [pc, #232]	@ (8004604 <HAL_ADC_PollForConversion+0x204>)
 800451a:	400b      	ands	r3, r1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00d      	beq.n	800453c <HAL_ADC_PollForConversion+0x13c>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6919      	ldr	r1, [r3, #16]
 8004526:	4b38      	ldr	r3, [pc, #224]	@ (8004608 <HAL_ADC_PollForConversion+0x208>)
 8004528:	400b      	ands	r3, r1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d108      	bne.n	8004540 <HAL_ADC_PollForConversion+0x140>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68d9      	ldr	r1, [r3, #12]
 8004534:	4b34      	ldr	r3, [pc, #208]	@ (8004608 <HAL_ADC_PollForConversion+0x208>)
 8004536:	400b      	ands	r3, r1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_ADC_PollForConversion+0x140>
 800453c:	2354      	movs	r3, #84	@ 0x54
 800453e:	e000      	b.n	8004542 <HAL_ADC_PollForConversion+0x142>
 8004540:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8004542:	fb02 f303 	mul.w	r3, r2, r3
 8004546:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004548:	e021      	b.n	800458e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d01a      	beq.n	8004588 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <HAL_ADC_PollForConversion+0x168>
 8004558:	f7ff fd72 	bl	8004040 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d20f      	bcs.n	8004588 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	429a      	cmp	r2, r3
 800456e:	d90b      	bls.n	8004588 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004574:	f043 0204 	orr.w	r2, r3, #4
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e030      	b.n	80045ea <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3301      	adds	r3, #1
 800458c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	429a      	cmp	r2, r3
 8004594:	d8d9      	bhi.n	800454a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f06f 0212 	mvn.w	r2, #18
 800459e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80045b6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80045ba:	d115      	bne.n	80045e8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d111      	bne.n	80045e8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d105      	bne.n	80045e8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e0:	f043 0201 	orr.w	r2, r3, #1
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd90      	pop	{r4, r7, pc}
 80045f2:	bf00      	nop
 80045f4:	2000009c 	.word	0x2000009c
 80045f8:	24924924 	.word	0x24924924
 80045fc:	00924924 	.word	0x00924924
 8004600:	12492492 	.word	0x12492492
 8004604:	00492492 	.word	0x00492492
 8004608:	00249249 	.word	0x00249249

0800460c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr

08004624 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x20>
 8004640:	2302      	movs	r3, #2
 8004642:	e0dc      	b.n	80047fe <HAL_ADC_ConfigChannel+0x1da>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2b06      	cmp	r3, #6
 8004652:	d81c      	bhi.n	800468e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	3b05      	subs	r3, #5
 8004666:	221f      	movs	r2, #31
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	43db      	mvns	r3, r3
 800466e:	4019      	ands	r1, r3
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	3b05      	subs	r3, #5
 8004680:	fa00 f203 	lsl.w	r2, r0, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	635a      	str	r2, [r3, #52]	@ 0x34
 800468c:	e03c      	b.n	8004708 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b0c      	cmp	r3, #12
 8004694:	d81c      	bhi.n	80046d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	3b23      	subs	r3, #35	@ 0x23
 80046a8:	221f      	movs	r2, #31
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	43db      	mvns	r3, r3
 80046b0:	4019      	ands	r1, r3
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	3b23      	subs	r3, #35	@ 0x23
 80046c2:	fa00 f203 	lsl.w	r2, r0, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80046ce:	e01b      	b.n	8004708 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	3b41      	subs	r3, #65	@ 0x41
 80046e2:	221f      	movs	r2, #31
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	43db      	mvns	r3, r3
 80046ea:	4019      	ands	r1, r3
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	3b41      	subs	r3, #65	@ 0x41
 80046fc:	fa00 f203 	lsl.w	r2, r0, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b09      	cmp	r3, #9
 800470e:	d91c      	bls.n	800474a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68d9      	ldr	r1, [r3, #12]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4613      	mov	r3, r2
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	4413      	add	r3, r2
 8004720:	3b1e      	subs	r3, #30
 8004722:	2207      	movs	r2, #7
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	43db      	mvns	r3, r3
 800472a:	4019      	ands	r1, r3
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	6898      	ldr	r0, [r3, #8]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	4613      	mov	r3, r2
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	4413      	add	r3, r2
 800473a:	3b1e      	subs	r3, #30
 800473c:	fa00 f203 	lsl.w	r2, r0, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	60da      	str	r2, [r3, #12]
 8004748:	e019      	b.n	800477e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6919      	ldr	r1, [r3, #16]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	4613      	mov	r3, r2
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	4413      	add	r3, r2
 800475a:	2207      	movs	r2, #7
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	4019      	ands	r1, r3
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	6898      	ldr	r0, [r3, #8]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4613      	mov	r3, r2
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	4413      	add	r3, r2
 8004772:	fa00 f203 	lsl.w	r2, r0, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b10      	cmp	r3, #16
 8004784:	d003      	beq.n	800478e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800478a:	2b11      	cmp	r3, #17
 800478c:	d132      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a1d      	ldr	r2, [pc, #116]	@ (8004808 <HAL_ADC_ConfigChannel+0x1e4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d125      	bne.n	80047e4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d126      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80047b4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b10      	cmp	r3, #16
 80047bc:	d11a      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80047be:	4b13      	ldr	r3, [pc, #76]	@ (800480c <HAL_ADC_ConfigChannel+0x1e8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a13      	ldr	r2, [pc, #76]	@ (8004810 <HAL_ADC_ConfigChannel+0x1ec>)
 80047c4:	fba2 2303 	umull	r2, r3, r2, r3
 80047c8:	0c9a      	lsrs	r2, r3, #18
 80047ca:	4613      	mov	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80047d4:	e002      	b.n	80047dc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	3b01      	subs	r3, #1
 80047da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f9      	bne.n	80047d6 <HAL_ADC_ConfigChannel+0x1b2>
 80047e2:	e007      	b.n	80047f4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e8:	f043 0220 	orr.w	r2, r3, #32
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr
 8004808:	40012400 	.word	0x40012400
 800480c:	2000009c 	.word	0x2000009c
 8004810:	431bde83 	.word	0x431bde83

08004814 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b01      	cmp	r3, #1
 8004830:	d040      	beq.n	80048b4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0201 	orr.w	r2, r2, #1
 8004840:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004842:	4b1f      	ldr	r3, [pc, #124]	@ (80048c0 <ADC_Enable+0xac>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a1f      	ldr	r2, [pc, #124]	@ (80048c4 <ADC_Enable+0xb0>)
 8004848:	fba2 2303 	umull	r2, r3, r2, r3
 800484c:	0c9b      	lsrs	r3, r3, #18
 800484e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004850:	e002      	b.n	8004858 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	3b01      	subs	r3, #1
 8004856:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f9      	bne.n	8004852 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800485e:	f7ff fbef 	bl	8004040 <HAL_GetTick>
 8004862:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004864:	e01f      	b.n	80048a6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004866:	f7ff fbeb 	bl	8004040 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d918      	bls.n	80048a6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b01      	cmp	r3, #1
 8004880:	d011      	beq.n	80048a6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004886:	f043 0210 	orr.w	r2, r3, #16
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004892:	f043 0201 	orr.w	r2, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e007      	b.n	80048b6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d1d8      	bne.n	8004866 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	2000009c 	.word	0x2000009c
 80048c4:	431bde83 	.word	0x431bde83

080048c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d12e      	bne.n	8004940 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 0201 	bic.w	r2, r2, #1
 80048f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80048f2:	f7ff fba5 	bl	8004040 <HAL_GetTick>
 80048f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80048f8:	e01b      	b.n	8004932 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80048fa:	f7ff fba1 	bl	8004040 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d914      	bls.n	8004932 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b01      	cmp	r3, #1
 8004914:	d10d      	bne.n	8004932 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491a:	f043 0210 	orr.w	r2, r3, #16
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004926:	f043 0201 	orr.w	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e007      	b.n	8004942 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b01      	cmp	r3, #1
 800493e:	d0dc      	beq.n	80048fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800495c:	4b0c      	ldr	r3, [pc, #48]	@ (8004990 <__NVIC_SetPriorityGrouping+0x44>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004968:	4013      	ands	r3, r2
 800496a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004974:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800497c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800497e:	4a04      	ldr	r2, [pc, #16]	@ (8004990 <__NVIC_SetPriorityGrouping+0x44>)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	60d3      	str	r3, [r2, #12]
}
 8004984:	bf00      	nop
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	e000ed00 	.word	0xe000ed00

08004994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004998:	4b04      	ldr	r3, [pc, #16]	@ (80049ac <__NVIC_GetPriorityGrouping+0x18>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	0a1b      	lsrs	r3, r3, #8
 800499e:	f003 0307 	and.w	r3, r3, #7
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc80      	pop	{r7}
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	e000ed00 	.word	0xe000ed00

080049b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	4603      	mov	r3, r0
 80049b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	db0b      	blt.n	80049da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049c2:	79fb      	ldrb	r3, [r7, #7]
 80049c4:	f003 021f 	and.w	r2, r3, #31
 80049c8:	4906      	ldr	r1, [pc, #24]	@ (80049e4 <__NVIC_EnableIRQ+0x34>)
 80049ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	2001      	movs	r0, #1
 80049d2:	fa00 f202 	lsl.w	r2, r0, r2
 80049d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr
 80049e4:	e000e100 	.word	0xe000e100

080049e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	6039      	str	r1, [r7, #0]
 80049f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	db0a      	blt.n	8004a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	490c      	ldr	r1, [pc, #48]	@ (8004a34 <__NVIC_SetPriority+0x4c>)
 8004a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a06:	0112      	lsls	r2, r2, #4
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a10:	e00a      	b.n	8004a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	4908      	ldr	r1, [pc, #32]	@ (8004a38 <__NVIC_SetPriority+0x50>)
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	3b04      	subs	r3, #4
 8004a20:	0112      	lsls	r2, r2, #4
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	440b      	add	r3, r1
 8004a26:	761a      	strb	r2, [r3, #24]
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bc80      	pop	{r7}
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	e000e100 	.word	0xe000e100
 8004a38:	e000ed00 	.word	0xe000ed00

08004a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b089      	sub	sp, #36	@ 0x24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f1c3 0307 	rsb	r3, r3, #7
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	bf28      	it	cs
 8004a5a:	2304      	movcs	r3, #4
 8004a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	3304      	adds	r3, #4
 8004a62:	2b06      	cmp	r3, #6
 8004a64:	d902      	bls.n	8004a6c <NVIC_EncodePriority+0x30>
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	3b03      	subs	r3, #3
 8004a6a:	e000      	b.n	8004a6e <NVIC_EncodePriority+0x32>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a70:	f04f 32ff 	mov.w	r2, #4294967295
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	43da      	mvns	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	401a      	ands	r2, r3
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a84:	f04f 31ff 	mov.w	r1, #4294967295
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8e:	43d9      	mvns	r1, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a94:	4313      	orrs	r3, r2
         );
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3724      	adds	r7, #36	@ 0x24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bc80      	pop	{r7}
 8004a9e:	4770      	bx	lr

08004aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ab0:	d301      	bcc.n	8004ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e00f      	b.n	8004ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ae0 <SysTick_Config+0x40>)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004abe:	210f      	movs	r1, #15
 8004ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac4:	f7ff ff90 	bl	80049e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ac8:	4b05      	ldr	r3, [pc, #20]	@ (8004ae0 <SysTick_Config+0x40>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ace:	4b04      	ldr	r3, [pc, #16]	@ (8004ae0 <SysTick_Config+0x40>)
 8004ad0:	2207      	movs	r2, #7
 8004ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	e000e010 	.word	0xe000e010

08004ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7ff ff2d 	bl	800494c <__NVIC_SetPriorityGrouping>
}
 8004af2:	bf00      	nop
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b086      	sub	sp, #24
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	4603      	mov	r3, r0
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	607a      	str	r2, [r7, #4]
 8004b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b0c:	f7ff ff42 	bl	8004994 <__NVIC_GetPriorityGrouping>
 8004b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	68b9      	ldr	r1, [r7, #8]
 8004b16:	6978      	ldr	r0, [r7, #20]
 8004b18:	f7ff ff90 	bl	8004a3c <NVIC_EncodePriority>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b22:	4611      	mov	r1, r2
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff ff5f 	bl	80049e8 <__NVIC_SetPriority>
}
 8004b2a:	bf00      	nop
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	4603      	mov	r3, r0
 8004b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff ff35 	bl	80049b0 <__NVIC_EnableIRQ>
}
 8004b46:	bf00      	nop
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b082      	sub	sp, #8
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7ff ffa2 	bl	8004aa0 <SysTick_Config>
 8004b5c:	4603      	mov	r3, r0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b085      	sub	sp, #20
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d008      	beq.n	8004b90 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2204      	movs	r2, #4
 8004b82:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e020      	b.n	8004bd2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 020e 	bic.w	r2, r2, #14
 8004b9e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0201 	bic.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb8:	2101      	movs	r1, #1
 8004bba:	fa01 f202 	lsl.w	r2, r1, r2
 8004bbe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr

08004bdc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d005      	beq.n	8004c00 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2204      	movs	r2, #4
 8004bf8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	73fb      	strb	r3, [r7, #15]
 8004bfe:	e051      	b.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 020e 	bic.w	r2, r2, #14
 8004c0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0201 	bic.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a22      	ldr	r2, [pc, #136]	@ (8004cb0 <HAL_DMA_Abort_IT+0xd4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d029      	beq.n	8004c7e <HAL_DMA_Abort_IT+0xa2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a21      	ldr	r2, [pc, #132]	@ (8004cb4 <HAL_DMA_Abort_IT+0xd8>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d022      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x9e>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a1f      	ldr	r2, [pc, #124]	@ (8004cb8 <HAL_DMA_Abort_IT+0xdc>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d01a      	beq.n	8004c74 <HAL_DMA_Abort_IT+0x98>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a1e      	ldr	r2, [pc, #120]	@ (8004cbc <HAL_DMA_Abort_IT+0xe0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d012      	beq.n	8004c6e <HAL_DMA_Abort_IT+0x92>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1c      	ldr	r2, [pc, #112]	@ (8004cc0 <HAL_DMA_Abort_IT+0xe4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00a      	beq.n	8004c68 <HAL_DMA_Abort_IT+0x8c>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1b      	ldr	r2, [pc, #108]	@ (8004cc4 <HAL_DMA_Abort_IT+0xe8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d102      	bne.n	8004c62 <HAL_DMA_Abort_IT+0x86>
 8004c5c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004c60:	e00e      	b.n	8004c80 <HAL_DMA_Abort_IT+0xa4>
 8004c62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c66:	e00b      	b.n	8004c80 <HAL_DMA_Abort_IT+0xa4>
 8004c68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004c6c:	e008      	b.n	8004c80 <HAL_DMA_Abort_IT+0xa4>
 8004c6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c72:	e005      	b.n	8004c80 <HAL_DMA_Abort_IT+0xa4>
 8004c74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c78:	e002      	b.n	8004c80 <HAL_DMA_Abort_IT+0xa4>
 8004c7a:	2310      	movs	r3, #16
 8004c7c:	e000      	b.n	8004c80 <HAL_DMA_Abort_IT+0xa4>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	4a11      	ldr	r2, [pc, #68]	@ (8004cc8 <HAL_DMA_Abort_IT+0xec>)
 8004c82:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	4798      	blx	r3
    } 
  }
  return status;
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40020008 	.word	0x40020008
 8004cb4:	4002001c 	.word	0x4002001c
 8004cb8:	40020030 	.word	0x40020030
 8004cbc:	40020044 	.word	0x40020044
 8004cc0:	40020058 	.word	0x40020058
 8004cc4:	4002006c 	.word	0x4002006c
 8004cc8:	40020000 	.word	0x40020000

08004ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b08b      	sub	sp, #44	@ 0x2c
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cde:	e169      	b.n	8004fb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69fa      	ldr	r2, [r7, #28]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	f040 8158 	bne.w	8004fae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	4a9a      	ldr	r2, [pc, #616]	@ (8004f6c <HAL_GPIO_Init+0x2a0>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d05e      	beq.n	8004dc6 <HAL_GPIO_Init+0xfa>
 8004d08:	4a98      	ldr	r2, [pc, #608]	@ (8004f6c <HAL_GPIO_Init+0x2a0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d875      	bhi.n	8004dfa <HAL_GPIO_Init+0x12e>
 8004d0e:	4a98      	ldr	r2, [pc, #608]	@ (8004f70 <HAL_GPIO_Init+0x2a4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d058      	beq.n	8004dc6 <HAL_GPIO_Init+0xfa>
 8004d14:	4a96      	ldr	r2, [pc, #600]	@ (8004f70 <HAL_GPIO_Init+0x2a4>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d86f      	bhi.n	8004dfa <HAL_GPIO_Init+0x12e>
 8004d1a:	4a96      	ldr	r2, [pc, #600]	@ (8004f74 <HAL_GPIO_Init+0x2a8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d052      	beq.n	8004dc6 <HAL_GPIO_Init+0xfa>
 8004d20:	4a94      	ldr	r2, [pc, #592]	@ (8004f74 <HAL_GPIO_Init+0x2a8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d869      	bhi.n	8004dfa <HAL_GPIO_Init+0x12e>
 8004d26:	4a94      	ldr	r2, [pc, #592]	@ (8004f78 <HAL_GPIO_Init+0x2ac>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d04c      	beq.n	8004dc6 <HAL_GPIO_Init+0xfa>
 8004d2c:	4a92      	ldr	r2, [pc, #584]	@ (8004f78 <HAL_GPIO_Init+0x2ac>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d863      	bhi.n	8004dfa <HAL_GPIO_Init+0x12e>
 8004d32:	4a92      	ldr	r2, [pc, #584]	@ (8004f7c <HAL_GPIO_Init+0x2b0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d046      	beq.n	8004dc6 <HAL_GPIO_Init+0xfa>
 8004d38:	4a90      	ldr	r2, [pc, #576]	@ (8004f7c <HAL_GPIO_Init+0x2b0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d85d      	bhi.n	8004dfa <HAL_GPIO_Init+0x12e>
 8004d3e:	2b12      	cmp	r3, #18
 8004d40:	d82a      	bhi.n	8004d98 <HAL_GPIO_Init+0xcc>
 8004d42:	2b12      	cmp	r3, #18
 8004d44:	d859      	bhi.n	8004dfa <HAL_GPIO_Init+0x12e>
 8004d46:	a201      	add	r2, pc, #4	@ (adr r2, 8004d4c <HAL_GPIO_Init+0x80>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004dc7 	.word	0x08004dc7
 8004d50:	08004da1 	.word	0x08004da1
 8004d54:	08004db3 	.word	0x08004db3
 8004d58:	08004df5 	.word	0x08004df5
 8004d5c:	08004dfb 	.word	0x08004dfb
 8004d60:	08004dfb 	.word	0x08004dfb
 8004d64:	08004dfb 	.word	0x08004dfb
 8004d68:	08004dfb 	.word	0x08004dfb
 8004d6c:	08004dfb 	.word	0x08004dfb
 8004d70:	08004dfb 	.word	0x08004dfb
 8004d74:	08004dfb 	.word	0x08004dfb
 8004d78:	08004dfb 	.word	0x08004dfb
 8004d7c:	08004dfb 	.word	0x08004dfb
 8004d80:	08004dfb 	.word	0x08004dfb
 8004d84:	08004dfb 	.word	0x08004dfb
 8004d88:	08004dfb 	.word	0x08004dfb
 8004d8c:	08004dfb 	.word	0x08004dfb
 8004d90:	08004da9 	.word	0x08004da9
 8004d94:	08004dbd 	.word	0x08004dbd
 8004d98:	4a79      	ldr	r2, [pc, #484]	@ (8004f80 <HAL_GPIO_Init+0x2b4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d013      	beq.n	8004dc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004d9e:	e02c      	b.n	8004dfa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	623b      	str	r3, [r7, #32]
          break;
 8004da6:	e029      	b.n	8004dfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	3304      	adds	r3, #4
 8004dae:	623b      	str	r3, [r7, #32]
          break;
 8004db0:	e024      	b.n	8004dfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	3308      	adds	r3, #8
 8004db8:	623b      	str	r3, [r7, #32]
          break;
 8004dba:	e01f      	b.n	8004dfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	623b      	str	r3, [r7, #32]
          break;
 8004dc4:	e01a      	b.n	8004dfc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d102      	bne.n	8004dd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004dce:	2304      	movs	r3, #4
 8004dd0:	623b      	str	r3, [r7, #32]
          break;
 8004dd2:	e013      	b.n	8004dfc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d105      	bne.n	8004de8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ddc:	2308      	movs	r3, #8
 8004dde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	69fa      	ldr	r2, [r7, #28]
 8004de4:	611a      	str	r2, [r3, #16]
          break;
 8004de6:	e009      	b.n	8004dfc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004de8:	2308      	movs	r3, #8
 8004dea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69fa      	ldr	r2, [r7, #28]
 8004df0:	615a      	str	r2, [r3, #20]
          break;
 8004df2:	e003      	b.n	8004dfc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004df4:	2300      	movs	r3, #0
 8004df6:	623b      	str	r3, [r7, #32]
          break;
 8004df8:	e000      	b.n	8004dfc <HAL_GPIO_Init+0x130>
          break;
 8004dfa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	2bff      	cmp	r3, #255	@ 0xff
 8004e00:	d801      	bhi.n	8004e06 <HAL_GPIO_Init+0x13a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	e001      	b.n	8004e0a <HAL_GPIO_Init+0x13e>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	2bff      	cmp	r3, #255	@ 0xff
 8004e10:	d802      	bhi.n	8004e18 <HAL_GPIO_Init+0x14c>
 8004e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	e002      	b.n	8004e1e <HAL_GPIO_Init+0x152>
 8004e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1a:	3b08      	subs	r3, #8
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	210f      	movs	r1, #15
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	401a      	ands	r2, r3
 8004e30:	6a39      	ldr	r1, [r7, #32]
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	fa01 f303 	lsl.w	r3, r1, r3
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 80b1 	beq.w	8004fae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004e4c:	4b4d      	ldr	r3, [pc, #308]	@ (8004f84 <HAL_GPIO_Init+0x2b8>)
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	4a4c      	ldr	r2, [pc, #304]	@ (8004f84 <HAL_GPIO_Init+0x2b8>)
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	6193      	str	r3, [r2, #24]
 8004e58:	4b4a      	ldr	r3, [pc, #296]	@ (8004f84 <HAL_GPIO_Init+0x2b8>)
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	60bb      	str	r3, [r7, #8]
 8004e62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004e64:	4a48      	ldr	r2, [pc, #288]	@ (8004f88 <HAL_GPIO_Init+0x2bc>)
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	089b      	lsrs	r3, r3, #2
 8004e6a:	3302      	adds	r3, #2
 8004e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	220f      	movs	r2, #15
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	43db      	mvns	r3, r3
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4013      	ands	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a40      	ldr	r2, [pc, #256]	@ (8004f8c <HAL_GPIO_Init+0x2c0>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d013      	beq.n	8004eb8 <HAL_GPIO_Init+0x1ec>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a3f      	ldr	r2, [pc, #252]	@ (8004f90 <HAL_GPIO_Init+0x2c4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00d      	beq.n	8004eb4 <HAL_GPIO_Init+0x1e8>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a3e      	ldr	r2, [pc, #248]	@ (8004f94 <HAL_GPIO_Init+0x2c8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d007      	beq.n	8004eb0 <HAL_GPIO_Init+0x1e4>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a3d      	ldr	r2, [pc, #244]	@ (8004f98 <HAL_GPIO_Init+0x2cc>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d101      	bne.n	8004eac <HAL_GPIO_Init+0x1e0>
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e006      	b.n	8004eba <HAL_GPIO_Init+0x1ee>
 8004eac:	2304      	movs	r3, #4
 8004eae:	e004      	b.n	8004eba <HAL_GPIO_Init+0x1ee>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	e002      	b.n	8004eba <HAL_GPIO_Init+0x1ee>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <HAL_GPIO_Init+0x1ee>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ebc:	f002 0203 	and.w	r2, r2, #3
 8004ec0:	0092      	lsls	r2, r2, #2
 8004ec2:	4093      	lsls	r3, r2
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004eca:	492f      	ldr	r1, [pc, #188]	@ (8004f88 <HAL_GPIO_Init+0x2bc>)
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ece:	089b      	lsrs	r3, r3, #2
 8004ed0:	3302      	adds	r3, #2
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d006      	beq.n	8004ef2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8004f9c <HAL_GPIO_Init+0x2d0>)
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	492c      	ldr	r1, [pc, #176]	@ (8004f9c <HAL_GPIO_Init+0x2d0>)
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	608b      	str	r3, [r1, #8]
 8004ef0:	e006      	b.n	8004f00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004ef2:	4b2a      	ldr	r3, [pc, #168]	@ (8004f9c <HAL_GPIO_Init+0x2d0>)
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	4928      	ldr	r1, [pc, #160]	@ (8004f9c <HAL_GPIO_Init+0x2d0>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d006      	beq.n	8004f1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004f0c:	4b23      	ldr	r3, [pc, #140]	@ (8004f9c <HAL_GPIO_Init+0x2d0>)
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	4922      	ldr	r1, [pc, #136]	@ (8004f9c <HAL_GPIO_Init+0x2d0>)
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60cb      	str	r3, [r1, #12]
 8004f18:	e006      	b.n	8004f28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004f1a:	4b20      	ldr	r3, [pc, #128]	@ (8004f9c <HAL_GPIO_Init+0x2d0>)
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	43db      	mvns	r3, r3
 8004f22:	491e      	ldr	r1, [pc, #120]	@ (8004f9c <HAL_GPIO_Init+0x2d0>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d006      	beq.n	8004f42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004f34:	4b19      	ldr	r3, [pc, #100]	@ (8004f9c <HAL_GPIO_Init+0x2d0>)
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	4918      	ldr	r1, [pc, #96]	@ (8004f9c <HAL_GPIO_Init+0x2d0>)
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	604b      	str	r3, [r1, #4]
 8004f40:	e006      	b.n	8004f50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004f42:	4b16      	ldr	r3, [pc, #88]	@ (8004f9c <HAL_GPIO_Init+0x2d0>)
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	4914      	ldr	r1, [pc, #80]	@ (8004f9c <HAL_GPIO_Init+0x2d0>)
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d021      	beq.n	8004fa0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f9c <HAL_GPIO_Init+0x2d0>)
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	490e      	ldr	r1, [pc, #56]	@ (8004f9c <HAL_GPIO_Init+0x2d0>)
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	600b      	str	r3, [r1, #0]
 8004f68:	e021      	b.n	8004fae <HAL_GPIO_Init+0x2e2>
 8004f6a:	bf00      	nop
 8004f6c:	10320000 	.word	0x10320000
 8004f70:	10310000 	.word	0x10310000
 8004f74:	10220000 	.word	0x10220000
 8004f78:	10210000 	.word	0x10210000
 8004f7c:	10120000 	.word	0x10120000
 8004f80:	10110000 	.word	0x10110000
 8004f84:	40021000 	.word	0x40021000
 8004f88:	40010000 	.word	0x40010000
 8004f8c:	40010800 	.word	0x40010800
 8004f90:	40010c00 	.word	0x40010c00
 8004f94:	40011000 	.word	0x40011000
 8004f98:	40011400 	.word	0x40011400
 8004f9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd0 <HAL_GPIO_Init+0x304>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	4909      	ldr	r1, [pc, #36]	@ (8004fd0 <HAL_GPIO_Init+0x304>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fba:	fa22 f303 	lsr.w	r3, r2, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f47f ae8e 	bne.w	8004ce0 <HAL_GPIO_Init+0x14>
  }
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	372c      	adds	r7, #44	@ 0x2c
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr
 8004fd0:	40010400 	.word	0x40010400

08004fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	807b      	strh	r3, [r7, #2]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fe4:	787b      	ldrb	r3, [r7, #1]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fea:	887a      	ldrh	r2, [r7, #2]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004ff0:	e003      	b.n	8004ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ff2:	887b      	ldrh	r3, [r7, #2]
 8004ff4:	041a      	lsls	r2, r3, #16
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	611a      	str	r2, [r3, #16]
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr

08005004 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005016:	887a      	ldrh	r2, [r7, #2]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4013      	ands	r3, r2
 800501c:	041a      	lsls	r2, r3, #16
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	43d9      	mvns	r1, r3
 8005022:	887b      	ldrh	r3, [r7, #2]
 8005024:	400b      	ands	r3, r1
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	611a      	str	r2, [r3, #16]
}
 800502c:	bf00      	nop
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	bc80      	pop	{r7}
 8005034:	4770      	bx	lr
	...

08005038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	4603      	mov	r3, r0
 8005040:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005042:	4b08      	ldr	r3, [pc, #32]	@ (8005064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005044:	695a      	ldr	r2, [r3, #20]
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	4013      	ands	r3, r2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d006      	beq.n	800505c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800504e:	4a05      	ldr	r2, [pc, #20]	@ (8005064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005050:	88fb      	ldrh	r3, [r7, #6]
 8005052:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005054:	88fb      	ldrh	r3, [r7, #6]
 8005056:	4618      	mov	r0, r3
 8005058:	f7fc fb0c 	bl	8001674 <HAL_GPIO_EXTI_Callback>
  }
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40010400 	.word	0x40010400

08005068 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e272      	b.n	8005560 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 8087 	beq.w	8005196 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005088:	4b92      	ldr	r3, [pc, #584]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f003 030c 	and.w	r3, r3, #12
 8005090:	2b04      	cmp	r3, #4
 8005092:	d00c      	beq.n	80050ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005094:	4b8f      	ldr	r3, [pc, #572]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f003 030c 	and.w	r3, r3, #12
 800509c:	2b08      	cmp	r3, #8
 800509e:	d112      	bne.n	80050c6 <HAL_RCC_OscConfig+0x5e>
 80050a0:	4b8c      	ldr	r3, [pc, #560]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050ac:	d10b      	bne.n	80050c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ae:	4b89      	ldr	r3, [pc, #548]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d06c      	beq.n	8005194 <HAL_RCC_OscConfig+0x12c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d168      	bne.n	8005194 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e24c      	b.n	8005560 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050ce:	d106      	bne.n	80050de <HAL_RCC_OscConfig+0x76>
 80050d0:	4b80      	ldr	r3, [pc, #512]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a7f      	ldr	r2, [pc, #508]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 80050d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	e02e      	b.n	800513c <HAL_RCC_OscConfig+0xd4>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10c      	bne.n	8005100 <HAL_RCC_OscConfig+0x98>
 80050e6:	4b7b      	ldr	r3, [pc, #492]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a7a      	ldr	r2, [pc, #488]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 80050ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	4b78      	ldr	r3, [pc, #480]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a77      	ldr	r2, [pc, #476]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 80050f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	e01d      	b.n	800513c <HAL_RCC_OscConfig+0xd4>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005108:	d10c      	bne.n	8005124 <HAL_RCC_OscConfig+0xbc>
 800510a:	4b72      	ldr	r3, [pc, #456]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a71      	ldr	r2, [pc, #452]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 8005110:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	4b6f      	ldr	r3, [pc, #444]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a6e      	ldr	r2, [pc, #440]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 800511c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	e00b      	b.n	800513c <HAL_RCC_OscConfig+0xd4>
 8005124:	4b6b      	ldr	r3, [pc, #428]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a6a      	ldr	r2, [pc, #424]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 800512a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	4b68      	ldr	r3, [pc, #416]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a67      	ldr	r2, [pc, #412]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 8005136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800513a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d013      	beq.n	800516c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005144:	f7fe ff7c 	bl	8004040 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800514c:	f7fe ff78 	bl	8004040 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b64      	cmp	r3, #100	@ 0x64
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e200      	b.n	8005560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800515e:	4b5d      	ldr	r3, [pc, #372]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f0      	beq.n	800514c <HAL_RCC_OscConfig+0xe4>
 800516a:	e014      	b.n	8005196 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516c:	f7fe ff68 	bl	8004040 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005174:	f7fe ff64 	bl	8004040 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b64      	cmp	r3, #100	@ 0x64
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e1ec      	b.n	8005560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005186:	4b53      	ldr	r3, [pc, #332]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1f0      	bne.n	8005174 <HAL_RCC_OscConfig+0x10c>
 8005192:	e000      	b.n	8005196 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d063      	beq.n	800526a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051a2:	4b4c      	ldr	r3, [pc, #304]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f003 030c 	and.w	r3, r3, #12
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00b      	beq.n	80051c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80051ae:	4b49      	ldr	r3, [pc, #292]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f003 030c 	and.w	r3, r3, #12
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d11c      	bne.n	80051f4 <HAL_RCC_OscConfig+0x18c>
 80051ba:	4b46      	ldr	r3, [pc, #280]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d116      	bne.n	80051f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051c6:	4b43      	ldr	r3, [pc, #268]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d005      	beq.n	80051de <HAL_RCC_OscConfig+0x176>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d001      	beq.n	80051de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e1c0      	b.n	8005560 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051de:	4b3d      	ldr	r3, [pc, #244]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	4939      	ldr	r1, [pc, #228]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051f2:	e03a      	b.n	800526a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d020      	beq.n	800523e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051fc:	4b36      	ldr	r3, [pc, #216]	@ (80052d8 <HAL_RCC_OscConfig+0x270>)
 80051fe:	2201      	movs	r2, #1
 8005200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005202:	f7fe ff1d 	bl	8004040 <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005208:	e008      	b.n	800521c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800520a:	f7fe ff19 	bl	8004040 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e1a1      	b.n	8005560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800521c:	4b2d      	ldr	r3, [pc, #180]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0f0      	beq.n	800520a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005228:	4b2a      	ldr	r3, [pc, #168]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	4927      	ldr	r1, [pc, #156]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 8005238:	4313      	orrs	r3, r2
 800523a:	600b      	str	r3, [r1, #0]
 800523c:	e015      	b.n	800526a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800523e:	4b26      	ldr	r3, [pc, #152]	@ (80052d8 <HAL_RCC_OscConfig+0x270>)
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005244:	f7fe fefc 	bl	8004040 <HAL_GetTick>
 8005248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800524c:	f7fe fef8 	bl	8004040 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e180      	b.n	8005560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800525e:	4b1d      	ldr	r3, [pc, #116]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f0      	bne.n	800524c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b00      	cmp	r3, #0
 8005274:	d03a      	beq.n	80052ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d019      	beq.n	80052b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800527e:	4b17      	ldr	r3, [pc, #92]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 8005280:	2201      	movs	r2, #1
 8005282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005284:	f7fe fedc 	bl	8004040 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800528c:	f7fe fed8 	bl	8004040 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e160      	b.n	8005560 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800529e:	4b0d      	ldr	r3, [pc, #52]	@ (80052d4 <HAL_RCC_OscConfig+0x26c>)
 80052a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f0      	beq.n	800528c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80052aa:	2001      	movs	r0, #1
 80052ac:	f000 face 	bl	800584c <RCC_Delay>
 80052b0:	e01c      	b.n	80052ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052b2:	4b0a      	ldr	r3, [pc, #40]	@ (80052dc <HAL_RCC_OscConfig+0x274>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052b8:	f7fe fec2 	bl	8004040 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052be:	e00f      	b.n	80052e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052c0:	f7fe febe 	bl	8004040 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d908      	bls.n	80052e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e146      	b.n	8005560 <HAL_RCC_OscConfig+0x4f8>
 80052d2:	bf00      	nop
 80052d4:	40021000 	.word	0x40021000
 80052d8:	42420000 	.word	0x42420000
 80052dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052e0:	4b92      	ldr	r3, [pc, #584]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 80052e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e9      	bne.n	80052c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 80a6 	beq.w	8005446 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052fa:	2300      	movs	r3, #0
 80052fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052fe:	4b8b      	ldr	r3, [pc, #556]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10d      	bne.n	8005326 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800530a:	4b88      	ldr	r3, [pc, #544]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	4a87      	ldr	r2, [pc, #540]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 8005310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005314:	61d3      	str	r3, [r2, #28]
 8005316:	4b85      	ldr	r3, [pc, #532]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800531e:	60bb      	str	r3, [r7, #8]
 8005320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005322:	2301      	movs	r3, #1
 8005324:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005326:	4b82      	ldr	r3, [pc, #520]	@ (8005530 <HAL_RCC_OscConfig+0x4c8>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800532e:	2b00      	cmp	r3, #0
 8005330:	d118      	bne.n	8005364 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005332:	4b7f      	ldr	r3, [pc, #508]	@ (8005530 <HAL_RCC_OscConfig+0x4c8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a7e      	ldr	r2, [pc, #504]	@ (8005530 <HAL_RCC_OscConfig+0x4c8>)
 8005338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800533c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800533e:	f7fe fe7f 	bl	8004040 <HAL_GetTick>
 8005342:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005344:	e008      	b.n	8005358 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005346:	f7fe fe7b 	bl	8004040 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b64      	cmp	r3, #100	@ 0x64
 8005352:	d901      	bls.n	8005358 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e103      	b.n	8005560 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005358:	4b75      	ldr	r3, [pc, #468]	@ (8005530 <HAL_RCC_OscConfig+0x4c8>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0f0      	beq.n	8005346 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d106      	bne.n	800537a <HAL_RCC_OscConfig+0x312>
 800536c:	4b6f      	ldr	r3, [pc, #444]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	4a6e      	ldr	r2, [pc, #440]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 8005372:	f043 0301 	orr.w	r3, r3, #1
 8005376:	6213      	str	r3, [r2, #32]
 8005378:	e02d      	b.n	80053d6 <HAL_RCC_OscConfig+0x36e>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10c      	bne.n	800539c <HAL_RCC_OscConfig+0x334>
 8005382:	4b6a      	ldr	r3, [pc, #424]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	4a69      	ldr	r2, [pc, #420]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 8005388:	f023 0301 	bic.w	r3, r3, #1
 800538c:	6213      	str	r3, [r2, #32]
 800538e:	4b67      	ldr	r3, [pc, #412]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	4a66      	ldr	r2, [pc, #408]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 8005394:	f023 0304 	bic.w	r3, r3, #4
 8005398:	6213      	str	r3, [r2, #32]
 800539a:	e01c      	b.n	80053d6 <HAL_RCC_OscConfig+0x36e>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	2b05      	cmp	r3, #5
 80053a2:	d10c      	bne.n	80053be <HAL_RCC_OscConfig+0x356>
 80053a4:	4b61      	ldr	r3, [pc, #388]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	4a60      	ldr	r2, [pc, #384]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 80053aa:	f043 0304 	orr.w	r3, r3, #4
 80053ae:	6213      	str	r3, [r2, #32]
 80053b0:	4b5e      	ldr	r3, [pc, #376]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	4a5d      	ldr	r2, [pc, #372]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 80053b6:	f043 0301 	orr.w	r3, r3, #1
 80053ba:	6213      	str	r3, [r2, #32]
 80053bc:	e00b      	b.n	80053d6 <HAL_RCC_OscConfig+0x36e>
 80053be:	4b5b      	ldr	r3, [pc, #364]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	4a5a      	ldr	r2, [pc, #360]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 80053c4:	f023 0301 	bic.w	r3, r3, #1
 80053c8:	6213      	str	r3, [r2, #32]
 80053ca:	4b58      	ldr	r3, [pc, #352]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	4a57      	ldr	r2, [pc, #348]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 80053d0:	f023 0304 	bic.w	r3, r3, #4
 80053d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d015      	beq.n	800540a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053de:	f7fe fe2f 	bl	8004040 <HAL_GetTick>
 80053e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e4:	e00a      	b.n	80053fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e6:	f7fe fe2b 	bl	8004040 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e0b1      	b.n	8005560 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053fc:	4b4b      	ldr	r3, [pc, #300]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0ee      	beq.n	80053e6 <HAL_RCC_OscConfig+0x37e>
 8005408:	e014      	b.n	8005434 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800540a:	f7fe fe19 	bl	8004040 <HAL_GetTick>
 800540e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005410:	e00a      	b.n	8005428 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005412:	f7fe fe15 	bl	8004040 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005420:	4293      	cmp	r3, r2
 8005422:	d901      	bls.n	8005428 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e09b      	b.n	8005560 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005428:	4b40      	ldr	r3, [pc, #256]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1ee      	bne.n	8005412 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005434:	7dfb      	ldrb	r3, [r7, #23]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d105      	bne.n	8005446 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800543a:	4b3c      	ldr	r3, [pc, #240]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	4a3b      	ldr	r2, [pc, #236]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 8005440:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005444:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 8087 	beq.w	800555e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005450:	4b36      	ldr	r3, [pc, #216]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f003 030c 	and.w	r3, r3, #12
 8005458:	2b08      	cmp	r3, #8
 800545a:	d061      	beq.n	8005520 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	2b02      	cmp	r3, #2
 8005462:	d146      	bne.n	80054f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005464:	4b33      	ldr	r3, [pc, #204]	@ (8005534 <HAL_RCC_OscConfig+0x4cc>)
 8005466:	2200      	movs	r2, #0
 8005468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800546a:	f7fe fde9 	bl	8004040 <HAL_GetTick>
 800546e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005470:	e008      	b.n	8005484 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005472:	f7fe fde5 	bl	8004040 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d901      	bls.n	8005484 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e06d      	b.n	8005560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005484:	4b29      	ldr	r3, [pc, #164]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1f0      	bne.n	8005472 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005498:	d108      	bne.n	80054ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800549a:	4b24      	ldr	r3, [pc, #144]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	4921      	ldr	r1, [pc, #132]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054ac:	4b1f      	ldr	r3, [pc, #124]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a19      	ldr	r1, [r3, #32]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054bc:	430b      	orrs	r3, r1
 80054be:	491b      	ldr	r1, [pc, #108]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005534 <HAL_RCC_OscConfig+0x4cc>)
 80054c6:	2201      	movs	r2, #1
 80054c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ca:	f7fe fdb9 	bl	8004040 <HAL_GetTick>
 80054ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054d0:	e008      	b.n	80054e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d2:	f7fe fdb5 	bl	8004040 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e03d      	b.n	8005560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054e4:	4b11      	ldr	r3, [pc, #68]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0f0      	beq.n	80054d2 <HAL_RCC_OscConfig+0x46a>
 80054f0:	e035      	b.n	800555e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f2:	4b10      	ldr	r3, [pc, #64]	@ (8005534 <HAL_RCC_OscConfig+0x4cc>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f8:	f7fe fda2 	bl	8004040 <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005500:	f7fe fd9e 	bl	8004040 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e026      	b.n	8005560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005512:	4b06      	ldr	r3, [pc, #24]	@ (800552c <HAL_RCC_OscConfig+0x4c4>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f0      	bne.n	8005500 <HAL_RCC_OscConfig+0x498>
 800551e:	e01e      	b.n	800555e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d107      	bne.n	8005538 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e019      	b.n	8005560 <HAL_RCC_OscConfig+0x4f8>
 800552c:	40021000 	.word	0x40021000
 8005530:	40007000 	.word	0x40007000
 8005534:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005538:	4b0b      	ldr	r3, [pc, #44]	@ (8005568 <HAL_RCC_OscConfig+0x500>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	429a      	cmp	r2, r3
 800554a:	d106      	bne.n	800555a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005556:	429a      	cmp	r2, r3
 8005558:	d001      	beq.n	800555e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40021000 	.word	0x40021000

0800556c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e0d0      	b.n	8005722 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005580:	4b6a      	ldr	r3, [pc, #424]	@ (800572c <HAL_RCC_ClockConfig+0x1c0>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d910      	bls.n	80055b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558e:	4b67      	ldr	r3, [pc, #412]	@ (800572c <HAL_RCC_ClockConfig+0x1c0>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f023 0207 	bic.w	r2, r3, #7
 8005596:	4965      	ldr	r1, [pc, #404]	@ (800572c <HAL_RCC_ClockConfig+0x1c0>)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	4313      	orrs	r3, r2
 800559c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800559e:	4b63      	ldr	r3, [pc, #396]	@ (800572c <HAL_RCC_ClockConfig+0x1c0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d001      	beq.n	80055b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e0b8      	b.n	8005722 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d020      	beq.n	80055fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055c8:	4b59      	ldr	r3, [pc, #356]	@ (8005730 <HAL_RCC_ClockConfig+0x1c4>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	4a58      	ldr	r2, [pc, #352]	@ (8005730 <HAL_RCC_ClockConfig+0x1c4>)
 80055ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80055d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0308 	and.w	r3, r3, #8
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d005      	beq.n	80055ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055e0:	4b53      	ldr	r3, [pc, #332]	@ (8005730 <HAL_RCC_ClockConfig+0x1c4>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	4a52      	ldr	r2, [pc, #328]	@ (8005730 <HAL_RCC_ClockConfig+0x1c4>)
 80055e6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80055ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055ec:	4b50      	ldr	r3, [pc, #320]	@ (8005730 <HAL_RCC_ClockConfig+0x1c4>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	494d      	ldr	r1, [pc, #308]	@ (8005730 <HAL_RCC_ClockConfig+0x1c4>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d040      	beq.n	800568c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d107      	bne.n	8005622 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005612:	4b47      	ldr	r3, [pc, #284]	@ (8005730 <HAL_RCC_ClockConfig+0x1c4>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d115      	bne.n	800564a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e07f      	b.n	8005722 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d107      	bne.n	800563a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800562a:	4b41      	ldr	r3, [pc, #260]	@ (8005730 <HAL_RCC_ClockConfig+0x1c4>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d109      	bne.n	800564a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e073      	b.n	8005722 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800563a:	4b3d      	ldr	r3, [pc, #244]	@ (8005730 <HAL_RCC_ClockConfig+0x1c4>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e06b      	b.n	8005722 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800564a:	4b39      	ldr	r3, [pc, #228]	@ (8005730 <HAL_RCC_ClockConfig+0x1c4>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f023 0203 	bic.w	r2, r3, #3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	4936      	ldr	r1, [pc, #216]	@ (8005730 <HAL_RCC_ClockConfig+0x1c4>)
 8005658:	4313      	orrs	r3, r2
 800565a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800565c:	f7fe fcf0 	bl	8004040 <HAL_GetTick>
 8005660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005662:	e00a      	b.n	800567a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005664:	f7fe fcec 	bl	8004040 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005672:	4293      	cmp	r3, r2
 8005674:	d901      	bls.n	800567a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e053      	b.n	8005722 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800567a:	4b2d      	ldr	r3, [pc, #180]	@ (8005730 <HAL_RCC_ClockConfig+0x1c4>)
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f003 020c 	and.w	r2, r3, #12
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	429a      	cmp	r2, r3
 800568a:	d1eb      	bne.n	8005664 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800568c:	4b27      	ldr	r3, [pc, #156]	@ (800572c <HAL_RCC_ClockConfig+0x1c0>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d210      	bcs.n	80056bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800569a:	4b24      	ldr	r3, [pc, #144]	@ (800572c <HAL_RCC_ClockConfig+0x1c0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f023 0207 	bic.w	r2, r3, #7
 80056a2:	4922      	ldr	r1, [pc, #136]	@ (800572c <HAL_RCC_ClockConfig+0x1c0>)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056aa:	4b20      	ldr	r3, [pc, #128]	@ (800572c <HAL_RCC_ClockConfig+0x1c0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d001      	beq.n	80056bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e032      	b.n	8005722 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d008      	beq.n	80056da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056c8:	4b19      	ldr	r3, [pc, #100]	@ (8005730 <HAL_RCC_ClockConfig+0x1c4>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	4916      	ldr	r1, [pc, #88]	@ (8005730 <HAL_RCC_ClockConfig+0x1c4>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0308 	and.w	r3, r3, #8
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d009      	beq.n	80056fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056e6:	4b12      	ldr	r3, [pc, #72]	@ (8005730 <HAL_RCC_ClockConfig+0x1c4>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	490e      	ldr	r1, [pc, #56]	@ (8005730 <HAL_RCC_ClockConfig+0x1c4>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056fa:	f000 f821 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 80056fe:	4602      	mov	r2, r0
 8005700:	4b0b      	ldr	r3, [pc, #44]	@ (8005730 <HAL_RCC_ClockConfig+0x1c4>)
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	091b      	lsrs	r3, r3, #4
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	490a      	ldr	r1, [pc, #40]	@ (8005734 <HAL_RCC_ClockConfig+0x1c8>)
 800570c:	5ccb      	ldrb	r3, [r1, r3]
 800570e:	fa22 f303 	lsr.w	r3, r2, r3
 8005712:	4a09      	ldr	r2, [pc, #36]	@ (8005738 <HAL_RCC_ClockConfig+0x1cc>)
 8005714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005716:	4b09      	ldr	r3, [pc, #36]	@ (800573c <HAL_RCC_ClockConfig+0x1d0>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f7fe fc4e 	bl	8003fbc <HAL_InitTick>

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	40022000 	.word	0x40022000
 8005730:	40021000 	.word	0x40021000
 8005734:	08007a80 	.word	0x08007a80
 8005738:	2000009c 	.word	0x2000009c
 800573c:	200000a0 	.word	0x200000a0

08005740 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	2300      	movs	r3, #0
 800574c:	60bb      	str	r3, [r7, #8]
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	2300      	movs	r3, #0
 8005754:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800575a:	4b1e      	ldr	r3, [pc, #120]	@ (80057d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f003 030c 	and.w	r3, r3, #12
 8005766:	2b04      	cmp	r3, #4
 8005768:	d002      	beq.n	8005770 <HAL_RCC_GetSysClockFreq+0x30>
 800576a:	2b08      	cmp	r3, #8
 800576c:	d003      	beq.n	8005776 <HAL_RCC_GetSysClockFreq+0x36>
 800576e:	e027      	b.n	80057c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005770:	4b19      	ldr	r3, [pc, #100]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005772:	613b      	str	r3, [r7, #16]
      break;
 8005774:	e027      	b.n	80057c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	0c9b      	lsrs	r3, r3, #18
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	4a17      	ldr	r2, [pc, #92]	@ (80057dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8005780:	5cd3      	ldrb	r3, [r2, r3]
 8005782:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d010      	beq.n	80057b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800578e:	4b11      	ldr	r3, [pc, #68]	@ (80057d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	0c5b      	lsrs	r3, r3, #17
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	4a11      	ldr	r2, [pc, #68]	@ (80057e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800579a:	5cd3      	ldrb	r3, [r2, r3]
 800579c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a0d      	ldr	r2, [pc, #52]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80057a2:	fb03 f202 	mul.w	r2, r3, r2
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ac:	617b      	str	r3, [r7, #20]
 80057ae:	e004      	b.n	80057ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a0c      	ldr	r2, [pc, #48]	@ (80057e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80057b4:	fb02 f303 	mul.w	r3, r2, r3
 80057b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	613b      	str	r3, [r7, #16]
      break;
 80057be:	e002      	b.n	80057c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057c0:	4b05      	ldr	r3, [pc, #20]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80057c2:	613b      	str	r3, [r7, #16]
      break;
 80057c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057c6:	693b      	ldr	r3, [r7, #16]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	371c      	adds	r7, #28
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	40021000 	.word	0x40021000
 80057d8:	007a1200 	.word	0x007a1200
 80057dc:	08007a98 	.word	0x08007a98
 80057e0:	08007aa8 	.word	0x08007aa8
 80057e4:	003d0900 	.word	0x003d0900

080057e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057ec:	4b02      	ldr	r3, [pc, #8]	@ (80057f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80057ee:	681b      	ldr	r3, [r3, #0]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bc80      	pop	{r7}
 80057f6:	4770      	bx	lr
 80057f8:	2000009c 	.word	0x2000009c

080057fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005800:	f7ff fff2 	bl	80057e8 <HAL_RCC_GetHCLKFreq>
 8005804:	4602      	mov	r2, r0
 8005806:	4b05      	ldr	r3, [pc, #20]	@ (800581c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	0a1b      	lsrs	r3, r3, #8
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	4903      	ldr	r1, [pc, #12]	@ (8005820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005812:	5ccb      	ldrb	r3, [r1, r3]
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005818:	4618      	mov	r0, r3
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40021000 	.word	0x40021000
 8005820:	08007a90 	.word	0x08007a90

08005824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005828:	f7ff ffde 	bl	80057e8 <HAL_RCC_GetHCLKFreq>
 800582c:	4602      	mov	r2, r0
 800582e:	4b05      	ldr	r3, [pc, #20]	@ (8005844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	0adb      	lsrs	r3, r3, #11
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	4903      	ldr	r1, [pc, #12]	@ (8005848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800583a:	5ccb      	ldrb	r3, [r1, r3]
 800583c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005840:	4618      	mov	r0, r3
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40021000 	.word	0x40021000
 8005848:	08007a90 	.word	0x08007a90

0800584c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005854:	4b0a      	ldr	r3, [pc, #40]	@ (8005880 <RCC_Delay+0x34>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a0a      	ldr	r2, [pc, #40]	@ (8005884 <RCC_Delay+0x38>)
 800585a:	fba2 2303 	umull	r2, r3, r2, r3
 800585e:	0a5b      	lsrs	r3, r3, #9
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	fb02 f303 	mul.w	r3, r2, r3
 8005866:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005868:	bf00      	nop
  }
  while (Delay --);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	1e5a      	subs	r2, r3, #1
 800586e:	60fa      	str	r2, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1f9      	bne.n	8005868 <RCC_Delay+0x1c>
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	bc80      	pop	{r7}
 800587e:	4770      	bx	lr
 8005880:	2000009c 	.word	0x2000009c
 8005884:	10624dd3 	.word	0x10624dd3

08005888 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	613b      	str	r3, [r7, #16]
 8005894:	2300      	movs	r3, #0
 8005896:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d07d      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80058a4:	2300      	movs	r3, #0
 80058a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058a8:	4b4f      	ldr	r3, [pc, #316]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10d      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058b4:	4b4c      	ldr	r3, [pc, #304]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	4a4b      	ldr	r2, [pc, #300]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058be:	61d3      	str	r3, [r2, #28]
 80058c0:	4b49      	ldr	r3, [pc, #292]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058c8:	60bb      	str	r3, [r7, #8]
 80058ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058cc:	2301      	movs	r3, #1
 80058ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d0:	4b46      	ldr	r3, [pc, #280]	@ (80059ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d118      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058dc:	4b43      	ldr	r3, [pc, #268]	@ (80059ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a42      	ldr	r2, [pc, #264]	@ (80059ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058e8:	f7fe fbaa 	bl	8004040 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ee:	e008      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f0:	f7fe fba6 	bl	8004040 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b64      	cmp	r3, #100	@ 0x64
 80058fc:	d901      	bls.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e06d      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005902:	4b3a      	ldr	r3, [pc, #232]	@ (80059ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0f0      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800590e:	4b36      	ldr	r3, [pc, #216]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005916:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d02e      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	429a      	cmp	r2, r3
 800592a:	d027      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800592c:	4b2e      	ldr	r3, [pc, #184]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005934:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005936:	4b2e      	ldr	r3, [pc, #184]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005938:	2201      	movs	r2, #1
 800593a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800593c:	4b2c      	ldr	r3, [pc, #176]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005942:	4a29      	ldr	r2, [pc, #164]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d014      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005952:	f7fe fb75 	bl	8004040 <HAL_GetTick>
 8005956:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005958:	e00a      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595a:	f7fe fb71 	bl	8004040 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005968:	4293      	cmp	r3, r2
 800596a:	d901      	bls.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e036      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005970:	4b1d      	ldr	r3, [pc, #116]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0ee      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800597c:	4b1a      	ldr	r3, [pc, #104]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	4917      	ldr	r1, [pc, #92]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800598a:	4313      	orrs	r3, r2
 800598c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d105      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005994:	4b14      	ldr	r3, [pc, #80]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	4a13      	ldr	r2, [pc, #76]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800599a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800599e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d008      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059ac:	4b0e      	ldr	r3, [pc, #56]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	490b      	ldr	r1, [pc, #44]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0310 	and.w	r3, r3, #16
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d008      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059ca:	4b07      	ldr	r3, [pc, #28]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	4904      	ldr	r1, [pc, #16]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	40021000 	.word	0x40021000
 80059ec:	40007000 	.word	0x40007000
 80059f0:	42420440 	.word	0x42420440

080059f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	2300      	movs	r3, #0
 8005a02:	61fb      	str	r3, [r7, #28]
 8005a04:	2300      	movs	r3, #0
 8005a06:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b10      	cmp	r3, #16
 8005a14:	d00a      	beq.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b10      	cmp	r3, #16
 8005a1a:	f200 808a 	bhi.w	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d045      	beq.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d075      	beq.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005a2a:	e082      	b.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005a2c:	4b46      	ldr	r3, [pc, #280]	@ (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005a32:	4b45      	ldr	r3, [pc, #276]	@ (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d07b      	beq.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	0c9b      	lsrs	r3, r3, #18
 8005a42:	f003 030f 	and.w	r3, r3, #15
 8005a46:	4a41      	ldr	r2, [pc, #260]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005a48:	5cd3      	ldrb	r3, [r2, r3]
 8005a4a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d015      	beq.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a56:	4b3c      	ldr	r3, [pc, #240]	@ (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	0c5b      	lsrs	r3, r3, #17
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	4a3b      	ldr	r2, [pc, #236]	@ (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005a62:	5cd3      	ldrb	r3, [r2, r3]
 8005a64:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00d      	beq.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005a70:	4a38      	ldr	r2, [pc, #224]	@ (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	fb02 f303 	mul.w	r3, r2, r3
 8005a7e:	61fb      	str	r3, [r7, #28]
 8005a80:	e004      	b.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	4a34      	ldr	r2, [pc, #208]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005a86:	fb02 f303 	mul.w	r3, r2, r3
 8005a8a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a98:	d102      	bne.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	61bb      	str	r3, [r7, #24]
      break;
 8005a9e:	e04a      	b.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aaa:	085b      	lsrs	r3, r3, #1
 8005aac:	61bb      	str	r3, [r7, #24]
      break;
 8005aae:	e042      	b.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005ab0:	4b25      	ldr	r3, [pc, #148]	@ (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ac0:	d108      	bne.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005acc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ad0:	61bb      	str	r3, [r7, #24]
 8005ad2:	e01f      	b.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ada:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ade:	d109      	bne.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005ae0:	4b19      	ldr	r3, [pc, #100]	@ (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005aec:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005af0:	61bb      	str	r3, [r7, #24]
 8005af2:	e00f      	b.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005afa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005afe:	d11c      	bne.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005b00:	4b11      	ldr	r3, [pc, #68]	@ (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d016      	beq.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005b0c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005b10:	61bb      	str	r3, [r7, #24]
      break;
 8005b12:	e012      	b.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005b14:	e011      	b.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005b16:	f7ff fe85 	bl	8005824 <HAL_RCC_GetPCLK2Freq>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	0b9b      	lsrs	r3, r3, #14
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	3301      	adds	r3, #1
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2e:	61bb      	str	r3, [r7, #24]
      break;
 8005b30:	e004      	b.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005b32:	bf00      	nop
 8005b34:	e002      	b.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005b36:	bf00      	nop
 8005b38:	e000      	b.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005b3a:	bf00      	nop
    }
  }
  return (frequency);
 8005b3c:	69bb      	ldr	r3, [r7, #24]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3720      	adds	r7, #32
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	40021000 	.word	0x40021000
 8005b4c:	08007aac 	.word	0x08007aac
 8005b50:	08007abc 	.word	0x08007abc
 8005b54:	007a1200 	.word	0x007a1200
 8005b58:	003d0900 	.word	0x003d0900
 8005b5c:	aaaaaaab 	.word	0xaaaaaaab

08005b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e041      	b.n	8005bf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d106      	bne.n	8005b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fe f828 	bl	8003bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	4610      	mov	r0, r2
 8005ba0:	f000 fd16 	bl	80065d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e041      	b.n	8005c94 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d106      	bne.n	8005c2a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f839 	bl	8005c9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	f000 fcc7 	bl	80065d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bc80      	pop	{r7}
 8005cac:	4770      	bx	lr
	...

08005cb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d109      	bne.n	8005cd4 <HAL_TIM_PWM_Start+0x24>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	bf14      	ite	ne
 8005ccc:	2301      	movne	r3, #1
 8005cce:	2300      	moveq	r3, #0
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	e022      	b.n	8005d1a <HAL_TIM_PWM_Start+0x6a>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d109      	bne.n	8005cee <HAL_TIM_PWM_Start+0x3e>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	bf14      	ite	ne
 8005ce6:	2301      	movne	r3, #1
 8005ce8:	2300      	moveq	r3, #0
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	e015      	b.n	8005d1a <HAL_TIM_PWM_Start+0x6a>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d109      	bne.n	8005d08 <HAL_TIM_PWM_Start+0x58>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	bf14      	ite	ne
 8005d00:	2301      	movne	r3, #1
 8005d02:	2300      	moveq	r3, #0
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	e008      	b.n	8005d1a <HAL_TIM_PWM_Start+0x6a>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	bf14      	ite	ne
 8005d14:	2301      	movne	r3, #1
 8005d16:	2300      	moveq	r3, #0
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e05e      	b.n	8005de0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d104      	bne.n	8005d32 <HAL_TIM_PWM_Start+0x82>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d30:	e013      	b.n	8005d5a <HAL_TIM_PWM_Start+0xaa>
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b04      	cmp	r3, #4
 8005d36:	d104      	bne.n	8005d42 <HAL_TIM_PWM_Start+0x92>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d40:	e00b      	b.n	8005d5a <HAL_TIM_PWM_Start+0xaa>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d104      	bne.n	8005d52 <HAL_TIM_PWM_Start+0xa2>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d50:	e003      	b.n	8005d5a <HAL_TIM_PWM_Start+0xaa>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2202      	movs	r2, #2
 8005d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fec0 	bl	8006ae8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8005de8 <HAL_TIM_PWM_Start+0x138>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d107      	bne.n	8005d82 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d80:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a18      	ldr	r2, [pc, #96]	@ (8005de8 <HAL_TIM_PWM_Start+0x138>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00e      	beq.n	8005daa <HAL_TIM_PWM_Start+0xfa>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d94:	d009      	beq.n	8005daa <HAL_TIM_PWM_Start+0xfa>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a14      	ldr	r2, [pc, #80]	@ (8005dec <HAL_TIM_PWM_Start+0x13c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d004      	beq.n	8005daa <HAL_TIM_PWM_Start+0xfa>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a12      	ldr	r2, [pc, #72]	@ (8005df0 <HAL_TIM_PWM_Start+0x140>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d111      	bne.n	8005dce <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2b06      	cmp	r3, #6
 8005dba:	d010      	beq.n	8005dde <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0201 	orr.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dcc:	e007      	b.n	8005dde <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f042 0201 	orr.w	r2, r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40012c00 	.word	0x40012c00
 8005dec:	40000400 	.word	0x40000400
 8005df0:	40000800 	.word	0x40000800

08005df4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e093      	b.n	8005f30 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d106      	bne.n	8005e22 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7fd fef9 	bl	8003c14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2202      	movs	r2, #2
 8005e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6812      	ldr	r2, [r2, #0]
 8005e34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e38:	f023 0307 	bic.w	r3, r3, #7
 8005e3c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	3304      	adds	r3, #4
 8005e46:	4619      	mov	r1, r3
 8005e48:	4610      	mov	r0, r2
 8005e4a:	f000 fbc1 	bl	80065d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e76:	f023 0303 	bic.w	r3, r3, #3
 8005e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	021b      	lsls	r3, r3, #8
 8005e86:	4313      	orrs	r3, r2
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005e94:	f023 030c 	bic.w	r3, r3, #12
 8005e98:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ea0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ea4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	021b      	lsls	r3, r3, #8
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	011a      	lsls	r2, r3, #4
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	031b      	lsls	r3, r3, #12
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005ed2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f48:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f50:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f58:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f60:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d110      	bne.n	8005f8a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d102      	bne.n	8005f74 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f6e:	7b7b      	ldrb	r3, [r7, #13]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d001      	beq.n	8005f78 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e089      	b.n	800608c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f88:	e031      	b.n	8005fee <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	d110      	bne.n	8005fb2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f90:	7bbb      	ldrb	r3, [r7, #14]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d102      	bne.n	8005f9c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f96:	7b3b      	ldrb	r3, [r7, #12]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d001      	beq.n	8005fa0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e075      	b.n	800608c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fb0:	e01d      	b.n	8005fee <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d108      	bne.n	8005fca <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fb8:	7bbb      	ldrb	r3, [r7, #14]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d105      	bne.n	8005fca <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fbe:	7b7b      	ldrb	r3, [r7, #13]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d102      	bne.n	8005fca <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fc4:	7b3b      	ldrb	r3, [r7, #12]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d001      	beq.n	8005fce <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e05e      	b.n	800608c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_TIM_Encoder_Start_IT+0xc4>
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d010      	beq.n	800601c <HAL_TIM_Encoder_Start_IT+0xe4>
 8005ffa:	e01f      	b.n	800603c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2201      	movs	r2, #1
 8006002:	2100      	movs	r1, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fd6f 	bl	8006ae8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68da      	ldr	r2, [r3, #12]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f042 0202 	orr.w	r2, r2, #2
 8006018:	60da      	str	r2, [r3, #12]
      break;
 800601a:	e02e      	b.n	800607a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2201      	movs	r2, #1
 8006022:	2104      	movs	r1, #4
 8006024:	4618      	mov	r0, r3
 8006026:	f000 fd5f 	bl	8006ae8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68da      	ldr	r2, [r3, #12]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f042 0204 	orr.w	r2, r2, #4
 8006038:	60da      	str	r2, [r3, #12]
      break;
 800603a:	e01e      	b.n	800607a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2201      	movs	r2, #1
 8006042:	2100      	movs	r1, #0
 8006044:	4618      	mov	r0, r3
 8006046:	f000 fd4f 	bl	8006ae8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2201      	movs	r2, #1
 8006050:	2104      	movs	r1, #4
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fd48 	bl	8006ae8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f042 0202 	orr.w	r2, r2, #2
 8006066:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0204 	orr.w	r2, r2, #4
 8006076:	60da      	str	r2, [r3, #12]
      break;
 8006078:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f042 0201 	orr.w	r2, r2, #1
 8006088:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d020      	beq.n	80060f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01b      	beq.n	80060f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f06f 0202 	mvn.w	r2, #2
 80060c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7fb fbda 	bl	8001898 <HAL_TIM_IC_CaptureCallback>
 80060e4:	e005      	b.n	80060f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fa56 	bl	8006598 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fa5c 	bl	80065aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d020      	beq.n	8006144 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d01b      	beq.n	8006144 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f06f 0204 	mvn.w	r2, #4
 8006114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2202      	movs	r2, #2
 800611a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7fb fbb4 	bl	8001898 <HAL_TIM_IC_CaptureCallback>
 8006130:	e005      	b.n	800613e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fa30 	bl	8006598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fa36 	bl	80065aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f003 0308 	and.w	r3, r3, #8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d020      	beq.n	8006190 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f003 0308 	and.w	r3, r3, #8
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01b      	beq.n	8006190 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0208 	mvn.w	r2, #8
 8006160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2204      	movs	r2, #4
 8006166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7fb fb8e 	bl	8001898 <HAL_TIM_IC_CaptureCallback>
 800617c:	e005      	b.n	800618a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fa0a 	bl	8006598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fa10 	bl	80065aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f003 0310 	and.w	r3, r3, #16
 8006196:	2b00      	cmp	r3, #0
 8006198:	d020      	beq.n	80061dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f003 0310 	and.w	r3, r3, #16
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d01b      	beq.n	80061dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f06f 0210 	mvn.w	r2, #16
 80061ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2208      	movs	r2, #8
 80061b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7fb fb68 	bl	8001898 <HAL_TIM_IC_CaptureCallback>
 80061c8:	e005      	b.n	80061d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f9e4 	bl	8006598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f9ea 	bl	80065aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00c      	beq.n	8006200 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d007      	beq.n	8006200 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f06f 0201 	mvn.w	r2, #1
 80061f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f9c3 	bl	8006586 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00c      	beq.n	8006224 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006210:	2b00      	cmp	r3, #0
 8006212:	d007      	beq.n	8006224 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800621c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fced 	bl	8006bfe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00c      	beq.n	8006248 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	d007      	beq.n	8006248 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f9ba 	bl	80065bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f003 0320 	and.w	r3, r3, #32
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00c      	beq.n	800626c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f003 0320 	and.w	r3, r3, #32
 8006258:	2b00      	cmp	r3, #0
 800625a:	d007      	beq.n	800626c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0220 	mvn.w	r2, #32
 8006264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fcc0 	bl	8006bec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800626c:	bf00      	nop
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800628a:	2b01      	cmp	r3, #1
 800628c:	d101      	bne.n	8006292 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800628e:	2302      	movs	r3, #2
 8006290:	e0ae      	b.n	80063f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b0c      	cmp	r3, #12
 800629e:	f200 809f 	bhi.w	80063e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80062a2:	a201      	add	r2, pc, #4	@ (adr r2, 80062a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a8:	080062dd 	.word	0x080062dd
 80062ac:	080063e1 	.word	0x080063e1
 80062b0:	080063e1 	.word	0x080063e1
 80062b4:	080063e1 	.word	0x080063e1
 80062b8:	0800631d 	.word	0x0800631d
 80062bc:	080063e1 	.word	0x080063e1
 80062c0:	080063e1 	.word	0x080063e1
 80062c4:	080063e1 	.word	0x080063e1
 80062c8:	0800635f 	.word	0x0800635f
 80062cc:	080063e1 	.word	0x080063e1
 80062d0:	080063e1 	.word	0x080063e1
 80062d4:	080063e1 	.word	0x080063e1
 80062d8:	0800639f 	.word	0x0800639f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 f9e2 	bl	80066ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699a      	ldr	r2, [r3, #24]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0208 	orr.w	r2, r2, #8
 80062f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699a      	ldr	r2, [r3, #24]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0204 	bic.w	r2, r2, #4
 8006306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6999      	ldr	r1, [r3, #24]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	691a      	ldr	r2, [r3, #16]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	619a      	str	r2, [r3, #24]
      break;
 800631a:	e064      	b.n	80063e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fa28 	bl	8006778 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699a      	ldr	r2, [r3, #24]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699a      	ldr	r2, [r3, #24]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6999      	ldr	r1, [r3, #24]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	021a      	lsls	r2, r3, #8
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	619a      	str	r2, [r3, #24]
      break;
 800635c:	e043      	b.n	80063e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68b9      	ldr	r1, [r7, #8]
 8006364:	4618      	mov	r0, r3
 8006366:	f000 fa71 	bl	800684c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69da      	ldr	r2, [r3, #28]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f042 0208 	orr.w	r2, r2, #8
 8006378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	69da      	ldr	r2, [r3, #28]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 0204 	bic.w	r2, r2, #4
 8006388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69d9      	ldr	r1, [r3, #28]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	691a      	ldr	r2, [r3, #16]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	61da      	str	r2, [r3, #28]
      break;
 800639c:	e023      	b.n	80063e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68b9      	ldr	r1, [r7, #8]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 fabb 	bl	8006920 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69da      	ldr	r2, [r3, #28]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	69d9      	ldr	r1, [r3, #28]
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	021a      	lsls	r2, r3, #8
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	61da      	str	r2, [r3, #28]
      break;
 80063de:	e002      	b.n	80063e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	75fb      	strb	r3, [r7, #23]
      break;
 80063e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800640c:	2b01      	cmp	r3, #1
 800640e:	d101      	bne.n	8006414 <HAL_TIM_ConfigClockSource+0x1c>
 8006410:	2302      	movs	r3, #2
 8006412:	e0b4      	b.n	800657e <HAL_TIM_ConfigClockSource+0x186>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006432:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800643a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800644c:	d03e      	beq.n	80064cc <HAL_TIM_ConfigClockSource+0xd4>
 800644e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006452:	f200 8087 	bhi.w	8006564 <HAL_TIM_ConfigClockSource+0x16c>
 8006456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800645a:	f000 8086 	beq.w	800656a <HAL_TIM_ConfigClockSource+0x172>
 800645e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006462:	d87f      	bhi.n	8006564 <HAL_TIM_ConfigClockSource+0x16c>
 8006464:	2b70      	cmp	r3, #112	@ 0x70
 8006466:	d01a      	beq.n	800649e <HAL_TIM_ConfigClockSource+0xa6>
 8006468:	2b70      	cmp	r3, #112	@ 0x70
 800646a:	d87b      	bhi.n	8006564 <HAL_TIM_ConfigClockSource+0x16c>
 800646c:	2b60      	cmp	r3, #96	@ 0x60
 800646e:	d050      	beq.n	8006512 <HAL_TIM_ConfigClockSource+0x11a>
 8006470:	2b60      	cmp	r3, #96	@ 0x60
 8006472:	d877      	bhi.n	8006564 <HAL_TIM_ConfigClockSource+0x16c>
 8006474:	2b50      	cmp	r3, #80	@ 0x50
 8006476:	d03c      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0xfa>
 8006478:	2b50      	cmp	r3, #80	@ 0x50
 800647a:	d873      	bhi.n	8006564 <HAL_TIM_ConfigClockSource+0x16c>
 800647c:	2b40      	cmp	r3, #64	@ 0x40
 800647e:	d058      	beq.n	8006532 <HAL_TIM_ConfigClockSource+0x13a>
 8006480:	2b40      	cmp	r3, #64	@ 0x40
 8006482:	d86f      	bhi.n	8006564 <HAL_TIM_ConfigClockSource+0x16c>
 8006484:	2b30      	cmp	r3, #48	@ 0x30
 8006486:	d064      	beq.n	8006552 <HAL_TIM_ConfigClockSource+0x15a>
 8006488:	2b30      	cmp	r3, #48	@ 0x30
 800648a:	d86b      	bhi.n	8006564 <HAL_TIM_ConfigClockSource+0x16c>
 800648c:	2b20      	cmp	r3, #32
 800648e:	d060      	beq.n	8006552 <HAL_TIM_ConfigClockSource+0x15a>
 8006490:	2b20      	cmp	r3, #32
 8006492:	d867      	bhi.n	8006564 <HAL_TIM_ConfigClockSource+0x16c>
 8006494:	2b00      	cmp	r3, #0
 8006496:	d05c      	beq.n	8006552 <HAL_TIM_ConfigClockSource+0x15a>
 8006498:	2b10      	cmp	r3, #16
 800649a:	d05a      	beq.n	8006552 <HAL_TIM_ConfigClockSource+0x15a>
 800649c:	e062      	b.n	8006564 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064ae:	f000 fafc 	bl	8006aaa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80064c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	609a      	str	r2, [r3, #8]
      break;
 80064ca:	e04f      	b.n	800656c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064dc:	f000 fae5 	bl	8006aaa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064ee:	609a      	str	r2, [r3, #8]
      break;
 80064f0:	e03c      	b.n	800656c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064fe:	461a      	mov	r2, r3
 8006500:	f000 fa5c 	bl	80069bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2150      	movs	r1, #80	@ 0x50
 800650a:	4618      	mov	r0, r3
 800650c:	f000 fab3 	bl	8006a76 <TIM_ITRx_SetConfig>
      break;
 8006510:	e02c      	b.n	800656c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800651e:	461a      	mov	r2, r3
 8006520:	f000 fa7a 	bl	8006a18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2160      	movs	r1, #96	@ 0x60
 800652a:	4618      	mov	r0, r3
 800652c:	f000 faa3 	bl	8006a76 <TIM_ITRx_SetConfig>
      break;
 8006530:	e01c      	b.n	800656c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800653e:	461a      	mov	r2, r3
 8006540:	f000 fa3c 	bl	80069bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2140      	movs	r1, #64	@ 0x40
 800654a:	4618      	mov	r0, r3
 800654c:	f000 fa93 	bl	8006a76 <TIM_ITRx_SetConfig>
      break;
 8006550:	e00c      	b.n	800656c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4619      	mov	r1, r3
 800655c:	4610      	mov	r0, r2
 800655e:	f000 fa8a 	bl	8006a76 <TIM_ITRx_SetConfig>
      break;
 8006562:	e003      	b.n	800656c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	73fb      	strb	r3, [r7, #15]
      break;
 8006568:	e000      	b.n	800656c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800656a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800657c:	7bfb      	ldrb	r3, [r7, #15]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800658e:	bf00      	nop
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	bc80      	pop	{r7}
 8006596:	4770      	bx	lr

08006598 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr

080065aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065b2:	bf00      	nop
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bc80      	pop	{r7}
 80065ba:	4770      	bx	lr

080065bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bc80      	pop	{r7}
 80065cc:	4770      	bx	lr
	...

080065d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a2f      	ldr	r2, [pc, #188]	@ (80066a0 <TIM_Base_SetConfig+0xd0>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00b      	beq.n	8006600 <TIM_Base_SetConfig+0x30>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ee:	d007      	beq.n	8006600 <TIM_Base_SetConfig+0x30>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a2c      	ldr	r2, [pc, #176]	@ (80066a4 <TIM_Base_SetConfig+0xd4>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d003      	beq.n	8006600 <TIM_Base_SetConfig+0x30>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a2b      	ldr	r2, [pc, #172]	@ (80066a8 <TIM_Base_SetConfig+0xd8>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d108      	bne.n	8006612 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a22      	ldr	r2, [pc, #136]	@ (80066a0 <TIM_Base_SetConfig+0xd0>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d00b      	beq.n	8006632 <TIM_Base_SetConfig+0x62>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006620:	d007      	beq.n	8006632 <TIM_Base_SetConfig+0x62>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a1f      	ldr	r2, [pc, #124]	@ (80066a4 <TIM_Base_SetConfig+0xd4>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d003      	beq.n	8006632 <TIM_Base_SetConfig+0x62>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a1e      	ldr	r2, [pc, #120]	@ (80066a8 <TIM_Base_SetConfig+0xd8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d108      	bne.n	8006644 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	4313      	orrs	r3, r2
 8006642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	4313      	orrs	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a0d      	ldr	r2, [pc, #52]	@ (80066a0 <TIM_Base_SetConfig+0xd0>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d103      	bne.n	8006678 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	691a      	ldr	r2, [r3, #16]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d005      	beq.n	8006696 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f023 0201 	bic.w	r2, r3, #1
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	611a      	str	r2, [r3, #16]
  }
}
 8006696:	bf00      	nop
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	bc80      	pop	{r7}
 800669e:	4770      	bx	lr
 80066a0:	40012c00 	.word	0x40012c00
 80066a4:	40000400 	.word	0x40000400
 80066a8:	40000800 	.word	0x40000800

080066ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	f023 0201 	bic.w	r2, r3, #1
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f023 0303 	bic.w	r3, r3, #3
 80066e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f023 0302 	bic.w	r3, r3, #2
 80066f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a1c      	ldr	r2, [pc, #112]	@ (8006774 <TIM_OC1_SetConfig+0xc8>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d10c      	bne.n	8006722 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f023 0308 	bic.w	r3, r3, #8
 800670e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	4313      	orrs	r3, r2
 8006718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f023 0304 	bic.w	r3, r3, #4
 8006720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a13      	ldr	r2, [pc, #76]	@ (8006774 <TIM_OC1_SetConfig+0xc8>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d111      	bne.n	800674e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4313      	orrs	r3, r2
 8006742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	4313      	orrs	r3, r2
 800674c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	621a      	str	r2, [r3, #32]
}
 8006768:	bf00      	nop
 800676a:	371c      	adds	r7, #28
 800676c:	46bd      	mov	sp, r7
 800676e:	bc80      	pop	{r7}
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	40012c00 	.word	0x40012c00

08006778 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	f023 0210 	bic.w	r2, r3, #16
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	021b      	lsls	r3, r3, #8
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f023 0320 	bic.w	r3, r3, #32
 80067c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a1d      	ldr	r2, [pc, #116]	@ (8006848 <TIM_OC2_SetConfig+0xd0>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d10d      	bne.n	80067f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	011b      	lsls	r3, r3, #4
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a14      	ldr	r2, [pc, #80]	@ (8006848 <TIM_OC2_SetConfig+0xd0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d113      	bne.n	8006824 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006802:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800680a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	4313      	orrs	r3, r2
 8006822:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	621a      	str	r2, [r3, #32]
}
 800683e:	bf00      	nop
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	bc80      	pop	{r7}
 8006846:	4770      	bx	lr
 8006848:	40012c00 	.word	0x40012c00

0800684c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800687a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f023 0303 	bic.w	r3, r3, #3
 8006882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	4313      	orrs	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006894:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	021b      	lsls	r3, r3, #8
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	4313      	orrs	r3, r2
 80068a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a1d      	ldr	r2, [pc, #116]	@ (800691c <TIM_OC3_SetConfig+0xd0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d10d      	bne.n	80068c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	021b      	lsls	r3, r3, #8
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a14      	ldr	r2, [pc, #80]	@ (800691c <TIM_OC3_SetConfig+0xd0>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d113      	bne.n	80068f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	011b      	lsls	r3, r3, #4
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	011b      	lsls	r3, r3, #4
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	621a      	str	r2, [r3, #32]
}
 8006910:	bf00      	nop
 8006912:	371c      	adds	r7, #28
 8006914:	46bd      	mov	sp, r7
 8006916:	bc80      	pop	{r7}
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	40012c00 	.word	0x40012c00

08006920 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800694e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	021b      	lsls	r3, r3, #8
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	4313      	orrs	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800696a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	031b      	lsls	r3, r3, #12
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	4313      	orrs	r3, r2
 8006976:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a0f      	ldr	r2, [pc, #60]	@ (80069b8 <TIM_OC4_SetConfig+0x98>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d109      	bne.n	8006994 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006986:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	019b      	lsls	r3, r3, #6
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	4313      	orrs	r3, r2
 8006992:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	621a      	str	r2, [r3, #32]
}
 80069ae:	bf00      	nop
 80069b0:	371c      	adds	r7, #28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bc80      	pop	{r7}
 80069b6:	4770      	bx	lr
 80069b8:	40012c00 	.word	0x40012c00

080069bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	f023 0201 	bic.w	r2, r3, #1
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f023 030a 	bic.w	r3, r3, #10
 80069f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	621a      	str	r2, [r3, #32]
}
 8006a0e:	bf00      	nop
 8006a10:	371c      	adds	r7, #28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bc80      	pop	{r7}
 8006a16:	4770      	bx	lr

08006a18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f023 0210 	bic.w	r2, r3, #16
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	031b      	lsls	r3, r3, #12
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	011b      	lsls	r3, r3, #4
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	621a      	str	r2, [r3, #32]
}
 8006a6c:	bf00      	nop
 8006a6e:	371c      	adds	r7, #28
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr

08006a76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b085      	sub	sp, #20
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	f043 0307 	orr.w	r3, r3, #7
 8006a98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	609a      	str	r2, [r3, #8]
}
 8006aa0:	bf00      	nop
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bc80      	pop	{r7}
 8006aa8:	4770      	bx	lr

08006aaa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b087      	sub	sp, #28
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	60f8      	str	r0, [r7, #12]
 8006ab2:	60b9      	str	r1, [r7, #8]
 8006ab4:	607a      	str	r2, [r7, #4]
 8006ab6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ac4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	021a      	lsls	r2, r3, #8
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	431a      	orrs	r2, r3
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	609a      	str	r2, [r3, #8]
}
 8006ade:	bf00      	nop
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bc80      	pop	{r7}
 8006ae6:	4770      	bx	lr

08006ae8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f003 031f 	and.w	r3, r3, #31
 8006afa:	2201      	movs	r2, #1
 8006afc:	fa02 f303 	lsl.w	r3, r2, r3
 8006b00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6a1a      	ldr	r2, [r3, #32]
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	43db      	mvns	r3, r3
 8006b0a:	401a      	ands	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6a1a      	ldr	r2, [r3, #32]
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f003 031f 	and.w	r3, r3, #31
 8006b1a:	6879      	ldr	r1, [r7, #4]
 8006b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b20:	431a      	orrs	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	621a      	str	r2, [r3, #32]
}
 8006b26:	bf00      	nop
 8006b28:	371c      	adds	r7, #28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bc80      	pop	{r7}
 8006b2e:	4770      	bx	lr

08006b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d101      	bne.n	8006b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b44:	2302      	movs	r3, #2
 8006b46:	e046      	b.n	8006bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a16      	ldr	r2, [pc, #88]	@ (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d00e      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b94:	d009      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a12      	ldr	r2, [pc, #72]	@ (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d004      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a10      	ldr	r2, [pc, #64]	@ (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d10c      	bne.n	8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bc80      	pop	{r7}
 8006bde:	4770      	bx	lr
 8006be0:	40012c00 	.word	0x40012c00
 8006be4:	40000400 	.word	0x40000400
 8006be8:	40000800 	.word	0x40000800

08006bec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bc80      	pop	{r7}
 8006bfc:	4770      	bx	lr

08006bfe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bc80      	pop	{r7}
 8006c0e:	4770      	bx	lr

08006c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e042      	b.n	8006ca8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d106      	bne.n	8006c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7fd f898 	bl	8003d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2224      	movs	r2, #36	@ 0x24
 8006c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68da      	ldr	r2, [r3, #12]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fd09 	bl	800766c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	691a      	ldr	r2, [r3, #16]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	695a      	ldr	r2, [r3, #20]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68da      	ldr	r2, [r3, #12]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2220      	movs	r2, #32
 8006c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b20      	cmp	r3, #32
 8006cc8:	d121      	bne.n	8006d0e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d002      	beq.n	8006cd6 <HAL_UART_Transmit_IT+0x26>
 8006cd0:	88fb      	ldrh	r3, [r7, #6]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e01a      	b.n	8006d10 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	88fa      	ldrh	r2, [r7, #6]
 8006ce4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	88fa      	ldrh	r2, [r7, #6]
 8006cea:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2221      	movs	r2, #33	@ 0x21
 8006cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68da      	ldr	r2, [r3, #12]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006d08:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	e000      	b.n	8006d10 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8006d0e:	2302      	movs	r3, #2
  }
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bc80      	pop	{r7}
 8006d18:	4770      	bx	lr

08006d1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	60f8      	str	r0, [r7, #12]
 8006d22:	60b9      	str	r1, [r7, #8]
 8006d24:	4613      	mov	r3, r2
 8006d26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b20      	cmp	r3, #32
 8006d32:	d112      	bne.n	8006d5a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <HAL_UART_Receive_IT+0x26>
 8006d3a:	88fb      	ldrh	r3, [r7, #6]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e00b      	b.n	8006d5c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d4a:	88fb      	ldrh	r3, [r7, #6]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	68b9      	ldr	r1, [r7, #8]
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 fab6 	bl	80072c2 <UART_Start_Receive_IT>
 8006d56:	4603      	mov	r3, r0
 8006d58:	e000      	b.n	8006d5c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006d5a:	2302      	movs	r3, #2
  }
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b0ba      	sub	sp, #232	@ 0xe8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006d90:	2300      	movs	r3, #0
 8006d92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d9a:	f003 030f 	and.w	r3, r3, #15
 8006d9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006da2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10f      	bne.n	8006dca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dae:	f003 0320 	and.w	r3, r3, #32
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d009      	beq.n	8006dca <HAL_UART_IRQHandler+0x66>
 8006db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fb93 	bl	80074ee <UART_Receive_IT>
      return;
 8006dc8:	e25b      	b.n	8007282 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006dca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 80de 	beq.w	8006f90 <HAL_UART_IRQHandler+0x22c>
 8006dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d106      	bne.n	8006dee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006de4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 80d1 	beq.w	8006f90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00b      	beq.n	8006e12 <HAL_UART_IRQHandler+0xae>
 8006dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d005      	beq.n	8006e12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e0a:	f043 0201 	orr.w	r2, r3, #1
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e16:	f003 0304 	and.w	r3, r3, #4
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00b      	beq.n	8006e36 <HAL_UART_IRQHandler+0xd2>
 8006e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d005      	beq.n	8006e36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e2e:	f043 0202 	orr.w	r2, r3, #2
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00b      	beq.n	8006e5a <HAL_UART_IRQHandler+0xf6>
 8006e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e52:	f043 0204 	orr.w	r2, r3, #4
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e5e:	f003 0308 	and.w	r3, r3, #8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d011      	beq.n	8006e8a <HAL_UART_IRQHandler+0x126>
 8006e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e6a:	f003 0320 	and.w	r3, r3, #32
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d105      	bne.n	8006e7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d005      	beq.n	8006e8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e82:	f043 0208 	orr.w	r2, r3, #8
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 81f2 	beq.w	8007278 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d008      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x14e>
 8006ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ea4:	f003 0320 	and.w	r3, r3, #32
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fb1e 	bl	80074ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	bf14      	ite	ne
 8006ec0:	2301      	movne	r3, #1
 8006ec2:	2300      	moveq	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ece:	f003 0308 	and.w	r3, r3, #8
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d103      	bne.n	8006ede <HAL_UART_IRQHandler+0x17a>
 8006ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d04f      	beq.n	8006f7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fa28 	bl	8007334 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d041      	beq.n	8006f76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3314      	adds	r3, #20
 8006ef8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3314      	adds	r3, #20
 8006f1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006f1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006f22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006f2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006f2e:	e841 2300 	strex	r3, r2, [r1]
 8006f32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006f36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1d9      	bne.n	8006ef2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d013      	beq.n	8006f6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f4a:	4a7e      	ldr	r2, [pc, #504]	@ (8007144 <HAL_UART_IRQHandler+0x3e0>)
 8006f4c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fd fe42 	bl	8004bdc <HAL_DMA_Abort_IT>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d016      	beq.n	8006f8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006f68:	4610      	mov	r0, r2
 8006f6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f6c:	e00e      	b.n	8006f8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f993 	bl	800729a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f74:	e00a      	b.n	8006f8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f98f 	bl	800729a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f7c:	e006      	b.n	8006f8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f98b 	bl	800729a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006f8a:	e175      	b.n	8007278 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f8c:	bf00      	nop
    return;
 8006f8e:	e173      	b.n	8007278 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	f040 814f 	bne.w	8007238 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f9e:	f003 0310 	and.w	r3, r3, #16
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 8148 	beq.w	8007238 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fac:	f003 0310 	and.w	r3, r3, #16
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 8141 	beq.w	8007238 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60bb      	str	r3, [r7, #8]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	60bb      	str	r3, [r7, #8]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	60bb      	str	r3, [r7, #8]
 8006fca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 80b6 	beq.w	8007148 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006fe8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 8145 	beq.w	800727c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	f080 813e 	bcs.w	800727c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007006:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	2b20      	cmp	r3, #32
 8007010:	f000 8088 	beq.w	8007124 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	330c      	adds	r3, #12
 800701a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007022:	e853 3f00 	ldrex	r3, [r3]
 8007026:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800702a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800702e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007032:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	330c      	adds	r3, #12
 800703c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007040:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007044:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007048:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800704c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007050:	e841 2300 	strex	r3, r2, [r1]
 8007054:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007058:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1d9      	bne.n	8007014 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3314      	adds	r3, #20
 8007066:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007070:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007072:	f023 0301 	bic.w	r3, r3, #1
 8007076:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	3314      	adds	r3, #20
 8007080:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007084:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007088:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800708c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007090:	e841 2300 	strex	r3, r2, [r1]
 8007094:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007096:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1e1      	bne.n	8007060 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3314      	adds	r3, #20
 80070a2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070a6:	e853 3f00 	ldrex	r3, [r3]
 80070aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80070ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3314      	adds	r3, #20
 80070bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80070c0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80070c2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80070c6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80070ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e3      	bne.n	800709c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2220      	movs	r2, #32
 80070d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	330c      	adds	r3, #12
 80070e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80070f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070f4:	f023 0310 	bic.w	r3, r3, #16
 80070f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	330c      	adds	r3, #12
 8007102:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007106:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007108:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800710c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800710e:	e841 2300 	strex	r3, r2, [r1]
 8007112:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007114:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1e3      	bne.n	80070e2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800711e:	4618      	mov	r0, r3
 8007120:	f7fd fd21 	bl	8004b66 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007132:	b29b      	uxth	r3, r3
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	b29b      	uxth	r3, r3
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f8b6 	bl	80072ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007140:	e09c      	b.n	800727c <HAL_UART_IRQHandler+0x518>
 8007142:	bf00      	nop
 8007144:	080073f9 	.word	0x080073f9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007150:	b29b      	uxth	r3, r3
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800715c:	b29b      	uxth	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 808e 	beq.w	8007280 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007164:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 8089 	beq.w	8007280 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	330c      	adds	r3, #12
 8007174:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800717e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007180:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007184:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	330c      	adds	r3, #12
 800718e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007192:	647a      	str	r2, [r7, #68]	@ 0x44
 8007194:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007196:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007198:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800719a:	e841 2300 	strex	r3, r2, [r1]
 800719e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1e3      	bne.n	800716e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3314      	adds	r3, #20
 80071ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	623b      	str	r3, [r7, #32]
   return(result);
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	f023 0301 	bic.w	r3, r3, #1
 80071bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	3314      	adds	r3, #20
 80071c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80071ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80071cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1e3      	bne.n	80071a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	330c      	adds	r3, #12
 80071f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	e853 3f00 	ldrex	r3, [r3]
 80071fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f023 0310 	bic.w	r3, r3, #16
 8007202:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	330c      	adds	r3, #12
 800720c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007210:	61fa      	str	r2, [r7, #28]
 8007212:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007214:	69b9      	ldr	r1, [r7, #24]
 8007216:	69fa      	ldr	r2, [r7, #28]
 8007218:	e841 2300 	strex	r3, r2, [r1]
 800721c:	617b      	str	r3, [r7, #20]
   return(result);
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1e3      	bne.n	80071ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800722a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f83b 	bl	80072ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007236:	e023      	b.n	8007280 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800723c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007240:	2b00      	cmp	r3, #0
 8007242:	d009      	beq.n	8007258 <HAL_UART_IRQHandler+0x4f4>
 8007244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007248:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800724c:	2b00      	cmp	r3, #0
 800724e:	d003      	beq.n	8007258 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f8e5 	bl	8007420 <UART_Transmit_IT>
    return;
 8007256:	e014      	b.n	8007282 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800725c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00e      	beq.n	8007282 <HAL_UART_IRQHandler+0x51e>
 8007264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800726c:	2b00      	cmp	r3, #0
 800726e:	d008      	beq.n	8007282 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f924 	bl	80074be <UART_EndTransmit_IT>
    return;
 8007276:	e004      	b.n	8007282 <HAL_UART_IRQHandler+0x51e>
    return;
 8007278:	bf00      	nop
 800727a:	e002      	b.n	8007282 <HAL_UART_IRQHandler+0x51e>
      return;
 800727c:	bf00      	nop
 800727e:	e000      	b.n	8007282 <HAL_UART_IRQHandler+0x51e>
      return;
 8007280:	bf00      	nop
  }
}
 8007282:	37e8      	adds	r7, #232	@ 0xe8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	bc80      	pop	{r7}
 8007298:	4770      	bx	lr

0800729a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80072a2:	bf00      	nop
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bc80      	pop	{r7}
 80072aa:	4770      	bx	lr

080072ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	bc80      	pop	{r7}
 80072c0:	4770      	bx	lr

080072c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b085      	sub	sp, #20
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	60f8      	str	r0, [r7, #12]
 80072ca:	60b9      	str	r1, [r7, #8]
 80072cc:	4613      	mov	r3, r2
 80072ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	88fa      	ldrh	r2, [r7, #6]
 80072da:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	88fa      	ldrh	r2, [r7, #6]
 80072e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2222      	movs	r2, #34	@ 0x22
 80072ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d007      	beq.n	8007308 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68da      	ldr	r2, [r3, #12]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007306:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	695a      	ldr	r2, [r3, #20]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f042 0201 	orr.w	r2, r2, #1
 8007316:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f042 0220 	orr.w	r2, r2, #32
 8007326:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	bc80      	pop	{r7}
 8007332:	4770      	bx	lr

08007334 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007334:	b480      	push	{r7}
 8007336:	b095      	sub	sp, #84	@ 0x54
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	330c      	adds	r3, #12
 8007342:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007346:	e853 3f00 	ldrex	r3, [r3]
 800734a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800734c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007352:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	330c      	adds	r3, #12
 800735a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800735c:	643a      	str	r2, [r7, #64]	@ 0x40
 800735e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007360:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007362:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007364:	e841 2300 	strex	r3, r2, [r1]
 8007368:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800736a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1e5      	bne.n	800733c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3314      	adds	r3, #20
 8007376:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	e853 3f00 	ldrex	r3, [r3]
 800737e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	f023 0301 	bic.w	r3, r3, #1
 8007386:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3314      	adds	r3, #20
 800738e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007390:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007392:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007394:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007398:	e841 2300 	strex	r3, r2, [r1]
 800739c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1e5      	bne.n	8007370 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d119      	bne.n	80073e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	330c      	adds	r3, #12
 80073b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	e853 3f00 	ldrex	r3, [r3]
 80073ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	f023 0310 	bic.w	r3, r3, #16
 80073c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	330c      	adds	r3, #12
 80073ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073cc:	61ba      	str	r2, [r7, #24]
 80073ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	6979      	ldr	r1, [r7, #20]
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	e841 2300 	strex	r3, r2, [r1]
 80073d8:	613b      	str	r3, [r7, #16]
   return(result);
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1e5      	bne.n	80073ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2220      	movs	r2, #32
 80073e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80073ee:	bf00      	nop
 80073f0:	3754      	adds	r7, #84	@ 0x54
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bc80      	pop	{r7}
 80073f6:	4770      	bx	lr

080073f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007404:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f7ff ff41 	bl	800729a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007418:	bf00      	nop
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b21      	cmp	r3, #33	@ 0x21
 8007432:	d13e      	bne.n	80074b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800743c:	d114      	bne.n	8007468 <UART_Transmit_IT+0x48>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d110      	bne.n	8007468 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	881b      	ldrh	r3, [r3, #0]
 8007450:	461a      	mov	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800745a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	1c9a      	adds	r2, r3, #2
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	621a      	str	r2, [r3, #32]
 8007466:	e008      	b.n	800747a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a1b      	ldr	r3, [r3, #32]
 800746c:	1c59      	adds	r1, r3, #1
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	6211      	str	r1, [r2, #32]
 8007472:	781a      	ldrb	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800747e:	b29b      	uxth	r3, r3
 8007480:	3b01      	subs	r3, #1
 8007482:	b29b      	uxth	r3, r3
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	4619      	mov	r1, r3
 8007488:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10f      	bne.n	80074ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68da      	ldr	r2, [r3, #12]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800749c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68da      	ldr	r2, [r3, #12]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	e000      	b.n	80074b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80074b2:	2302      	movs	r3, #2
  }
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bc80      	pop	{r7}
 80074bc:	4770      	bx	lr

080074be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b082      	sub	sp, #8
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68da      	ldr	r2, [r3, #12]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2220      	movs	r2, #32
 80074da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7ff fed2 	bl	8007288 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b08c      	sub	sp, #48	@ 0x30
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b22      	cmp	r3, #34	@ 0x22
 8007500:	f040 80ae 	bne.w	8007660 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800750c:	d117      	bne.n	800753e <UART_Receive_IT+0x50>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d113      	bne.n	800753e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007516:	2300      	movs	r3, #0
 8007518:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	b29b      	uxth	r3, r3
 8007528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800752c:	b29a      	uxth	r2, r3
 800752e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007530:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007536:	1c9a      	adds	r2, r3, #2
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	629a      	str	r2, [r3, #40]	@ 0x28
 800753c:	e026      	b.n	800758c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007542:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007544:	2300      	movs	r3, #0
 8007546:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007550:	d007      	beq.n	8007562 <UART_Receive_IT+0x74>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10a      	bne.n	8007570 <UART_Receive_IT+0x82>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d106      	bne.n	8007570 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	b2da      	uxtb	r2, r3
 800756a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800756c:	701a      	strb	r2, [r3, #0]
 800756e:	e008      	b.n	8007582 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	b2db      	uxtb	r3, r3
 8007578:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800757c:	b2da      	uxtb	r2, r3
 800757e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007580:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007586:	1c5a      	adds	r2, r3, #1
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007590:	b29b      	uxth	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	b29b      	uxth	r3, r3
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	4619      	mov	r1, r3
 800759a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800759c:	2b00      	cmp	r3, #0
 800759e:	d15d      	bne.n	800765c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68da      	ldr	r2, [r3, #12]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 0220 	bic.w	r2, r2, #32
 80075ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80075be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	695a      	ldr	r2, [r3, #20]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 0201 	bic.w	r2, r2, #1
 80075ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2220      	movs	r2, #32
 80075d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d135      	bne.n	8007652 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	330c      	adds	r3, #12
 80075f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	e853 3f00 	ldrex	r3, [r3]
 80075fa:	613b      	str	r3, [r7, #16]
   return(result);
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	f023 0310 	bic.w	r3, r3, #16
 8007602:	627b      	str	r3, [r7, #36]	@ 0x24
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	330c      	adds	r3, #12
 800760a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800760c:	623a      	str	r2, [r7, #32]
 800760e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	69f9      	ldr	r1, [r7, #28]
 8007612:	6a3a      	ldr	r2, [r7, #32]
 8007614:	e841 2300 	strex	r3, r2, [r1]
 8007618:	61bb      	str	r3, [r7, #24]
   return(result);
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e5      	bne.n	80075ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0310 	and.w	r3, r3, #16
 800762a:	2b10      	cmp	r3, #16
 800762c:	d10a      	bne.n	8007644 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800762e:	2300      	movs	r3, #0
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	60fb      	str	r3, [r7, #12]
 8007642:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007648:	4619      	mov	r1, r3
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7ff fe2e 	bl	80072ac <HAL_UARTEx_RxEventCallback>
 8007650:	e002      	b.n	8007658 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7fa f82a 	bl	80016ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	e002      	b.n	8007662 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	e000      	b.n	8007662 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007660:	2302      	movs	r3, #2
  }
}
 8007662:	4618      	mov	r0, r3
 8007664:	3730      	adds	r7, #48	@ 0x30
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
	...

0800766c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68da      	ldr	r2, [r3, #12]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	430a      	orrs	r2, r1
 8007688:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	689a      	ldr	r2, [r3, #8]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	431a      	orrs	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	4313      	orrs	r3, r2
 800769a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80076a6:	f023 030c 	bic.w	r3, r3, #12
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6812      	ldr	r2, [r2, #0]
 80076ae:	68b9      	ldr	r1, [r7, #8]
 80076b0:	430b      	orrs	r3, r1
 80076b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	699a      	ldr	r2, [r3, #24]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	430a      	orrs	r2, r1
 80076c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a2c      	ldr	r2, [pc, #176]	@ (8007780 <UART_SetConfig+0x114>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d103      	bne.n	80076dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80076d4:	f7fe f8a6 	bl	8005824 <HAL_RCC_GetPCLK2Freq>
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	e002      	b.n	80076e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80076dc:	f7fe f88e 	bl	80057fc <HAL_RCC_GetPCLK1Freq>
 80076e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	4613      	mov	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	009a      	lsls	r2, r3, #2
 80076ec:	441a      	add	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f8:	4a22      	ldr	r2, [pc, #136]	@ (8007784 <UART_SetConfig+0x118>)
 80076fa:	fba2 2303 	umull	r2, r3, r2, r3
 80076fe:	095b      	lsrs	r3, r3, #5
 8007700:	0119      	lsls	r1, r3, #4
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	4613      	mov	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	009a      	lsls	r2, r3, #2
 800770c:	441a      	add	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	fbb2 f2f3 	udiv	r2, r2, r3
 8007718:	4b1a      	ldr	r3, [pc, #104]	@ (8007784 <UART_SetConfig+0x118>)
 800771a:	fba3 0302 	umull	r0, r3, r3, r2
 800771e:	095b      	lsrs	r3, r3, #5
 8007720:	2064      	movs	r0, #100	@ 0x64
 8007722:	fb00 f303 	mul.w	r3, r0, r3
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	011b      	lsls	r3, r3, #4
 800772a:	3332      	adds	r3, #50	@ 0x32
 800772c:	4a15      	ldr	r2, [pc, #84]	@ (8007784 <UART_SetConfig+0x118>)
 800772e:	fba2 2303 	umull	r2, r3, r2, r3
 8007732:	095b      	lsrs	r3, r3, #5
 8007734:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007738:	4419      	add	r1, r3
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	4613      	mov	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	009a      	lsls	r2, r3, #2
 8007744:	441a      	add	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007750:	4b0c      	ldr	r3, [pc, #48]	@ (8007784 <UART_SetConfig+0x118>)
 8007752:	fba3 0302 	umull	r0, r3, r3, r2
 8007756:	095b      	lsrs	r3, r3, #5
 8007758:	2064      	movs	r0, #100	@ 0x64
 800775a:	fb00 f303 	mul.w	r3, r0, r3
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	011b      	lsls	r3, r3, #4
 8007762:	3332      	adds	r3, #50	@ 0x32
 8007764:	4a07      	ldr	r2, [pc, #28]	@ (8007784 <UART_SetConfig+0x118>)
 8007766:	fba2 2303 	umull	r2, r3, r2, r3
 800776a:	095b      	lsrs	r3, r3, #5
 800776c:	f003 020f 	and.w	r2, r3, #15
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	440a      	add	r2, r1
 8007776:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007778:	bf00      	nop
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	40013800 	.word	0x40013800
 8007784:	51eb851f 	.word	0x51eb851f

08007788 <malloc>:
 8007788:	4b02      	ldr	r3, [pc, #8]	@ (8007794 <malloc+0xc>)
 800778a:	4601      	mov	r1, r0
 800778c:	6818      	ldr	r0, [r3, #0]
 800778e:	f000 b82d 	b.w	80077ec <_malloc_r>
 8007792:	bf00      	nop
 8007794:	200000a8 	.word	0x200000a8

08007798 <free>:
 8007798:	4b02      	ldr	r3, [pc, #8]	@ (80077a4 <free+0xc>)
 800779a:	4601      	mov	r1, r0
 800779c:	6818      	ldr	r0, [r3, #0]
 800779e:	f000 b903 	b.w	80079a8 <_free_r>
 80077a2:	bf00      	nop
 80077a4:	200000a8 	.word	0x200000a8

080077a8 <sbrk_aligned>:
 80077a8:	b570      	push	{r4, r5, r6, lr}
 80077aa:	4e0f      	ldr	r6, [pc, #60]	@ (80077e8 <sbrk_aligned+0x40>)
 80077ac:	460c      	mov	r4, r1
 80077ae:	6831      	ldr	r1, [r6, #0]
 80077b0:	4605      	mov	r5, r0
 80077b2:	b911      	cbnz	r1, 80077ba <sbrk_aligned+0x12>
 80077b4:	f000 f8ae 	bl	8007914 <_sbrk_r>
 80077b8:	6030      	str	r0, [r6, #0]
 80077ba:	4621      	mov	r1, r4
 80077bc:	4628      	mov	r0, r5
 80077be:	f000 f8a9 	bl	8007914 <_sbrk_r>
 80077c2:	1c43      	adds	r3, r0, #1
 80077c4:	d103      	bne.n	80077ce <sbrk_aligned+0x26>
 80077c6:	f04f 34ff 	mov.w	r4, #4294967295
 80077ca:	4620      	mov	r0, r4
 80077cc:	bd70      	pop	{r4, r5, r6, pc}
 80077ce:	1cc4      	adds	r4, r0, #3
 80077d0:	f024 0403 	bic.w	r4, r4, #3
 80077d4:	42a0      	cmp	r0, r4
 80077d6:	d0f8      	beq.n	80077ca <sbrk_aligned+0x22>
 80077d8:	1a21      	subs	r1, r4, r0
 80077da:	4628      	mov	r0, r5
 80077dc:	f000 f89a 	bl	8007914 <_sbrk_r>
 80077e0:	3001      	adds	r0, #1
 80077e2:	d1f2      	bne.n	80077ca <sbrk_aligned+0x22>
 80077e4:	e7ef      	b.n	80077c6 <sbrk_aligned+0x1e>
 80077e6:	bf00      	nop
 80077e8:	20000cb0 	.word	0x20000cb0

080077ec <_malloc_r>:
 80077ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077f0:	1ccd      	adds	r5, r1, #3
 80077f2:	f025 0503 	bic.w	r5, r5, #3
 80077f6:	3508      	adds	r5, #8
 80077f8:	2d0c      	cmp	r5, #12
 80077fa:	bf38      	it	cc
 80077fc:	250c      	movcc	r5, #12
 80077fe:	2d00      	cmp	r5, #0
 8007800:	4606      	mov	r6, r0
 8007802:	db01      	blt.n	8007808 <_malloc_r+0x1c>
 8007804:	42a9      	cmp	r1, r5
 8007806:	d904      	bls.n	8007812 <_malloc_r+0x26>
 8007808:	230c      	movs	r3, #12
 800780a:	6033      	str	r3, [r6, #0]
 800780c:	2000      	movs	r0, #0
 800780e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007812:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80078e8 <_malloc_r+0xfc>
 8007816:	f000 f869 	bl	80078ec <__malloc_lock>
 800781a:	f8d8 3000 	ldr.w	r3, [r8]
 800781e:	461c      	mov	r4, r3
 8007820:	bb44      	cbnz	r4, 8007874 <_malloc_r+0x88>
 8007822:	4629      	mov	r1, r5
 8007824:	4630      	mov	r0, r6
 8007826:	f7ff ffbf 	bl	80077a8 <sbrk_aligned>
 800782a:	1c43      	adds	r3, r0, #1
 800782c:	4604      	mov	r4, r0
 800782e:	d158      	bne.n	80078e2 <_malloc_r+0xf6>
 8007830:	f8d8 4000 	ldr.w	r4, [r8]
 8007834:	4627      	mov	r7, r4
 8007836:	2f00      	cmp	r7, #0
 8007838:	d143      	bne.n	80078c2 <_malloc_r+0xd6>
 800783a:	2c00      	cmp	r4, #0
 800783c:	d04b      	beq.n	80078d6 <_malloc_r+0xea>
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	4639      	mov	r1, r7
 8007842:	4630      	mov	r0, r6
 8007844:	eb04 0903 	add.w	r9, r4, r3
 8007848:	f000 f864 	bl	8007914 <_sbrk_r>
 800784c:	4581      	cmp	r9, r0
 800784e:	d142      	bne.n	80078d6 <_malloc_r+0xea>
 8007850:	6821      	ldr	r1, [r4, #0]
 8007852:	4630      	mov	r0, r6
 8007854:	1a6d      	subs	r5, r5, r1
 8007856:	4629      	mov	r1, r5
 8007858:	f7ff ffa6 	bl	80077a8 <sbrk_aligned>
 800785c:	3001      	adds	r0, #1
 800785e:	d03a      	beq.n	80078d6 <_malloc_r+0xea>
 8007860:	6823      	ldr	r3, [r4, #0]
 8007862:	442b      	add	r3, r5
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	f8d8 3000 	ldr.w	r3, [r8]
 800786a:	685a      	ldr	r2, [r3, #4]
 800786c:	bb62      	cbnz	r2, 80078c8 <_malloc_r+0xdc>
 800786e:	f8c8 7000 	str.w	r7, [r8]
 8007872:	e00f      	b.n	8007894 <_malloc_r+0xa8>
 8007874:	6822      	ldr	r2, [r4, #0]
 8007876:	1b52      	subs	r2, r2, r5
 8007878:	d420      	bmi.n	80078bc <_malloc_r+0xd0>
 800787a:	2a0b      	cmp	r2, #11
 800787c:	d917      	bls.n	80078ae <_malloc_r+0xc2>
 800787e:	1961      	adds	r1, r4, r5
 8007880:	42a3      	cmp	r3, r4
 8007882:	6025      	str	r5, [r4, #0]
 8007884:	bf18      	it	ne
 8007886:	6059      	strne	r1, [r3, #4]
 8007888:	6863      	ldr	r3, [r4, #4]
 800788a:	bf08      	it	eq
 800788c:	f8c8 1000 	streq.w	r1, [r8]
 8007890:	5162      	str	r2, [r4, r5]
 8007892:	604b      	str	r3, [r1, #4]
 8007894:	4630      	mov	r0, r6
 8007896:	f000 f82f 	bl	80078f8 <__malloc_unlock>
 800789a:	f104 000b 	add.w	r0, r4, #11
 800789e:	1d23      	adds	r3, r4, #4
 80078a0:	f020 0007 	bic.w	r0, r0, #7
 80078a4:	1ac2      	subs	r2, r0, r3
 80078a6:	bf1c      	itt	ne
 80078a8:	1a1b      	subne	r3, r3, r0
 80078aa:	50a3      	strne	r3, [r4, r2]
 80078ac:	e7af      	b.n	800780e <_malloc_r+0x22>
 80078ae:	6862      	ldr	r2, [r4, #4]
 80078b0:	42a3      	cmp	r3, r4
 80078b2:	bf0c      	ite	eq
 80078b4:	f8c8 2000 	streq.w	r2, [r8]
 80078b8:	605a      	strne	r2, [r3, #4]
 80078ba:	e7eb      	b.n	8007894 <_malloc_r+0xa8>
 80078bc:	4623      	mov	r3, r4
 80078be:	6864      	ldr	r4, [r4, #4]
 80078c0:	e7ae      	b.n	8007820 <_malloc_r+0x34>
 80078c2:	463c      	mov	r4, r7
 80078c4:	687f      	ldr	r7, [r7, #4]
 80078c6:	e7b6      	b.n	8007836 <_malloc_r+0x4a>
 80078c8:	461a      	mov	r2, r3
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	42a3      	cmp	r3, r4
 80078ce:	d1fb      	bne.n	80078c8 <_malloc_r+0xdc>
 80078d0:	2300      	movs	r3, #0
 80078d2:	6053      	str	r3, [r2, #4]
 80078d4:	e7de      	b.n	8007894 <_malloc_r+0xa8>
 80078d6:	230c      	movs	r3, #12
 80078d8:	4630      	mov	r0, r6
 80078da:	6033      	str	r3, [r6, #0]
 80078dc:	f000 f80c 	bl	80078f8 <__malloc_unlock>
 80078e0:	e794      	b.n	800780c <_malloc_r+0x20>
 80078e2:	6005      	str	r5, [r0, #0]
 80078e4:	e7d6      	b.n	8007894 <_malloc_r+0xa8>
 80078e6:	bf00      	nop
 80078e8:	20000cb4 	.word	0x20000cb4

080078ec <__malloc_lock>:
 80078ec:	4801      	ldr	r0, [pc, #4]	@ (80078f4 <__malloc_lock+0x8>)
 80078ee:	f000 b84b 	b.w	8007988 <__retarget_lock_acquire_recursive>
 80078f2:	bf00      	nop
 80078f4:	20000df4 	.word	0x20000df4

080078f8 <__malloc_unlock>:
 80078f8:	4801      	ldr	r0, [pc, #4]	@ (8007900 <__malloc_unlock+0x8>)
 80078fa:	f000 b846 	b.w	800798a <__retarget_lock_release_recursive>
 80078fe:	bf00      	nop
 8007900:	20000df4 	.word	0x20000df4

08007904 <memset>:
 8007904:	4603      	mov	r3, r0
 8007906:	4402      	add	r2, r0
 8007908:	4293      	cmp	r3, r2
 800790a:	d100      	bne.n	800790e <memset+0xa>
 800790c:	4770      	bx	lr
 800790e:	f803 1b01 	strb.w	r1, [r3], #1
 8007912:	e7f9      	b.n	8007908 <memset+0x4>

08007914 <_sbrk_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	2300      	movs	r3, #0
 8007918:	4d05      	ldr	r5, [pc, #20]	@ (8007930 <_sbrk_r+0x1c>)
 800791a:	4604      	mov	r4, r0
 800791c:	4608      	mov	r0, r1
 800791e:	602b      	str	r3, [r5, #0]
 8007920:	f7fc fad4 	bl	8003ecc <_sbrk>
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d102      	bne.n	800792e <_sbrk_r+0x1a>
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	b103      	cbz	r3, 800792e <_sbrk_r+0x1a>
 800792c:	6023      	str	r3, [r4, #0]
 800792e:	bd38      	pop	{r3, r4, r5, pc}
 8007930:	20000df0 	.word	0x20000df0

08007934 <__errno>:
 8007934:	4b01      	ldr	r3, [pc, #4]	@ (800793c <__errno+0x8>)
 8007936:	6818      	ldr	r0, [r3, #0]
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	200000a8 	.word	0x200000a8

08007940 <__libc_init_array>:
 8007940:	b570      	push	{r4, r5, r6, lr}
 8007942:	2600      	movs	r6, #0
 8007944:	4d0c      	ldr	r5, [pc, #48]	@ (8007978 <__libc_init_array+0x38>)
 8007946:	4c0d      	ldr	r4, [pc, #52]	@ (800797c <__libc_init_array+0x3c>)
 8007948:	1b64      	subs	r4, r4, r5
 800794a:	10a4      	asrs	r4, r4, #2
 800794c:	42a6      	cmp	r6, r4
 800794e:	d109      	bne.n	8007964 <__libc_init_array+0x24>
 8007950:	f000 f872 	bl	8007a38 <_init>
 8007954:	2600      	movs	r6, #0
 8007956:	4d0a      	ldr	r5, [pc, #40]	@ (8007980 <__libc_init_array+0x40>)
 8007958:	4c0a      	ldr	r4, [pc, #40]	@ (8007984 <__libc_init_array+0x44>)
 800795a:	1b64      	subs	r4, r4, r5
 800795c:	10a4      	asrs	r4, r4, #2
 800795e:	42a6      	cmp	r6, r4
 8007960:	d105      	bne.n	800796e <__libc_init_array+0x2e>
 8007962:	bd70      	pop	{r4, r5, r6, pc}
 8007964:	f855 3b04 	ldr.w	r3, [r5], #4
 8007968:	4798      	blx	r3
 800796a:	3601      	adds	r6, #1
 800796c:	e7ee      	b.n	800794c <__libc_init_array+0xc>
 800796e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007972:	4798      	blx	r3
 8007974:	3601      	adds	r6, #1
 8007976:	e7f2      	b.n	800795e <__libc_init_array+0x1e>
 8007978:	08007ac0 	.word	0x08007ac0
 800797c:	08007ac0 	.word	0x08007ac0
 8007980:	08007ac0 	.word	0x08007ac0
 8007984:	08007ac4 	.word	0x08007ac4

08007988 <__retarget_lock_acquire_recursive>:
 8007988:	4770      	bx	lr

0800798a <__retarget_lock_release_recursive>:
 800798a:	4770      	bx	lr

0800798c <memcpy>:
 800798c:	440a      	add	r2, r1
 800798e:	4291      	cmp	r1, r2
 8007990:	f100 33ff 	add.w	r3, r0, #4294967295
 8007994:	d100      	bne.n	8007998 <memcpy+0xc>
 8007996:	4770      	bx	lr
 8007998:	b510      	push	{r4, lr}
 800799a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800799e:	4291      	cmp	r1, r2
 80079a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079a4:	d1f9      	bne.n	800799a <memcpy+0xe>
 80079a6:	bd10      	pop	{r4, pc}

080079a8 <_free_r>:
 80079a8:	b538      	push	{r3, r4, r5, lr}
 80079aa:	4605      	mov	r5, r0
 80079ac:	2900      	cmp	r1, #0
 80079ae:	d040      	beq.n	8007a32 <_free_r+0x8a>
 80079b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079b4:	1f0c      	subs	r4, r1, #4
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	bfb8      	it	lt
 80079ba:	18e4      	addlt	r4, r4, r3
 80079bc:	f7ff ff96 	bl	80078ec <__malloc_lock>
 80079c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007a34 <_free_r+0x8c>)
 80079c2:	6813      	ldr	r3, [r2, #0]
 80079c4:	b933      	cbnz	r3, 80079d4 <_free_r+0x2c>
 80079c6:	6063      	str	r3, [r4, #4]
 80079c8:	6014      	str	r4, [r2, #0]
 80079ca:	4628      	mov	r0, r5
 80079cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079d0:	f7ff bf92 	b.w	80078f8 <__malloc_unlock>
 80079d4:	42a3      	cmp	r3, r4
 80079d6:	d908      	bls.n	80079ea <_free_r+0x42>
 80079d8:	6820      	ldr	r0, [r4, #0]
 80079da:	1821      	adds	r1, r4, r0
 80079dc:	428b      	cmp	r3, r1
 80079de:	bf01      	itttt	eq
 80079e0:	6819      	ldreq	r1, [r3, #0]
 80079e2:	685b      	ldreq	r3, [r3, #4]
 80079e4:	1809      	addeq	r1, r1, r0
 80079e6:	6021      	streq	r1, [r4, #0]
 80079e8:	e7ed      	b.n	80079c6 <_free_r+0x1e>
 80079ea:	461a      	mov	r2, r3
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	b10b      	cbz	r3, 80079f4 <_free_r+0x4c>
 80079f0:	42a3      	cmp	r3, r4
 80079f2:	d9fa      	bls.n	80079ea <_free_r+0x42>
 80079f4:	6811      	ldr	r1, [r2, #0]
 80079f6:	1850      	adds	r0, r2, r1
 80079f8:	42a0      	cmp	r0, r4
 80079fa:	d10b      	bne.n	8007a14 <_free_r+0x6c>
 80079fc:	6820      	ldr	r0, [r4, #0]
 80079fe:	4401      	add	r1, r0
 8007a00:	1850      	adds	r0, r2, r1
 8007a02:	4283      	cmp	r3, r0
 8007a04:	6011      	str	r1, [r2, #0]
 8007a06:	d1e0      	bne.n	80079ca <_free_r+0x22>
 8007a08:	6818      	ldr	r0, [r3, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	4408      	add	r0, r1
 8007a0e:	6010      	str	r0, [r2, #0]
 8007a10:	6053      	str	r3, [r2, #4]
 8007a12:	e7da      	b.n	80079ca <_free_r+0x22>
 8007a14:	d902      	bls.n	8007a1c <_free_r+0x74>
 8007a16:	230c      	movs	r3, #12
 8007a18:	602b      	str	r3, [r5, #0]
 8007a1a:	e7d6      	b.n	80079ca <_free_r+0x22>
 8007a1c:	6820      	ldr	r0, [r4, #0]
 8007a1e:	1821      	adds	r1, r4, r0
 8007a20:	428b      	cmp	r3, r1
 8007a22:	bf01      	itttt	eq
 8007a24:	6819      	ldreq	r1, [r3, #0]
 8007a26:	685b      	ldreq	r3, [r3, #4]
 8007a28:	1809      	addeq	r1, r1, r0
 8007a2a:	6021      	streq	r1, [r4, #0]
 8007a2c:	6063      	str	r3, [r4, #4]
 8007a2e:	6054      	str	r4, [r2, #4]
 8007a30:	e7cb      	b.n	80079ca <_free_r+0x22>
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
 8007a34:	20000cb4 	.word	0x20000cb4

08007a38 <_init>:
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3a:	bf00      	nop
 8007a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3e:	bc08      	pop	{r3}
 8007a40:	469e      	mov	lr, r3
 8007a42:	4770      	bx	lr

08007a44 <_fini>:
 8007a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a46:	bf00      	nop
 8007a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4a:	bc08      	pop	{r3}
 8007a4c:	469e      	mov	lr, r3
 8007a4e:	4770      	bx	lr
