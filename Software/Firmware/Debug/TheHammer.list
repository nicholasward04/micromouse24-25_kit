
TheHammer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d58  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004e68  08004e68  00005e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eb0  08004eb0  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  08004eb0  08004eb0  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004eb0  08004eb0  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eb0  08004eb0  00005eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004eb4  08004eb4  00005eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004eb8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000018  08004ecc  00006018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08004ecc  000061f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee6c  00000000  00000000  0000603d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026b8  00000000  00000000  00014ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00017568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b23  00000000  00000000  000183b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018de5  00000000  00000000  00018edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011aaa  00000000  00000000  00031cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f2e6  00000000  00000000  0004376a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2a50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b98  00000000  00000000  000d2a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000d662c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e50 	.word	0x08004e50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08004e50 	.word	0x08004e50

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f2:	f000 fffd 	bl	80018f0 <HAL_Init>

  /* USER CODE BEGIN Init */
  LED_Power_Init();
 80008f6:	f000 fc03 	bl	8001100 <LED_Power_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fa:	f000 f823 	bl	8000944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fe:	f000 fa47 	bl	8000d90 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000902:	f000 f877 	bl	80009f4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000906:	f000 f8f1 	bl	8000aec <MX_TIM2_Init>
  MX_TIM3_Init();
 800090a:	f000 f96f 	bl	8000bec <MX_TIM3_Init>
  MX_TIM4_Init();
 800090e:	f000 f9c1 	bl	8000c94 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000912:	f000 fa13 	bl	8000d3c <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8000916:	f000 f8ab 	bl	8000a70 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t startBuff;
  HAL_UART_Receive_IT(&huart1, &startBuff, 1);
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	2201      	movs	r2, #1
 800091e:	4619      	mov	r1, r3
 8000920:	4806      	ldr	r0, [pc, #24]	@ (800093c <main+0x50>)
 8000922:	f003 fd24 	bl	800436e <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Poll_Sensors();
 8000926:	f000 fd25 	bl	8001374 <Poll_Sensors>
	  battery_voltage = Read_Battery();
 800092a:	f000 fc0d 	bl	8001148 <Read_Battery>
 800092e:	4602      	mov	r2, r0
 8000930:	460b      	mov	r3, r1
 8000932:	4903      	ldr	r1, [pc, #12]	@ (8000940 <main+0x54>)
 8000934:	e9c1 2300 	strd	r2, r3, [r1]
	  Poll_Sensors();
 8000938:	bf00      	nop
 800093a:	e7f4      	b.n	8000926 <main+0x3a>
 800093c:	2000016c 	.word	0x2000016c
 8000940:	200001b8 	.word	0x200001b8

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b094      	sub	sp, #80	@ 0x50
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800094e:	2228      	movs	r2, #40	@ 0x28
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f004 fa42 	bl	8004ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000974:	2302      	movs	r3, #2
 8000976:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000978:	2301      	movs	r3, #1
 800097a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097c:	2310      	movs	r3, #16
 800097e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000980:	2302      	movs	r3, #2
 8000982:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000984:	2300      	movs	r3, #0
 8000986:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000988:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800098c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000992:	4618      	mov	r0, r3
 8000994:	f001 fffe 	bl	8002994 <HAL_RCC_OscConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800099e:	f000 faba 	bl	8000f16 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a2:	230f      	movs	r3, #15
 80009a4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a6:	2302      	movs	r3, #2
 80009a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2101      	movs	r1, #1
 80009be:	4618      	mov	r0, r3
 80009c0:	f002 fa6a 	bl	8002e98 <HAL_RCC_ClockConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80009ca:	f000 faa4 	bl	8000f16 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009ce:	2302      	movs	r3, #2
 80009d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80009d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009d6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 fbea 	bl	80031b4 <HAL_RCCEx_PeriphCLKConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009e6:	f000 fa96 	bl	8000f16 <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3750      	adds	r7, #80	@ 0x50
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a04:	4b18      	ldr	r3, [pc, #96]	@ (8000a68 <MX_ADC1_Init+0x74>)
 8000a06:	4a19      	ldr	r2, [pc, #100]	@ (8000a6c <MX_ADC1_Init+0x78>)
 8000a08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <MX_ADC1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a10:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <MX_ADC1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a16:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <MX_ADC1_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <MX_ADC1_Init+0x74>)
 8000a1e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a24:	4b10      	ldr	r3, [pc, #64]	@ (8000a68 <MX_ADC1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <MX_ADC1_Init+0x74>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a30:	480d      	ldr	r0, [pc, #52]	@ (8000a68 <MX_ADC1_Init+0x74>)
 8000a32:	f000 ffbf 	bl	80019b4 <HAL_ADC_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a3c:	f000 fa6b 	bl	8000f16 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a40:	2305      	movs	r3, #5
 8000a42:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <MX_ADC1_Init+0x74>)
 8000a52:	f001 fa73 	bl	8001f3c <HAL_ADC_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a5c:	f000 fa5b 	bl	8000f16 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000034 	.word	0x20000034
 8000a6c:	40012400 	.word	0x40012400

08000a70 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a80:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <MX_ADC2_Init+0x74>)
 8000a82:	4a19      	ldr	r2, [pc, #100]	@ (8000ae8 <MX_ADC2_Init+0x78>)
 8000a84:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a86:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <MX_ADC2_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <MX_ADC2_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <MX_ADC2_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <MX_ADC2_Init+0x74>)
 8000a9a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a9e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <MX_ADC2_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <MX_ADC2_Init+0x74>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000aac:	480d      	ldr	r0, [pc, #52]	@ (8000ae4 <MX_ADC2_Init+0x74>)
 8000aae:	f000 ff81 	bl	80019b4 <HAL_ADC_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000ab8:	f000 fa2d 	bl	8000f16 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MX_ADC2_Init+0x74>)
 8000ace:	f001 fa35 	bl	8001f3c <HAL_ADC_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000ad8:	f000 fa1d 	bl	8000f16 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000064 	.word	0x20000064
 8000ae8:	40012800 	.word	0x40012800

08000aec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	@ 0x38
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b00:	f107 0320 	add.w	r3, r7, #32
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
 8000b18:	615a      	str	r2, [r3, #20]
 8000b1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b1c:	4b32      	ldr	r3, [pc, #200]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000b1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b24:	4b30      	ldr	r3, [pc, #192]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2047;
 8000b30:	4b2d      	ldr	r3, [pc, #180]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000b32:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000b36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b38:	4b2b      	ldr	r3, [pc, #172]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b44:	4828      	ldr	r0, [pc, #160]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000b46:	f002 fca1 	bl	800348c <HAL_TIM_Base_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b50:	f000 f9e1 	bl	8000f16 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b58:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4821      	ldr	r0, [pc, #132]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000b62:	f002 ff8f 	bl	8003a84 <HAL_TIM_ConfigClockSource>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b6c:	f000 f9d3 	bl	8000f16 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b70:	481d      	ldr	r0, [pc, #116]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000b72:	f002 fcda 	bl	800352a <HAL_TIM_PWM_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000b7c:	f000 f9cb 	bl	8000f16 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b88:	f107 0320 	add.w	r3, r7, #32
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4816      	ldr	r0, [pc, #88]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000b90:	f003 faf8 	bl	8004184 <HAL_TIMEx_MasterConfigSynchronization>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000b9a:	f000 f9bc 	bl	8000f16 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9e:	2360      	movs	r3, #96	@ 0x60
 8000ba0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2208      	movs	r2, #8
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480c      	ldr	r0, [pc, #48]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000bb6:	f002 fea3 	bl	8003900 <HAL_TIM_PWM_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000bc0:	f000 f9a9 	bl	8000f16 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4807      	ldr	r0, [pc, #28]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000bcc:	f002 fe98 	bl	8003900 <HAL_TIM_PWM_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000bd6:	f000 f99e 	bl	8000f16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bda:	4803      	ldr	r0, [pc, #12]	@ (8000be8 <MX_TIM2_Init+0xfc>)
 8000bdc:	f000 fd3a 	bl	8001654 <HAL_TIM_MspPostInit>

}
 8000be0:	bf00      	nop
 8000be2:	3738      	adds	r7, #56	@ 0x38
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000094 	.word	0x20000094

08000bec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08c      	sub	sp, #48	@ 0x30
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bf2:	f107 030c 	add.w	r3, r7, #12
 8000bf6:	2224      	movs	r2, #36	@ 0x24
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f004 f8ee 	bl	8004ddc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c08:	4b20      	ldr	r3, [pc, #128]	@ (8000c8c <MX_TIM3_Init+0xa0>)
 8000c0a:	4a21      	ldr	r2, [pc, #132]	@ (8000c90 <MX_TIM3_Init+0xa4>)
 8000c0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c8c <MX_TIM3_Init+0xa0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	@ (8000c8c <MX_TIM3_Init+0xa0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c8c <MX_TIM3_Init+0xa0>)
 8000c1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c22:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <MX_TIM3_Init+0xa0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c28:	4b18      	ldr	r3, [pc, #96]	@ (8000c8c <MX_TIM3_Init+0xa0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000c32:	2302      	movs	r3, #2
 8000c34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c36:	2301      	movs	r3, #1
 8000c38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000c42:	2302      	movs	r3, #2
 8000c44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c46:	2301      	movs	r3, #1
 8000c48:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	4619      	mov	r1, r3
 8000c58:	480c      	ldr	r0, [pc, #48]	@ (8000c8c <MX_TIM3_Init+0xa0>)
 8000c5a:	f002 fcbe 	bl	80035da <HAL_TIM_Encoder_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000c64:	f000 f957 	bl	8000f16 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	@ (8000c8c <MX_TIM3_Init+0xa0>)
 8000c76:	f003 fa85 	bl	8004184 <HAL_TIMEx_MasterConfigSynchronization>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000c80:	f000 f949 	bl	8000f16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	3730      	adds	r7, #48	@ 0x30
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200000dc 	.word	0x200000dc
 8000c90:	40000400 	.word	0x40000400

08000c94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08c      	sub	sp, #48	@ 0x30
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	2224      	movs	r2, #36	@ 0x24
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f004 f89a 	bl	8004ddc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cb0:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <MX_TIM4_Init+0xa0>)
 8000cb2:	4a21      	ldr	r2, [pc, #132]	@ (8000d38 <MX_TIM4_Init+0xa4>)
 8000cb4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <MX_TIM4_Init+0xa0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <MX_TIM4_Init+0xa0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <MX_TIM4_Init+0xa0>)
 8000cc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cc8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <MX_TIM4_Init+0xa0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <MX_TIM4_Init+0xa0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000cea:	2302      	movs	r3, #2
 8000cec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480c      	ldr	r0, [pc, #48]	@ (8000d34 <MX_TIM4_Init+0xa0>)
 8000d02:	f002 fc6a 	bl	80035da <HAL_TIM_Encoder_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000d0c:	f000 f903 	bl	8000f16 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <MX_TIM4_Init+0xa0>)
 8000d1e:	f003 fa31 	bl	8004184 <HAL_TIMEx_MasterConfigSynchronization>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000d28:	f000 f8f5 	bl	8000f16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	3730      	adds	r7, #48	@ 0x30
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000124 	.word	0x20000124
 8000d38:	40000800 	.word	0x40000800

08000d3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d40:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	@ (8000d8c <MX_USART1_UART_Init+0x50>)
 8000d44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d46:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d48:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d60:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d66:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d72:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d74:	f003 fa76 	bl	8004264 <HAL_UART_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d7e:	f000 f8ca 	bl	8000f16 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000016c 	.word	0x2000016c
 8000d8c:	40013800 	.word	0x40013800

08000d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da4:	4b51      	ldr	r3, [pc, #324]	@ (8000eec <MX_GPIO_Init+0x15c>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a50      	ldr	r2, [pc, #320]	@ (8000eec <MX_GPIO_Init+0x15c>)
 8000daa:	f043 0310 	orr.w	r3, r3, #16
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b4e      	ldr	r3, [pc, #312]	@ (8000eec <MX_GPIO_Init+0x15c>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0310 	and.w	r3, r3, #16
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8000eec <MX_GPIO_Init+0x15c>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a4a      	ldr	r2, [pc, #296]	@ (8000eec <MX_GPIO_Init+0x15c>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b48      	ldr	r3, [pc, #288]	@ (8000eec <MX_GPIO_Init+0x15c>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd4:	4b45      	ldr	r3, [pc, #276]	@ (8000eec <MX_GPIO_Init+0x15c>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a44      	ldr	r2, [pc, #272]	@ (8000eec <MX_GPIO_Init+0x15c>)
 8000dda:	f043 0308 	orr.w	r3, r3, #8
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b42      	ldr	r3, [pc, #264]	@ (8000eec <MX_GPIO_Init+0x15c>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0308 	and.w	r3, r3, #8
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Power_GPIO_Port, LED_Power_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000df2:	483f      	ldr	r0, [pc, #252]	@ (8000ef0 <MX_GPIO_Init+0x160>)
 8000df4:	f001 fd7a 	bl	80028ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMIT_R_Pin|EMIT_L_Pin|EMIT_FL_Pin|ML_BWD_Pin
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f64f 5120 	movw	r1, #64800	@ 0xfd20
 8000dfe:	483d      	ldr	r0, [pc, #244]	@ (8000ef4 <MX_GPIO_Init+0x164>)
 8000e00:	f001 fd74 	bl	80028ec <HAL_GPIO_WritePin>
                          |MR_BWD_Pin|ML_FWD_Pin|EMIT_FR_Pin|Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MR_FWD_GPIO_Port, MR_FWD_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e0a:	483b      	ldr	r0, [pc, #236]	@ (8000ef8 <MX_GPIO_Init+0x168>)
 8000e0c:	f001 fd6e 	bl	80028ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Blue_Pin|LED_Green_Pin, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 8000e16:	4838      	ldr	r0, [pc, #224]	@ (8000ef8 <MX_GPIO_Init+0x168>)
 8000e18:	f001 fd68 	bl	80028ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Power_Pin */
  GPIO_InitStruct.Pin = LED_Power_Pin;
 8000e1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_Power_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0310 	add.w	r3, r7, #16
 8000e32:	4619      	mov	r1, r3
 8000e34:	482e      	ldr	r0, [pc, #184]	@ (8000ef0 <MX_GPIO_Init+0x160>)
 8000e36:	f001 fbd5 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPEED_SW2_Pin */
  GPIO_InitStruct.Pin = SPEED_SW2_Pin;
 8000e3a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e40:	4b2e      	ldr	r3, [pc, #184]	@ (8000efc <MX_GPIO_Init+0x16c>)
 8000e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPEED_SW2_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4828      	ldr	r0, [pc, #160]	@ (8000ef0 <MX_GPIO_Init+0x160>)
 8000e50:	f001 fbc8 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_R_Pin EMIT_L_Pin EMIT_FL_Pin ML_BWD_Pin
                           MR_BWD_Pin ML_FWD_Pin EMIT_FR_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = EMIT_R_Pin|EMIT_L_Pin|EMIT_FL_Pin|ML_BWD_Pin
 8000e54:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8000e58:	613b      	str	r3, [r7, #16]
                          |MR_BWD_Pin|ML_FWD_Pin|EMIT_FR_Pin|Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4821      	ldr	r0, [pc, #132]	@ (8000ef4 <MX_GPIO_Init+0x164>)
 8000e6e:	f001 fbb9 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MR_FWD_Pin LED_Red_Pin LED_Blue_Pin LED_Green_Pin */
  GPIO_InitStruct.Pin = MR_FWD_Pin|LED_Red_Pin|LED_Blue_Pin|LED_Green_Pin;
 8000e72:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8000e76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2302      	movs	r3, #2
 8000e82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481b      	ldr	r0, [pc, #108]	@ (8000ef8 <MX_GPIO_Init+0x168>)
 8000e8c:	f001 fbaa 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARM_SW1_Pin */
  GPIO_InitStruct.Pin = ARM_SW1_Pin;
 8000e90:	2310      	movs	r3, #16
 8000e92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e94:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <MX_GPIO_Init+0x16c>)
 8000e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ARM_SW1_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4814      	ldr	r0, [pc, #80]	@ (8000ef4 <MX_GPIO_Init+0x164>)
 8000ea4:	f001 fb9e 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOADMAZE_SW3_Pin */
  GPIO_InitStruct.Pin = LOADMAZE_SW3_Pin;
 8000ea8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LOADMAZE_SW3_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 0310 	add.w	r3, r7, #16
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480d      	ldr	r0, [pc, #52]	@ (8000ef4 <MX_GPIO_Init+0x164>)
 8000ebe:	f001 fb91 	bl	80025e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	210f      	movs	r1, #15
 8000ec6:	200a      	movs	r0, #10
 8000ec8:	f001 faa3 	bl	8002412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ecc:	200a      	movs	r0, #10
 8000ece:	f001 fabc 	bl	800244a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	210f      	movs	r1, #15
 8000ed6:	2028      	movs	r0, #40	@ 0x28
 8000ed8:	f001 fa9b 	bl	8002412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000edc:	2028      	movs	r0, #40	@ 0x28
 8000ede:	f001 fab4 	bl	800244a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ee2:	bf00      	nop
 8000ee4:	3720      	adds	r7, #32
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40011000 	.word	0x40011000
 8000ef4:	40010c00 	.word	0x40010c00
 8000ef8:	40010800 	.word	0x40010800
 8000efc:	10210000 	.word	0x10210000

08000f00 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	UART_Receive_Callback(huart);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f000 f8d5 	bl	80010b8 <UART_Receive_Callback>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1a:	b672      	cpsid	i
}
 8000f1c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1e:	bf00      	nop
 8000f20:	e7fd      	b.n	8000f1e <Error_Handler+0x8>
	...

08000f24 <Parse_Receive_Data>:
#define READ_BATT   0b0010  // READ BATTERY: Read battery voltage.
#define PULSE_BUZZ  0b0011  // PULSE BUZZER: Play a short noise from the buzzer.
#define START_RUN   0b0100  // START RUN: Start a maze run. For testing purposes only.
#define PAIRED      0b0101  // PAIRED: Send OK response to verify received.

void Parse_Receive_Data(uint8_t rxBuff) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
	uint8_t command = (rxBuff & 0xF0) >> 4;   // Isolate command code
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	73fb      	strb	r3, [r7, #15]
	uint8_t data    = (rxBuff & 0x0F);        // Isolate other data (not used currently)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	73bb      	strb	r3, [r7, #14]
	(void) data;                              // Temporary to remove warning for unused variable

	switch(command) {
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	2b07      	cmp	r3, #7
 8000f40:	d838      	bhi.n	8000fb4 <Parse_Receive_Data+0x90>
 8000f42:	a201      	add	r2, pc, #4	@ (adr r2, 8000f48 <Parse_Receive_Data+0x24>)
 8000f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f48:	08000f69 	.word	0x08000f69
 8000f4c:	08000f87 	.word	0x08000f87
 8000f50:	08000fa1 	.word	0x08000fa1
 8000f54:	08000fad 	.word	0x08000fad
 8000f58:	08000fb5 	.word	0x08000fb5
 8000f5c:	08000fb5 	.word	0x08000fb5
 8000f60:	08000fb5 	.word	0x08000fb5
 8000f64:	08000f99 	.word	0x08000f99
		case SET_MODE:
			debugMode = (debugMode + 1) % 2;
 8000f68:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <Parse_Receive_Data+0x9c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	bfb8      	it	lt
 8000f76:	425b      	neglt	r3, r3
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <Parse_Receive_Data+0x9c>)
 8000f7c:	701a      	strb	r2, [r3, #0]
			debugCounter = 0;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <Parse_Receive_Data+0xa0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
			break;
 8000f84:	e017      	b.n	8000fb6 <Parse_Receive_Data+0x92>
		case HALT_RUN:
			HALTED = 1;
 8000f86:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <Parse_Receive_Data+0xa4>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
			while (HALTED);
 8000f8c:	bf00      	nop
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <Parse_Receive_Data+0xa4>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1fb      	bne.n	8000f8e <Parse_Receive_Data+0x6a>
			break;
 8000f96:	e00e      	b.n	8000fb6 <Parse_Receive_Data+0x92>
		case RESUME_RUN:
			HALTED = 0;
 8000f98:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <Parse_Receive_Data+0xa4>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
			break;
 8000f9e:	e00a      	b.n	8000fb6 <Parse_Receive_Data+0x92>
		case READ_BATT:
			HAL_UART_Transmit_IT(&huart1, (uint8_t*)&battery_voltage, sizeof(double));
 8000fa0:	2208      	movs	r2, #8
 8000fa2:	490a      	ldr	r1, [pc, #40]	@ (8000fcc <Parse_Receive_Data+0xa8>)
 8000fa4:	480a      	ldr	r0, [pc, #40]	@ (8000fd0 <Parse_Receive_Data+0xac>)
 8000fa6:	f003 f9ad 	bl	8004304 <HAL_UART_Transmit_IT>
			break;
 8000faa:	e004      	b.n	8000fb6 <Parse_Receive_Data+0x92>
		case PULSE_BUZZ:
			Pulse_Buzzer(100);
 8000fac:	2064      	movs	r0, #100	@ 0x64
 8000fae:	f000 f8b3 	bl	8001118 <Pulse_Buzzer>
			break;
 8000fb2:	e000      	b.n	8000fb6 <Parse_Receive_Data+0x92>
			// SET RUN START VAR TO TRUE
			break;
		case PAIRED:
			break;
		default:
			break;
 8000fb4:	bf00      	nop
	}
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200001b4 	.word	0x200001b4
 8000fc4:	200001b5 	.word	0x200001b5
 8000fc8:	200001e8 	.word	0x200001e8
 8000fcc:	200001b8 	.word	0x200001b8
 8000fd0:	2000016c 	.word	0x2000016c

08000fd4 <Create_Byte_Stream>:
uint16_t motor_1_rpm = 2048;
uint16_t motor_2_rpm = 2048;
uint8_t direction = 1;         // East
uint8_t position = 0b00010010; // First 4 bits is x position, last 4 bits is y position (1, 2)

void Create_Byte_Stream(uint8_t txData[PACKET_SIZE]) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	bzero(txData, PACKET_SIZE);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	6053      	str	r3, [r2, #4]
 8000fe6:	6093      	str	r3, [r2, #8]
 8000fe8:	60d3      	str	r3, [r2, #12]
 8000fea:	6113      	str	r3, [r2, #16]
 8000fec:	6153      	str	r3, [r2, #20]
 8000fee:	6193      	str	r3, [r2, #24]

	memcpy(txData, "Debug", 5);
 8000ff0:	2205      	movs	r2, #5
 8000ff2:	491e      	ldr	r1, [pc, #120]	@ (800106c <Create_Byte_Stream+0x98>)
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f003 ff1d 	bl	8004e34 <memcpy>
	memcpy(txData + 5, &cell, sizeof(uint8_t));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3305      	adds	r3, #5
 8000ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8001070 <Create_Byte_Stream+0x9c>)
 8001000:	7812      	ldrb	r2, [r2, #0]
 8001002:	701a      	strb	r2, [r3, #0]
	memcpy(txData + 6, &motor_1_rpm, sizeof(uint16_t));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3306      	adds	r3, #6
 8001008:	4a1a      	ldr	r2, [pc, #104]	@ (8001074 <Create_Byte_Stream+0xa0>)
 800100a:	8812      	ldrh	r2, [r2, #0]
 800100c:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 8, &motor_2_rpm, sizeof(uint16_t));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3308      	adds	r3, #8
 8001012:	4a19      	ldr	r2, [pc, #100]	@ (8001078 <Create_Byte_Stream+0xa4>)
 8001014:	8812      	ldrh	r2, [r2, #0]
 8001016:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 10, &direction, sizeof(uint8_t));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	330a      	adds	r3, #10
 800101c:	4a17      	ldr	r2, [pc, #92]	@ (800107c <Create_Byte_Stream+0xa8>)
 800101e:	7812      	ldrb	r2, [r2, #0]
 8001020:	701a      	strb	r2, [r3, #0]
	memcpy(txData + 11, &position, sizeof(uint8_t));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	330b      	adds	r3, #11
 8001026:	4a16      	ldr	r2, [pc, #88]	@ (8001080 <Create_Byte_Stream+0xac>)
 8001028:	7812      	ldrb	r2, [r2, #0]
 800102a:	701a      	strb	r2, [r3, #0]
	memcpy(txData + 12, &battery_voltage, sizeof(double));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f103 010c 	add.w	r1, r3, #12
 8001032:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <Create_Byte_Stream+0xb0>)
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	600a      	str	r2, [r1, #0]
 800103a:	604b      	str	r3, [r1, #4]
	memcpy(txData + 20, &raw_FL, sizeof(uint16_t));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3314      	adds	r3, #20
 8001040:	4a11      	ldr	r2, [pc, #68]	@ (8001088 <Create_Byte_Stream+0xb4>)
 8001042:	8812      	ldrh	r2, [r2, #0]
 8001044:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 22, &raw_L, sizeof(uint16_t));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3316      	adds	r3, #22
 800104a:	4a10      	ldr	r2, [pc, #64]	@ (800108c <Create_Byte_Stream+0xb8>)
 800104c:	8812      	ldrh	r2, [r2, #0]
 800104e:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 24, &raw_R, sizeof(uint16_t));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3318      	adds	r3, #24
 8001054:	4a0e      	ldr	r2, [pc, #56]	@ (8001090 <Create_Byte_Stream+0xbc>)
 8001056:	8812      	ldrh	r2, [r2, #0]
 8001058:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 26, &raw_FR, sizeof(uint16_t));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	331a      	adds	r3, #26
 800105e:	4a0d      	ldr	r2, [pc, #52]	@ (8001094 <Create_Byte_Stream+0xc0>)
 8001060:	8812      	ldrh	r2, [r2, #0]
 8001062:	801a      	strh	r2, [r3, #0]
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	08004e68 	.word	0x08004e68
 8001070:	20000001 	.word	0x20000001
 8001074:	20000002 	.word	0x20000002
 8001078:	20000004 	.word	0x20000004
 800107c:	20000006 	.word	0x20000006
 8001080:	20000007 	.word	0x20000007
 8001084:	200001b8 	.word	0x200001b8
 8001088:	200001c0 	.word	0x200001c0
 800108c:	200001c2 	.word	0x200001c2
 8001090:	200001c4 	.word	0x200001c4
 8001094:	200001c6 	.word	0x200001c6

08001098 <Debug_Packet_Send>:

// When mouse in debug mode transmit above data.
//  Also transmit start identifier "Debug". This totals to 28 bytes of data transmitted every 50 ms.
void Debug_Packet_Send() {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	Create_Byte_Stream(txDebug);                                  // Create byte stream
 800109c:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <Debug_Packet_Send+0x18>)
 800109e:	f7ff ff99 	bl	8000fd4 <Create_Byte_Stream>
	HAL_UART_Transmit_IT(&huart1, txDebug, sizeof(txDebug));      // Transmit data
 80010a2:	221c      	movs	r2, #28
 80010a4:	4902      	ldr	r1, [pc, #8]	@ (80010b0 <Debug_Packet_Send+0x18>)
 80010a6:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <Debug_Packet_Send+0x1c>)
 80010a8:	f003 f92c 	bl	8004304 <HAL_UART_Transmit_IT>
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200001cc 	.word	0x200001cc
 80010b4:	2000016c 	.word	0x2000016c

080010b8 <UART_Receive_Callback>:

void UART_Receive_Callback(UART_HandleTypeDef *huart) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0a      	ldr	r2, [pc, #40]	@ (80010f0 <UART_Receive_Callback+0x38>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d10e      	bne.n	80010e8 <UART_Receive_Callback+0x30>
		Parse_Receive_Data(rxData);
 80010ca:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <UART_Receive_Callback+0x3c>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff28 	bl	8000f24 <Parse_Receive_Data>
		HAL_UART_Transmit_IT(&huart1, &txData, sizeof(txData));      // Transmit response ACK (0xFF)                          // Parse incoming command
 80010d4:	2201      	movs	r2, #1
 80010d6:	4908      	ldr	r1, [pc, #32]	@ (80010f8 <UART_Receive_Callback+0x40>)
 80010d8:	4808      	ldr	r0, [pc, #32]	@ (80010fc <UART_Receive_Callback+0x44>)
 80010da:	f003 f913 	bl	8004304 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart1, &rxData, sizeof(rxData));       // Receive incoming command
 80010de:	2201      	movs	r2, #1
 80010e0:	4904      	ldr	r1, [pc, #16]	@ (80010f4 <UART_Receive_Callback+0x3c>)
 80010e2:	4806      	ldr	r0, [pc, #24]	@ (80010fc <UART_Receive_Callback+0x44>)
 80010e4:	f003 f943 	bl	800436e <HAL_UART_Receive_IT>
	}
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40013800 	.word	0x40013800
 80010f4:	200001c8 	.word	0x200001c8
 80010f8:	20000000 	.word	0x20000000
 80010fc:	2000016c 	.word	0x2000016c

08001100 <LED_Power_Init>:

volatile uint16_t buzzerDelay = 0;

extern ADC_HandleTypeDef hadc2;

void LED_Power_Init() {
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Power_GPIO_Port, LED_Power_Pin);
 8001104:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001108:	4802      	ldr	r0, [pc, #8]	@ (8001114 <LED_Power_Init+0x14>)
 800110a:	f001 fc07 	bl	800291c <HAL_GPIO_TogglePin>
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40011000 	.word	0x40011000

08001118 <Pulse_Buzzer>:
void Reset_Buffers(uint8_t rxBuff, uint8_t txBuff) {
	rxBuff = 0;
	txBuff = 0;
}

void Pulse_Buzzer(uint16_t delay) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001128:	4804      	ldr	r0, [pc, #16]	@ (800113c <Pulse_Buzzer+0x24>)
 800112a:	f001 fbdf 	bl	80028ec <HAL_GPIO_WritePin>
	buzzerDelay = delay;
 800112e:	4a04      	ldr	r2, [pc, #16]	@ (8001140 <Pulse_Buzzer+0x28>)
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	8013      	strh	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40010c00 	.word	0x40010c00
 8001140:	200001ea 	.word	0x200001ea
 8001144:	00000000 	.word	0x00000000

08001148 <Read_Battery>:

void LED_Blue_Toggle() {
	HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
}

double Read_Battery() {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 800114e:	481e      	ldr	r0, [pc, #120]	@ (80011c8 <Read_Battery+0x80>)
 8001150:	f000 fd08 	bl	8001b64 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	481b      	ldr	r0, [pc, #108]	@ (80011c8 <Read_Battery+0x80>)
 800115a:	f000 fddd 	bl	8001d18 <HAL_ADC_PollForConversion>
	uint16_t raw_adc = HAL_ADC_GetValue(&hadc2);
 800115e:	481a      	ldr	r0, [pc, #104]	@ (80011c8 <Read_Battery+0x80>)
 8001160:	f000 fee0 	bl	8001f24 <HAL_ADC_GetValue>
 8001164:	4603      	mov	r3, r0
 8001166:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc2);
 8001168:	4817      	ldr	r0, [pc, #92]	@ (80011c8 <Read_Battery+0x80>)
 800116a:	f000 fda9 	bl	8001cc0 <HAL_ADC_Stop>

	return ((raw_adc / 4095.0) * 3.3) * 3.5;
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f93f 	bl	80003f4 <__aeabi_i2d>
 8001176:	a310      	add	r3, pc, #64	@ (adr r3, 80011b8 <Read_Battery+0x70>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff face 	bl	800071c <__aeabi_ddiv>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	a30d      	add	r3, pc, #52	@ (adr r3, 80011c0 <Read_Battery+0x78>)
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	f7ff f99b 	bl	80004c8 <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4b0b      	ldr	r3, [pc, #44]	@ (80011cc <Read_Battery+0x84>)
 80011a0:	f7ff f992 	bl	80004c8 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
}
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	f3af 8000 	nop.w
 80011b8:	00000000 	.word	0x00000000
 80011bc:	40affe00 	.word	0x40affe00
 80011c0:	66666666 	.word	0x66666666
 80011c4:	400a6666 	.word	0x400a6666
 80011c8:	20000064 	.word	0x20000064
 80011cc:	400c0000 	.word	0x400c0000

080011d0 <ADC1_Select_CH9>:
extern uint16_t raw_FL;
extern uint16_t raw_L;
extern uint16_t raw_R;
extern uint16_t raw_FR;

static void ADC1_Select_CH9(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_9;
 80011e0:	2309      	movs	r3, #9
 80011e2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80011e4:	2301      	movs	r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80011e8:	2301      	movs	r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel (&hadc1, &sConfig) != HAL_OK) {
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	@ (8001208 <ADC1_Select_CH9+0x38>)
 80011f2:	f000 fea3 	bl	8001f3c <HAL_ADC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <ADC1_Select_CH9+0x30>
		Error_Handler();
 80011fc:	f7ff fe8b 	bl	8000f16 <Error_Handler>
	}
}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000034 	.word	0x20000034

0800120c <ADC1_Select_CH8>:

static void ADC1_Select_CH8(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_8;
 800121c:	2308      	movs	r3, #8
 800121e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001220:	2301      	movs	r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001224:	2301      	movs	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	@ (8001244 <ADC1_Select_CH8+0x38>)
 800122e:	f000 fe85 	bl	8001f3c <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <ADC1_Select_CH8+0x30>
		Error_Handler();
 8001238:	f7ff fe6d 	bl	8000f16 <Error_Handler>
	}
}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000034 	.word	0x20000034

08001248 <ADC1_Select_CH5>:

static void ADC1_Select_CH5(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_5;
 8001258:	2305      	movs	r3, #5
 800125a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800125c:	2301      	movs	r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001260:	2301      	movs	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	@ (8001280 <ADC1_Select_CH5+0x38>)
 800126a:	f000 fe67 	bl	8001f3c <HAL_ADC_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <ADC1_Select_CH5+0x30>
		Error_Handler();
 8001274:	f7ff fe4f 	bl	8000f16 <Error_Handler>
	}
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000034 	.word	0x20000034

08001284 <ADC1_Select_CH4>:

static void ADC1_Select_CH4(void) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_4;
 8001294:	2304      	movs	r3, #4
 8001296:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001298:	2301      	movs	r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800129c:	2301      	movs	r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel (&hadc1, &sConfig) != HAL_OK) {
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	@ (80012bc <ADC1_Select_CH4+0x38>)
 80012a6:	f000 fe49 	bl	8001f3c <HAL_ADC_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <ADC1_Select_CH4+0x30>
		Error_Handler();
 80012b0:	f7ff fe31 	bl	8000f16 <Error_Handler>
	}
}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000034 	.word	0x20000034

080012c0 <Measure_Dist>:

uint16_t Measure_Dist(dist_t dist) { // Poll raw IR sensors
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef* emitter_port;
	uint16_t emitter_pin;

	switch(dist) {
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	d82a      	bhi.n	8001326 <Measure_Dist+0x66>
 80012d0:	a201      	add	r2, pc, #4	@ (adr r2, 80012d8 <Measure_Dist+0x18>)
 80012d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d6:	bf00      	nop
 80012d8:	080012e9 	.word	0x080012e9
 80012dc:	080012f9 	.word	0x080012f9
 80012e0:	08001309 	.word	0x08001309
 80012e4:	08001319 	.word	0x08001319
	case DIST_FL:
		emitter_port = EMIT_FL_GPIO_Port;
 80012e8:	4b20      	ldr	r3, [pc, #128]	@ (800136c <Measure_Dist+0xac>)
 80012ea:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_FL_Pin;
 80012ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f0:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH9();
 80012f2:	f7ff ff6d 	bl	80011d0 <ADC1_Select_CH9>
		break;
 80012f6:	e017      	b.n	8001328 <Measure_Dist+0x68>
	case DIST_L:
		emitter_port = EMIT_L_GPIO_Port;
 80012f8:	4b1c      	ldr	r3, [pc, #112]	@ (800136c <Measure_Dist+0xac>)
 80012fa:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_L_Pin;
 80012fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001300:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH8();
 8001302:	f7ff ff83 	bl	800120c <ADC1_Select_CH8>
		break;
 8001306:	e00f      	b.n	8001328 <Measure_Dist+0x68>
	case DIST_R:
		emitter_port = EMIT_R_GPIO_Port;
 8001308:	4b18      	ldr	r3, [pc, #96]	@ (800136c <Measure_Dist+0xac>)
 800130a:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_R_Pin;
 800130c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001310:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH5();
 8001312:	f7ff ff99 	bl	8001248 <ADC1_Select_CH5>
		break;
 8001316:	e007      	b.n	8001328 <Measure_Dist+0x68>
	case DIST_FR:
		emitter_port = EMIT_FR_GPIO_Port;
 8001318:	4b14      	ldr	r3, [pc, #80]	@ (800136c <Measure_Dist+0xac>)
 800131a:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_FR_Pin;
 800131c:	2320      	movs	r3, #32
 800131e:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH4();
 8001320:	f7ff ffb0 	bl	8001284 <ADC1_Select_CH4>
		break;
 8001324:	e000      	b.n	8001328 <Measure_Dist+0x68>
	default:
		break;
 8001326:	bf00      	nop
	}
	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_SET);
 8001328:	897b      	ldrh	r3, [r7, #10]
 800132a:	2201      	movs	r2, #1
 800132c:	4619      	mov	r1, r3
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f001 fadc 	bl	80028ec <HAL_GPIO_WritePin>

	HAL_ADC_Start(&hadc1);
 8001334:	480e      	ldr	r0, [pc, #56]	@ (8001370 <Measure_Dist+0xb0>)
 8001336:	f000 fc15 	bl	8001b64 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800133a:	f04f 31ff 	mov.w	r1, #4294967295
 800133e:	480c      	ldr	r0, [pc, #48]	@ (8001370 <Measure_Dist+0xb0>)
 8001340:	f000 fcea 	bl	8001d18 <HAL_ADC_PollForConversion>
	uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 8001344:	480a      	ldr	r0, [pc, #40]	@ (8001370 <Measure_Dist+0xb0>)
 8001346:	f000 fded 	bl	8001f24 <HAL_ADC_GetValue>
 800134a:	4603      	mov	r3, r0
 800134c:	813b      	strh	r3, [r7, #8]
	HAL_ADC_Stop(&hadc1);
 800134e:	4808      	ldr	r0, [pc, #32]	@ (8001370 <Measure_Dist+0xb0>)
 8001350:	f000 fcb6 	bl	8001cc0 <HAL_ADC_Stop>

	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_RESET);
 8001354:	897b      	ldrh	r3, [r7, #10]
 8001356:	2200      	movs	r2, #0
 8001358:	4619      	mov	r1, r3
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f001 fac6 	bl	80028ec <HAL_GPIO_WritePin>

	return adc_val;
 8001360:	893b      	ldrh	r3, [r7, #8]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40010c00 	.word	0x40010c00
 8001370:	20000034 	.word	0x20000034

08001374 <Poll_Sensors>:

void Poll_Sensors(){ // Gather all raw IR values
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	raw_FL = Measure_Dist(DIST_FL);
 8001378:	2000      	movs	r0, #0
 800137a:	f7ff ffa1 	bl	80012c0 <Measure_Dist>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <Poll_Sensors+0x40>)
 8001384:	801a      	strh	r2, [r3, #0]
	raw_L = Measure_Dist(DIST_L);
 8001386:	2001      	movs	r0, #1
 8001388:	f7ff ff9a 	bl	80012c0 <Measure_Dist>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <Poll_Sensors+0x44>)
 8001392:	801a      	strh	r2, [r3, #0]
	raw_R = Measure_Dist(DIST_R);
 8001394:	2002      	movs	r0, #2
 8001396:	f7ff ff93 	bl	80012c0 <Measure_Dist>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <Poll_Sensors+0x48>)
 80013a0:	801a      	strh	r2, [r3, #0]
	raw_FR = Measure_Dist(DIST_FR);
 80013a2:	2003      	movs	r0, #3
 80013a4:	f7ff ff8c 	bl	80012c0 <Measure_Dist>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b04      	ldr	r3, [pc, #16]	@ (80013c0 <Poll_Sensors+0x4c>)
 80013ae:	801a      	strh	r2, [r3, #0]
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200001c0 	.word	0x200001c0
 80013b8:	200001c2 	.word	0x200001c2
 80013bc:	200001c4 	.word	0x200001c4
 80013c0:	200001c6 	.word	0x200001c6

080013c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ca:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <HAL_MspInit+0x5c>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	4a14      	ldr	r2, [pc, #80]	@ (8001420 <HAL_MspInit+0x5c>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6193      	str	r3, [r2, #24]
 80013d6:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <HAL_MspInit+0x5c>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <HAL_MspInit+0x5c>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001420 <HAL_MspInit+0x5c>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	61d3      	str	r3, [r2, #28]
 80013ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <HAL_MspInit+0x5c>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <HAL_MspInit+0x60>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	4a04      	ldr	r2, [pc, #16]	@ (8001424 <HAL_MspInit+0x60>)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	40021000 	.word	0x40021000
 8001424:	40010000 	.word	0x40010000

08001428 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08c      	sub	sp, #48	@ 0x30
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a33      	ldr	r2, [pc, #204]	@ (8001510 <HAL_ADC_MspInit+0xe8>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d138      	bne.n	80014ba <HAL_ADC_MspInit+0x92>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001448:	4b32      	ldr	r3, [pc, #200]	@ (8001514 <HAL_ADC_MspInit+0xec>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a31      	ldr	r2, [pc, #196]	@ (8001514 <HAL_ADC_MspInit+0xec>)
 800144e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b2f      	ldr	r3, [pc, #188]	@ (8001514 <HAL_ADC_MspInit+0xec>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001460:	4b2c      	ldr	r3, [pc, #176]	@ (8001514 <HAL_ADC_MspInit+0xec>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a2b      	ldr	r2, [pc, #172]	@ (8001514 <HAL_ADC_MspInit+0xec>)
 8001466:	f043 0304 	orr.w	r3, r3, #4
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b29      	ldr	r3, [pc, #164]	@ (8001514 <HAL_ADC_MspInit+0xec>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	61bb      	str	r3, [r7, #24]
 8001476:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	4b26      	ldr	r3, [pc, #152]	@ (8001514 <HAL_ADC_MspInit+0xec>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a25      	ldr	r2, [pc, #148]	@ (8001514 <HAL_ADC_MspInit+0xec>)
 800147e:	f043 0308 	orr.w	r3, r3, #8
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b23      	ldr	r3, [pc, #140]	@ (8001514 <HAL_ADC_MspInit+0xec>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	697b      	ldr	r3, [r7, #20]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RECIV_FR_Pin|RECIV_R_Pin;
 8001490:	2330      	movs	r3, #48	@ 0x30
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001494:	2303      	movs	r3, #3
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 0320 	add.w	r3, r7, #32
 800149c:	4619      	mov	r1, r3
 800149e:	481e      	ldr	r0, [pc, #120]	@ (8001518 <HAL_ADC_MspInit+0xf0>)
 80014a0:	f001 f8a0 	bl	80025e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RECIV_L_Pin|RECIV_FL_Pin;
 80014a4:	2303      	movs	r3, #3
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a8:	2303      	movs	r3, #3
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 0320 	add.w	r3, r7, #32
 80014b0:	4619      	mov	r1, r3
 80014b2:	481a      	ldr	r0, [pc, #104]	@ (800151c <HAL_ADC_MspInit+0xf4>)
 80014b4:	f001 f896 	bl	80025e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80014b8:	e026      	b.n	8001508 <HAL_ADC_MspInit+0xe0>
  else if(hadc->Instance==ADC2)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a18      	ldr	r2, [pc, #96]	@ (8001520 <HAL_ADC_MspInit+0xf8>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d121      	bne.n	8001508 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80014c4:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <HAL_ADC_MspInit+0xec>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a12      	ldr	r2, [pc, #72]	@ (8001514 <HAL_ADC_MspInit+0xec>)
 80014ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <HAL_ADC_MspInit+0xec>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001514 <HAL_ADC_MspInit+0xec>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001514 <HAL_ADC_MspInit+0xec>)
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <HAL_ADC_MspInit+0xec>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_METER_Pin;
 80014f4:	2302      	movs	r3, #2
 80014f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f8:	2303      	movs	r3, #3
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(V_METER_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 0320 	add.w	r3, r7, #32
 8001500:	4619      	mov	r1, r3
 8001502:	4805      	ldr	r0, [pc, #20]	@ (8001518 <HAL_ADC_MspInit+0xf0>)
 8001504:	f001 f86e 	bl	80025e4 <HAL_GPIO_Init>
}
 8001508:	bf00      	nop
 800150a:	3730      	adds	r7, #48	@ 0x30
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40012400 	.word	0x40012400
 8001514:	40021000 	.word	0x40021000
 8001518:	40010800 	.word	0x40010800
 800151c:	40010c00 	.word	0x40010c00
 8001520:	40012800 	.word	0x40012800

08001524 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001534:	d10b      	bne.n	800154e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001536:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <HAL_TIM_Base_MspInit+0x34>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	4a07      	ldr	r2, [pc, #28]	@ (8001558 <HAL_TIM_Base_MspInit+0x34>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	61d3      	str	r3, [r2, #28]
 8001542:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <HAL_TIM_Base_MspInit+0x34>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	40021000 	.word	0x40021000

0800155c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	@ 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0318 	add.w	r3, r7, #24
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a32      	ldr	r2, [pc, #200]	@ (8001640 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d12c      	bne.n	80015d6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800157c:	4b31      	ldr	r3, [pc, #196]	@ (8001644 <HAL_TIM_Encoder_MspInit+0xe8>)
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	4a30      	ldr	r2, [pc, #192]	@ (8001644 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001582:	f043 0302 	orr.w	r3, r3, #2
 8001586:	61d3      	str	r3, [r2, #28]
 8001588:	4b2e      	ldr	r3, [pc, #184]	@ (8001644 <HAL_TIM_Encoder_MspInit+0xe8>)
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001594:	4b2b      	ldr	r3, [pc, #172]	@ (8001644 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	4a2a      	ldr	r2, [pc, #168]	@ (8001644 <HAL_TIM_Encoder_MspInit+0xe8>)
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	6193      	str	r3, [r2, #24]
 80015a0:	4b28      	ldr	r3, [pc, #160]	@ (8001644 <HAL_TIM_Encoder_MspInit+0xe8>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ML_ENC_A_Pin|ML_ENC_B_Pin;
 80015ac:	23c0      	movs	r3, #192	@ 0xc0
 80015ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 0318 	add.w	r3, r7, #24
 80015bc:	4619      	mov	r1, r3
 80015be:	4822      	ldr	r0, [pc, #136]	@ (8001648 <HAL_TIM_Encoder_MspInit+0xec>)
 80015c0:	f001 f810 	bl	80025e4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2100      	movs	r1, #0
 80015c8:	201d      	movs	r0, #29
 80015ca:	f000 ff22 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015ce:	201d      	movs	r0, #29
 80015d0:	f000 ff3b 	bl	800244a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015d4:	e030      	b.n	8001638 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a1c      	ldr	r2, [pc, #112]	@ (800164c <HAL_TIM_Encoder_MspInit+0xf0>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d12b      	bne.n	8001638 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015e0:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <HAL_TIM_Encoder_MspInit+0xe8>)
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	4a17      	ldr	r2, [pc, #92]	@ (8001644 <HAL_TIM_Encoder_MspInit+0xe8>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	61d3      	str	r3, [r2, #28]
 80015ec:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <HAL_TIM_Encoder_MspInit+0xe8>)
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f8:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <HAL_TIM_Encoder_MspInit+0xe8>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a11      	ldr	r2, [pc, #68]	@ (8001644 <HAL_TIM_Encoder_MspInit+0xe8>)
 80015fe:	f043 0308 	orr.w	r3, r3, #8
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MR_ENC_B_Pin|MR_ENC_A_Pin;
 8001610:	23c0      	movs	r3, #192	@ 0xc0
 8001612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161c:	f107 0318 	add.w	r3, r7, #24
 8001620:	4619      	mov	r1, r3
 8001622:	480b      	ldr	r0, [pc, #44]	@ (8001650 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001624:	f000 ffde 	bl	80025e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001628:	2200      	movs	r2, #0
 800162a:	2100      	movs	r1, #0
 800162c:	201e      	movs	r0, #30
 800162e:	f000 fef0 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001632:	201e      	movs	r0, #30
 8001634:	f000 ff09 	bl	800244a <HAL_NVIC_EnableIRQ>
}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	@ 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40000400 	.word	0x40000400
 8001644:	40021000 	.word	0x40021000
 8001648:	40010800 	.word	0x40010800
 800164c:	40000800 	.word	0x40000800
 8001650:	40010c00 	.word	0x40010c00

08001654 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001672:	d117      	bne.n	80016a4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001674:	4b0d      	ldr	r3, [pc, #52]	@ (80016ac <HAL_TIM_MspPostInit+0x58>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a0c      	ldr	r2, [pc, #48]	@ (80016ac <HAL_TIM_MspPostInit+0x58>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <HAL_TIM_MspPostInit+0x58>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ML_PWM_Pin|MR_PWM_Pin;
 800168c:	230c      	movs	r3, #12
 800168e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2302      	movs	r3, #2
 8001696:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	4619      	mov	r1, r3
 800169e:	4804      	ldr	r0, [pc, #16]	@ (80016b0 <HAL_TIM_MspPostInit+0x5c>)
 80016a0:	f000 ffa0 	bl	80025e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016a4:	bf00      	nop
 80016a6:	3720      	adds	r7, #32
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010800 	.word	0x40010800

080016b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a20      	ldr	r2, [pc, #128]	@ (8001750 <HAL_UART_MspInit+0x9c>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d139      	bne.n	8001748 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001754 <HAL_UART_MspInit+0xa0>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001754 <HAL_UART_MspInit+0xa0>)
 80016da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001754 <HAL_UART_MspInit+0xa0>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <HAL_UART_MspInit+0xa0>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a18      	ldr	r2, [pc, #96]	@ (8001754 <HAL_UART_MspInit+0xa0>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <HAL_UART_MspInit+0xa0>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001704:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001708:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	4619      	mov	r1, r3
 8001718:	480f      	ldr	r0, [pc, #60]	@ (8001758 <HAL_UART_MspInit+0xa4>)
 800171a:	f000 ff63 	bl	80025e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800171e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001722:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	4619      	mov	r1, r3
 8001732:	4809      	ldr	r0, [pc, #36]	@ (8001758 <HAL_UART_MspInit+0xa4>)
 8001734:	f000 ff56 	bl	80025e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2100      	movs	r1, #0
 800173c:	2025      	movs	r0, #37	@ 0x25
 800173e:	f000 fe68 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001742:	2025      	movs	r0, #37	@ 0x25
 8001744:	f000 fe81 	bl	800244a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001748:	bf00      	nop
 800174a:	3720      	adds	r7, #32
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40013800 	.word	0x40013800
 8001754:	40021000 	.word	0x40021000
 8001758:	40010800 	.word	0x40010800

0800175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <NMI_Handler+0x4>

08001764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <MemManage_Handler+0x4>

08001774 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <UsageFault_Handler+0x4>

08001784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ac:	f000 f8e6 	bl	800197c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Debug_Mode();
 80017b0:	f000 f838 	bl	8001824 <Debug_Mode>
  Buzzer_Check();
 80017b4:	f000 f85a 	bl	800186c <Buzzer_Check>
  /* USER CODE END SysTick_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}

080017bc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ARM_SW1_Pin);
 80017c0:	2010      	movs	r0, #16
 80017c2:	f001 f8c5 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017d0:	4802      	ldr	r0, [pc, #8]	@ (80017dc <TIM3_IRQHandler+0x10>)
 80017d2:	f001 ffa4 	bl	800371e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200000dc 	.word	0x200000dc

080017e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017e4:	4802      	ldr	r0, [pc, #8]	@ (80017f0 <TIM4_IRQHandler+0x10>)
 80017e6:	f001 ff9a 	bl	800371e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000124 	.word	0x20000124

080017f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <USART1_IRQHandler+0x10>)
 80017fa:	f002 fddd 	bl	80043b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2000016c 	.word	0x2000016c

08001808 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPEED_SW2_Pin);
 800180c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001810:	f001 f89e 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}

08001818 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <Debug_Mode>:
extern uint8_t debugMode;
extern uint8_t debugCounter;

extern volatile uint16_t buzzerDelay;

void Debug_Mode() {
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
	if (debugMode) {
 8001828:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <Debug_Mode+0x3c>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d015      	beq.n	800185c <Debug_Mode+0x38>
	  debugCounter = (debugCounter + 1) % DEBUG_PERIOD;
 8001830:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <Debug_Mode+0x40>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	3301      	adds	r3, #1
 8001836:	4a0c      	ldr	r2, [pc, #48]	@ (8001868 <Debug_Mode+0x44>)
 8001838:	fb82 1203 	smull	r1, r2, r2, r3
 800183c:	1111      	asrs	r1, r2, #4
 800183e:	17da      	asrs	r2, r3, #31
 8001840:	1a8a      	subs	r2, r1, r2
 8001842:	2132      	movs	r1, #50	@ 0x32
 8001844:	fb01 f202 	mul.w	r2, r1, r2
 8001848:	1a9a      	subs	r2, r3, r2
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <Debug_Mode+0x40>)
 800184e:	701a      	strb	r2, [r3, #0]
	  if (debugCounter == 0) {
 8001850:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <Debug_Mode+0x40>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <Debug_Mode+0x38>
		  Debug_Packet_Send();
 8001858:	f7ff fc1e 	bl	8001098 <Debug_Packet_Send>
	  }
	}
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200001b4 	.word	0x200001b4
 8001864:	200001b5 	.word	0x200001b5
 8001868:	51eb851f 	.word	0x51eb851f

0800186c <Buzzer_Check>:

void Buzzer_Check() {
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	if (buzzerDelay > 0) {
 8001870:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <Buzzer_Check+0x30>)
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	b29b      	uxth	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <Buzzer_Check+0x1e>
		buzzerDelay--;
 800187a:	4b08      	ldr	r3, [pc, #32]	@ (800189c <Buzzer_Check+0x30>)
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	3b01      	subs	r3, #1
 8001882:	b29a      	uxth	r2, r3
 8001884:	4b05      	ldr	r3, [pc, #20]	@ (800189c <Buzzer_Check+0x30>)
 8001886:	801a      	strh	r2, [r3, #0]
	}
	else {
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
	}
}
 8001888:	e005      	b.n	8001896 <Buzzer_Check+0x2a>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001890:	4803      	ldr	r0, [pc, #12]	@ (80018a0 <Buzzer_Check+0x34>)
 8001892:	f001 f82b 	bl	80028ec <HAL_GPIO_WritePin>
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200001ea 	.word	0x200001ea
 80018a0:	40010c00 	.word	0x40010c00

080018a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018a4:	f7ff ffb8 	bl	8001818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018a8:	480b      	ldr	r0, [pc, #44]	@ (80018d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018aa:	490c      	ldr	r1, [pc, #48]	@ (80018dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018ac:	4a0c      	ldr	r2, [pc, #48]	@ (80018e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b0:	e002      	b.n	80018b8 <LoopCopyDataInit>

080018b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b6:	3304      	adds	r3, #4

080018b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018bc:	d3f9      	bcc.n	80018b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018be:	4a09      	ldr	r2, [pc, #36]	@ (80018e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018c0:	4c09      	ldr	r4, [pc, #36]	@ (80018e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c4:	e001      	b.n	80018ca <LoopFillZerobss>

080018c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c8:	3204      	adds	r2, #4

080018ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018cc:	d3fb      	bcc.n	80018c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ce:	f003 fa8d 	bl	8004dec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018d2:	f7ff f80b 	bl	80008ec <main>
  bx lr
 80018d6:	4770      	bx	lr
  ldr r0, =_sdata
 80018d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018dc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80018e0:	08004eb8 	.word	0x08004eb8
  ldr r2, =_sbss
 80018e4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80018e8:	200001f0 	.word	0x200001f0

080018ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018ec:	e7fe      	b.n	80018ec <ADC1_2_IRQHandler>
	...

080018f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f4:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <HAL_Init+0x28>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a07      	ldr	r2, [pc, #28]	@ (8001918 <HAL_Init+0x28>)
 80018fa:	f043 0310 	orr.w	r3, r3, #16
 80018fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001900:	2003      	movs	r0, #3
 8001902:	f000 fd7b 	bl	80023fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001906:	200e      	movs	r0, #14
 8001908:	f000 f808 	bl	800191c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800190c:	f7ff fd5a 	bl	80013c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40022000 	.word	0x40022000

0800191c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001924:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <HAL_InitTick+0x54>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <HAL_InitTick+0x58>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4619      	mov	r1, r3
 800192e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001932:	fbb3 f3f1 	udiv	r3, r3, r1
 8001936:	fbb2 f3f3 	udiv	r3, r2, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fd93 	bl	8002466 <HAL_SYSTICK_Config>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e00e      	b.n	8001968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b0f      	cmp	r3, #15
 800194e:	d80a      	bhi.n	8001966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001950:	2200      	movs	r2, #0
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f000 fd5b 	bl	8002412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800195c:	4a06      	ldr	r2, [pc, #24]	@ (8001978 <HAL_InitTick+0x5c>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	e000      	b.n	8001968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000008 	.word	0x20000008
 8001974:	20000010 	.word	0x20000010
 8001978:	2000000c 	.word	0x2000000c

0800197c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001980:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <HAL_IncTick+0x1c>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4b05      	ldr	r3, [pc, #20]	@ (800199c <HAL_IncTick+0x20>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4413      	add	r3, r2
 800198c:	4a03      	ldr	r2, [pc, #12]	@ (800199c <HAL_IncTick+0x20>)
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	20000010 	.word	0x20000010
 800199c:	200001ec 	.word	0x200001ec

080019a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return uwTick;
 80019a4:	4b02      	ldr	r3, [pc, #8]	@ (80019b0 <HAL_GetTick+0x10>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	200001ec 	.word	0x200001ec

080019b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e0be      	b.n	8001b54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d109      	bne.n	80019f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff fd18 	bl	8001428 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 fbf1 	bl	80021e0 <ADC_ConversionStop_Disable>
 80019fe:	4603      	mov	r3, r0
 8001a00:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f040 8099 	bne.w	8001b42 <HAL_ADC_Init+0x18e>
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f040 8095 	bne.w	8001b42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a20:	f023 0302 	bic.w	r3, r3, #2
 8001a24:	f043 0202 	orr.w	r2, r3, #2
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a34:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7b1b      	ldrb	r3, [r3, #12]
 8001a3a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a3c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a4c:	d003      	beq.n	8001a56 <HAL_ADC_Init+0xa2>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d102      	bne.n	8001a5c <HAL_ADC_Init+0xa8>
 8001a56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a5a:	e000      	b.n	8001a5e <HAL_ADC_Init+0xaa>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7d1b      	ldrb	r3, [r3, #20]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d119      	bne.n	8001aa0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7b1b      	ldrb	r3, [r3, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d109      	bne.n	8001a88 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	035a      	lsls	r2, r3, #13
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	e00b      	b.n	8001aa0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8c:	f043 0220 	orr.w	r2, r3, #32
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	4b28      	ldr	r3, [pc, #160]	@ (8001b5c <HAL_ADC_Init+0x1a8>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	68b9      	ldr	r1, [r7, #8]
 8001ac4:	430b      	orrs	r3, r1
 8001ac6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ad0:	d003      	beq.n	8001ada <HAL_ADC_Init+0x126>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d104      	bne.n	8001ae4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	051b      	lsls	r3, r3, #20
 8001ae2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aea:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	4b18      	ldr	r3, [pc, #96]	@ (8001b60 <HAL_ADC_Init+0x1ac>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d10b      	bne.n	8001b20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b12:	f023 0303 	bic.w	r3, r3, #3
 8001b16:	f043 0201 	orr.w	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b1e:	e018      	b.n	8001b52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b24:	f023 0312 	bic.w	r3, r3, #18
 8001b28:	f043 0210 	orr.w	r2, r3, #16
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b34:	f043 0201 	orr.w	r2, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b40:	e007      	b.n	8001b52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b46:	f043 0210 	orr.w	r2, r3, #16
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	ffe1f7fd 	.word	0xffe1f7fd
 8001b60:	ff1f0efe 	.word	0xff1f0efe

08001b64 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_ADC_Start+0x1a>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e098      	b.n	8001cb0 <HAL_ADC_Start+0x14c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 fad0 	bl	800212c <ADC_Enable>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 8087 	bne.w	8001ca6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a41      	ldr	r2, [pc, #260]	@ (8001cb8 <HAL_ADC_Start+0x154>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d105      	bne.n	8001bc2 <HAL_ADC_Start+0x5e>
 8001bb6:	4b41      	ldr	r3, [pc, #260]	@ (8001cbc <HAL_ADC_Start+0x158>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d115      	bne.n	8001bee <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d026      	beq.n	8001c2a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001be4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bec:	e01d      	b.n	8001c2a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a2f      	ldr	r2, [pc, #188]	@ (8001cbc <HAL_ADC_Start+0x158>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d004      	beq.n	8001c0e <HAL_ADC_Start+0xaa>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a2b      	ldr	r2, [pc, #172]	@ (8001cb8 <HAL_ADC_Start+0x154>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d10d      	bne.n	8001c2a <HAL_ADC_Start+0xc6>
 8001c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001cbc <HAL_ADC_Start+0x158>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d007      	beq.n	8001c2a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c1e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c22:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d006      	beq.n	8001c44 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3a:	f023 0206 	bic.w	r2, r3, #6
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c42:	e002      	b.n	8001c4a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f06f 0202 	mvn.w	r2, #2
 8001c5a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001c66:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001c6a:	d113      	bne.n	8001c94 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c70:	4a11      	ldr	r2, [pc, #68]	@ (8001cb8 <HAL_ADC_Start+0x154>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d105      	bne.n	8001c82 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c76:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <HAL_ADC_Start+0x158>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d108      	bne.n	8001c94 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	e00c      	b.n	8001cae <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	e003      	b.n	8001cae <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40012800 	.word	0x40012800
 8001cbc:	40012400 	.word	0x40012400

08001cc0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_ADC_Stop+0x1a>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e01a      	b.n	8001d10 <HAL_ADC_Stop+0x50>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fa7c 	bl	80021e0 <ADC_ConversionStop_Disable>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001cfa:	f023 0301 	bic.w	r3, r3, #1
 8001cfe:	f043 0201 	orr.w	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001d2e:	f7ff fe37 	bl	80019a0 <HAL_GetTick>
 8001d32:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00b      	beq.n	8001d5a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d46:	f043 0220 	orr.w	r2, r3, #32
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e0d3      	b.n	8001f02 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d131      	bne.n	8001dcc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d12a      	bne.n	8001dcc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001d76:	e021      	b.n	8001dbc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7e:	d01d      	beq.n	8001dbc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <HAL_ADC_PollForConversion+0x7e>
 8001d86:	f7ff fe0b 	bl	80019a0 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d212      	bcs.n	8001dbc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10b      	bne.n	8001dbc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da8:	f043 0204 	orr.w	r2, r3, #4
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e0a2      	b.n	8001f02 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0d6      	beq.n	8001d78 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001dca:	e070      	b.n	8001eae <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001dcc:	4b4f      	ldr	r3, [pc, #316]	@ (8001f0c <HAL_ADC_PollForConversion+0x1f4>)
 8001dce:	681c      	ldr	r4, [r3, #0]
 8001dd0:	2002      	movs	r0, #2
 8001dd2:	f001 faa5 	bl	8003320 <HAL_RCCEx_GetPeriphCLKFreq>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6919      	ldr	r1, [r3, #16]
 8001de2:	4b4b      	ldr	r3, [pc, #300]	@ (8001f10 <HAL_ADC_PollForConversion+0x1f8>)
 8001de4:	400b      	ands	r3, r1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d118      	bne.n	8001e1c <HAL_ADC_PollForConversion+0x104>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68d9      	ldr	r1, [r3, #12]
 8001df0:	4b48      	ldr	r3, [pc, #288]	@ (8001f14 <HAL_ADC_PollForConversion+0x1fc>)
 8001df2:	400b      	ands	r3, r1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d111      	bne.n	8001e1c <HAL_ADC_PollForConversion+0x104>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6919      	ldr	r1, [r3, #16]
 8001dfe:	4b46      	ldr	r3, [pc, #280]	@ (8001f18 <HAL_ADC_PollForConversion+0x200>)
 8001e00:	400b      	ands	r3, r1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d108      	bne.n	8001e18 <HAL_ADC_PollForConversion+0x100>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68d9      	ldr	r1, [r3, #12]
 8001e0c:	4b43      	ldr	r3, [pc, #268]	@ (8001f1c <HAL_ADC_PollForConversion+0x204>)
 8001e0e:	400b      	ands	r3, r1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_ADC_PollForConversion+0x100>
 8001e14:	2314      	movs	r3, #20
 8001e16:	e020      	b.n	8001e5a <HAL_ADC_PollForConversion+0x142>
 8001e18:	2329      	movs	r3, #41	@ 0x29
 8001e1a:	e01e      	b.n	8001e5a <HAL_ADC_PollForConversion+0x142>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6919      	ldr	r1, [r3, #16]
 8001e22:	4b3d      	ldr	r3, [pc, #244]	@ (8001f18 <HAL_ADC_PollForConversion+0x200>)
 8001e24:	400b      	ands	r3, r1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d106      	bne.n	8001e38 <HAL_ADC_PollForConversion+0x120>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68d9      	ldr	r1, [r3, #12]
 8001e30:	4b3a      	ldr	r3, [pc, #232]	@ (8001f1c <HAL_ADC_PollForConversion+0x204>)
 8001e32:	400b      	ands	r3, r1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00d      	beq.n	8001e54 <HAL_ADC_PollForConversion+0x13c>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6919      	ldr	r1, [r3, #16]
 8001e3e:	4b38      	ldr	r3, [pc, #224]	@ (8001f20 <HAL_ADC_PollForConversion+0x208>)
 8001e40:	400b      	ands	r3, r1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d108      	bne.n	8001e58 <HAL_ADC_PollForConversion+0x140>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68d9      	ldr	r1, [r3, #12]
 8001e4c:	4b34      	ldr	r3, [pc, #208]	@ (8001f20 <HAL_ADC_PollForConversion+0x208>)
 8001e4e:	400b      	ands	r3, r1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_ADC_PollForConversion+0x140>
 8001e54:	2354      	movs	r3, #84	@ 0x54
 8001e56:	e000      	b.n	8001e5a <HAL_ADC_PollForConversion+0x142>
 8001e58:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001e5a:	fb02 f303 	mul.w	r3, r2, r3
 8001e5e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001e60:	e021      	b.n	8001ea6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d01a      	beq.n	8001ea0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d007      	beq.n	8001e80 <HAL_ADC_PollForConversion+0x168>
 8001e70:	f7ff fd96 	bl	80019a0 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d20f      	bcs.n	8001ea0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d90b      	bls.n	8001ea0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8c:	f043 0204 	orr.w	r2, r3, #4
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e030      	b.n	8001f02 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d8d9      	bhi.n	8001e62 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f06f 0212 	mvn.w	r2, #18
 8001eb6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ebc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001ece:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001ed2:	d115      	bne.n	8001f00 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d111      	bne.n	8001f00 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d105      	bne.n	8001f00 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef8:	f043 0201 	orr.w	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	371c      	adds	r7, #28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd90      	pop	{r4, r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	24924924 	.word	0x24924924
 8001f14:	00924924 	.word	0x00924924
 8001f18:	12492492 	.word	0x12492492
 8001f1c:	00492492 	.word	0x00492492
 8001f20:	00249249 	.word	0x00249249

08001f24 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x20>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e0dc      	b.n	8002116 <HAL_ADC_ConfigChannel+0x1da>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b06      	cmp	r3, #6
 8001f6a:	d81c      	bhi.n	8001fa6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3b05      	subs	r3, #5
 8001f7e:	221f      	movs	r2, #31
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	4019      	ands	r1, r3
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	3b05      	subs	r3, #5
 8001f98:	fa00 f203 	lsl.w	r2, r0, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fa4:	e03c      	b.n	8002020 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b0c      	cmp	r3, #12
 8001fac:	d81c      	bhi.n	8001fe8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3b23      	subs	r3, #35	@ 0x23
 8001fc0:	221f      	movs	r2, #31
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	4019      	ands	r1, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3b23      	subs	r3, #35	@ 0x23
 8001fda:	fa00 f203 	lsl.w	r2, r0, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fe6:	e01b      	b.n	8002020 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3b41      	subs	r3, #65	@ 0x41
 8001ffa:	221f      	movs	r2, #31
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	4019      	ands	r1, r3
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	6818      	ldr	r0, [r3, #0]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	3b41      	subs	r3, #65	@ 0x41
 8002014:	fa00 f203 	lsl.w	r2, r0, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b09      	cmp	r3, #9
 8002026:	d91c      	bls.n	8002062 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68d9      	ldr	r1, [r3, #12]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	3b1e      	subs	r3, #30
 800203a:	2207      	movs	r2, #7
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	4019      	ands	r1, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	6898      	ldr	r0, [r3, #8]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	3b1e      	subs	r3, #30
 8002054:	fa00 f203 	lsl.w	r2, r0, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	60da      	str	r2, [r3, #12]
 8002060:	e019      	b.n	8002096 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6919      	ldr	r1, [r3, #16]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4613      	mov	r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4413      	add	r3, r2
 8002072:	2207      	movs	r2, #7
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	4019      	ands	r1, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	6898      	ldr	r0, [r3, #8]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	fa00 f203 	lsl.w	r2, r0, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b10      	cmp	r3, #16
 800209c:	d003      	beq.n	80020a6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020a2:	2b11      	cmp	r3, #17
 80020a4:	d132      	bne.n	800210c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002120 <HAL_ADC_ConfigChannel+0x1e4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d125      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d126      	bne.n	800210c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80020cc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b10      	cmp	r3, #16
 80020d4:	d11a      	bne.n	800210c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020d6:	4b13      	ldr	r3, [pc, #76]	@ (8002124 <HAL_ADC_ConfigChannel+0x1e8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a13      	ldr	r2, [pc, #76]	@ (8002128 <HAL_ADC_ConfigChannel+0x1ec>)
 80020dc:	fba2 2303 	umull	r2, r3, r2, r3
 80020e0:	0c9a      	lsrs	r2, r3, #18
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020ec:	e002      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f9      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x1b2>
 80020fa:	e007      	b.n	800210c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002100:	f043 0220 	orr.w	r2, r3, #32
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002114:	7bfb      	ldrb	r3, [r7, #15]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	40012400 	.word	0x40012400
 8002124:	20000008 	.word	0x20000008
 8002128:	431bde83 	.word	0x431bde83

0800212c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b01      	cmp	r3, #1
 8002148:	d040      	beq.n	80021cc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800215a:	4b1f      	ldr	r3, [pc, #124]	@ (80021d8 <ADC_Enable+0xac>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a1f      	ldr	r2, [pc, #124]	@ (80021dc <ADC_Enable+0xb0>)
 8002160:	fba2 2303 	umull	r2, r3, r2, r3
 8002164:	0c9b      	lsrs	r3, r3, #18
 8002166:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002168:	e002      	b.n	8002170 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	3b01      	subs	r3, #1
 800216e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f9      	bne.n	800216a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002176:	f7ff fc13 	bl	80019a0 <HAL_GetTick>
 800217a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800217c:	e01f      	b.n	80021be <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800217e:	f7ff fc0f 	bl	80019a0 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d918      	bls.n	80021be <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b01      	cmp	r3, #1
 8002198:	d011      	beq.n	80021be <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219e:	f043 0210 	orr.w	r2, r3, #16
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021aa:	f043 0201 	orr.w	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e007      	b.n	80021ce <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d1d8      	bne.n	800217e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000008 	.word	0x20000008
 80021dc:	431bde83 	.word	0x431bde83

080021e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d12e      	bne.n	8002258 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0201 	bic.w	r2, r2, #1
 8002208:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800220a:	f7ff fbc9 	bl	80019a0 <HAL_GetTick>
 800220e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002210:	e01b      	b.n	800224a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002212:	f7ff fbc5 	bl	80019a0 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d914      	bls.n	800224a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b01      	cmp	r3, #1
 800222c:	d10d      	bne.n	800224a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002232:	f043 0210 	orr.w	r2, r3, #16
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223e:	f043 0201 	orr.w	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e007      	b.n	800225a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b01      	cmp	r3, #1
 8002256:	d0dc      	beq.n	8002212 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002274:	4b0c      	ldr	r3, [pc, #48]	@ (80022a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002280:	4013      	ands	r3, r2
 8002282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800228c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002296:	4a04      	ldr	r2, [pc, #16]	@ (80022a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	60d3      	str	r3, [r2, #12]
}
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b0:	4b04      	ldr	r3, [pc, #16]	@ (80022c4 <__NVIC_GetPriorityGrouping+0x18>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	f003 0307 	and.w	r3, r3, #7
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	db0b      	blt.n	80022f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	f003 021f 	and.w	r2, r3, #31
 80022e0:	4906      	ldr	r1, [pc, #24]	@ (80022fc <__NVIC_EnableIRQ+0x34>)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	2001      	movs	r0, #1
 80022ea:	fa00 f202 	lsl.w	r2, r0, r2
 80022ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	e000e100 	.word	0xe000e100

08002300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	db0a      	blt.n	800232a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	490c      	ldr	r1, [pc, #48]	@ (800234c <__NVIC_SetPriority+0x4c>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	440b      	add	r3, r1
 8002324:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002328:	e00a      	b.n	8002340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4908      	ldr	r1, [pc, #32]	@ (8002350 <__NVIC_SetPriority+0x50>)
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	3b04      	subs	r3, #4
 8002338:	0112      	lsls	r2, r2, #4
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	440b      	add	r3, r1
 800233e:	761a      	strb	r2, [r3, #24]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000e100 	.word	0xe000e100
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	@ 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f1c3 0307 	rsb	r3, r3, #7
 800236e:	2b04      	cmp	r3, #4
 8002370:	bf28      	it	cs
 8002372:	2304      	movcs	r3, #4
 8002374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3304      	adds	r3, #4
 800237a:	2b06      	cmp	r3, #6
 800237c:	d902      	bls.n	8002384 <NVIC_EncodePriority+0x30>
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3b03      	subs	r3, #3
 8002382:	e000      	b.n	8002386 <NVIC_EncodePriority+0x32>
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	f04f 32ff 	mov.w	r2, #4294967295
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	401a      	ands	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800239c:	f04f 31ff 	mov.w	r1, #4294967295
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43d9      	mvns	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	4313      	orrs	r3, r2
         );
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3724      	adds	r7, #36	@ 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023c8:	d301      	bcc.n	80023ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ca:	2301      	movs	r3, #1
 80023cc:	e00f      	b.n	80023ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ce:	4a0a      	ldr	r2, [pc, #40]	@ (80023f8 <SysTick_Config+0x40>)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023d6:	210f      	movs	r1, #15
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295
 80023dc:	f7ff ff90 	bl	8002300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e0:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <SysTick_Config+0x40>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023e6:	4b04      	ldr	r3, [pc, #16]	@ (80023f8 <SysTick_Config+0x40>)
 80023e8:	2207      	movs	r2, #7
 80023ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	e000e010 	.word	0xe000e010

080023fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff ff2d 	bl	8002264 <__NVIC_SetPriorityGrouping>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002412:	b580      	push	{r7, lr}
 8002414:	b086      	sub	sp, #24
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002424:	f7ff ff42 	bl	80022ac <__NVIC_GetPriorityGrouping>
 8002428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	6978      	ldr	r0, [r7, #20]
 8002430:	f7ff ff90 	bl	8002354 <NVIC_EncodePriority>
 8002434:	4602      	mov	r2, r0
 8002436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff5f 	bl	8002300 <__NVIC_SetPriority>
}
 8002442:	bf00      	nop
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff35 	bl	80022c8 <__NVIC_EnableIRQ>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff ffa2 	bl	80023b8 <SysTick_Config>
 8002474:	4603      	mov	r3, r0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800247e:	b480      	push	{r7}
 8002480:	b085      	sub	sp, #20
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d008      	beq.n	80024a8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2204      	movs	r2, #4
 800249a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e020      	b.n	80024ea <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 020e 	bic.w	r2, r2, #14
 80024b6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d0:	2101      	movs	r1, #1
 80024d2:	fa01 f202 	lsl.w	r2, r1, r2
 80024d6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d005      	beq.n	8002518 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2204      	movs	r2, #4
 8002510:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	73fb      	strb	r3, [r7, #15]
 8002516:	e051      	b.n	80025bc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 020e 	bic.w	r2, r2, #14
 8002526:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0201 	bic.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a22      	ldr	r2, [pc, #136]	@ (80025c8 <HAL_DMA_Abort_IT+0xd4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d029      	beq.n	8002596 <HAL_DMA_Abort_IT+0xa2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a21      	ldr	r2, [pc, #132]	@ (80025cc <HAL_DMA_Abort_IT+0xd8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d022      	beq.n	8002592 <HAL_DMA_Abort_IT+0x9e>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1f      	ldr	r2, [pc, #124]	@ (80025d0 <HAL_DMA_Abort_IT+0xdc>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01a      	beq.n	800258c <HAL_DMA_Abort_IT+0x98>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1e      	ldr	r2, [pc, #120]	@ (80025d4 <HAL_DMA_Abort_IT+0xe0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d012      	beq.n	8002586 <HAL_DMA_Abort_IT+0x92>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1c      	ldr	r2, [pc, #112]	@ (80025d8 <HAL_DMA_Abort_IT+0xe4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00a      	beq.n	8002580 <HAL_DMA_Abort_IT+0x8c>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1b      	ldr	r2, [pc, #108]	@ (80025dc <HAL_DMA_Abort_IT+0xe8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d102      	bne.n	800257a <HAL_DMA_Abort_IT+0x86>
 8002574:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002578:	e00e      	b.n	8002598 <HAL_DMA_Abort_IT+0xa4>
 800257a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800257e:	e00b      	b.n	8002598 <HAL_DMA_Abort_IT+0xa4>
 8002580:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002584:	e008      	b.n	8002598 <HAL_DMA_Abort_IT+0xa4>
 8002586:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800258a:	e005      	b.n	8002598 <HAL_DMA_Abort_IT+0xa4>
 800258c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002590:	e002      	b.n	8002598 <HAL_DMA_Abort_IT+0xa4>
 8002592:	2310      	movs	r3, #16
 8002594:	e000      	b.n	8002598 <HAL_DMA_Abort_IT+0xa4>
 8002596:	2301      	movs	r3, #1
 8002598:	4a11      	ldr	r2, [pc, #68]	@ (80025e0 <HAL_DMA_Abort_IT+0xec>)
 800259a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	4798      	blx	r3
    } 
  }
  return status;
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40020008 	.word	0x40020008
 80025cc:	4002001c 	.word	0x4002001c
 80025d0:	40020030 	.word	0x40020030
 80025d4:	40020044 	.word	0x40020044
 80025d8:	40020058 	.word	0x40020058
 80025dc:	4002006c 	.word	0x4002006c
 80025e0:	40020000 	.word	0x40020000

080025e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b08b      	sub	sp, #44	@ 0x2c
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025f2:	2300      	movs	r3, #0
 80025f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f6:	e169      	b.n	80028cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025f8:	2201      	movs	r2, #1
 80025fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	69fa      	ldr	r2, [r7, #28]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	429a      	cmp	r2, r3
 8002612:	f040 8158 	bne.w	80028c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4a9a      	ldr	r2, [pc, #616]	@ (8002884 <HAL_GPIO_Init+0x2a0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d05e      	beq.n	80026de <HAL_GPIO_Init+0xfa>
 8002620:	4a98      	ldr	r2, [pc, #608]	@ (8002884 <HAL_GPIO_Init+0x2a0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d875      	bhi.n	8002712 <HAL_GPIO_Init+0x12e>
 8002626:	4a98      	ldr	r2, [pc, #608]	@ (8002888 <HAL_GPIO_Init+0x2a4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d058      	beq.n	80026de <HAL_GPIO_Init+0xfa>
 800262c:	4a96      	ldr	r2, [pc, #600]	@ (8002888 <HAL_GPIO_Init+0x2a4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d86f      	bhi.n	8002712 <HAL_GPIO_Init+0x12e>
 8002632:	4a96      	ldr	r2, [pc, #600]	@ (800288c <HAL_GPIO_Init+0x2a8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d052      	beq.n	80026de <HAL_GPIO_Init+0xfa>
 8002638:	4a94      	ldr	r2, [pc, #592]	@ (800288c <HAL_GPIO_Init+0x2a8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d869      	bhi.n	8002712 <HAL_GPIO_Init+0x12e>
 800263e:	4a94      	ldr	r2, [pc, #592]	@ (8002890 <HAL_GPIO_Init+0x2ac>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d04c      	beq.n	80026de <HAL_GPIO_Init+0xfa>
 8002644:	4a92      	ldr	r2, [pc, #584]	@ (8002890 <HAL_GPIO_Init+0x2ac>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d863      	bhi.n	8002712 <HAL_GPIO_Init+0x12e>
 800264a:	4a92      	ldr	r2, [pc, #584]	@ (8002894 <HAL_GPIO_Init+0x2b0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d046      	beq.n	80026de <HAL_GPIO_Init+0xfa>
 8002650:	4a90      	ldr	r2, [pc, #576]	@ (8002894 <HAL_GPIO_Init+0x2b0>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d85d      	bhi.n	8002712 <HAL_GPIO_Init+0x12e>
 8002656:	2b12      	cmp	r3, #18
 8002658:	d82a      	bhi.n	80026b0 <HAL_GPIO_Init+0xcc>
 800265a:	2b12      	cmp	r3, #18
 800265c:	d859      	bhi.n	8002712 <HAL_GPIO_Init+0x12e>
 800265e:	a201      	add	r2, pc, #4	@ (adr r2, 8002664 <HAL_GPIO_Init+0x80>)
 8002660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002664:	080026df 	.word	0x080026df
 8002668:	080026b9 	.word	0x080026b9
 800266c:	080026cb 	.word	0x080026cb
 8002670:	0800270d 	.word	0x0800270d
 8002674:	08002713 	.word	0x08002713
 8002678:	08002713 	.word	0x08002713
 800267c:	08002713 	.word	0x08002713
 8002680:	08002713 	.word	0x08002713
 8002684:	08002713 	.word	0x08002713
 8002688:	08002713 	.word	0x08002713
 800268c:	08002713 	.word	0x08002713
 8002690:	08002713 	.word	0x08002713
 8002694:	08002713 	.word	0x08002713
 8002698:	08002713 	.word	0x08002713
 800269c:	08002713 	.word	0x08002713
 80026a0:	08002713 	.word	0x08002713
 80026a4:	08002713 	.word	0x08002713
 80026a8:	080026c1 	.word	0x080026c1
 80026ac:	080026d5 	.word	0x080026d5
 80026b0:	4a79      	ldr	r2, [pc, #484]	@ (8002898 <HAL_GPIO_Init+0x2b4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d013      	beq.n	80026de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026b6:	e02c      	b.n	8002712 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	623b      	str	r3, [r7, #32]
          break;
 80026be:	e029      	b.n	8002714 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	3304      	adds	r3, #4
 80026c6:	623b      	str	r3, [r7, #32]
          break;
 80026c8:	e024      	b.n	8002714 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	3308      	adds	r3, #8
 80026d0:	623b      	str	r3, [r7, #32]
          break;
 80026d2:	e01f      	b.n	8002714 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	330c      	adds	r3, #12
 80026da:	623b      	str	r3, [r7, #32]
          break;
 80026dc:	e01a      	b.n	8002714 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d102      	bne.n	80026ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026e6:	2304      	movs	r3, #4
 80026e8:	623b      	str	r3, [r7, #32]
          break;
 80026ea:	e013      	b.n	8002714 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d105      	bne.n	8002700 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026f4:	2308      	movs	r3, #8
 80026f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69fa      	ldr	r2, [r7, #28]
 80026fc:	611a      	str	r2, [r3, #16]
          break;
 80026fe:	e009      	b.n	8002714 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002700:	2308      	movs	r3, #8
 8002702:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	615a      	str	r2, [r3, #20]
          break;
 800270a:	e003      	b.n	8002714 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800270c:	2300      	movs	r3, #0
 800270e:	623b      	str	r3, [r7, #32]
          break;
 8002710:	e000      	b.n	8002714 <HAL_GPIO_Init+0x130>
          break;
 8002712:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	2bff      	cmp	r3, #255	@ 0xff
 8002718:	d801      	bhi.n	800271e <HAL_GPIO_Init+0x13a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	e001      	b.n	8002722 <HAL_GPIO_Init+0x13e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3304      	adds	r3, #4
 8002722:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	2bff      	cmp	r3, #255	@ 0xff
 8002728:	d802      	bhi.n	8002730 <HAL_GPIO_Init+0x14c>
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	e002      	b.n	8002736 <HAL_GPIO_Init+0x152>
 8002730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002732:	3b08      	subs	r3, #8
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	210f      	movs	r1, #15
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	fa01 f303 	lsl.w	r3, r1, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	401a      	ands	r2, r3
 8002748:	6a39      	ldr	r1, [r7, #32]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	fa01 f303 	lsl.w	r3, r1, r3
 8002750:	431a      	orrs	r2, r3
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 80b1 	beq.w	80028c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002764:	4b4d      	ldr	r3, [pc, #308]	@ (800289c <HAL_GPIO_Init+0x2b8>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	4a4c      	ldr	r2, [pc, #304]	@ (800289c <HAL_GPIO_Init+0x2b8>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6193      	str	r3, [r2, #24]
 8002770:	4b4a      	ldr	r3, [pc, #296]	@ (800289c <HAL_GPIO_Init+0x2b8>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800277c:	4a48      	ldr	r2, [pc, #288]	@ (80028a0 <HAL_GPIO_Init+0x2bc>)
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	089b      	lsrs	r3, r3, #2
 8002782:	3302      	adds	r3, #2
 8002784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002788:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	220f      	movs	r2, #15
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4013      	ands	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a40      	ldr	r2, [pc, #256]	@ (80028a4 <HAL_GPIO_Init+0x2c0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d013      	beq.n	80027d0 <HAL_GPIO_Init+0x1ec>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a3f      	ldr	r2, [pc, #252]	@ (80028a8 <HAL_GPIO_Init+0x2c4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d00d      	beq.n	80027cc <HAL_GPIO_Init+0x1e8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a3e      	ldr	r2, [pc, #248]	@ (80028ac <HAL_GPIO_Init+0x2c8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d007      	beq.n	80027c8 <HAL_GPIO_Init+0x1e4>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a3d      	ldr	r2, [pc, #244]	@ (80028b0 <HAL_GPIO_Init+0x2cc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d101      	bne.n	80027c4 <HAL_GPIO_Init+0x1e0>
 80027c0:	2303      	movs	r3, #3
 80027c2:	e006      	b.n	80027d2 <HAL_GPIO_Init+0x1ee>
 80027c4:	2304      	movs	r3, #4
 80027c6:	e004      	b.n	80027d2 <HAL_GPIO_Init+0x1ee>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e002      	b.n	80027d2 <HAL_GPIO_Init+0x1ee>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <HAL_GPIO_Init+0x1ee>
 80027d0:	2300      	movs	r3, #0
 80027d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027d4:	f002 0203 	and.w	r2, r2, #3
 80027d8:	0092      	lsls	r2, r2, #2
 80027da:	4093      	lsls	r3, r2
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027e2:	492f      	ldr	r1, [pc, #188]	@ (80028a0 <HAL_GPIO_Init+0x2bc>)
 80027e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e6:	089b      	lsrs	r3, r3, #2
 80027e8:	3302      	adds	r3, #2
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d006      	beq.n	800280a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027fc:	4b2d      	ldr	r3, [pc, #180]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	492c      	ldr	r1, [pc, #176]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	608b      	str	r3, [r1, #8]
 8002808:	e006      	b.n	8002818 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800280a:	4b2a      	ldr	r3, [pc, #168]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	43db      	mvns	r3, r3
 8002812:	4928      	ldr	r1, [pc, #160]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 8002814:	4013      	ands	r3, r2
 8002816:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d006      	beq.n	8002832 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002824:	4b23      	ldr	r3, [pc, #140]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	4922      	ldr	r1, [pc, #136]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	60cb      	str	r3, [r1, #12]
 8002830:	e006      	b.n	8002840 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002832:	4b20      	ldr	r3, [pc, #128]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	43db      	mvns	r3, r3
 800283a:	491e      	ldr	r1, [pc, #120]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 800283c:	4013      	ands	r3, r2
 800283e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d006      	beq.n	800285a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800284c:	4b19      	ldr	r3, [pc, #100]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	4918      	ldr	r1, [pc, #96]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
 8002858:	e006      	b.n	8002868 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800285a:	4b16      	ldr	r3, [pc, #88]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	43db      	mvns	r3, r3
 8002862:	4914      	ldr	r1, [pc, #80]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 8002864:	4013      	ands	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d021      	beq.n	80028b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002874:	4b0f      	ldr	r3, [pc, #60]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	490e      	ldr	r1, [pc, #56]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	600b      	str	r3, [r1, #0]
 8002880:	e021      	b.n	80028c6 <HAL_GPIO_Init+0x2e2>
 8002882:	bf00      	nop
 8002884:	10320000 	.word	0x10320000
 8002888:	10310000 	.word	0x10310000
 800288c:	10220000 	.word	0x10220000
 8002890:	10210000 	.word	0x10210000
 8002894:	10120000 	.word	0x10120000
 8002898:	10110000 	.word	0x10110000
 800289c:	40021000 	.word	0x40021000
 80028a0:	40010000 	.word	0x40010000
 80028a4:	40010800 	.word	0x40010800
 80028a8:	40010c00 	.word	0x40010c00
 80028ac:	40011000 	.word	0x40011000
 80028b0:	40011400 	.word	0x40011400
 80028b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028b8:	4b0b      	ldr	r3, [pc, #44]	@ (80028e8 <HAL_GPIO_Init+0x304>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	43db      	mvns	r3, r3
 80028c0:	4909      	ldr	r1, [pc, #36]	@ (80028e8 <HAL_GPIO_Init+0x304>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	3301      	adds	r3, #1
 80028ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	fa22 f303 	lsr.w	r3, r2, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f47f ae8e 	bne.w	80025f8 <HAL_GPIO_Init+0x14>
  }
}
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
 80028e0:	372c      	adds	r7, #44	@ 0x2c
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr
 80028e8:	40010400 	.word	0x40010400

080028ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	807b      	strh	r3, [r7, #2]
 80028f8:	4613      	mov	r3, r2
 80028fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028fc:	787b      	ldrb	r3, [r7, #1]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002902:	887a      	ldrh	r2, [r7, #2]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002908:	e003      	b.n	8002912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800290a:	887b      	ldrh	r3, [r7, #2]
 800290c:	041a      	lsls	r2, r3, #16
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	611a      	str	r2, [r3, #16]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800292e:	887a      	ldrh	r2, [r7, #2]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4013      	ands	r3, r2
 8002934:	041a      	lsls	r2, r3, #16
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	43d9      	mvns	r1, r3
 800293a:	887b      	ldrh	r3, [r7, #2]
 800293c:	400b      	ands	r3, r1
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	611a      	str	r2, [r3, #16]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr
	...

08002950 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800295a:	4b08      	ldr	r3, [pc, #32]	@ (800297c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800295c:	695a      	ldr	r2, [r3, #20]
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	4013      	ands	r3, r2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d006      	beq.n	8002974 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002966:	4a05      	ldr	r2, [pc, #20]	@ (800297c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	4618      	mov	r0, r3
 8002970:	f000 f806 	bl	8002980 <HAL_GPIO_EXTI_Callback>
  }
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40010400 	.word	0x40010400

08002980 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e272      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8087 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b4:	4b92      	ldr	r3, [pc, #584]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d00c      	beq.n	80029da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029c0:	4b8f      	ldr	r3, [pc, #572]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d112      	bne.n	80029f2 <HAL_RCC_OscConfig+0x5e>
 80029cc:	4b8c      	ldr	r3, [pc, #560]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d8:	d10b      	bne.n	80029f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029da:	4b89      	ldr	r3, [pc, #548]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d06c      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x12c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d168      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e24c      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029fa:	d106      	bne.n	8002a0a <HAL_RCC_OscConfig+0x76>
 80029fc:	4b80      	ldr	r3, [pc, #512]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a7f      	ldr	r2, [pc, #508]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	e02e      	b.n	8002a68 <HAL_RCC_OscConfig+0xd4>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x98>
 8002a12:	4b7b      	ldr	r3, [pc, #492]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a7a      	ldr	r2, [pc, #488]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	4b78      	ldr	r3, [pc, #480]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a77      	ldr	r2, [pc, #476]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e01d      	b.n	8002a68 <HAL_RCC_OscConfig+0xd4>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0xbc>
 8002a36:	4b72      	ldr	r3, [pc, #456]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a71      	ldr	r2, [pc, #452]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	4b6f      	ldr	r3, [pc, #444]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a6e      	ldr	r2, [pc, #440]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCC_OscConfig+0xd4>
 8002a50:	4b6b      	ldr	r3, [pc, #428]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a6a      	ldr	r2, [pc, #424]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	4b68      	ldr	r3, [pc, #416]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a67      	ldr	r2, [pc, #412]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d013      	beq.n	8002a98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7fe ff96 	bl	80019a0 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a78:	f7fe ff92 	bl	80019a0 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	@ 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e200      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0xe4>
 8002a96:	e014      	b.n	8002ac2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7fe ff82 	bl	80019a0 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa0:	f7fe ff7e 	bl	80019a0 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	@ 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e1ec      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	4b53      	ldr	r3, [pc, #332]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x10c>
 8002abe:	e000      	b.n	8002ac2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d063      	beq.n	8002b96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ace:	4b4c      	ldr	r3, [pc, #304]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ada:	4b49      	ldr	r3, [pc, #292]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d11c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x18c>
 8002ae6:	4b46      	ldr	r3, [pc, #280]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d116      	bne.n	8002b20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	4b43      	ldr	r3, [pc, #268]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_RCC_OscConfig+0x176>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e1c0      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4939      	ldr	r1, [pc, #228]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1e:	e03a      	b.n	8002b96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b28:	4b36      	ldr	r3, [pc, #216]	@ (8002c04 <HAL_RCC_OscConfig+0x270>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7fe ff37 	bl	80019a0 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b36:	f7fe ff33 	bl	80019a0 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e1a1      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	4b2d      	ldr	r3, [pc, #180]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b54:	4b2a      	ldr	r3, [pc, #168]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4927      	ldr	r1, [pc, #156]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]
 8002b68:	e015      	b.n	8002b96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6a:	4b26      	ldr	r3, [pc, #152]	@ (8002c04 <HAL_RCC_OscConfig+0x270>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe ff16 	bl	80019a0 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b78:	f7fe ff12 	bl	80019a0 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e180      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d03a      	beq.n	8002c18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d019      	beq.n	8002bde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002baa:	4b17      	ldr	r3, [pc, #92]	@ (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb0:	f7fe fef6 	bl	80019a0 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb8:	f7fe fef2 	bl	80019a0 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e160      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	4b0d      	ldr	r3, [pc, #52]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	f000 face 	bl	8003178 <RCC_Delay>
 8002bdc:	e01c      	b.n	8002c18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bde:	4b0a      	ldr	r3, [pc, #40]	@ (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be4:	f7fe fedc 	bl	80019a0 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bea:	e00f      	b.n	8002c0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bec:	f7fe fed8 	bl	80019a0 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d908      	bls.n	8002c0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e146      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000
 8002c04:	42420000 	.word	0x42420000
 8002c08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c0c:	4b92      	ldr	r3, [pc, #584]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e9      	bne.n	8002bec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80a6 	beq.w	8002d72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c26:	2300      	movs	r3, #0
 8002c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2a:	4b8b      	ldr	r3, [pc, #556]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10d      	bne.n	8002c52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c36:	4b88      	ldr	r3, [pc, #544]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	4a87      	ldr	r2, [pc, #540]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c40:	61d3      	str	r3, [r2, #28]
 8002c42:	4b85      	ldr	r3, [pc, #532]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c52:	4b82      	ldr	r3, [pc, #520]	@ (8002e5c <HAL_RCC_OscConfig+0x4c8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d118      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e5c <HAL_RCC_OscConfig+0x4c8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a7e      	ldr	r2, [pc, #504]	@ (8002e5c <HAL_RCC_OscConfig+0x4c8>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6a:	f7fe fe99 	bl	80019a0 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c72:	f7fe fe95 	bl	80019a0 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b64      	cmp	r3, #100	@ 0x64
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e103      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	4b75      	ldr	r3, [pc, #468]	@ (8002e5c <HAL_RCC_OscConfig+0x4c8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x312>
 8002c98:	4b6f      	ldr	r3, [pc, #444]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4a6e      	ldr	r2, [pc, #440]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6213      	str	r3, [r2, #32]
 8002ca4:	e02d      	b.n	8002d02 <HAL_RCC_OscConfig+0x36e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x334>
 8002cae:	4b6a      	ldr	r3, [pc, #424]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	4a69      	ldr	r2, [pc, #420]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	6213      	str	r3, [r2, #32]
 8002cba:	4b67      	ldr	r3, [pc, #412]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	4a66      	ldr	r2, [pc, #408]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	f023 0304 	bic.w	r3, r3, #4
 8002cc4:	6213      	str	r3, [r2, #32]
 8002cc6:	e01c      	b.n	8002d02 <HAL_RCC_OscConfig+0x36e>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b05      	cmp	r3, #5
 8002cce:	d10c      	bne.n	8002cea <HAL_RCC_OscConfig+0x356>
 8002cd0:	4b61      	ldr	r3, [pc, #388]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	4a60      	ldr	r2, [pc, #384]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cd6:	f043 0304 	orr.w	r3, r3, #4
 8002cda:	6213      	str	r3, [r2, #32]
 8002cdc:	4b5e      	ldr	r3, [pc, #376]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	4a5d      	ldr	r2, [pc, #372]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6213      	str	r3, [r2, #32]
 8002ce8:	e00b      	b.n	8002d02 <HAL_RCC_OscConfig+0x36e>
 8002cea:	4b5b      	ldr	r3, [pc, #364]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	4a5a      	ldr	r2, [pc, #360]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	6213      	str	r3, [r2, #32]
 8002cf6:	4b58      	ldr	r3, [pc, #352]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	4a57      	ldr	r2, [pc, #348]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	f023 0304 	bic.w	r3, r3, #4
 8002d00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d015      	beq.n	8002d36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0a:	f7fe fe49 	bl	80019a0 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d10:	e00a      	b.n	8002d28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f7fe fe45 	bl	80019a0 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e0b1      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	4b4b      	ldr	r3, [pc, #300]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0ee      	beq.n	8002d12 <HAL_RCC_OscConfig+0x37e>
 8002d34:	e014      	b.n	8002d60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d36:	f7fe fe33 	bl	80019a0 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3c:	e00a      	b.n	8002d54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3e:	f7fe fe2f 	bl	80019a0 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e09b      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d54:	4b40      	ldr	r3, [pc, #256]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1ee      	bne.n	8002d3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d60:	7dfb      	ldrb	r3, [r7, #23]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d105      	bne.n	8002d72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d66:	4b3c      	ldr	r3, [pc, #240]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	4a3b      	ldr	r2, [pc, #236]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 8087 	beq.w	8002e8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d7c:	4b36      	ldr	r3, [pc, #216]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d061      	beq.n	8002e4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d146      	bne.n	8002e1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d90:	4b33      	ldr	r3, [pc, #204]	@ (8002e60 <HAL_RCC_OscConfig+0x4cc>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d96:	f7fe fe03 	bl	80019a0 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9e:	f7fe fdff 	bl	80019a0 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e06d      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db0:	4b29      	ldr	r3, [pc, #164]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f0      	bne.n	8002d9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dc4:	d108      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dc6:	4b24      	ldr	r3, [pc, #144]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	4921      	ldr	r1, [pc, #132]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a19      	ldr	r1, [r3, #32]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	430b      	orrs	r3, r1
 8002dea:	491b      	ldr	r1, [pc, #108]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e60 <HAL_RCC_OscConfig+0x4cc>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df6:	f7fe fdd3 	bl	80019a0 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7fe fdcf 	bl	80019a0 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e03d      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e10:	4b11      	ldr	r3, [pc, #68]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x46a>
 8002e1c:	e035      	b.n	8002e8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1e:	4b10      	ldr	r3, [pc, #64]	@ (8002e60 <HAL_RCC_OscConfig+0x4cc>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fe fdbc 	bl	80019a0 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe fdb8 	bl	80019a0 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e026      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3e:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x498>
 8002e4a:	e01e      	b.n	8002e8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e019      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e64:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <HAL_RCC_OscConfig+0x500>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d106      	bne.n	8002e86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000

08002e98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0d0      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eac:	4b6a      	ldr	r3, [pc, #424]	@ (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d910      	bls.n	8002edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eba:	4b67      	ldr	r3, [pc, #412]	@ (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 0207 	bic.w	r2, r3, #7
 8002ec2:	4965      	ldr	r1, [pc, #404]	@ (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eca:	4b63      	ldr	r3, [pc, #396]	@ (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0b8      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d020      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ef4:	4b59      	ldr	r3, [pc, #356]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4a58      	ldr	r2, [pc, #352]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002efe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f0c:	4b53      	ldr	r3, [pc, #332]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a52      	ldr	r2, [pc, #328]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f18:	4b50      	ldr	r3, [pc, #320]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	494d      	ldr	r1, [pc, #308]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d040      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	4b47      	ldr	r3, [pc, #284]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d115      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e07f      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f56:	4b41      	ldr	r3, [pc, #260]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e073      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f66:	4b3d      	ldr	r3, [pc, #244]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e06b      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f76:	4b39      	ldr	r3, [pc, #228]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f023 0203 	bic.w	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4936      	ldr	r1, [pc, #216]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f88:	f7fe fd0a 	bl	80019a0 <HAL_GetTick>
 8002f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	e00a      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f90:	f7fe fd06 	bl	80019a0 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e053      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 020c 	and.w	r2, r3, #12
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d1eb      	bne.n	8002f90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b27      	ldr	r3, [pc, #156]	@ (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d210      	bcs.n	8002fe8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4b24      	ldr	r3, [pc, #144]	@ (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 0207 	bic.w	r2, r3, #7
 8002fce:	4922      	ldr	r1, [pc, #136]	@ (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd6:	4b20      	ldr	r3, [pc, #128]	@ (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e032      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff4:	4b19      	ldr	r3, [pc, #100]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4916      	ldr	r1, [pc, #88]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	4313      	orrs	r3, r2
 8003004:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d009      	beq.n	8003026 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003012:	4b12      	ldr	r3, [pc, #72]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	490e      	ldr	r1, [pc, #56]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8003022:	4313      	orrs	r3, r2
 8003024:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003026:	f000 f821 	bl	800306c <HAL_RCC_GetSysClockFreq>
 800302a:	4602      	mov	r2, r0
 800302c:	4b0b      	ldr	r3, [pc, #44]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	490a      	ldr	r1, [pc, #40]	@ (8003060 <HAL_RCC_ClockConfig+0x1c8>)
 8003038:	5ccb      	ldrb	r3, [r1, r3]
 800303a:	fa22 f303 	lsr.w	r3, r2, r3
 800303e:	4a09      	ldr	r2, [pc, #36]	@ (8003064 <HAL_RCC_ClockConfig+0x1cc>)
 8003040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003042:	4b09      	ldr	r3, [pc, #36]	@ (8003068 <HAL_RCC_ClockConfig+0x1d0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe fc68 	bl	800191c <HAL_InitTick>

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40022000 	.word	0x40022000
 800305c:	40021000 	.word	0x40021000
 8003060:	08004e70 	.word	0x08004e70
 8003064:	20000008 	.word	0x20000008
 8003068:	2000000c 	.word	0x2000000c

0800306c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	2300      	movs	r3, #0
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003086:	4b1e      	ldr	r3, [pc, #120]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x94>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b04      	cmp	r3, #4
 8003094:	d002      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x30>
 8003096:	2b08      	cmp	r3, #8
 8003098:	d003      	beq.n	80030a2 <HAL_RCC_GetSysClockFreq+0x36>
 800309a:	e027      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800309c:	4b19      	ldr	r3, [pc, #100]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x98>)
 800309e:	613b      	str	r3, [r7, #16]
      break;
 80030a0:	e027      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	0c9b      	lsrs	r3, r3, #18
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	4a17      	ldr	r2, [pc, #92]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030ac:	5cd3      	ldrb	r3, [r2, r3]
 80030ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d010      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030ba:	4b11      	ldr	r3, [pc, #68]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x94>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	0c5b      	lsrs	r3, r3, #17
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	4a11      	ldr	r2, [pc, #68]	@ (800310c <HAL_RCC_GetSysClockFreq+0xa0>)
 80030c6:	5cd3      	ldrb	r3, [r2, r3]
 80030c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ce:	fb03 f202 	mul.w	r2, r3, r2
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	e004      	b.n	80030e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a0c      	ldr	r2, [pc, #48]	@ (8003110 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030e0:	fb02 f303 	mul.w	r3, r2, r3
 80030e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	613b      	str	r3, [r7, #16]
      break;
 80030ea:	e002      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030ec:	4b05      	ldr	r3, [pc, #20]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ee:	613b      	str	r3, [r7, #16]
      break;
 80030f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f2:	693b      	ldr	r3, [r7, #16]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40021000 	.word	0x40021000
 8003104:	007a1200 	.word	0x007a1200
 8003108:	08004e88 	.word	0x08004e88
 800310c:	08004e98 	.word	0x08004e98
 8003110:	003d0900 	.word	0x003d0900

08003114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003118:	4b02      	ldr	r3, [pc, #8]	@ (8003124 <HAL_RCC_GetHCLKFreq+0x10>)
 800311a:	681b      	ldr	r3, [r3, #0]
}
 800311c:	4618      	mov	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr
 8003124:	20000008 	.word	0x20000008

08003128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800312c:	f7ff fff2 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 8003130:	4602      	mov	r2, r0
 8003132:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	0a1b      	lsrs	r3, r3, #8
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	4903      	ldr	r1, [pc, #12]	@ (800314c <HAL_RCC_GetPCLK1Freq+0x24>)
 800313e:	5ccb      	ldrb	r3, [r1, r3]
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40021000 	.word	0x40021000
 800314c:	08004e80 	.word	0x08004e80

08003150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003154:	f7ff ffde 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	0adb      	lsrs	r3, r3, #11
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	4903      	ldr	r1, [pc, #12]	@ (8003174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021000 	.word	0x40021000
 8003174:	08004e80 	.word	0x08004e80

08003178 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003180:	4b0a      	ldr	r3, [pc, #40]	@ (80031ac <RCC_Delay+0x34>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a0a      	ldr	r2, [pc, #40]	@ (80031b0 <RCC_Delay+0x38>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	0a5b      	lsrs	r3, r3, #9
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	fb02 f303 	mul.w	r3, r2, r3
 8003192:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003194:	bf00      	nop
  }
  while (Delay --);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1e5a      	subs	r2, r3, #1
 800319a:	60fa      	str	r2, [r7, #12]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1f9      	bne.n	8003194 <RCC_Delay+0x1c>
}
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr
 80031ac:	20000008 	.word	0x20000008
 80031b0:	10624dd3 	.word	0x10624dd3

080031b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d07d      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80031d0:	2300      	movs	r3, #0
 80031d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10d      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e0:	4b4c      	ldr	r3, [pc, #304]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	4a4b      	ldr	r2, [pc, #300]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ea:	61d3      	str	r3, [r2, #28]
 80031ec:	4b49      	ldr	r3, [pc, #292]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031f8:	2301      	movs	r3, #1
 80031fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fc:	4b46      	ldr	r3, [pc, #280]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d118      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003208:	4b43      	ldr	r3, [pc, #268]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a42      	ldr	r2, [pc, #264]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800320e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003212:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003214:	f7fe fbc4 	bl	80019a0 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321a:	e008      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321c:	f7fe fbc0 	bl	80019a0 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	@ 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e06d      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322e:	4b3a      	ldr	r3, [pc, #232]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800323a:	4b36      	ldr	r3, [pc, #216]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003242:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d02e      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	429a      	cmp	r2, r3
 8003256:	d027      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003258:	4b2e      	ldr	r3, [pc, #184]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003260:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003262:	4b2e      	ldr	r3, [pc, #184]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003264:	2201      	movs	r2, #1
 8003266:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003268:	4b2c      	ldr	r3, [pc, #176]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800326e:	4a29      	ldr	r2, [pc, #164]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d014      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327e:	f7fe fb8f 	bl	80019a0 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003284:	e00a      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003286:	f7fe fb8b 	bl	80019a0 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003294:	4293      	cmp	r3, r2
 8003296:	d901      	bls.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e036      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329c:	4b1d      	ldr	r3, [pc, #116]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0ee      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4917      	ldr	r1, [pc, #92]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d105      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c0:	4b14      	ldr	r3, [pc, #80]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	4a13      	ldr	r2, [pc, #76]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	490b      	ldr	r1, [pc, #44]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032f6:	4b07      	ldr	r3, [pc, #28]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	4904      	ldr	r1, [pc, #16]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003304:	4313      	orrs	r3, r2
 8003306:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40021000 	.word	0x40021000
 8003318:	40007000 	.word	0x40007000
 800331c:	42420440 	.word	0x42420440

08003320 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	2300      	movs	r3, #0
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	2300      	movs	r3, #0
 800333a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b10      	cmp	r3, #16
 8003340:	d00a      	beq.n	8003358 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b10      	cmp	r3, #16
 8003346:	f200 808a 	bhi.w	800345e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d045      	beq.n	80033dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d075      	beq.n	8003442 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003356:	e082      	b.n	800345e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003358:	4b46      	ldr	r3, [pc, #280]	@ (8003474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800335e:	4b45      	ldr	r3, [pc, #276]	@ (8003474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d07b      	beq.n	8003462 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	0c9b      	lsrs	r3, r3, #18
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	4a41      	ldr	r2, [pc, #260]	@ (8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003374:	5cd3      	ldrb	r3, [r2, r3]
 8003376:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d015      	beq.n	80033ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003382:	4b3c      	ldr	r3, [pc, #240]	@ (8003474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	0c5b      	lsrs	r3, r3, #17
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	4a3b      	ldr	r2, [pc, #236]	@ (800347c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800338e:	5cd3      	ldrb	r3, [r2, r3]
 8003390:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00d      	beq.n	80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800339c:	4a38      	ldr	r2, [pc, #224]	@ (8003480 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	fb02 f303 	mul.w	r3, r2, r3
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	e004      	b.n	80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4a34      	ldr	r2, [pc, #208]	@ (8003484 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80033b2:	fb02 f303 	mul.w	r3, r2, r3
 80033b6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80033b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033c4:	d102      	bne.n	80033cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	61bb      	str	r3, [r7, #24]
      break;
 80033ca:	e04a      	b.n	8003462 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	4a2d      	ldr	r2, [pc, #180]	@ (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	085b      	lsrs	r3, r3, #1
 80033d8:	61bb      	str	r3, [r7, #24]
      break;
 80033da:	e042      	b.n	8003462 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80033dc:	4b25      	ldr	r3, [pc, #148]	@ (8003474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ec:	d108      	bne.n	8003400 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80033f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033fc:	61bb      	str	r3, [r7, #24]
 80033fe:	e01f      	b.n	8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800340a:	d109      	bne.n	8003420 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800340c:	4b19      	ldr	r3, [pc, #100]	@ (8003474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003418:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	e00f      	b.n	8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003426:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800342a:	d11c      	bne.n	8003466 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800342c:	4b11      	ldr	r3, [pc, #68]	@ (8003474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d016      	beq.n	8003466 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003438:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800343c:	61bb      	str	r3, [r7, #24]
      break;
 800343e:	e012      	b.n	8003466 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003440:	e011      	b.n	8003466 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003442:	f7ff fe85 	bl	8003150 <HAL_RCC_GetPCLK2Freq>
 8003446:	4602      	mov	r2, r0
 8003448:	4b0a      	ldr	r3, [pc, #40]	@ (8003474 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	0b9b      	lsrs	r3, r3, #14
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	3301      	adds	r3, #1
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	fbb2 f3f3 	udiv	r3, r2, r3
 800345a:	61bb      	str	r3, [r7, #24]
      break;
 800345c:	e004      	b.n	8003468 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800345e:	bf00      	nop
 8003460:	e002      	b.n	8003468 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003462:	bf00      	nop
 8003464:	e000      	b.n	8003468 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003466:	bf00      	nop
    }
  }
  return (frequency);
 8003468:	69bb      	ldr	r3, [r7, #24]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3720      	adds	r7, #32
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40021000 	.word	0x40021000
 8003478:	08004e9c 	.word	0x08004e9c
 800347c:	08004eac 	.word	0x08004eac
 8003480:	007a1200 	.word	0x007a1200
 8003484:	003d0900 	.word	0x003d0900
 8003488:	aaaaaaab 	.word	0xaaaaaaab

0800348c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e041      	b.n	8003522 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fe f836 	bl	8001524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3304      	adds	r3, #4
 80034c8:	4619      	mov	r1, r3
 80034ca:	4610      	mov	r0, r2
 80034cc:	f000 fbce 	bl	8003c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e041      	b.n	80035c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d106      	bne.n	8003556 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f839 	bl	80035c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2202      	movs	r2, #2
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3304      	adds	r3, #4
 8003566:	4619      	mov	r1, r3
 8003568:	4610      	mov	r0, r2
 800356a:	f000 fb7f 	bl	8003c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr

080035da <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b086      	sub	sp, #24
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e093      	b.n	8003716 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d106      	bne.n	8003608 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fd ffaa 	bl	800155c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6812      	ldr	r2, [r2, #0]
 800361a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800361e:	f023 0307 	bic.w	r3, r3, #7
 8003622:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3304      	adds	r3, #4
 800362c:	4619      	mov	r1, r3
 800362e:	4610      	mov	r0, r2
 8003630:	f000 fb1c 	bl	8003c6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800365c:	f023 0303 	bic.w	r3, r3, #3
 8003660:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	021b      	lsls	r3, r3, #8
 800366c:	4313      	orrs	r3, r2
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800367a:	f023 030c 	bic.w	r3, r3, #12
 800367e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003686:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800368a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	4313      	orrs	r3, r2
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	011a      	lsls	r2, r3, #4
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	031b      	lsls	r3, r3, #12
 80036aa:	4313      	orrs	r3, r2
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80036b8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	4313      	orrs	r3, r2
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d020      	beq.n	8003782 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d01b      	beq.n	8003782 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f06f 0202 	mvn.w	r2, #2
 8003752:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 fa64 	bl	8003c36 <HAL_TIM_IC_CaptureCallback>
 800376e:	e005      	b.n	800377c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fa57 	bl	8003c24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fa66 	bl	8003c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d020      	beq.n	80037ce <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d01b      	beq.n	80037ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f06f 0204 	mvn.w	r2, #4
 800379e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fa3e 	bl	8003c36 <HAL_TIM_IC_CaptureCallback>
 80037ba:	e005      	b.n	80037c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fa31 	bl	8003c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fa40 	bl	8003c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d01b      	beq.n	800381a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f06f 0208 	mvn.w	r2, #8
 80037ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2204      	movs	r2, #4
 80037f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fa18 	bl	8003c36 <HAL_TIM_IC_CaptureCallback>
 8003806:	e005      	b.n	8003814 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fa0b 	bl	8003c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fa1a 	bl	8003c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b00      	cmp	r3, #0
 8003822:	d020      	beq.n	8003866 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b00      	cmp	r3, #0
 800382c:	d01b      	beq.n	8003866 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f06f 0210 	mvn.w	r2, #16
 8003836:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2208      	movs	r2, #8
 800383c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f9f2 	bl	8003c36 <HAL_TIM_IC_CaptureCallback>
 8003852:	e005      	b.n	8003860 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f9e5 	bl	8003c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f9f4 	bl	8003c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00c      	beq.n	800388a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d007      	beq.n	800388a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f06f 0201 	mvn.w	r2, #1
 8003882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f9c4 	bl	8003c12 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00c      	beq.n	80038ae <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800389a:	2b00      	cmp	r3, #0
 800389c:	d007      	beq.n	80038ae <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fcd2 	bl	8004252 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00c      	beq.n	80038d2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d007      	beq.n	80038d2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f9c4 	bl	8003c5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00c      	beq.n	80038f6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d007      	beq.n	80038f6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f06f 0220 	mvn.w	r2, #32
 80038ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fca5 	bl	8004240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800391a:	2302      	movs	r3, #2
 800391c:	e0ae      	b.n	8003a7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b0c      	cmp	r3, #12
 800392a:	f200 809f 	bhi.w	8003a6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800392e:	a201      	add	r2, pc, #4	@ (adr r2, 8003934 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003934:	08003969 	.word	0x08003969
 8003938:	08003a6d 	.word	0x08003a6d
 800393c:	08003a6d 	.word	0x08003a6d
 8003940:	08003a6d 	.word	0x08003a6d
 8003944:	080039a9 	.word	0x080039a9
 8003948:	08003a6d 	.word	0x08003a6d
 800394c:	08003a6d 	.word	0x08003a6d
 8003950:	08003a6d 	.word	0x08003a6d
 8003954:	080039eb 	.word	0x080039eb
 8003958:	08003a6d 	.word	0x08003a6d
 800395c:	08003a6d 	.word	0x08003a6d
 8003960:	08003a6d 	.word	0x08003a6d
 8003964:	08003a2b 	.word	0x08003a2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 f9ea 	bl	8003d48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0208 	orr.w	r2, r2, #8
 8003982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0204 	bic.w	r2, r2, #4
 8003992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6999      	ldr	r1, [r3, #24]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	691a      	ldr	r2, [r3, #16]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	619a      	str	r2, [r3, #24]
      break;
 80039a6:	e064      	b.n	8003a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fa30 	bl	8003e14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6999      	ldr	r1, [r3, #24]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	021a      	lsls	r2, r3, #8
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	619a      	str	r2, [r3, #24]
      break;
 80039e8:	e043      	b.n	8003a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68b9      	ldr	r1, [r7, #8]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fa79 	bl	8003ee8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 0208 	orr.w	r2, r2, #8
 8003a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69da      	ldr	r2, [r3, #28]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0204 	bic.w	r2, r2, #4
 8003a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69d9      	ldr	r1, [r3, #28]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	61da      	str	r2, [r3, #28]
      break;
 8003a28:	e023      	b.n	8003a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68b9      	ldr	r1, [r7, #8]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fac3 	bl	8003fbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69da      	ldr	r2, [r3, #28]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69da      	ldr	r2, [r3, #28]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69d9      	ldr	r1, [r3, #28]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	021a      	lsls	r2, r3, #8
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	61da      	str	r2, [r3, #28]
      break;
 8003a6a:	e002      	b.n	8003a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_TIM_ConfigClockSource+0x1c>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e0b4      	b.n	8003c0a <HAL_TIM_ConfigClockSource+0x186>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ac6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ad8:	d03e      	beq.n	8003b58 <HAL_TIM_ConfigClockSource+0xd4>
 8003ada:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ade:	f200 8087 	bhi.w	8003bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ae6:	f000 8086 	beq.w	8003bf6 <HAL_TIM_ConfigClockSource+0x172>
 8003aea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aee:	d87f      	bhi.n	8003bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8003af0:	2b70      	cmp	r3, #112	@ 0x70
 8003af2:	d01a      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0xa6>
 8003af4:	2b70      	cmp	r3, #112	@ 0x70
 8003af6:	d87b      	bhi.n	8003bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8003af8:	2b60      	cmp	r3, #96	@ 0x60
 8003afa:	d050      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x11a>
 8003afc:	2b60      	cmp	r3, #96	@ 0x60
 8003afe:	d877      	bhi.n	8003bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b00:	2b50      	cmp	r3, #80	@ 0x50
 8003b02:	d03c      	beq.n	8003b7e <HAL_TIM_ConfigClockSource+0xfa>
 8003b04:	2b50      	cmp	r3, #80	@ 0x50
 8003b06:	d873      	bhi.n	8003bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b08:	2b40      	cmp	r3, #64	@ 0x40
 8003b0a:	d058      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x13a>
 8003b0c:	2b40      	cmp	r3, #64	@ 0x40
 8003b0e:	d86f      	bhi.n	8003bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b10:	2b30      	cmp	r3, #48	@ 0x30
 8003b12:	d064      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x15a>
 8003b14:	2b30      	cmp	r3, #48	@ 0x30
 8003b16:	d86b      	bhi.n	8003bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d060      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x15a>
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d867      	bhi.n	8003bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d05c      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x15a>
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d05a      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x15a>
 8003b28:	e062      	b.n	8003bf0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b3a:	f000 fb04 	bl	8004146 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	609a      	str	r2, [r3, #8]
      break;
 8003b56:	e04f      	b.n	8003bf8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b68:	f000 faed 	bl	8004146 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b7a:	609a      	str	r2, [r3, #8]
      break;
 8003b7c:	e03c      	b.n	8003bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f000 fa64 	bl	8004058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2150      	movs	r1, #80	@ 0x50
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fabb 	bl	8004112 <TIM_ITRx_SetConfig>
      break;
 8003b9c:	e02c      	b.n	8003bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003baa:	461a      	mov	r2, r3
 8003bac:	f000 fa82 	bl	80040b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2160      	movs	r1, #96	@ 0x60
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 faab 	bl	8004112 <TIM_ITRx_SetConfig>
      break;
 8003bbc:	e01c      	b.n	8003bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f000 fa44 	bl	8004058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2140      	movs	r1, #64	@ 0x40
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fa9b 	bl	8004112 <TIM_ITRx_SetConfig>
      break;
 8003bdc:	e00c      	b.n	8003bf8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4619      	mov	r1, r3
 8003be8:	4610      	mov	r0, r2
 8003bea:	f000 fa92 	bl	8004112 <TIM_ITRx_SetConfig>
      break;
 8003bee:	e003      	b.n	8003bf8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf4:	e000      	b.n	8003bf8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr

08003c36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr

08003c48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr

08003c5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a2f      	ldr	r2, [pc, #188]	@ (8003d3c <TIM_Base_SetConfig+0xd0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00b      	beq.n	8003c9c <TIM_Base_SetConfig+0x30>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c8a:	d007      	beq.n	8003c9c <TIM_Base_SetConfig+0x30>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a2c      	ldr	r2, [pc, #176]	@ (8003d40 <TIM_Base_SetConfig+0xd4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d003      	beq.n	8003c9c <TIM_Base_SetConfig+0x30>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a2b      	ldr	r2, [pc, #172]	@ (8003d44 <TIM_Base_SetConfig+0xd8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d108      	bne.n	8003cae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a22      	ldr	r2, [pc, #136]	@ (8003d3c <TIM_Base_SetConfig+0xd0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00b      	beq.n	8003cce <TIM_Base_SetConfig+0x62>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cbc:	d007      	beq.n	8003cce <TIM_Base_SetConfig+0x62>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003d40 <TIM_Base_SetConfig+0xd4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d003      	beq.n	8003cce <TIM_Base_SetConfig+0x62>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a1e      	ldr	r2, [pc, #120]	@ (8003d44 <TIM_Base_SetConfig+0xd8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d108      	bne.n	8003ce0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a0d      	ldr	r2, [pc, #52]	@ (8003d3c <TIM_Base_SetConfig+0xd0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d103      	bne.n	8003d14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f023 0201 	bic.w	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	611a      	str	r2, [r3, #16]
  }
}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr
 8003d3c:	40012c00 	.word	0x40012c00
 8003d40:	40000400 	.word	0x40000400
 8003d44:	40000800 	.word	0x40000800

08003d48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	f023 0201 	bic.w	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0303 	bic.w	r3, r3, #3
 8003d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f023 0302 	bic.w	r3, r3, #2
 8003d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003e10 <TIM_OC1_SetConfig+0xc8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d10c      	bne.n	8003dbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f023 0308 	bic.w	r3, r3, #8
 8003daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f023 0304 	bic.w	r3, r3, #4
 8003dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a13      	ldr	r2, [pc, #76]	@ (8003e10 <TIM_OC1_SetConfig+0xc8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d111      	bne.n	8003dea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	621a      	str	r2, [r3, #32]
}
 8003e04:	bf00      	nop
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40012c00 	.word	0x40012c00

08003e14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	f023 0210 	bic.w	r2, r3, #16
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f023 0320 	bic.w	r3, r3, #32
 8003e5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee4 <TIM_OC2_SetConfig+0xd0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d10d      	bne.n	8003e90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a14      	ldr	r2, [pc, #80]	@ (8003ee4 <TIM_OC2_SetConfig+0xd0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d113      	bne.n	8003ec0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	621a      	str	r2, [r3, #32]
}
 8003eda:	bf00      	nop
 8003edc:	371c      	adds	r7, #28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr
 8003ee4:	40012c00 	.word	0x40012c00

08003ee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0303 	bic.w	r3, r3, #3
 8003f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb8 <TIM_OC3_SetConfig+0xd0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d10d      	bne.n	8003f62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	021b      	lsls	r3, r3, #8
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a14      	ldr	r2, [pc, #80]	@ (8003fb8 <TIM_OC3_SetConfig+0xd0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d113      	bne.n	8003f92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	621a      	str	r2, [r3, #32]
}
 8003fac:	bf00      	nop
 8003fae:	371c      	adds	r7, #28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40012c00 	.word	0x40012c00

08003fbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	021b      	lsls	r3, r3, #8
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	031b      	lsls	r3, r3, #12
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	4313      	orrs	r3, r2
 8004012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a0f      	ldr	r2, [pc, #60]	@ (8004054 <TIM_OC4_SetConfig+0x98>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d109      	bne.n	8004030 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004022:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	019b      	lsls	r3, r3, #6
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	621a      	str	r2, [r3, #32]
}
 800404a:	bf00      	nop
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr
 8004054:	40012c00 	.word	0x40012c00

08004058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f023 0201 	bic.w	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f023 030a 	bic.w	r3, r3, #10
 8004094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	621a      	str	r2, [r3, #32]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	f023 0210 	bic.w	r2, r3, #16
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	031b      	lsls	r3, r3, #12
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80040f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	621a      	str	r2, [r3, #32]
}
 8004108:	bf00      	nop
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr

08004112 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004112:	b480      	push	{r7}
 8004114:	b085      	sub	sp, #20
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004128:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	f043 0307 	orr.w	r3, r3, #7
 8004134:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	609a      	str	r2, [r3, #8]
}
 800413c:	bf00      	nop
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr

08004146 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004146:	b480      	push	{r7}
 8004148:	b087      	sub	sp, #28
 800414a:	af00      	add	r7, sp, #0
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004160:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	021a      	lsls	r2, r3, #8
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	431a      	orrs	r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4313      	orrs	r3, r2
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	609a      	str	r2, [r3, #8]
}
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004198:	2302      	movs	r3, #2
 800419a:	e046      	b.n	800422a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a16      	ldr	r2, [pc, #88]	@ (8004234 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00e      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e8:	d009      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a12      	ldr	r2, [pc, #72]	@ (8004238 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d004      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a10      	ldr	r2, [pc, #64]	@ (800423c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d10c      	bne.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004204:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	4313      	orrs	r3, r2
 800420e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr
 8004234:	40012c00 	.word	0x40012c00
 8004238:	40000400 	.word	0x40000400
 800423c:	40000800 	.word	0x40000800

08004240 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr

08004252 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr

08004264 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e042      	b.n	80042fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fd fa12 	bl	80016b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2224      	movs	r2, #36	@ 0x24
 8004294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fd09 	bl	8004cc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	4613      	mov	r3, r2
 8004310:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b20      	cmp	r3, #32
 800431c:	d121      	bne.n	8004362 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <HAL_UART_Transmit_IT+0x26>
 8004324:	88fb      	ldrh	r3, [r7, #6]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e01a      	b.n	8004364 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	88fa      	ldrh	r2, [r7, #6]
 8004338:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	88fa      	ldrh	r2, [r7, #6]
 800433e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2221      	movs	r2, #33	@ 0x21
 800434a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800435c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	e000      	b.n	8004364 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004362:	2302      	movs	r3, #2
  }
}
 8004364:	4618      	mov	r0, r3
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr

0800436e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	4613      	mov	r3, r2
 800437a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b20      	cmp	r3, #32
 8004386:	d112      	bne.n	80043ae <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_UART_Receive_IT+0x26>
 800438e:	88fb      	ldrh	r3, [r7, #6]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e00b      	b.n	80043b0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	461a      	mov	r2, r3
 80043a2:	68b9      	ldr	r1, [r7, #8]
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 fab6 	bl	8004916 <UART_Start_Receive_IT>
 80043aa:	4603      	mov	r3, r0
 80043ac:	e000      	b.n	80043b0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80043ae:	2302      	movs	r3, #2
  }
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b0ba      	sub	sp, #232	@ 0xe8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80043de:	2300      	movs	r3, #0
 80043e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80043f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10f      	bne.n	800441e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b00      	cmp	r3, #0
 8004408:	d009      	beq.n	800441e <HAL_UART_IRQHandler+0x66>
 800440a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fb93 	bl	8004b42 <UART_Receive_IT>
      return;
 800441c:	e25b      	b.n	80048d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800441e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 80de 	beq.w	80045e4 <HAL_UART_IRQHandler+0x22c>
 8004428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d106      	bne.n	8004442 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004438:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80d1 	beq.w	80045e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <HAL_UART_IRQHandler+0xae>
 800444e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445e:	f043 0201 	orr.w	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00b      	beq.n	800448a <HAL_UART_IRQHandler+0xd2>
 8004472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004482:	f043 0202 	orr.w	r2, r3, #2
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800448a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00b      	beq.n	80044ae <HAL_UART_IRQHandler+0xf6>
 8004496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a6:	f043 0204 	orr.w	r2, r3, #4
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d011      	beq.n	80044de <HAL_UART_IRQHandler+0x126>
 80044ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d105      	bne.n	80044d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d005      	beq.n	80044de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d6:	f043 0208 	orr.w	r2, r3, #8
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 81f2 	beq.w	80048cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_UART_IRQHandler+0x14e>
 80044f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fb1e 	bl	8004b42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	bf14      	ite	ne
 8004514:	2301      	movne	r3, #1
 8004516:	2300      	moveq	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d103      	bne.n	8004532 <HAL_UART_IRQHandler+0x17a>
 800452a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d04f      	beq.n	80045d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fa28 	bl	8004988 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004542:	2b00      	cmp	r3, #0
 8004544:	d041      	beq.n	80045ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3314      	adds	r3, #20
 800454c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004554:	e853 3f00 	ldrex	r3, [r3]
 8004558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800455c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004560:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004564:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3314      	adds	r3, #20
 800456e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004572:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004576:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800457e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800458a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1d9      	bne.n	8004546 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d013      	beq.n	80045c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800459e:	4a7e      	ldr	r2, [pc, #504]	@ (8004798 <HAL_UART_IRQHandler+0x3e0>)
 80045a0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fd ffa4 	bl	80024f4 <HAL_DMA_Abort_IT>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d016      	beq.n	80045e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80045bc:	4610      	mov	r0, r2
 80045be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c0:	e00e      	b.n	80045e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f993 	bl	80048ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c8:	e00a      	b.n	80045e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f98f 	bl	80048ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d0:	e006      	b.n	80045e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f98b 	bl	80048ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80045de:	e175      	b.n	80048cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e0:	bf00      	nop
    return;
 80045e2:	e173      	b.n	80048cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	f040 814f 	bne.w	800488c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 8148 	beq.w	800488c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 8141 	beq.w	800488c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800460a:	2300      	movs	r3, #0
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 80b6 	beq.w	800479c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800463c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8145 	beq.w	80048d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800464a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800464e:	429a      	cmp	r2, r3
 8004650:	f080 813e 	bcs.w	80048d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800465a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2b20      	cmp	r3, #32
 8004664:	f000 8088 	beq.w	8004778 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	330c      	adds	r3, #12
 800466e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004672:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800467e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004682:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004686:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	330c      	adds	r3, #12
 8004690:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004694:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004698:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80046a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80046ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1d9      	bne.n	8004668 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3314      	adds	r3, #20
 80046ba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046be:	e853 3f00 	ldrex	r3, [r3]
 80046c2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80046c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046c6:	f023 0301 	bic.w	r3, r3, #1
 80046ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3314      	adds	r3, #20
 80046d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80046d8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80046dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80046e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80046e4:	e841 2300 	strex	r3, r2, [r1]
 80046e8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80046ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e1      	bne.n	80046b4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3314      	adds	r3, #20
 80046f6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046fa:	e853 3f00 	ldrex	r3, [r3]
 80046fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004700:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004702:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004706:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3314      	adds	r3, #20
 8004710:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004714:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004716:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800471a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004722:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e3      	bne.n	80046f0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	330c      	adds	r3, #12
 800473c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004746:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004748:	f023 0310 	bic.w	r3, r3, #16
 800474c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	330c      	adds	r3, #12
 8004756:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800475a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800475c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004760:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004762:	e841 2300 	strex	r3, r2, [r1]
 8004766:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004768:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1e3      	bne.n	8004736 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004772:	4618      	mov	r0, r3
 8004774:	f7fd fe83 	bl	800247e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004786:	b29b      	uxth	r3, r3
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	b29b      	uxth	r3, r3
 800478c:	4619      	mov	r1, r3
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f8b6 	bl	8004900 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004794:	e09c      	b.n	80048d0 <HAL_UART_IRQHandler+0x518>
 8004796:	bf00      	nop
 8004798:	08004a4d 	.word	0x08004a4d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 808e 	beq.w	80048d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80047b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 8089 	beq.w	80048d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	330c      	adds	r3, #12
 80047c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047cc:	e853 3f00 	ldrex	r3, [r3]
 80047d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	330c      	adds	r3, #12
 80047e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80047e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80047e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047ee:	e841 2300 	strex	r3, r2, [r1]
 80047f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1e3      	bne.n	80047c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3314      	adds	r3, #20
 8004800:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	e853 3f00 	ldrex	r3, [r3]
 8004808:	623b      	str	r3, [r7, #32]
   return(result);
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	f023 0301 	bic.w	r3, r3, #1
 8004810:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3314      	adds	r3, #20
 800481a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800481e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004820:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004822:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800482c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1e3      	bne.n	80047fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	330c      	adds	r3, #12
 8004846:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0310 	bic.w	r3, r3, #16
 8004856:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	330c      	adds	r3, #12
 8004860:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004864:	61fa      	str	r2, [r7, #28]
 8004866:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	69b9      	ldr	r1, [r7, #24]
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	617b      	str	r3, [r7, #20]
   return(result);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e3      	bne.n	8004840 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800487e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004882:	4619      	mov	r1, r3
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f83b 	bl	8004900 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800488a:	e023      	b.n	80048d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800488c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004894:	2b00      	cmp	r3, #0
 8004896:	d009      	beq.n	80048ac <HAL_UART_IRQHandler+0x4f4>
 8004898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800489c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f8e5 	bl	8004a74 <UART_Transmit_IT>
    return;
 80048aa:	e014      	b.n	80048d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00e      	beq.n	80048d6 <HAL_UART_IRQHandler+0x51e>
 80048b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d008      	beq.n	80048d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f924 	bl	8004b12 <UART_EndTransmit_IT>
    return;
 80048ca:	e004      	b.n	80048d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80048cc:	bf00      	nop
 80048ce:	e002      	b.n	80048d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80048d0:	bf00      	nop
 80048d2:	e000      	b.n	80048d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80048d4:	bf00      	nop
  }
}
 80048d6:	37e8      	adds	r7, #232	@ 0xe8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr

080048ee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bc80      	pop	{r7}
 80048fe:	4770      	bx	lr

08004900 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	460b      	mov	r3, r1
 800490a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr

08004916 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004916:	b480      	push	{r7}
 8004918:	b085      	sub	sp, #20
 800491a:	af00      	add	r7, sp, #0
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	4613      	mov	r3, r2
 8004922:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	88fa      	ldrh	r2, [r7, #6]
 800492e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	88fa      	ldrh	r2, [r7, #6]
 8004934:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2222      	movs	r2, #34	@ 0x22
 8004940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d007      	beq.n	800495c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800495a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0220 	orr.w	r2, r2, #32
 800497a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr

08004988 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004988:	b480      	push	{r7}
 800498a:	b095      	sub	sp, #84	@ 0x54
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	330c      	adds	r3, #12
 8004996:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	330c      	adds	r3, #12
 80049ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80049b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049b8:	e841 2300 	strex	r3, r2, [r1]
 80049bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e5      	bne.n	8004990 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3314      	adds	r3, #20
 80049ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	e853 3f00 	ldrex	r3, [r3]
 80049d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f023 0301 	bic.w	r3, r3, #1
 80049da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3314      	adds	r3, #20
 80049e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049ec:	e841 2300 	strex	r3, r2, [r1]
 80049f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e5      	bne.n	80049c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d119      	bne.n	8004a34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	330c      	adds	r3, #12
 8004a06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	e853 3f00 	ldrex	r3, [r3]
 8004a0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f023 0310 	bic.w	r3, r3, #16
 8004a16:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a20:	61ba      	str	r2, [r7, #24]
 8004a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	6979      	ldr	r1, [r7, #20]
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	e841 2300 	strex	r3, r2, [r1]
 8004a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e5      	bne.n	8004a00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a42:	bf00      	nop
 8004a44:	3754      	adds	r7, #84	@ 0x54
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f7ff ff41 	bl	80048ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a6c:	bf00      	nop
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b21      	cmp	r3, #33	@ 0x21
 8004a86:	d13e      	bne.n	8004b06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a90:	d114      	bne.n	8004abc <UART_Transmit_IT+0x48>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d110      	bne.n	8004abc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	1c9a      	adds	r2, r3, #2
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	621a      	str	r2, [r3, #32]
 8004aba:	e008      	b.n	8004ace <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	1c59      	adds	r1, r3, #1
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6211      	str	r1, [r2, #32]
 8004ac6:	781a      	ldrb	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	4619      	mov	r1, r3
 8004adc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10f      	bne.n	8004b02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004af0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	e000      	b.n	8004b08 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b06:	2302      	movs	r3, #2
  }
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr

08004b12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7ff fed2 	bl	80048dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b08c      	sub	sp, #48	@ 0x30
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b22      	cmp	r3, #34	@ 0x22
 8004b54:	f040 80ae 	bne.w	8004cb4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b60:	d117      	bne.n	8004b92 <UART_Receive_IT+0x50>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d113      	bne.n	8004b92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b72:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8a:	1c9a      	adds	r2, r3, #2
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b90:	e026      	b.n	8004be0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba4:	d007      	beq.n	8004bb6 <UART_Receive_IT+0x74>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10a      	bne.n	8004bc4 <UART_Receive_IT+0x82>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	e008      	b.n	8004bd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	4619      	mov	r1, r3
 8004bee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d15d      	bne.n	8004cb0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0220 	bic.w	r2, r2, #32
 8004c02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695a      	ldr	r2, [r3, #20]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0201 	bic.w	r2, r2, #1
 8004c22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d135      	bne.n	8004ca6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	330c      	adds	r3, #12
 8004c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	e853 3f00 	ldrex	r3, [r3]
 8004c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f023 0310 	bic.w	r3, r3, #16
 8004c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	330c      	adds	r3, #12
 8004c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c60:	623a      	str	r2, [r7, #32]
 8004c62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c64:	69f9      	ldr	r1, [r7, #28]
 8004c66:	6a3a      	ldr	r2, [r7, #32]
 8004c68:	e841 2300 	strex	r3, r2, [r1]
 8004c6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e5      	bne.n	8004c40 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0310 	and.w	r3, r3, #16
 8004c7e:	2b10      	cmp	r3, #16
 8004c80:	d10a      	bne.n	8004c98 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff fe2e 	bl	8004900 <HAL_UARTEx_RxEventCallback>
 8004ca4:	e002      	b.n	8004cac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fc f92a 	bl	8000f00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	e002      	b.n	8004cb6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e000      	b.n	8004cb6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004cb4:	2302      	movs	r3, #2
  }
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3730      	adds	r7, #48	@ 0x30
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004cfa:	f023 030c 	bic.w	r3, r3, #12
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6812      	ldr	r2, [r2, #0]
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	430b      	orrs	r3, r1
 8004d06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a2c      	ldr	r2, [pc, #176]	@ (8004dd4 <UART_SetConfig+0x114>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d103      	bne.n	8004d30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d28:	f7fe fa12 	bl	8003150 <HAL_RCC_GetPCLK2Freq>
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	e002      	b.n	8004d36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d30:	f7fe f9fa 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 8004d34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009a      	lsls	r2, r3, #2
 8004d40:	441a      	add	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4c:	4a22      	ldr	r2, [pc, #136]	@ (8004dd8 <UART_SetConfig+0x118>)
 8004d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	0119      	lsls	r1, r3, #4
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009a      	lsls	r2, r3, #2
 8004d60:	441a      	add	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd8 <UART_SetConfig+0x118>)
 8004d6e:	fba3 0302 	umull	r0, r3, r3, r2
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	2064      	movs	r0, #100	@ 0x64
 8004d76:	fb00 f303 	mul.w	r3, r0, r3
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	3332      	adds	r3, #50	@ 0x32
 8004d80:	4a15      	ldr	r2, [pc, #84]	@ (8004dd8 <UART_SetConfig+0x118>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d8c:	4419      	add	r1, r3
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	009a      	lsls	r2, r3, #2
 8004d98:	441a      	add	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004da4:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd8 <UART_SetConfig+0x118>)
 8004da6:	fba3 0302 	umull	r0, r3, r3, r2
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	2064      	movs	r0, #100	@ 0x64
 8004dae:	fb00 f303 	mul.w	r3, r0, r3
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	3332      	adds	r3, #50	@ 0x32
 8004db8:	4a07      	ldr	r2, [pc, #28]	@ (8004dd8 <UART_SetConfig+0x118>)
 8004dba:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	f003 020f 	and.w	r2, r3, #15
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	440a      	add	r2, r1
 8004dca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40013800 	.word	0x40013800
 8004dd8:	51eb851f 	.word	0x51eb851f

08004ddc <memset>:
 8004ddc:	4603      	mov	r3, r0
 8004dde:	4402      	add	r2, r0
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d100      	bne.n	8004de6 <memset+0xa>
 8004de4:	4770      	bx	lr
 8004de6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dea:	e7f9      	b.n	8004de0 <memset+0x4>

08004dec <__libc_init_array>:
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	2600      	movs	r6, #0
 8004df0:	4d0c      	ldr	r5, [pc, #48]	@ (8004e24 <__libc_init_array+0x38>)
 8004df2:	4c0d      	ldr	r4, [pc, #52]	@ (8004e28 <__libc_init_array+0x3c>)
 8004df4:	1b64      	subs	r4, r4, r5
 8004df6:	10a4      	asrs	r4, r4, #2
 8004df8:	42a6      	cmp	r6, r4
 8004dfa:	d109      	bne.n	8004e10 <__libc_init_array+0x24>
 8004dfc:	f000 f828 	bl	8004e50 <_init>
 8004e00:	2600      	movs	r6, #0
 8004e02:	4d0a      	ldr	r5, [pc, #40]	@ (8004e2c <__libc_init_array+0x40>)
 8004e04:	4c0a      	ldr	r4, [pc, #40]	@ (8004e30 <__libc_init_array+0x44>)
 8004e06:	1b64      	subs	r4, r4, r5
 8004e08:	10a4      	asrs	r4, r4, #2
 8004e0a:	42a6      	cmp	r6, r4
 8004e0c:	d105      	bne.n	8004e1a <__libc_init_array+0x2e>
 8004e0e:	bd70      	pop	{r4, r5, r6, pc}
 8004e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e14:	4798      	blx	r3
 8004e16:	3601      	adds	r6, #1
 8004e18:	e7ee      	b.n	8004df8 <__libc_init_array+0xc>
 8004e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e1e:	4798      	blx	r3
 8004e20:	3601      	adds	r6, #1
 8004e22:	e7f2      	b.n	8004e0a <__libc_init_array+0x1e>
 8004e24:	08004eb0 	.word	0x08004eb0
 8004e28:	08004eb0 	.word	0x08004eb0
 8004e2c:	08004eb0 	.word	0x08004eb0
 8004e30:	08004eb4 	.word	0x08004eb4

08004e34 <memcpy>:
 8004e34:	440a      	add	r2, r1
 8004e36:	4291      	cmp	r1, r2
 8004e38:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e3c:	d100      	bne.n	8004e40 <memcpy+0xc>
 8004e3e:	4770      	bx	lr
 8004e40:	b510      	push	{r4, lr}
 8004e42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e46:	4291      	cmp	r1, r2
 8004e48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e4c:	d1f9      	bne.n	8004e42 <memcpy+0xe>
 8004e4e:	bd10      	pop	{r4, pc}

08004e50 <_init>:
 8004e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e52:	bf00      	nop
 8004e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e56:	bc08      	pop	{r3}
 8004e58:	469e      	mov	lr, r3
 8004e5a:	4770      	bx	lr

08004e5c <_fini>:
 8004e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5e:	bf00      	nop
 8004e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e62:	bc08      	pop	{r3}
 8004e64:	469e      	mov	lr, r3
 8004e66:	4770      	bx	lr
