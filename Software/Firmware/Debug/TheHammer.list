
TheHammer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d2c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007e38  08007e38  00008e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ea8  08007ea8  00009074  2**0
                  CONTENTS
  4 .ARM          00000000  08007ea8  08007ea8  00009074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ea8  08007ea8  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ea8  08007ea8  00008ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007eac  08007eac  00008eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007eb0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d48  20000078  08007f24  00009078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000dc0  08007f24  00009dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012247  00000000  00000000  0000909d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003134  00000000  00000000  0001b2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  0001e418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c77  00000000  00000000  0001f430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a205  00000000  00000000  000200a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153c3  00000000  00000000  0003a2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000910e6  00000000  00000000  0004f66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0755  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004740  00000000  00000000  000e0798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e4ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08007e20 	.word	0x08007e20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08007e20 	.word	0x08007e20

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_d2f>:
 8000938:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800093c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000940:	bf24      	itt	cs
 8000942:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000946:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800094a:	d90d      	bls.n	8000968 <__aeabi_d2f+0x30>
 800094c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000950:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000954:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000958:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800095c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000960:	bf08      	it	eq
 8000962:	f020 0001 	biceq.w	r0, r0, #1
 8000966:	4770      	bx	lr
 8000968:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800096c:	d121      	bne.n	80009b2 <__aeabi_d2f+0x7a>
 800096e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000972:	bfbc      	itt	lt
 8000974:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000978:	4770      	bxlt	lr
 800097a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000982:	f1c2 0218 	rsb	r2, r2, #24
 8000986:	f1c2 0c20 	rsb	ip, r2, #32
 800098a:	fa10 f30c 	lsls.w	r3, r0, ip
 800098e:	fa20 f002 	lsr.w	r0, r0, r2
 8000992:	bf18      	it	ne
 8000994:	f040 0001 	orrne.w	r0, r0, #1
 8000998:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a4:	ea40 000c 	orr.w	r0, r0, ip
 80009a8:	fa23 f302 	lsr.w	r3, r3, r2
 80009ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b0:	e7cc      	b.n	800094c <__aeabi_d2f+0x14>
 80009b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009b6:	d107      	bne.n	80009c8 <__aeabi_d2f+0x90>
 80009b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009bc:	bf1e      	ittt	ne
 80009be:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009c2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009c6:	4770      	bxne	lr
 80009c8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <__aeabi_frsub>:
 80009d8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009dc:	e002      	b.n	80009e4 <__addsf3>
 80009de:	bf00      	nop

080009e0 <__aeabi_fsub>:
 80009e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009e4 <__addsf3>:
 80009e4:	0042      	lsls	r2, r0, #1
 80009e6:	bf1f      	itttt	ne
 80009e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009ec:	ea92 0f03 	teqne	r2, r3
 80009f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009f8:	d06a      	beq.n	8000ad0 <__addsf3+0xec>
 80009fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a02:	bfc1      	itttt	gt
 8000a04:	18d2      	addgt	r2, r2, r3
 8000a06:	4041      	eorgt	r1, r0
 8000a08:	4048      	eorgt	r0, r1
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	bfb8      	it	lt
 8000a0e:	425b      	neglt	r3, r3
 8000a10:	2b19      	cmp	r3, #25
 8000a12:	bf88      	it	hi
 8000a14:	4770      	bxhi	lr
 8000a16:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a1a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a1e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a22:	bf18      	it	ne
 8000a24:	4240      	negne	r0, r0
 8000a26:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a2a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a2e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a32:	bf18      	it	ne
 8000a34:	4249      	negne	r1, r1
 8000a36:	ea92 0f03 	teq	r2, r3
 8000a3a:	d03f      	beq.n	8000abc <__addsf3+0xd8>
 8000a3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a40:	fa41 fc03 	asr.w	ip, r1, r3
 8000a44:	eb10 000c 	adds.w	r0, r0, ip
 8000a48:	f1c3 0320 	rsb	r3, r3, #32
 8000a4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a50:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a54:	d502      	bpl.n	8000a5c <__addsf3+0x78>
 8000a56:	4249      	negs	r1, r1
 8000a58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a5c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a60:	d313      	bcc.n	8000a8a <__addsf3+0xa6>
 8000a62:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a66:	d306      	bcc.n	8000a76 <__addsf3+0x92>
 8000a68:	0840      	lsrs	r0, r0, #1
 8000a6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a6e:	f102 0201 	add.w	r2, r2, #1
 8000a72:	2afe      	cmp	r2, #254	@ 0xfe
 8000a74:	d251      	bcs.n	8000b1a <__addsf3+0x136>
 8000a76:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a7e:	bf08      	it	eq
 8000a80:	f020 0001 	biceq.w	r0, r0, #1
 8000a84:	ea40 0003 	orr.w	r0, r0, r3
 8000a88:	4770      	bx	lr
 8000a8a:	0049      	lsls	r1, r1, #1
 8000a8c:	eb40 0000 	adc.w	r0, r0, r0
 8000a90:	3a01      	subs	r2, #1
 8000a92:	bf28      	it	cs
 8000a94:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a98:	d2ed      	bcs.n	8000a76 <__addsf3+0x92>
 8000a9a:	fab0 fc80 	clz	ip, r0
 8000a9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa2:	ebb2 020c 	subs.w	r2, r2, ip
 8000aa6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aaa:	bfaa      	itet	ge
 8000aac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab0:	4252      	neglt	r2, r2
 8000ab2:	4318      	orrge	r0, r3
 8000ab4:	bfbc      	itt	lt
 8000ab6:	40d0      	lsrlt	r0, r2
 8000ab8:	4318      	orrlt	r0, r3
 8000aba:	4770      	bx	lr
 8000abc:	f092 0f00 	teq	r2, #0
 8000ac0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ac4:	bf06      	itte	eq
 8000ac6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000aca:	3201      	addeq	r2, #1
 8000acc:	3b01      	subne	r3, #1
 8000ace:	e7b5      	b.n	8000a3c <__addsf3+0x58>
 8000ad0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ad8:	bf18      	it	ne
 8000ada:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ade:	d021      	beq.n	8000b24 <__addsf3+0x140>
 8000ae0:	ea92 0f03 	teq	r2, r3
 8000ae4:	d004      	beq.n	8000af0 <__addsf3+0x10c>
 8000ae6:	f092 0f00 	teq	r2, #0
 8000aea:	bf08      	it	eq
 8000aec:	4608      	moveq	r0, r1
 8000aee:	4770      	bx	lr
 8000af0:	ea90 0f01 	teq	r0, r1
 8000af4:	bf1c      	itt	ne
 8000af6:	2000      	movne	r0, #0
 8000af8:	4770      	bxne	lr
 8000afa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000afe:	d104      	bne.n	8000b0a <__addsf3+0x126>
 8000b00:	0040      	lsls	r0, r0, #1
 8000b02:	bf28      	it	cs
 8000b04:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b08:	4770      	bx	lr
 8000b0a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b0e:	bf3c      	itt	cc
 8000b10:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b14:	4770      	bxcc	lr
 8000b16:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b1a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b22:	4770      	bx	lr
 8000b24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b28:	bf16      	itet	ne
 8000b2a:	4608      	movne	r0, r1
 8000b2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b30:	4601      	movne	r1, r0
 8000b32:	0242      	lsls	r2, r0, #9
 8000b34:	bf06      	itte	eq
 8000b36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3a:	ea90 0f01 	teqeq	r0, r1
 8000b3e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_ui2f>:
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e004      	b.n	8000b54 <__aeabi_i2f+0x8>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_i2f>:
 8000b4c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b50:	bf48      	it	mi
 8000b52:	4240      	negmi	r0, r0
 8000b54:	ea5f 0c00 	movs.w	ip, r0
 8000b58:	bf08      	it	eq
 8000b5a:	4770      	bxeq	lr
 8000b5c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b60:	4601      	mov	r1, r0
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	e01c      	b.n	8000ba2 <__aeabi_l2f+0x2a>

08000b68 <__aeabi_ul2f>:
 8000b68:	ea50 0201 	orrs.w	r2, r0, r1
 8000b6c:	bf08      	it	eq
 8000b6e:	4770      	bxeq	lr
 8000b70:	f04f 0300 	mov.w	r3, #0
 8000b74:	e00a      	b.n	8000b8c <__aeabi_l2f+0x14>
 8000b76:	bf00      	nop

08000b78 <__aeabi_l2f>:
 8000b78:	ea50 0201 	orrs.w	r2, r0, r1
 8000b7c:	bf08      	it	eq
 8000b7e:	4770      	bxeq	lr
 8000b80:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__aeabi_l2f+0x14>
 8000b86:	4240      	negs	r0, r0
 8000b88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8c:	ea5f 0c01 	movs.w	ip, r1
 8000b90:	bf02      	ittt	eq
 8000b92:	4684      	moveq	ip, r0
 8000b94:	4601      	moveq	r1, r0
 8000b96:	2000      	moveq	r0, #0
 8000b98:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ba2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ba6:	fabc f28c 	clz	r2, ip
 8000baa:	3a08      	subs	r2, #8
 8000bac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb0:	db10      	blt.n	8000bd4 <__aeabi_l2f+0x5c>
 8000bb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb6:	4463      	add	r3, ip
 8000bb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bbc:	f1c2 0220 	rsb	r2, r2, #32
 8000bc0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000bc8:	eb43 0002 	adc.w	r0, r3, r2
 8000bcc:	bf08      	it	eq
 8000bce:	f020 0001 	biceq.w	r0, r0, #1
 8000bd2:	4770      	bx	lr
 8000bd4:	f102 0220 	add.w	r2, r2, #32
 8000bd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bdc:	f1c2 0220 	rsb	r2, r2, #32
 8000be0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be4:	fa21 f202 	lsr.w	r2, r1, r2
 8000be8:	eb43 0002 	adc.w	r0, r3, r2
 8000bec:	bf08      	it	eq
 8000bee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_fmul>:
 8000bf4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c02:	ea92 0f0c 	teqne	r2, ip
 8000c06:	ea93 0f0c 	teqne	r3, ip
 8000c0a:	d06f      	beq.n	8000cec <__aeabi_fmul+0xf8>
 8000c0c:	441a      	add	r2, r3
 8000c0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c12:	0240      	lsls	r0, r0, #9
 8000c14:	bf18      	it	ne
 8000c16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1a:	d01e      	beq.n	8000c5a <__aeabi_fmul+0x66>
 8000c1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c28:	fba0 3101 	umull	r3, r1, r0, r1
 8000c2c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c30:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c34:	bf3e      	ittt	cc
 8000c36:	0049      	lslcc	r1, r1, #1
 8000c38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c3c:	005b      	lslcc	r3, r3, #1
 8000c3e:	ea40 0001 	orr.w	r0, r0, r1
 8000c42:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c46:	2afd      	cmp	r2, #253	@ 0xfd
 8000c48:	d81d      	bhi.n	8000c86 <__aeabi_fmul+0x92>
 8000c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c52:	bf08      	it	eq
 8000c54:	f020 0001 	biceq.w	r0, r0, #1
 8000c58:	4770      	bx	lr
 8000c5a:	f090 0f00 	teq	r0, #0
 8000c5e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c62:	bf08      	it	eq
 8000c64:	0249      	lsleq	r1, r1, #9
 8000c66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c6e:	3a7f      	subs	r2, #127	@ 0x7f
 8000c70:	bfc2      	ittt	gt
 8000c72:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7a:	4770      	bxgt	lr
 8000c7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	3a01      	subs	r2, #1
 8000c86:	dc5d      	bgt.n	8000d44 <__aeabi_fmul+0x150>
 8000c88:	f112 0f19 	cmn.w	r2, #25
 8000c8c:	bfdc      	itt	le
 8000c8e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c92:	4770      	bxle	lr
 8000c94:	f1c2 0200 	rsb	r2, r2, #0
 8000c98:	0041      	lsls	r1, r0, #1
 8000c9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c9e:	f1c2 0220 	rsb	r2, r2, #32
 8000ca2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000caa:	f140 0000 	adc.w	r0, r0, #0
 8000cae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb2:	bf08      	it	eq
 8000cb4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb8:	4770      	bx	lr
 8000cba:	f092 0f00 	teq	r2, #0
 8000cbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cc2:	bf02      	ittt	eq
 8000cc4:	0040      	lsleq	r0, r0, #1
 8000cc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cca:	3a01      	subeq	r2, #1
 8000ccc:	d0f9      	beq.n	8000cc2 <__aeabi_fmul+0xce>
 8000cce:	ea40 000c 	orr.w	r0, r0, ip
 8000cd2:	f093 0f00 	teq	r3, #0
 8000cd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cda:	bf02      	ittt	eq
 8000cdc:	0049      	lsleq	r1, r1, #1
 8000cde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ce2:	3b01      	subeq	r3, #1
 8000ce4:	d0f9      	beq.n	8000cda <__aeabi_fmul+0xe6>
 8000ce6:	ea41 010c 	orr.w	r1, r1, ip
 8000cea:	e78f      	b.n	8000c0c <__aeabi_fmul+0x18>
 8000cec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf0:	ea92 0f0c 	teq	r2, ip
 8000cf4:	bf18      	it	ne
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d00a      	beq.n	8000d12 <__aeabi_fmul+0x11e>
 8000cfc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d00:	bf18      	it	ne
 8000d02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d06:	d1d8      	bne.n	8000cba <__aeabi_fmul+0xc6>
 8000d08:	ea80 0001 	eor.w	r0, r0, r1
 8000d0c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d10:	4770      	bx	lr
 8000d12:	f090 0f00 	teq	r0, #0
 8000d16:	bf17      	itett	ne
 8000d18:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d1c:	4608      	moveq	r0, r1
 8000d1e:	f091 0f00 	teqne	r1, #0
 8000d22:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d26:	d014      	beq.n	8000d52 <__aeabi_fmul+0x15e>
 8000d28:	ea92 0f0c 	teq	r2, ip
 8000d2c:	d101      	bne.n	8000d32 <__aeabi_fmul+0x13e>
 8000d2e:	0242      	lsls	r2, r0, #9
 8000d30:	d10f      	bne.n	8000d52 <__aeabi_fmul+0x15e>
 8000d32:	ea93 0f0c 	teq	r3, ip
 8000d36:	d103      	bne.n	8000d40 <__aeabi_fmul+0x14c>
 8000d38:	024b      	lsls	r3, r1, #9
 8000d3a:	bf18      	it	ne
 8000d3c:	4608      	movne	r0, r1
 8000d3e:	d108      	bne.n	8000d52 <__aeabi_fmul+0x15e>
 8000d40:	ea80 0001 	eor.w	r0, r0, r1
 8000d44:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d50:	4770      	bx	lr
 8000d52:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d56:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_fdiv>:
 8000d5c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d64:	bf1e      	ittt	ne
 8000d66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6a:	ea92 0f0c 	teqne	r2, ip
 8000d6e:	ea93 0f0c 	teqne	r3, ip
 8000d72:	d069      	beq.n	8000e48 <__aeabi_fdiv+0xec>
 8000d74:	eba2 0203 	sub.w	r2, r2, r3
 8000d78:	ea80 0c01 	eor.w	ip, r0, r1
 8000d7c:	0249      	lsls	r1, r1, #9
 8000d7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d82:	d037      	beq.n	8000df4 <__aeabi_fdiv+0x98>
 8000d84:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d94:	428b      	cmp	r3, r1
 8000d96:	bf38      	it	cc
 8000d98:	005b      	lslcc	r3, r3, #1
 8000d9a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d9e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000da2:	428b      	cmp	r3, r1
 8000da4:	bf24      	itt	cs
 8000da6:	1a5b      	subcs	r3, r3, r1
 8000da8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db0:	bf24      	itt	cs
 8000db2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000db6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dbe:	bf24      	itt	cs
 8000dc0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dc8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dcc:	bf24      	itt	cs
 8000dce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dd6:	011b      	lsls	r3, r3, #4
 8000dd8:	bf18      	it	ne
 8000dda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dde:	d1e0      	bne.n	8000da2 <__aeabi_fdiv+0x46>
 8000de0:	2afd      	cmp	r2, #253	@ 0xfd
 8000de2:	f63f af50 	bhi.w	8000c86 <__aeabi_fmul+0x92>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfc:	327f      	adds	r2, #127	@ 0x7f
 8000dfe:	bfc2      	ittt	gt
 8000e00:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e08:	4770      	bxgt	lr
 8000e0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e0e:	f04f 0300 	mov.w	r3, #0
 8000e12:	3a01      	subs	r2, #1
 8000e14:	e737      	b.n	8000c86 <__aeabi_fmul+0x92>
 8000e16:	f092 0f00 	teq	r2, #0
 8000e1a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e1e:	bf02      	ittt	eq
 8000e20:	0040      	lsleq	r0, r0, #1
 8000e22:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e26:	3a01      	subeq	r2, #1
 8000e28:	d0f9      	beq.n	8000e1e <__aeabi_fdiv+0xc2>
 8000e2a:	ea40 000c 	orr.w	r0, r0, ip
 8000e2e:	f093 0f00 	teq	r3, #0
 8000e32:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e36:	bf02      	ittt	eq
 8000e38:	0049      	lsleq	r1, r1, #1
 8000e3a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e3e:	3b01      	subeq	r3, #1
 8000e40:	d0f9      	beq.n	8000e36 <__aeabi_fdiv+0xda>
 8000e42:	ea41 010c 	orr.w	r1, r1, ip
 8000e46:	e795      	b.n	8000d74 <__aeabi_fdiv+0x18>
 8000e48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	d108      	bne.n	8000e64 <__aeabi_fdiv+0x108>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	f47f af7d 	bne.w	8000d52 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	f47f af70 	bne.w	8000d40 <__aeabi_fmul+0x14c>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e776      	b.n	8000d52 <__aeabi_fmul+0x15e>
 8000e64:	ea93 0f0c 	teq	r3, ip
 8000e68:	d104      	bne.n	8000e74 <__aeabi_fdiv+0x118>
 8000e6a:	024b      	lsls	r3, r1, #9
 8000e6c:	f43f af4c 	beq.w	8000d08 <__aeabi_fmul+0x114>
 8000e70:	4608      	mov	r0, r1
 8000e72:	e76e      	b.n	8000d52 <__aeabi_fmul+0x15e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e7e:	d1ca      	bne.n	8000e16 <__aeabi_fdiv+0xba>
 8000e80:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e84:	f47f af5c 	bne.w	8000d40 <__aeabi_fmul+0x14c>
 8000e88:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e8c:	f47f af3c 	bne.w	8000d08 <__aeabi_fmul+0x114>
 8000e90:	e75f      	b.n	8000d52 <__aeabi_fmul+0x15e>
 8000e92:	bf00      	nop

08000e94 <__gesf2>:
 8000e94:	f04f 3cff 	mov.w	ip, #4294967295
 8000e98:	e006      	b.n	8000ea8 <__cmpsf2+0x4>
 8000e9a:	bf00      	nop

08000e9c <__lesf2>:
 8000e9c:	f04f 0c01 	mov.w	ip, #1
 8000ea0:	e002      	b.n	8000ea8 <__cmpsf2+0x4>
 8000ea2:	bf00      	nop

08000ea4 <__cmpsf2>:
 8000ea4:	f04f 0c01 	mov.w	ip, #1
 8000ea8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eb8:	bf18      	it	ne
 8000eba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ebe:	d011      	beq.n	8000ee4 <__cmpsf2+0x40>
 8000ec0:	b001      	add	sp, #4
 8000ec2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ec6:	bf18      	it	ne
 8000ec8:	ea90 0f01 	teqne	r0, r1
 8000ecc:	bf58      	it	pl
 8000ece:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed2:	bf88      	it	hi
 8000ed4:	17c8      	asrhi	r0, r1, #31
 8000ed6:	bf38      	it	cc
 8000ed8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000edc:	bf18      	it	ne
 8000ede:	f040 0001 	orrne.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ee8:	d102      	bne.n	8000ef0 <__cmpsf2+0x4c>
 8000eea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eee:	d105      	bne.n	8000efc <__cmpsf2+0x58>
 8000ef0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef4:	d1e4      	bne.n	8000ec0 <__cmpsf2+0x1c>
 8000ef6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efa:	d0e1      	beq.n	8000ec0 <__cmpsf2+0x1c>
 8000efc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <__aeabi_cfrcmple>:
 8000f04:	4684      	mov	ip, r0
 8000f06:	4608      	mov	r0, r1
 8000f08:	4661      	mov	r1, ip
 8000f0a:	e7ff      	b.n	8000f0c <__aeabi_cfcmpeq>

08000f0c <__aeabi_cfcmpeq>:
 8000f0c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f0e:	f7ff ffc9 	bl	8000ea4 <__cmpsf2>
 8000f12:	2800      	cmp	r0, #0
 8000f14:	bf48      	it	mi
 8000f16:	f110 0f00 	cmnmi.w	r0, #0
 8000f1a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f1c <__aeabi_fcmpeq>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff fff4 	bl	8000f0c <__aeabi_cfcmpeq>
 8000f24:	bf0c      	ite	eq
 8000f26:	2001      	moveq	r0, #1
 8000f28:	2000      	movne	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmplt>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffea 	bl	8000f0c <__aeabi_cfcmpeq>
 8000f38:	bf34      	ite	cc
 8000f3a:	2001      	movcc	r0, #1
 8000f3c:	2000      	movcs	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_fcmple>:
 8000f44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f48:	f7ff ffe0 	bl	8000f0c <__aeabi_cfcmpeq>
 8000f4c:	bf94      	ite	ls
 8000f4e:	2001      	movls	r0, #1
 8000f50:	2000      	movhi	r0, #0
 8000f52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f56:	bf00      	nop

08000f58 <__aeabi_fcmpge>:
 8000f58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f5c:	f7ff ffd2 	bl	8000f04 <__aeabi_cfrcmple>
 8000f60:	bf94      	ite	ls
 8000f62:	2001      	movls	r0, #1
 8000f64:	2000      	movhi	r0, #0
 8000f66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6a:	bf00      	nop

08000f6c <__aeabi_fcmpgt>:
 8000f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f70:	f7ff ffc8 	bl	8000f04 <__aeabi_cfrcmple>
 8000f74:	bf34      	ite	cc
 8000f76:	2001      	movcc	r0, #1
 8000f78:	2000      	movcs	r0, #0
 8000f7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7e:	bf00      	nop

08000f80 <__aeabi_f2uiz>:
 8000f80:	0042      	lsls	r2, r0, #1
 8000f82:	d20e      	bcs.n	8000fa2 <__aeabi_f2uiz+0x22>
 8000f84:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f88:	d30b      	bcc.n	8000fa2 <__aeabi_f2uiz+0x22>
 8000f8a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f8e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f92:	d409      	bmi.n	8000fa8 <__aeabi_f2uiz+0x28>
 8000f94:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f9c:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa0:	4770      	bx	lr
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	4770      	bx	lr
 8000fa8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fac:	d101      	bne.n	8000fb2 <__aeabi_f2uiz+0x32>
 8000fae:	0242      	lsls	r2, r0, #9
 8000fb0:	d102      	bne.n	8000fb8 <__aeabi_f2uiz+0x38>
 8000fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb6:	4770      	bx	lr
 8000fb8:	f04f 0000 	mov.w	r0, #0
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc6:	f003 f9d7 	bl	8004378 <HAL_Init>

  /* USER CODE BEGIN Init */
  LED_Power_Init();
 8000fca:	f002 facd 	bl	8003568 <LED_Power_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fce:	f000 f86b 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd2:	f000 fa8d 	bl	80014f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fd6:	f000 f8bd 	bl	8001154 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000fda:	f000 f937 	bl	800124c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fde:	f000 f9b5 	bl	800134c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fe2:	f000 fa07 	bl	80013f4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000fe6:	f000 fa59 	bl	800149c <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8000fea:	f000 f8f1 	bl	80011d0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t startBuff;
  HAL_UART_Receive_IT(&huart1, &startBuff, 1);
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4820      	ldr	r0, [pc, #128]	@ (8001078 <main+0xb8>)
 8000ff6:	f006 f884 	bl	8007102 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000ffa:	2108      	movs	r1, #8
 8000ffc:	481f      	ldr	r0, [pc, #124]	@ (800107c <main+0xbc>)
 8000ffe:	f005 f84b 	bl	8006098 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001002:	210c      	movs	r1, #12
 8001004:	481d      	ldr	r0, [pc, #116]	@ (800107c <main+0xbc>)
 8001006:	f005 f847 	bl	8006098 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800100a:	213c      	movs	r1, #60	@ 0x3c
 800100c:	481c      	ldr	r0, [pc, #112]	@ (8001080 <main+0xc0>)
 800100e:	f005 f987 	bl	8006320 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001012:	213c      	movs	r1, #60	@ 0x3c
 8001014:	481b      	ldr	r0, [pc, #108]	@ (8001084 <main+0xc4>)
 8001016:	f005 f983 	bl	8006320 <HAL_TIM_Encoder_Start_IT>

  // Initialize maze and set initial goal cells (center of 16x16 maze)
  Maze_Init(&maze);
 800101a:	481b      	ldr	r0, [pc, #108]	@ (8001088 <main+0xc8>)
 800101c:	f001 fbcb 	bl	80027b6 <Maze_Init>
  Set_Goal_Cell(&maze, 4);
 8001020:	2104      	movs	r1, #4
 8001022:	4819      	ldr	r0, [pc, #100]	@ (8001088 <main+0xc8>)
 8001024:	f001 f9b0 	bl	8002388 <Set_Goal_Cell>

  // Initialize mouse state to 0
  bzero(&mouse_state, sizeof(mouse_state_t));
 8001028:	4b18      	ldr	r3, [pc, #96]	@ (800108c <main+0xcc>)
 800102a:	4618      	mov	r0, r3
 800102c:	2320      	movs	r3, #32
 800102e:	461a      	mov	r2, r3
 8001030:	2100      	movs	r1, #0
 8001032:	f006 fe5b 	bl	8007cec <memset>

  Clear_Profile(&forward_profile);
 8001036:	4816      	ldr	r0, [pc, #88]	@ (8001090 <main+0xd0>)
 8001038:	f002 f81c 	bl	8003074 <Clear_Profile>
  Clear_Profile(&rotational_profile);
 800103c:	4815      	ldr	r0, [pc, #84]	@ (8001094 <main+0xd4>)
 800103e:	f002 f819 	bl	8003074 <Clear_Profile>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (armed) {
 8001042:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <main+0xd8>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0fb      	beq.n	8001042 <main+0x82>
		  motor_controller_enabled = true;
 800104a:	4b14      	ldr	r3, [pc, #80]	@ (800109c <main+0xdc>)
 800104c:	2201      	movs	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]
		  adjust_steering = true;
 8001050:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <main+0xe0>)
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
		  switch (mouse_mode) {
 8001056:	4b13      	ldr	r3, [pc, #76]	@ (80010a4 <main+0xe4>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d009      	beq.n	8001072 <main+0xb2>
 800105e:	2b02      	cmp	r3, #2
 8001060:	dcef      	bgt.n	8001042 <main+0x82>
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <main+0xaa>
 8001066:	2b01      	cmp	r3, #1
				  break;
			  case SEARCHING:
				  Search_Mode(&maze);
				  break;
			  case RACING:
				  break;
 8001068:	e004      	b.n	8001074 <main+0xb4>
				  Search_Mode(&maze);
 800106a:	4807      	ldr	r0, [pc, #28]	@ (8001088 <main+0xc8>)
 800106c:	f001 fbd2 	bl	8002814 <Search_Mode>
				  break;
 8001070:	e000      	b.n	8001074 <main+0xb4>
				  break;
 8001072:	bf00      	nop
	  if (armed) {
 8001074:	e7e5      	b.n	8001042 <main+0x82>
 8001076:	bf00      	nop
 8001078:	200001cc 	.word	0x200001cc
 800107c:	200000f4 	.word	0x200000f4
 8001080:	20000184 	.word	0x20000184
 8001084:	2000013c 	.word	0x2000013c
 8001088:	2000024c 	.word	0x2000024c
 800108c:	20000218 	.word	0x20000218
 8001090:	20000b7c 	.word	0x20000b7c
 8001094:	20000ba0 	.word	0x20000ba0
 8001098:	20000240 	.word	0x20000240
 800109c:	20000c50 	.word	0x20000c50
 80010a0:	20000c68 	.word	0x20000c68
 80010a4:	20000b78 	.word	0x20000b78

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b094      	sub	sp, #80	@ 0x50
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010b2:	2228      	movs	r2, #40	@ 0x28
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f006 fe18 	bl	8007cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d8:	2302      	movs	r3, #2
 80010da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010dc:	2301      	movs	r3, #1
 80010de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e0:	2310      	movs	r3, #16
 80010e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e4:	2302      	movs	r3, #2
 80010e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80010e8:	2300      	movs	r3, #0
 80010ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010ec:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80010f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010f6:	4618      	mov	r0, r3
 80010f8:	f004 f9aa 	bl	8005450 <HAL_RCC_OscConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001102:	f000 fad4 	bl	80016ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001106:	230f      	movs	r3, #15
 8001108:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110a:	2302      	movs	r3, #2
 800110c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	2101      	movs	r1, #1
 8001120:	4618      	mov	r0, r3
 8001122:	f004 fc17 	bl	8005954 <HAL_RCC_ClockConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800112c:	f000 fabf 	bl	80016ae <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001130:	2302      	movs	r3, #2
 8001132:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001134:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001138:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f004 fd97 	bl	8005c70 <HAL_RCCEx_PeriphCLKConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001148:	f000 fab1 	bl	80016ae <Error_Handler>
  }
}
 800114c:	bf00      	nop
 800114e:	3750      	adds	r7, #80	@ 0x50
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001164:	4b18      	ldr	r3, [pc, #96]	@ (80011c8 <MX_ADC1_Init+0x74>)
 8001166:	4a19      	ldr	r2, [pc, #100]	@ (80011cc <MX_ADC1_Init+0x78>)
 8001168:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800116a:	4b17      	ldr	r3, [pc, #92]	@ (80011c8 <MX_ADC1_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001170:	4b15      	ldr	r3, [pc, #84]	@ (80011c8 <MX_ADC1_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001176:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <MX_ADC1_Init+0x74>)
 8001178:	2200      	movs	r2, #0
 800117a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <MX_ADC1_Init+0x74>)
 800117e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001182:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001184:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <MX_ADC1_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800118a:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <MX_ADC1_Init+0x74>)
 800118c:	2201      	movs	r2, #1
 800118e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001190:	480d      	ldr	r0, [pc, #52]	@ (80011c8 <MX_ADC1_Init+0x74>)
 8001192:	f003 f977 	bl	8004484 <HAL_ADC_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800119c:	f000 fa87 	bl	80016ae <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011a0:	2305      	movs	r3, #5
 80011a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <MX_ADC1_Init+0x74>)
 80011b2:	f003 fc2b 	bl	8004a0c <HAL_ADC_ConfigChannel>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80011bc:	f000 fa77 	bl	80016ae <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000094 	.word	0x20000094
 80011cc:	40012400 	.word	0x40012400

080011d0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011e0:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <MX_ADC2_Init+0x74>)
 80011e2:	4a19      	ldr	r2, [pc, #100]	@ (8001248 <MX_ADC2_Init+0x78>)
 80011e4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e6:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <MX_ADC2_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <MX_ADC2_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011f2:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <MX_ADC2_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <MX_ADC2_Init+0x74>)
 80011fa:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80011fe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001200:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <MX_ADC2_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001206:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <MX_ADC2_Init+0x74>)
 8001208:	2201      	movs	r2, #1
 800120a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800120c:	480d      	ldr	r0, [pc, #52]	@ (8001244 <MX_ADC2_Init+0x74>)
 800120e:	f003 f939 	bl	8004484 <HAL_ADC_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001218:	f000 fa49 	bl	80016ae <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800121c:	2301      	movs	r3, #1
 800121e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001220:	2301      	movs	r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_ADC2_Init+0x74>)
 800122e:	f003 fbed 	bl	8004a0c <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001238:	f000 fa39 	bl	80016ae <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200000c4 	.word	0x200000c4
 8001248:	40012800 	.word	0x40012800

0800124c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	@ 0x38
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001252:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001260:	f107 0320 	add.w	r3, r7, #32
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
 8001278:	615a      	str	r2, [r3, #20]
 800127a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800127c:	4b32      	ldr	r3, [pc, #200]	@ (8001348 <MX_TIM2_Init+0xfc>)
 800127e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001282:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001284:	4b30      	ldr	r3, [pc, #192]	@ (8001348 <MX_TIM2_Init+0xfc>)
 8001286:	2200      	movs	r2, #0
 8001288:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128a:	4b2f      	ldr	r3, [pc, #188]	@ (8001348 <MX_TIM2_Init+0xfc>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2047;
 8001290:	4b2d      	ldr	r3, [pc, #180]	@ (8001348 <MX_TIM2_Init+0xfc>)
 8001292:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001296:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001298:	4b2b      	ldr	r3, [pc, #172]	@ (8001348 <MX_TIM2_Init+0xfc>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800129e:	4b2a      	ldr	r3, [pc, #168]	@ (8001348 <MX_TIM2_Init+0xfc>)
 80012a0:	2280      	movs	r2, #128	@ 0x80
 80012a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012a4:	4828      	ldr	r0, [pc, #160]	@ (8001348 <MX_TIM2_Init+0xfc>)
 80012a6:	f004 fe4f 	bl	8005f48 <HAL_TIM_Base_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80012b0:	f000 f9fd 	bl	80016ae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012be:	4619      	mov	r1, r3
 80012c0:	4821      	ldr	r0, [pc, #132]	@ (8001348 <MX_TIM2_Init+0xfc>)
 80012c2:	f005 fa8d 	bl	80067e0 <HAL_TIM_ConfigClockSource>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80012cc:	f000 f9ef 	bl	80016ae <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012d0:	481d      	ldr	r0, [pc, #116]	@ (8001348 <MX_TIM2_Init+0xfc>)
 80012d2:	f004 fe88 	bl	8005fe6 <HAL_TIM_PWM_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80012dc:	f000 f9e7 	bl	80016ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	4619      	mov	r1, r3
 80012ee:	4816      	ldr	r0, [pc, #88]	@ (8001348 <MX_TIM2_Init+0xfc>)
 80012f0:	f005 fe12 	bl	8006f18 <HAL_TIMEx_MasterConfigSynchronization>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80012fa:	f000 f9d8 	bl	80016ae <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012fe:	2360      	movs	r3, #96	@ 0x60
 8001300:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2208      	movs	r2, #8
 8001312:	4619      	mov	r1, r3
 8001314:	480c      	ldr	r0, [pc, #48]	@ (8001348 <MX_TIM2_Init+0xfc>)
 8001316:	f005 f9a1 	bl	800665c <HAL_TIM_PWM_ConfigChannel>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001320:	f000 f9c5 	bl	80016ae <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	220c      	movs	r2, #12
 8001328:	4619      	mov	r1, r3
 800132a:	4807      	ldr	r0, [pc, #28]	@ (8001348 <MX_TIM2_Init+0xfc>)
 800132c:	f005 f996 	bl	800665c <HAL_TIM_PWM_ConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001336:	f000 f9ba 	bl	80016ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800133a:	4803      	ldr	r0, [pc, #12]	@ (8001348 <MX_TIM2_Init+0xfc>)
 800133c:	f002 feda 	bl	80040f4 <HAL_TIM_MspPostInit>

}
 8001340:	bf00      	nop
 8001342:	3738      	adds	r7, #56	@ 0x38
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200000f4 	.word	0x200000f4

0800134c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	@ 0x30
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	2224      	movs	r2, #36	@ 0x24
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f006 fcc6 	bl	8007cec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001368:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <MX_TIM3_Init+0xa0>)
 800136a:	4a21      	ldr	r2, [pc, #132]	@ (80013f0 <MX_TIM3_Init+0xa4>)
 800136c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800136e:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <MX_TIM3_Init+0xa0>)
 8001370:	2200      	movs	r2, #0
 8001372:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001374:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <MX_TIM3_Init+0xa0>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800137a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <MX_TIM3_Init+0xa0>)
 800137c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001380:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001382:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <MX_TIM3_Init+0xa0>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001388:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <MX_TIM3_Init+0xa0>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800138e:	2303      	movs	r3, #3
 8001390:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001392:	2302      	movs	r3, #2
 8001394:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001396:	2301      	movs	r3, #1
 8001398:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80013a2:	2302      	movs	r3, #2
 80013a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013a6:	2301      	movs	r3, #1
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	4619      	mov	r1, r3
 80013b8:	480c      	ldr	r0, [pc, #48]	@ (80013ec <MX_TIM3_Init+0xa0>)
 80013ba:	f004 ff0f 	bl	80061dc <HAL_TIM_Encoder_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80013c4:	f000 f973 	bl	80016ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	@ (80013ec <MX_TIM3_Init+0xa0>)
 80013d6:	f005 fd9f 	bl	8006f18 <HAL_TIMEx_MasterConfigSynchronization>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80013e0:	f000 f965 	bl	80016ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	3730      	adds	r7, #48	@ 0x30
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000013c 	.word	0x2000013c
 80013f0:	40000400 	.word	0x40000400

080013f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	@ 0x30
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	2224      	movs	r2, #36	@ 0x24
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f006 fc72 	bl	8007cec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001410:	4b20      	ldr	r3, [pc, #128]	@ (8001494 <MX_TIM4_Init+0xa0>)
 8001412:	4a21      	ldr	r2, [pc, #132]	@ (8001498 <MX_TIM4_Init+0xa4>)
 8001414:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001416:	4b1f      	ldr	r3, [pc, #124]	@ (8001494 <MX_TIM4_Init+0xa0>)
 8001418:	2200      	movs	r2, #0
 800141a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141c:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <MX_TIM4_Init+0xa0>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001422:	4b1c      	ldr	r3, [pc, #112]	@ (8001494 <MX_TIM4_Init+0xa0>)
 8001424:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001428:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142a:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <MX_TIM4_Init+0xa0>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001430:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <MX_TIM4_Init+0xa0>)
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001436:	2303      	movs	r3, #3
 8001438:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800143a:	2302      	movs	r3, #2
 800143c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800143e:	2301      	movs	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800144a:	2302      	movs	r3, #2
 800144c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800144e:	2301      	movs	r3, #1
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4619      	mov	r1, r3
 8001460:	480c      	ldr	r0, [pc, #48]	@ (8001494 <MX_TIM4_Init+0xa0>)
 8001462:	f004 febb 	bl	80061dc <HAL_TIM_Encoder_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800146c:	f000 f91f 	bl	80016ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	@ (8001494 <MX_TIM4_Init+0xa0>)
 800147e:	f005 fd4b 	bl	8006f18 <HAL_TIMEx_MasterConfigSynchronization>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001488:	f000 f911 	bl	80016ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	3730      	adds	r7, #48	@ 0x30
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000184 	.word	0x20000184
 8001498:	40000800 	.word	0x40000800

0800149c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014a0:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <MX_USART1_UART_Init+0x50>)
 80014a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <MX_USART1_UART_Init+0x4c>)
 80014d4:	f005 fd90 	bl	8006ff8 <HAL_UART_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014de:	f000 f8e6 	bl	80016ae <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200001cc 	.word	0x200001cc
 80014ec:	40013800 	.word	0x40013800

080014f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001504:	4b51      	ldr	r3, [pc, #324]	@ (800164c <MX_GPIO_Init+0x15c>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a50      	ldr	r2, [pc, #320]	@ (800164c <MX_GPIO_Init+0x15c>)
 800150a:	f043 0310 	orr.w	r3, r3, #16
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b4e      	ldr	r3, [pc, #312]	@ (800164c <MX_GPIO_Init+0x15c>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0310 	and.w	r3, r3, #16
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	4b4b      	ldr	r3, [pc, #300]	@ (800164c <MX_GPIO_Init+0x15c>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a4a      	ldr	r2, [pc, #296]	@ (800164c <MX_GPIO_Init+0x15c>)
 8001522:	f043 0304 	orr.w	r3, r3, #4
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b48      	ldr	r3, [pc, #288]	@ (800164c <MX_GPIO_Init+0x15c>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001534:	4b45      	ldr	r3, [pc, #276]	@ (800164c <MX_GPIO_Init+0x15c>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a44      	ldr	r2, [pc, #272]	@ (800164c <MX_GPIO_Init+0x15c>)
 800153a:	f043 0308 	orr.w	r3, r3, #8
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b42      	ldr	r3, [pc, #264]	@ (800164c <MX_GPIO_Init+0x15c>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Power_GPIO_Port, LED_Power_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001552:	483f      	ldr	r0, [pc, #252]	@ (8001650 <MX_GPIO_Init+0x160>)
 8001554:	f003 ff32 	bl	80053bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMIT_L_Pin|EMIT_R_Pin|EMIT_FR_Pin|MR_FWD_Pin
 8001558:	2200      	movs	r2, #0
 800155a:	f64f 5120 	movw	r1, #64800	@ 0xfd20
 800155e:	483d      	ldr	r0, [pc, #244]	@ (8001654 <MX_GPIO_Init+0x164>)
 8001560:	f003 ff2c 	bl	80053bc <HAL_GPIO_WritePin>
                          |ML_FWD_Pin|MR_BWD_Pin|EMIT_FL_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800156a:	483b      	ldr	r0, [pc, #236]	@ (8001658 <MX_GPIO_Init+0x168>)
 800156c:	f003 ff26 	bl	80053bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Blue_Pin|LED_Green_Pin, GPIO_PIN_SET);
 8001570:	2201      	movs	r2, #1
 8001572:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 8001576:	4838      	ldr	r0, [pc, #224]	@ (8001658 <MX_GPIO_Init+0x168>)
 8001578:	f003 ff20 	bl	80053bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Power_Pin */
  GPIO_InitStruct.Pin = LED_Power_Pin;
 800157c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001580:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	2301      	movs	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2302      	movs	r3, #2
 800158c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_Power_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	4619      	mov	r1, r3
 8001594:	482e      	ldr	r0, [pc, #184]	@ (8001650 <MX_GPIO_Init+0x160>)
 8001596:	f003 fd8d 	bl	80050b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RACE_SW2_Pin */
  GPIO_InitStruct.Pin = RACE_SW2_Pin;
 800159a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800159e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015a0:	4b2e      	ldr	r3, [pc, #184]	@ (800165c <MX_GPIO_Init+0x16c>)
 80015a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RACE_SW2_GPIO_Port, &GPIO_InitStruct);
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	4619      	mov	r1, r3
 80015ae:	4828      	ldr	r0, [pc, #160]	@ (8001650 <MX_GPIO_Init+0x160>)
 80015b0:	f003 fd80 	bl	80050b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_L_Pin EMIT_R_Pin EMIT_FR_Pin MR_FWD_Pin
                           ML_FWD_Pin MR_BWD_Pin EMIT_FL_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = EMIT_L_Pin|EMIT_R_Pin|EMIT_FR_Pin|MR_FWD_Pin
 80015b4:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80015b8:	613b      	str	r3, [r7, #16]
                          |ML_FWD_Pin|MR_BWD_Pin|EMIT_FL_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c6:	f107 0310 	add.w	r3, r7, #16
 80015ca:	4619      	mov	r1, r3
 80015cc:	4821      	ldr	r0, [pc, #132]	@ (8001654 <MX_GPIO_Init+0x164>)
 80015ce:	f003 fd71 	bl	80050b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ML_BWD_Pin LED_Red_Pin LED_Blue_Pin LED_Green_Pin */
  GPIO_InitStruct.Pin = ML_BWD_Pin|LED_Red_Pin|LED_Blue_Pin|LED_Green_Pin;
 80015d2:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 80015d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2302      	movs	r3, #2
 80015e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	4619      	mov	r1, r3
 80015ea:	481b      	ldr	r0, [pc, #108]	@ (8001658 <MX_GPIO_Init+0x168>)
 80015ec:	f003 fd62 	bl	80050b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARM_SW1_Pin */
  GPIO_InitStruct.Pin = ARM_SW1_Pin;
 80015f0:	2310      	movs	r3, #16
 80015f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015f4:	4b19      	ldr	r3, [pc, #100]	@ (800165c <MX_GPIO_Init+0x16c>)
 80015f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ARM_SW1_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	4619      	mov	r1, r3
 8001602:	4814      	ldr	r0, [pc, #80]	@ (8001654 <MX_GPIO_Init+0x164>)
 8001604:	f003 fd56 	bl	80050b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOADMAZE_SW3_Pin */
  GPIO_InitStruct.Pin = LOADMAZE_SW3_Pin;
 8001608:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800160c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LOADMAZE_SW3_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	4619      	mov	r1, r3
 800161c:	480d      	ldr	r0, [pc, #52]	@ (8001654 <MX_GPIO_Init+0x164>)
 800161e:	f003 fd49 	bl	80050b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	210f      	movs	r1, #15
 8001626:	200a      	movs	r0, #10
 8001628:	f003 fc5b 	bl	8004ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800162c:	200a      	movs	r0, #10
 800162e:	f003 fc74 	bl	8004f1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	210f      	movs	r1, #15
 8001636:	2028      	movs	r0, #40	@ 0x28
 8001638:	f003 fc53 	bl	8004ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800163c:	2028      	movs	r0, #40	@ 0x28
 800163e:	f003 fc6c 	bl	8004f1a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001642:	bf00      	nop
 8001644:	3720      	adds	r7, #32
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000
 8001650:	40011000 	.word	0x40011000
 8001654:	40010c00 	.word	0x40010c00
 8001658:	40010800 	.word	0x40010800
 800165c:	10210000 	.word	0x10210000

08001660 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ARM_SW1_Pin) {       // Set to arm mode
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	2b10      	cmp	r3, #16
 800166e:	d102      	bne.n	8001676 <HAL_GPIO_EXTI_Callback+0x16>
		ARM_Button();
 8001670:	f002 f80a 	bl	8003688 <ARM_Button>
		RACE_Button();
	}
	else if (GPIO_Pin == LOADMAZE_SW3_Pin) { // Load maze from memory into maze struct
		LOADMAZE_Button();
	}
}
 8001674:	e00c      	b.n	8001690 <HAL_GPIO_EXTI_Callback+0x30>
	else if (GPIO_Pin == RACE_SW2_Pin) { // Set to race mode
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800167c:	d102      	bne.n	8001684 <HAL_GPIO_EXTI_Callback+0x24>
		RACE_Button();
 800167e:	f002 f81f 	bl	80036c0 <RACE_Button>
}
 8001682:	e005      	b.n	8001690 <HAL_GPIO_EXTI_Callback+0x30>
	else if (GPIO_Pin == LOADMAZE_SW3_Pin) { // Load maze from memory into maze struct
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800168a:	d101      	bne.n	8001690 <HAL_GPIO_EXTI_Callback+0x30>
		LOADMAZE_Button();
 800168c:	f002 f832 	bl	80036f4 <LOADMAZE_Button>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	UART_Receive_Callback(huart);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 f8cb 	bl	800183c <UART_Receive_Callback>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b2:	b672      	cpsid	i
}
 80016b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b6:	bf00      	nop
 80016b8:	e7fd      	b.n	80016b6 <Error_Handler+0x8>
	...

080016bc <Parse_Receive_Data>:
#define READ_BATT   0b0010  // READ BATTERY: Read battery voltage.
#define PULSE_BUZZ  0b0011  // PULSE BUZZER: Play a short noise from the buzzer.
#define START_RUN   0b0100  // START RUN: Start a maze run. For testing purposes only.
#define PAIRED      0b0101  // PAIRED: Send OK response to verify received.

void Parse_Receive_Data(uint8_t rxBuff) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
	uint8_t command = (rxBuff & 0xF0) >> 4;   // Isolate command code
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	73fb      	strb	r3, [r7, #15]
	uint8_t data    = (rxBuff & 0x0F);        // Isolate other data (not used currently)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	73bb      	strb	r3, [r7, #14]
	(void) data;                              // Temporary to remove warning for unused variable

	switch(command) {
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	2b07      	cmp	r3, #7
 80016d8:	d837      	bhi.n	800174a <Parse_Receive_Data+0x8e>
 80016da:	a201      	add	r2, pc, #4	@ (adr r2, 80016e0 <Parse_Receive_Data+0x24>)
 80016dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e0:	08001701 	.word	0x08001701
 80016e4:	0800171f 	.word	0x0800171f
 80016e8:	0800172f 	.word	0x0800172f
 80016ec:	0800173b 	.word	0x0800173b
 80016f0:	08001743 	.word	0x08001743
 80016f4:	0800174b 	.word	0x0800174b
 80016f8:	0800174b 	.word	0x0800174b
 80016fc:	08001727 	.word	0x08001727
		case SET_MODE:
			debugMode = (debugMode + 1) % 2;
 8001700:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <Parse_Receive_Data+0x98>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	3301      	adds	r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	bfb8      	it	lt
 800170e:	425b      	neglt	r3, r3
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <Parse_Receive_Data+0x98>)
 8001714:	701a      	strb	r2, [r3, #0]
			debugCounter = 0;
 8001716:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <Parse_Receive_Data+0x9c>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
			break;
 800171c:	e016      	b.n	800174c <Parse_Receive_Data+0x90>
		case HALT_RUN:
			armed = false;
 800171e:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <Parse_Receive_Data+0xa0>)
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
			break;
 8001724:	e012      	b.n	800174c <Parse_Receive_Data+0x90>
		case RESUME_RUN:
			HALTED = 0;
 8001726:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <Parse_Receive_Data+0xa4>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
			break;
 800172c:	e00e      	b.n	800174c <Parse_Receive_Data+0x90>
		case READ_BATT:
			HAL_UART_Transmit_IT(&huart1, (uint8_t*)&(mouse_state.battery_voltage), sizeof(double));
 800172e:	2208      	movs	r2, #8
 8001730:	490c      	ldr	r1, [pc, #48]	@ (8001764 <Parse_Receive_Data+0xa8>)
 8001732:	480d      	ldr	r0, [pc, #52]	@ (8001768 <Parse_Receive_Data+0xac>)
 8001734:	f005 fcb0 	bl	8007098 <HAL_UART_Transmit_IT>
			break;
 8001738:	e008      	b.n	800174c <Parse_Receive_Data+0x90>
		case PULSE_BUZZ:
			Pulse_Buzzer(100);
 800173a:	2064      	movs	r0, #100	@ 0x64
 800173c:	f001 ff20 	bl	8003580 <Pulse_Buzzer>
			break;
 8001740:	e004      	b.n	800174c <Parse_Receive_Data+0x90>
		case START_RUN:
			armed = true;
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <Parse_Receive_Data+0xa0>)
 8001744:	2201      	movs	r2, #1
 8001746:	701a      	strb	r2, [r3, #0]
			break;
 8001748:	e000      	b.n	800174c <Parse_Receive_Data+0x90>
		case PAIRED:
			break;
		default:
			break;
 800174a:	bf00      	nop
	}
}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000238 	.word	0x20000238
 8001758:	20000239 	.word	0x20000239
 800175c:	20000240 	.word	0x20000240
 8001760:	20000be4 	.word	0x20000be4
 8001764:	20000230 	.word	0x20000230
 8001768:	200001cc 	.word	0x200001cc

0800176c <Create_Byte_Stream>:

void Create_Byte_Stream(uint8_t txData[PACKET_SIZE]) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	bzero(txData, PACKET_SIZE);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	461a      	mov	r2, r3
 8001778:	2300      	movs	r3, #0
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	6053      	str	r3, [r2, #4]
 800177e:	6093      	str	r3, [r2, #8]
 8001780:	60d3      	str	r3, [r2, #12]
 8001782:	6113      	str	r3, [r2, #16]
 8001784:	6153      	str	r3, [r2, #20]
 8001786:	6193      	str	r3, [r2, #24]

	memcpy(txData, "Debug", 5);
 8001788:	2205      	movs	r2, #5
 800178a:	4922      	ldr	r1, [pc, #136]	@ (8001814 <Create_Byte_Stream+0xa8>)
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f006 faf1 	bl	8007d74 <memcpy>
	memcpy(txData + 5, &mouse_state.current_cell, sizeof(uint8_t));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3305      	adds	r3, #5
 8001796:	4a20      	ldr	r2, [pc, #128]	@ (8001818 <Create_Byte_Stream+0xac>)
 8001798:	7812      	ldrb	r2, [r2, #0]
 800179a:	701a      	strb	r2, [r3, #0]
	memcpy(txData + 6, &mouse_state.rpm.left_rpm, sizeof(uint16_t));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3306      	adds	r3, #6
 80017a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001818 <Create_Byte_Stream+0xac>)
 80017a2:	8892      	ldrh	r2, [r2, #4]
 80017a4:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 8, &mouse_state.rpm.right_rpm, sizeof(uint16_t));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3308      	adds	r3, #8
 80017aa:	4a1b      	ldr	r2, [pc, #108]	@ (8001818 <Create_Byte_Stream+0xac>)
 80017ac:	88d2      	ldrh	r2, [r2, #6]
 80017ae:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 10, &mouse_state.mouse_direction, sizeof(uint8_t));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	330a      	adds	r3, #10
 80017b4:	4a18      	ldr	r2, [pc, #96]	@ (8001818 <Create_Byte_Stream+0xac>)
 80017b6:	78d2      	ldrb	r2, [r2, #3]
 80017b8:	701a      	strb	r2, [r3, #0]
	memset(txData + 11, ((mouse_state.mouse_position[0] << 4) | mouse_state.mouse_position[1]), sizeof(uint8_t));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f103 000b 	add.w	r0, r3, #11
 80017c0:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <Create_Byte_Stream+0xac>)
 80017c2:	785b      	ldrb	r3, [r3, #1]
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	4a14      	ldr	r2, [pc, #80]	@ (8001818 <Create_Byte_Stream+0xac>)
 80017c8:	7892      	ldrb	r2, [r2, #2]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	2201      	movs	r2, #1
 80017ce:	4619      	mov	r1, r3
 80017d0:	f006 fa8c 	bl	8007cec <memset>
	memcpy(txData + 12, &mouse_state.battery_voltage, sizeof(double));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f103 010c 	add.w	r1, r3, #12
 80017da:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <Create_Byte_Stream+0xac>)
 80017dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80017e0:	600a      	str	r2, [r1, #0]
 80017e2:	604b      	str	r3, [r1, #4]
	memcpy(txData + 20, &mouse_state.raw.front_left, sizeof(uint16_t));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3314      	adds	r3, #20
 80017e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001818 <Create_Byte_Stream+0xac>)
 80017ea:	8912      	ldrh	r2, [r2, #8]
 80017ec:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 22, &mouse_state.raw.left, sizeof(uint16_t));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3316      	adds	r3, #22
 80017f2:	4a09      	ldr	r2, [pc, #36]	@ (8001818 <Create_Byte_Stream+0xac>)
 80017f4:	8952      	ldrh	r2, [r2, #10]
 80017f6:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 24, &mouse_state.raw.right, sizeof(uint16_t));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3318      	adds	r3, #24
 80017fc:	4a06      	ldr	r2, [pc, #24]	@ (8001818 <Create_Byte_Stream+0xac>)
 80017fe:	8992      	ldrh	r2, [r2, #12]
 8001800:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 26, &mouse_state.raw.front_right, sizeof(uint16_t));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	331a      	adds	r3, #26
 8001806:	4a04      	ldr	r2, [pc, #16]	@ (8001818 <Create_Byte_Stream+0xac>)
 8001808:	89d2      	ldrh	r2, [r2, #14]
 800180a:	801a      	strh	r2, [r3, #0]
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	08007e38 	.word	0x08007e38
 8001818:	20000218 	.word	0x20000218

0800181c <Debug_Packet_Send>:

// When mouse in debug mode transmit above data.
//  Also transmit start identifier "Debug". This totals to 28 bytes of data transmitted every 50 ms.
void Debug_Packet_Send() {
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	Create_Byte_Stream(txDebug);                                  // Create byte stream
 8001820:	4804      	ldr	r0, [pc, #16]	@ (8001834 <Debug_Packet_Send+0x18>)
 8001822:	f7ff ffa3 	bl	800176c <Create_Byte_Stream>
	HAL_UART_Transmit_IT(&huart1, txDebug, sizeof(txDebug));      // Transmit data
 8001826:	221c      	movs	r2, #28
 8001828:	4902      	ldr	r1, [pc, #8]	@ (8001834 <Debug_Packet_Send+0x18>)
 800182a:	4803      	ldr	r0, [pc, #12]	@ (8001838 <Debug_Packet_Send+0x1c>)
 800182c:	f005 fc34 	bl	8007098 <HAL_UART_Transmit_IT>
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000bc8 	.word	0x20000bc8
 8001838:	200001cc 	.word	0x200001cc

0800183c <UART_Receive_Callback>:

void UART_Receive_Callback(UART_HandleTypeDef *huart) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0a      	ldr	r2, [pc, #40]	@ (8001874 <UART_Receive_Callback+0x38>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d10e      	bne.n	800186c <UART_Receive_Callback+0x30>
		Parse_Receive_Data(rxData);
 800184e:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <UART_Receive_Callback+0x3c>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ff32 	bl	80016bc <Parse_Receive_Data>
		HAL_UART_Transmit_IT(&huart1, &txData, sizeof(txData));      // Transmit response ACK (0xFF)                          // Parse incoming command
 8001858:	2201      	movs	r2, #1
 800185a:	4908      	ldr	r1, [pc, #32]	@ (800187c <UART_Receive_Callback+0x40>)
 800185c:	4808      	ldr	r0, [pc, #32]	@ (8001880 <UART_Receive_Callback+0x44>)
 800185e:	f005 fc1b 	bl	8007098 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart1, &rxData, sizeof(rxData));       // Receive incoming command
 8001862:	2201      	movs	r2, #1
 8001864:	4904      	ldr	r1, [pc, #16]	@ (8001878 <UART_Receive_Callback+0x3c>)
 8001866:	4806      	ldr	r0, [pc, #24]	@ (8001880 <UART_Receive_Callback+0x44>)
 8001868:	f005 fc4b 	bl	8007102 <HAL_UART_Receive_IT>
	}
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40013800 	.word	0x40013800
 8001878:	20000bc4 	.word	0x20000bc4
 800187c:	20000000 	.word	0x20000000
 8001880:	200001cc 	.word	0x200001cc

08001884 <HAL_TIM_IC_CaptureCallback>:
float mouse_position = 0;

uint32_t last_calculated_time[2] = { 0, 0 }; // { last calculated time left, last calculated time right }
uint32_t last_tick_count[2] = { 0, 0 };

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	uint16_t current_count = __HAL_TIM_GET_COUNTER(htim);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001892:	81fb      	strh	r3, [r7, #14]
	if (htim == &htim4) { // Motor right
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a14      	ldr	r2, [pc, #80]	@ (80018e8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d10d      	bne.n	80018b8 <HAL_TIM_IC_CaptureCallback+0x34>
		objective_R -= (int16_t)(current_count - counter_R);
 800189c:	4b13      	ldr	r3, [pc, #76]	@ (80018ec <HAL_TIM_IC_CaptureCallback+0x68>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a13      	ldr	r2, [pc, #76]	@ (80018f0 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80018a2:	8812      	ldrh	r2, [r2, #0]
 80018a4:	89f9      	ldrh	r1, [r7, #14]
 80018a6:	1a8a      	subs	r2, r1, r2
 80018a8:	b292      	uxth	r2, r2
 80018aa:	b212      	sxth	r2, r2
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	4a0f      	ldr	r2, [pc, #60]	@ (80018ec <HAL_TIM_IC_CaptureCallback+0x68>)
 80018b0:	6013      	str	r3, [r2, #0]
		counter_R = current_count;
 80018b2:	4a0f      	ldr	r2, [pc, #60]	@ (80018f0 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80018b4:	89fb      	ldrh	r3, [r7, #14]
 80018b6:	8013      	strh	r3, [r2, #0]
	}
	if (htim == &htim3) { // Motor left
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a0e      	ldr	r2, [pc, #56]	@ (80018f4 <HAL_TIM_IC_CaptureCallback+0x70>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d10d      	bne.n	80018dc <HAL_TIM_IC_CaptureCallback+0x58>
		objective_L -= (int16_t)(current_count - counter_L);
 80018c0:	4b0d      	ldr	r3, [pc, #52]	@ (80018f8 <HAL_TIM_IC_CaptureCallback+0x74>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0d      	ldr	r2, [pc, #52]	@ (80018fc <HAL_TIM_IC_CaptureCallback+0x78>)
 80018c6:	8812      	ldrh	r2, [r2, #0]
 80018c8:	89f9      	ldrh	r1, [r7, #14]
 80018ca:	1a8a      	subs	r2, r1, r2
 80018cc:	b292      	uxth	r2, r2
 80018ce:	b212      	sxth	r2, r2
 80018d0:	1a9b      	subs	r3, r3, r2
 80018d2:	4a09      	ldr	r2, [pc, #36]	@ (80018f8 <HAL_TIM_IC_CaptureCallback+0x74>)
 80018d4:	6013      	str	r3, [r2, #0]
		counter_L = current_count;
 80018d6:	4a09      	ldr	r2, [pc, #36]	@ (80018fc <HAL_TIM_IC_CaptureCallback+0x78>)
 80018d8:	89fb      	ldrh	r3, [r7, #14]
 80018da:	8013      	strh	r3, [r2, #0]
	}
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000184 	.word	0x20000184
 80018ec:	20000248 	.word	0x20000248
 80018f0:	20000be8 	.word	0x20000be8
 80018f4:	2000013c 	.word	0x2000013c
 80018f8:	20000244 	.word	0x20000244
 80018fc:	20000be6 	.word	0x20000be6

08001900 <Calculate_RPM>:

// LIKELY WILL HAVE TO CHANGE
uint16_t Calculate_RPM(int32_t current_ticks, uint8_t motor) {
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
	uint32_t time_difference = global_time - last_calculated_time[motor];
 800190c:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <Calculate_RPM+0x90>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	4920      	ldr	r1, [pc, #128]	@ (8001994 <Calculate_RPM+0x94>)
 8001914:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	60fb      	str	r3, [r7, #12]
	last_calculated_time[motor] = global_time;
 800191c:	78fb      	ldrb	r3, [r7, #3]
 800191e:	4a1c      	ldr	r2, [pc, #112]	@ (8001990 <Calculate_RPM+0x90>)
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	491c      	ldr	r1, [pc, #112]	@ (8001994 <Calculate_RPM+0x94>)
 8001924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	int32_t tick_difference = abs(current_ticks - last_tick_count[motor]);
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	491a      	ldr	r1, [pc, #104]	@ (8001998 <Calculate_RPM+0x98>)
 800192e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	bfb8      	it	lt
 8001938:	425b      	neglt	r3, r3
 800193a:	60bb      	str	r3, [r7, #8]
	last_tick_count[motor] = current_ticks;
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	4915      	ldr	r1, [pc, #84]	@ (8001998 <Calculate_RPM+0x98>)
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return ((MS_PER_SEC * SEC_PER_MIN * tick_difference) / (TICKS_PER_ROTATION * time_difference));
 8001946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800194a:	223c      	movs	r2, #60	@ 0x3c
 800194c:	fb02 f303 	mul.w	r3, r2, r3
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f8f8 	bl	8000b4c <__aeabi_i2f>
 800195c:	4604      	mov	r4, r0
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f7ff f8f0 	bl	8000b44 <__aeabi_ui2f>
 8001964:	4603      	mov	r3, r0
 8001966:	4a0d      	ldr	r2, [pc, #52]	@ (800199c <Calculate_RPM+0x9c>)
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff f942 	bl	8000bf4 <__aeabi_fmul>
 8001970:	4603      	mov	r3, r0
 8001972:	4619      	mov	r1, r3
 8001974:	4620      	mov	r0, r4
 8001976:	f7ff f9f1 	bl	8000d5c <__aeabi_fdiv>
 800197a:	4603      	mov	r3, r0
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff faff 	bl	8000f80 <__aeabi_f2uiz>
 8001982:	4603      	mov	r3, r0
 8001984:	b29b      	uxth	r3, r3
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	bd90      	pop	{r4, r7, pc}
 800198e:	bf00      	nop
 8001990:	2000023c 	.word	0x2000023c
 8001994:	20000bfc 	.word	0x20000bfc
 8001998:	20000c04 	.word	0x20000c04
 800199c:	43b328f6 	.word	0x43b328f6

080019a0 <Update_Encoders>:

void Update_Encoders() {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
	int32_t delta_tick_right = objective_R;
 80019a6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a5c <Update_Encoders+0xbc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	60fb      	str	r3, [r7, #12]
	int32_t delta_tick_left = objective_L;
 80019ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001a60 <Update_Encoders+0xc0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60bb      	str	r3, [r7, #8]
	objective_R = 0;
 80019b2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a5c <Update_Encoders+0xbc>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
	objective_L = 0;
 80019b8:	4b29      	ldr	r3, [pc, #164]	@ (8001a60 <Update_Encoders+0xc0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]

	float delta_position_right = delta_tick_right * MM_PER_TICK_LEFT;
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f7ff f8c4 	bl	8000b4c <__aeabi_i2f>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4a27      	ldr	r2, [pc, #156]	@ (8001a64 <Update_Encoders+0xc4>)
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f912 	bl	8000bf4 <__aeabi_fmul>
 80019d0:	4603      	mov	r3, r0
 80019d2:	607b      	str	r3, [r7, #4]
	float delta_position_left = delta_tick_left * MM_PER_TICK_RIGHT;
 80019d4:	68b8      	ldr	r0, [r7, #8]
 80019d6:	f7ff f8b9 	bl	8000b4c <__aeabi_i2f>
 80019da:	4603      	mov	r3, r0
 80019dc:	4a22      	ldr	r2, [pc, #136]	@ (8001a68 <Update_Encoders+0xc8>)
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff f907 	bl	8000bf4 <__aeabi_fmul>
 80019e6:	4603      	mov	r3, r0
 80019e8:	603b      	str	r3, [r7, #0]
	delta_position_forward = (delta_position_right + delta_position_left) / 2; // average change in position
 80019ea:	6839      	ldr	r1, [r7, #0]
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7fe fff9 	bl	80009e4 <__addsf3>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff f9af 	bl	8000d5c <__aeabi_fdiv>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b1a      	ldr	r3, [pc, #104]	@ (8001a6c <Update_Encoders+0xcc>)
 8001a04:	601a      	str	r2, [r3, #0]
	mouse_position += delta_position_forward;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <Update_Encoders+0xd0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a18      	ldr	r2, [pc, #96]	@ (8001a6c <Update_Encoders+0xcc>)
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe ffe7 	bl	80009e4 <__addsf3>
 8001a16:	4603      	mov	r3, r0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <Update_Encoders+0xd0>)
 8001a1c:	601a      	str	r2, [r3, #0]
	delta_position_rotational = (delta_position_right - delta_position_left) * DEG_PER_MM_DIFFERENCE;
 8001a1e:	6839      	ldr	r1, [r7, #0]
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7fe ffdd 	bl	80009e0 <__aeabi_fsub>
 8001a26:	4603      	mov	r3, r0
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <Update_Encoders+0xd4>)
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4610      	mov	r0, r2
 8001a30:	f7ff f8e0 	bl	8000bf4 <__aeabi_fmul>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <Update_Encoders+0xd8>)
 8001a3a:	601a      	str	r2, [r3, #0]
	mouse_angle += delta_position_rotational;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <Update_Encoders+0xdc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0d      	ldr	r2, [pc, #52]	@ (8001a78 <Update_Encoders+0xd8>)
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	4611      	mov	r1, r2
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe ffcc 	bl	80009e4 <__addsf3>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4b0a      	ldr	r3, [pc, #40]	@ (8001a7c <Update_Encoders+0xdc>)
 8001a52:	601a      	str	r2, [r3, #0]
}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000248 	.word	0x20000248
 8001a60:	20000244 	.word	0x20000244
 8001a64:	3e88d4c9 	.word	0x3e88d4c9
 8001a68:	3e77996d 	.word	0x3e77996d
 8001a6c:	20000bec 	.word	0x20000bec
 8001a70:	20000bf8 	.word	0x20000bf8
 8001a74:	3f3af1f8 	.word	0x3f3af1f8
 8001a78:	20000bf0 	.word	0x20000bf0
 8001a7c:	20000bf4 	.word	0x20000bf4

08001a80 <Off_Maze>:
char dir_chars[4] = {'n', 'e', 's', 'w'};
enum DirectionBitmask mask_array[4] = {NORTH_MASK, EAST_MASK, SOUTH_MASK, WEST_MASK};

prev_action_t prev_action = ABOUT_FACE;

bool Off_Maze(int mouse_pos_x, int mouse_pos_y) {
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
    if (mouse_pos_x < 0 || mouse_pos_x > 15 || mouse_pos_y < 0 || mouse_pos_y > 15) {
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	db08      	blt.n	8001aa2 <Off_Maze+0x22>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b0f      	cmp	r3, #15
 8001a94:	dc05      	bgt.n	8001aa2 <Off_Maze+0x22>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	db02      	blt.n	8001aa2 <Off_Maze+0x22>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	2b0f      	cmp	r3, #15
 8001aa0:	dd01      	ble.n	8001aa6 <Off_Maze+0x26>
        return false; // False means a cell is off of the maze
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e000      	b.n	8001aa8 <Off_Maze+0x28>
    }
    return true;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr

08001ab2 <Get_Neighbor_Cells>:

param_t fwd_placeholder_1 = { 0 };
param_t fwd_placeholder_2 = { 0 };
param_t rot_placeholder_1 = { 0 };

struct CellList* Get_Neighbor_Cells(struct Maze* maze, struct Coord* pos) {
 8001ab2:	b590      	push	{r4, r7, lr}
 8001ab4:	b093      	sub	sp, #76	@ 0x4c
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
	struct CellList* cell_list = (struct CellList*)malloc(sizeof(struct CellList));
 8001abc:	2008      	movs	r0, #8
 8001abe:	f006 f857 	bl	8007b70 <malloc>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c

    bool north_cell = false, east_cell = false, south_cell = false, west_cell = false;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001acc:	2300      	movs	r3, #0
 8001ace:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t x_coord = pos->x, y_coord = pos->y;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    uint8_t num_cells = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    // If a cell is adjacent to the cell represented by pos, exists in the 16x16 maze, and is not blocked by a wall, add it to the cell list
    if (Off_Maze(x_coord, y_coord+1) && !(maze->cellWalls[y_coord][x_coord] & NORTH_MASK)) { north_cell = true; num_cells++; } // NORTH
 8001af4:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8001af8:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001afc:	3301      	adds	r3, #1
 8001afe:	4619      	mov	r1, r3
 8001b00:	4610      	mov	r0, r2
 8001b02:	f7ff ffbd 	bl	8001a80 <Off_Maze>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d017      	beq.n	8001b3c <Get_Neighbor_Cells+0x8a>
 8001b0c:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8001b10:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	0109      	lsls	r1, r1, #4
 8001b18:	440b      	add	r3, r1
 8001b1a:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d107      	bne.n	8001b3c <Get_Neighbor_Cells+0x8a>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001b32:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001b36:	3301      	adds	r3, #1
 8001b38:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (Off_Maze(x_coord+1, y_coord) && !(maze->cellWalls[y_coord][x_coord] & EAST_MASK)) { east_cell = true; num_cells++; }   // EAST
 8001b3c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001b40:	3301      	adds	r3, #1
 8001b42:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff99 	bl	8001a80 <Off_Maze>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d017      	beq.n	8001b84 <Get_Neighbor_Cells+0xd2>
 8001b54:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8001b58:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	0109      	lsls	r1, r1, #4
 8001b60:	440b      	add	r3, r1
 8001b62:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d107      	bne.n	8001b84 <Get_Neighbor_Cells+0xd2>
 8001b74:	2301      	movs	r3, #1
 8001b76:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001b7a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (Off_Maze(x_coord, y_coord-1) && !(maze->cellWalls[y_coord][x_coord] & SOUTH_MASK)) { south_cell = true; num_cells++; } // SOUTH
 8001b84:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8001b88:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4610      	mov	r0, r2
 8001b92:	f7ff ff75 	bl	8001a80 <Off_Maze>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d017      	beq.n	8001bcc <Get_Neighbor_Cells+0x11a>
 8001b9c:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8001ba0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	0109      	lsls	r1, r1, #4
 8001ba8:	440b      	add	r3, r1
 8001baa:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d107      	bne.n	8001bcc <Get_Neighbor_Cells+0x11a>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8001bc2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (Off_Maze(x_coord-1, y_coord) && !(maze->cellWalls[y_coord][x_coord] & WEST_MASK)) { west_cell = true; num_cells++; }   // WEST
 8001bcc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff51 	bl	8001a80 <Off_Maze>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d017      	beq.n	8001c14 <Get_Neighbor_Cells+0x162>
 8001be4:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8001be8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	0109      	lsls	r1, r1, #4
 8001bf0:	440b      	add	r3, r1
 8001bf2:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d107      	bne.n	8001c14 <Get_Neighbor_Cells+0x162>
 8001c04:	2301      	movs	r3, #1
 8001c06:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8001c0a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001c0e:	3301      	adds	r3, #1
 8001c10:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    cell_list->size = num_cells;
 8001c14:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8001c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c1a:	601a      	str	r2, [r3, #0]
    cell_list->cells = (struct Cell*)malloc(num_cells*sizeof(struct Cell));
 8001c1c:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8001c20:	4613      	mov	r3, r2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4413      	add	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f005 ffa1 	bl	8007b70 <malloc>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	461a      	mov	r2, r3
 8001c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c34:	605a      	str	r2, [r3, #4]

    uint8_t i = 0; // Create new cells with appropriate coordinate and direction and add to the cell list if it is not blocked or off the maze
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    if (north_cell) {
 8001c3c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d01e      	beq.n	8001c82 <Get_Neighbor_Cells+0x1d0>
    	struct Cell new_cell = {{x_coord, y_coord+1}, NORTH}; // NORTH
 8001c44:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c4a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001c4e:	3301      	adds	r3, #1
 8001c50:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c52:	2300      	movs	r3, #0
 8001c54:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        cell_list->cells[i] = new_cell; i++;
 8001c58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	461c      	mov	r4, r3
 8001c6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c78:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    }
    if (east_cell) {
 8001c82:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d01e      	beq.n	8001cc8 <Get_Neighbor_Cells+0x216>
    	struct Cell new_cell = {{x_coord+1, y_coord}, EAST};  // EAST
 8001c8a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c8e:	3301      	adds	r3, #1
 8001c90:	623b      	str	r3, [r7, #32]
 8001c92:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        cell_list->cells[i] = new_cell; i++;
 8001c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ca0:	6859      	ldr	r1, [r3, #4]
 8001ca2:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	461c      	mov	r4, r3
 8001cb2:	f107 0320 	add.w	r3, r7, #32
 8001cb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001cba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cbe:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    }
    if (south_cell) {
 8001cc8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d01d      	beq.n	8001d0c <Get_Neighbor_Cells+0x25a>
    	struct Cell new_cell = {{x_coord, y_coord-1}, SOUTH}; // SOUTH
 8001cd0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	61bb      	str	r3, [r7, #24]
 8001cde:	2302      	movs	r3, #2
 8001ce0:	773b      	strb	r3, [r7, #28]
        cell_list->cells[i] = new_cell; i++;
 8001ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ce4:	6859      	ldr	r1, [r3, #4]
 8001ce6:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	461c      	mov	r4, r3
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001cfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d02:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001d06:	3301      	adds	r3, #1
 8001d08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    }
    if (west_cell) {
 8001d0c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d01d      	beq.n	8001d50 <Get_Neighbor_Cells+0x29e>
    	struct Cell new_cell = {{x_coord-1, y_coord}, WEST}; // WEST
 8001d14:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	2303      	movs	r3, #3
 8001d24:	743b      	strb	r3, [r7, #16]
        cell_list->cells[i] = new_cell; i++;
 8001d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d28:	6859      	ldr	r1, [r3, #4]
 8001d2a:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	461c      	mov	r4, r3
 8001d3a:	f107 0308 	add.w	r3, r7, #8
 8001d3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d46:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    }
    return cell_list;
 8001d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	374c      	adds	r7, #76	@ 0x4c
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd90      	pop	{r4, r7, pc}
	...

08001d5c <Scan_Walls>:

uint8_t Scan_Walls(struct Maze* maze) { // Checks wall information based on mouse's current position and updates maze walls. Returns an integer 0-3 depending on # of walls spotted
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
    enum Direction cur_dir = maze->mouse_dir;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7a1b      	ldrb	r3, [r3, #8]
 8001d68:	75bb      	strb	r3, [r7, #22]
    struct Coord cur_pos = maze->mouse_pos;
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d74:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t walls_changed = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	75fb      	strb	r3, [r7, #23]

    Poll_Sensors(&mouse_state);
 8001d7c:	48b0      	ldr	r0, [pc, #704]	@ (8002040 <Scan_Walls+0x2e4>)
 8001d7e:	f001 fee1 	bl	8003b44 <Poll_Sensors>
    if (Wall_Front()) {
 8001d82:	f001 ff3b 	bl	8003bfc <Wall_Front>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 80cf 	beq.w	8001f2c <Scan_Walls+0x1d0>
        maze->cellWalls[cur_pos.y][cur_pos.x] |= mask_array[cur_dir];
 8001d8e:	6939      	ldr	r1, [r7, #16]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	0109      	lsls	r1, r1, #4
 8001d96:	440b      	add	r3, r1
 8001d98:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	7dbb      	ldrb	r3, [r7, #22]
 8001da4:	49a7      	ldr	r1, [pc, #668]	@ (8002044 <Scan_Walls+0x2e8>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	4619      	mov	r1, r3
 8001daa:	6938      	ldr	r0, [r7, #16]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	0100      	lsls	r0, r0, #4
 8001db4:	4403      	add	r3, r0
 8001db6:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	605a      	str	r2, [r3, #4]
        walls_changed += 1;
 8001dc0:	7dfb      	ldrb	r3, [r7, #23]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	75fb      	strb	r3, [r7, #23]
        switch (cur_dir) { // Update adjacent walls with relevant wall information
 8001dc6:	7dbb      	ldrb	r3, [r7, #22]
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	f200 80af 	bhi.w	8001f2c <Scan_Walls+0x1d0>
 8001dce:	a201      	add	r2, pc, #4	@ (adr r2, 8001dd4 <Scan_Walls+0x78>)
 8001dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd4:	08001de5 	.word	0x08001de5
 8001dd8:	08001e35 	.word	0x08001e35
 8001ddc:	08001e83 	.word	0x08001e83
 8001de0:	08001ed1 	.word	0x08001ed1
            case (NORTH):
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	3301      	adds	r3, #1
 8001dea:	4619      	mov	r1, r3
 8001dec:	4610      	mov	r0, r2
 8001dee:	f7ff fe47 	bl	8001a80 <Off_Maze>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 8092 	beq.w	8001f1e <Scan_Walls+0x1c2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	1c59      	adds	r1, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	0109      	lsls	r1, r1, #4
 8001e08:	440b      	add	r3, r1
 8001e0a:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	1c58      	adds	r0, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0202 	orr.w	r2, r2, #2
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	0100      	lsls	r0, r0, #4
 8001e26:	4403      	add	r3, r0
 8001e28:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	e074      	b.n	8001f1e <Scan_Walls+0x1c2>
            case (EAST):
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3301      	adds	r3, #1
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fe1f 	bl	8001a80 <Off_Maze>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d06c      	beq.n	8001f22 <Scan_Walls+0x1c6>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	0109      	lsls	r1, r1, #4
 8001e56:	440b      	add	r3, r1
 8001e58:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6858      	ldr	r0, [r3, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f042 0201 	orr.w	r2, r2, #1
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	0100      	lsls	r0, r0, #4
 8001e74:	4403      	add	r3, r0
 8001e76:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	e04f      	b.n	8001f22 <Scan_Walls+0x1c6>
            case (SOUTH):
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	f7ff fdf8 	bl	8001a80 <Off_Maze>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d047      	beq.n	8001f26 <Scan_Walls+0x1ca>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	1e59      	subs	r1, r3, #1
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	0109      	lsls	r1, r1, #4
 8001ea4:	440b      	add	r3, r1
 8001ea6:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	1e58      	subs	r0, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0208 	orr.w	r2, r2, #8
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	0100      	lsls	r0, r0, #4
 8001ec2:	4403      	add	r3, r0
 8001ec4:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	e02a      	b.n	8001f26 <Scan_Walls+0x1ca>
            case (WEST):
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fdd1 	bl	8001a80 <Off_Maze>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d022      	beq.n	8001f2a <Scan_Walls+0x1ce>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6859      	ldr	r1, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	0109      	lsls	r1, r1, #4
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6858      	ldr	r0, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	f042 0204 	orr.w	r2, r2, #4
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	0100      	lsls	r0, r0, #4
 8001f10:	4403      	add	r3, r0
 8001f12:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	e005      	b.n	8001f2a <Scan_Walls+0x1ce>
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 8001f1e:	bf00      	nop
 8001f20:	e004      	b.n	8001f2c <Scan_Walls+0x1d0>
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 8001f22:	bf00      	nop
 8001f24:	e002      	b.n	8001f2c <Scan_Walls+0x1d0>
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 8001f26:	bf00      	nop
 8001f28:	e000      	b.n	8001f2c <Scan_Walls+0x1d0>
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 8001f2a:	bf00      	nop
        }
    }
    if (Wall_Right()) {
 8001f2c:	f001 fec2 	bl	8003cb4 <Wall_Right>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 80dd 	beq.w	80020f2 <Scan_Walls+0x396>
        maze->cellWalls[cur_pos.y][cur_pos.x] |= mask_array[(cur_dir + 3) % 4];
 8001f38:	6939      	ldr	r1, [r7, #16]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	0109      	lsls	r1, r1, #4
 8001f40:	440b      	add	r3, r1
 8001f42:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	7dbb      	ldrb	r3, [r7, #22]
 8001f4e:	3303      	adds	r3, #3
 8001f50:	4259      	negs	r1, r3
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	f001 0103 	and.w	r1, r1, #3
 8001f5a:	bf58      	it	pl
 8001f5c:	424b      	negpl	r3, r1
 8001f5e:	4939      	ldr	r1, [pc, #228]	@ (8002044 <Scan_Walls+0x2e8>)
 8001f60:	5ccb      	ldrb	r3, [r1, r3]
 8001f62:	4619      	mov	r1, r3
 8001f64:	6938      	ldr	r0, [r7, #16]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	0100      	lsls	r0, r0, #4
 8001f6e:	4403      	add	r3, r0
 8001f70:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	605a      	str	r2, [r3, #4]
        walls_changed += 1;
 8001f7a:	7dfb      	ldrb	r3, [r7, #23]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	75fb      	strb	r3, [r7, #23]
        switch (cur_dir) {
 8001f80:	7dbb      	ldrb	r3, [r7, #22]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	f200 80b5 	bhi.w	80020f2 <Scan_Walls+0x396>
 8001f88:	a201      	add	r2, pc, #4	@ (adr r2, 8001f90 <Scan_Walls+0x234>)
 8001f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8e:	bf00      	nop
 8001f90:	08001fa1 	.word	0x08001fa1
 8001f94:	08001ff1 	.word	0x08001ff1
 8001f98:	08002049 	.word	0x08002049
 8001f9c:	08002097 	.word	0x08002097
            case (NORTH):
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fd69 	bl	8001a80 <Off_Maze>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 8097 	beq.w	80020e4 <Scan_Walls+0x388>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6859      	ldr	r1, [r3, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	0109      	lsls	r1, r1, #4
 8001fc4:	440b      	add	r3, r1
 8001fc6:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6858      	ldr	r0, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	f042 0204 	orr.w	r2, r2, #4
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	0100      	lsls	r0, r0, #4
 8001fe2:	4403      	add	r3, r0
 8001fe4:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	e079      	b.n	80020e4 <Scan_Walls+0x388>
            case (EAST):
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	f7ff fd41 	bl	8001a80 <Off_Maze>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d071      	beq.n	80020e8 <Scan_Walls+0x38c>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	1c59      	adds	r1, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	0109      	lsls	r1, r1, #4
 8002012:	440b      	add	r3, r1
 8002014:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	1c58      	adds	r0, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0202 	orr.w	r2, r2, #2
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	0100      	lsls	r0, r0, #4
 8002030:	4403      	add	r3, r0
 8002032:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	e054      	b.n	80020e8 <Scan_Walls+0x38c>
 800203e:	bf00      	nop
 8002040:	20000218 	.word	0x20000218
 8002044:	20000004 	.word	0x20000004
            case (SOUTH):
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	3301      	adds	r3, #1
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fd15 	bl	8001a80 <Off_Maze>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d047      	beq.n	80020ec <Scan_Walls+0x390>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6859      	ldr	r1, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3301      	adds	r3, #1
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	0109      	lsls	r1, r1, #4
 800206a:	440b      	add	r3, r1
 800206c:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6858      	ldr	r0, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	f042 0201 	orr.w	r2, r2, #1
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	0100      	lsls	r0, r0, #4
 8002088:	4403      	add	r3, r0
 800208a:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	e02a      	b.n	80020ec <Scan_Walls+0x390>
            case (WEST):
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	3b01      	subs	r3, #1
 800209c:	4619      	mov	r1, r3
 800209e:	4610      	mov	r0, r2
 80020a0:	f7ff fcee 	bl	8001a80 <Off_Maze>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d022      	beq.n	80020f0 <Scan_Walls+0x394>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	1e59      	subs	r1, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	0109      	lsls	r1, r1, #4
 80020b8:	440b      	add	r3, r1
 80020ba:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	1e58      	subs	r0, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0208 	orr.w	r2, r2, #8
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	0100      	lsls	r0, r0, #4
 80020d6:	4403      	add	r3, r0
 80020d8:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	e005      	b.n	80020f0 <Scan_Walls+0x394>
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 80020e4:	bf00      	nop
 80020e6:	e004      	b.n	80020f2 <Scan_Walls+0x396>
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 80020e8:	bf00      	nop
 80020ea:	e002      	b.n	80020f2 <Scan_Walls+0x396>
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 80020ec:	bf00      	nop
 80020ee:	e000      	b.n	80020f2 <Scan_Walls+0x396>
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 80020f0:	bf00      	nop
        }
    }
    if (Wall_Left()) {
 80020f2:	f001 fdb7 	bl	8003c64 <Wall_Left>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 80d7 	beq.w	80022ac <Scan_Walls+0x550>
        maze->cellWalls[cur_pos.y][cur_pos.x] |= mask_array[(cur_dir + 1) % 4];
 80020fe:	6939      	ldr	r1, [r7, #16]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	0109      	lsls	r1, r1, #4
 8002106:	440b      	add	r3, r1
 8002108:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	7dbb      	ldrb	r3, [r7, #22]
 8002114:	3301      	adds	r3, #1
 8002116:	4259      	negs	r1, r3
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	f001 0103 	and.w	r1, r1, #3
 8002120:	bf58      	it	pl
 8002122:	424b      	negpl	r3, r1
 8002124:	4964      	ldr	r1, [pc, #400]	@ (80022b8 <Scan_Walls+0x55c>)
 8002126:	5ccb      	ldrb	r3, [r1, r3]
 8002128:	4619      	mov	r1, r3
 800212a:	6938      	ldr	r0, [r7, #16]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	430a      	orrs	r2, r1
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	0100      	lsls	r0, r0, #4
 8002134:	4403      	add	r3, r0
 8002136:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	605a      	str	r2, [r3, #4]
        walls_changed += 1;
 8002140:	7dfb      	ldrb	r3, [r7, #23]
 8002142:	3301      	adds	r3, #1
 8002144:	75fb      	strb	r3, [r7, #23]
        switch (cur_dir) {
 8002146:	7dbb      	ldrb	r3, [r7, #22]
 8002148:	2b03      	cmp	r3, #3
 800214a:	f200 80af 	bhi.w	80022ac <Scan_Walls+0x550>
 800214e:	a201      	add	r2, pc, #4	@ (adr r2, 8002154 <Scan_Walls+0x3f8>)
 8002150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002154:	08002165 	.word	0x08002165
 8002158:	080021b5 	.word	0x080021b5
 800215c:	08002203 	.word	0x08002203
 8002160:	08002251 	.word	0x08002251
            case (NORTH):
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3301      	adds	r3, #1
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fc87 	bl	8001a80 <Off_Maze>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 8092 	beq.w	800229e <Scan_Walls+0x542>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6859      	ldr	r1, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3301      	adds	r3, #1
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	0109      	lsls	r1, r1, #4
 8002188:	440b      	add	r3, r1
 800218a:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6858      	ldr	r0, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	3301      	adds	r3, #1
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	0100      	lsls	r0, r0, #4
 80021a6:	4403      	add	r3, r0
 80021a8:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	e074      	b.n	800229e <Scan_Walls+0x542>
            case (EAST):
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	3b01      	subs	r3, #1
 80021ba:	4619      	mov	r1, r3
 80021bc:	4610      	mov	r0, r2
 80021be:	f7ff fc5f 	bl	8001a80 <Off_Maze>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d06c      	beq.n	80022a2 <Scan_Walls+0x546>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	1e59      	subs	r1, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	0109      	lsls	r1, r1, #4
 80021d6:	440b      	add	r3, r1
 80021d8:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	1e58      	subs	r0, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 0208 	orr.w	r2, r2, #8
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	0100      	lsls	r0, r0, #4
 80021f4:	4403      	add	r3, r0
 80021f6:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	e04f      	b.n	80022a2 <Scan_Walls+0x546>
            case (SOUTH):
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	3b01      	subs	r3, #1
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fc38 	bl	8001a80 <Off_Maze>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d047      	beq.n	80022a6 <Scan_Walls+0x54a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6859      	ldr	r1, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3b01      	subs	r3, #1
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	0109      	lsls	r1, r1, #4
 8002224:	440b      	add	r3, r1
 8002226:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6858      	ldr	r0, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	3b01      	subs	r3, #1
 800223a:	f042 0204 	orr.w	r2, r2, #4
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	0100      	lsls	r0, r0, #4
 8002242:	4403      	add	r3, r0
 8002244:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	e02a      	b.n	80022a6 <Scan_Walls+0x54a>
            case (WEST):
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	3301      	adds	r3, #1
 8002256:	4619      	mov	r1, r3
 8002258:	4610      	mov	r0, r2
 800225a:	f7ff fc11 	bl	8001a80 <Off_Maze>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d022      	beq.n	80022aa <Scan_Walls+0x54e>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	1c59      	adds	r1, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	0109      	lsls	r1, r1, #4
 8002272:	440b      	add	r3, r1
 8002274:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	1c58      	adds	r0, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f042 0202 	orr.w	r2, r2, #2
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	0100      	lsls	r0, r0, #4
 8002290:	4403      	add	r3, r0
 8002292:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	e005      	b.n	80022aa <Scan_Walls+0x54e>
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 800229e:	bf00      	nop
 80022a0:	e004      	b.n	80022ac <Scan_Walls+0x550>
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 80022a2:	bf00      	nop
 80022a4:	e002      	b.n	80022ac <Scan_Walls+0x550>
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 80022a6:	bf00      	nop
 80022a8:	e000      	b.n	80022ac <Scan_Walls+0x550>
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 80022aa:	bf00      	nop
        }
    }
    return walls_changed;
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000004 	.word	0x20000004

080022bc <Update_Mouse_Pos>:

void Update_Mouse_Pos(struct Coord *pos, enum Direction dir)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	70fb      	strb	r3, [r7, #3]
	maze.exploredCells[pos->y][pos->x] = true;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	492b      	ldr	r1, [pc, #172]	@ (8002380 <Update_Mouse_Pos+0xc4>)
 80022d2:	0112      	lsls	r2, r2, #4
 80022d4:	440a      	add	r2, r1
 80022d6:	4413      	add	r3, r2
 80022d8:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 80022dc:	2201      	movs	r2, #1
 80022de:	701a      	strb	r2, [r3, #0]

    if      (dir == NORTH) { pos->y++; }
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d105      	bne.n	80022f2 <Update_Mouse_Pos+0x36>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	e019      	b.n	8002326 <Update_Mouse_Pos+0x6a>
    else if (dir == SOUTH) { pos->y--; }
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d105      	bne.n	8002304 <Update_Mouse_Pos+0x48>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	1e5a      	subs	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	e010      	b.n	8002326 <Update_Mouse_Pos+0x6a>
    else if (dir == WEST)  { pos->x--; }
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	2b03      	cmp	r3, #3
 8002308:	d105      	bne.n	8002316 <Update_Mouse_Pos+0x5a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	1e5a      	subs	r2, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	e007      	b.n	8002326 <Update_Mouse_Pos+0x6a>
    else if (dir == EAST)  { pos->x++; }
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d104      	bne.n	8002326 <Update_Mouse_Pos+0x6a>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	601a      	str	r2, [r3, #0]

    maze.exploredCells[pos->y][pos->x] = true;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4914      	ldr	r1, [pc, #80]	@ (8002380 <Update_Mouse_Pos+0xc4>)
 8002330:	0112      	lsls	r2, r2, #4
 8002332:	440a      	add	r2, r1
 8002334:	4413      	add	r3, r2
 8002336:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]

    mouse_state.current_cell = maze.cellWalls[pos->y][pos->x];
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	490e      	ldr	r1, [pc, #56]	@ (8002380 <Update_Mouse_Pos+0xc4>)
 8002348:	0112      	lsls	r2, r2, #4
 800234a:	4413      	add	r3, r2
 800234c:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	b2da      	uxtb	r2, r3
 8002358:	4b0a      	ldr	r3, [pc, #40]	@ (8002384 <Update_Mouse_Pos+0xc8>)
 800235a:	701a      	strb	r2, [r3, #0]
	mouse_state.mouse_position[0] = (uint8_t)pos->x;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4b08      	ldr	r3, [pc, #32]	@ (8002384 <Update_Mouse_Pos+0xc8>)
 8002364:	705a      	strb	r2, [r3, #1]
	mouse_state.mouse_position[1] = (uint8_t)pos->y;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	b2da      	uxtb	r2, r3
 800236c:	4b05      	ldr	r3, [pc, #20]	@ (8002384 <Update_Mouse_Pos+0xc8>)
 800236e:	709a      	strb	r2, [r3, #2]
	mouse_state.mouse_direction = dir;
 8002370:	4a04      	ldr	r2, [pc, #16]	@ (8002384 <Update_Mouse_Pos+0xc8>)
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	70d3      	strb	r3, [r2, #3]
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr
 8002380:	2000024c 	.word	0x2000024c
 8002384:	20000218 	.word	0x20000218

08002388 <Set_Goal_Cell>:

void Set_Goal_Cell(struct Maze* maze, int num_of_goals) {
 8002388:	b480      	push	{r7}
 800238a:	b08d      	sub	sp, #52	@ 0x34
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
    if (num_of_goals == 1) {
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d108      	bne.n	80023aa <Set_Goal_Cell+0x22>
		maze->goalPos[0] = (struct Coord){0, 0};
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f8c3 2910 	str.w	r2, [r3, #2320]	@ 0x910
    	maze->goalPos[0] = (struct Coord){7, 7};
		maze->goalPos[1] = (struct Coord){7, 8};
		maze->goalPos[2] = (struct Coord){8, 7};
		maze->goalPos[3] = (struct Coord){8, 8};
    }
}
 80023a8:	e022      	b.n	80023f0 <Set_Goal_Cell+0x68>
    else if (num_of_goals == 4) {
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d11f      	bne.n	80023f0 <Set_Goal_Cell+0x68>
    	maze->goalPos[0] = (struct Coord){7, 7};
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a12      	ldr	r2, [pc, #72]	@ (80023fc <Set_Goal_Cell+0x74>)
 80023b4:	f603 130c 	addw	r3, r3, #2316	@ 0x90c
 80023b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023bc:	e883 0003 	stmia.w	r3, {r0, r1}
		maze->goalPos[1] = (struct Coord){7, 8};
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a0f      	ldr	r2, [pc, #60]	@ (8002400 <Set_Goal_Cell+0x78>)
 80023c4:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 80023c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023cc:	e883 0003 	stmia.w	r3, {r0, r1}
		maze->goalPos[2] = (struct Coord){8, 7};
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002404 <Set_Goal_Cell+0x7c>)
 80023d4:	f603 131c 	addw	r3, r3, #2332	@ 0x91c
 80023d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023dc:	e883 0003 	stmia.w	r3, {r0, r1}
		maze->goalPos[3] = (struct Coord){8, 8};
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a09      	ldr	r2, [pc, #36]	@ (8002408 <Set_Goal_Cell+0x80>)
 80023e4:	f603 1324 	addw	r3, r3, #2340	@ 0x924
 80023e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023ec:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80023f0:	bf00      	nop
 80023f2:	3734      	adds	r7, #52	@ 0x34
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	08007e40 	.word	0x08007e40
 8002400:	08007e48 	.word	0x08007e48
 8002404:	08007e50 	.word	0x08007e50
 8002408:	08007e58 	.word	0x08007e58

0800240c <Floodfill>:

void Floodfill(struct Maze* maze) {
 800240c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002410:	b08d      	sub	sp, #52	@ 0x34
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	466b      	mov	r3, sp
 8002418:	461e      	mov	r6, r3
    for (uint8_t y=0; y<16; y++) { for (uint8_t x=0; x<16; x++) { maze->distances[y][x] = MAX_COST; } } // Initialize all maze costs/distances to the maximum = 255
 800241a:	2300      	movs	r3, #0
 800241c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002420:	e01f      	b.n	8002462 <Floodfill+0x56>
 8002422:	2300      	movs	r3, #0
 8002424:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002428:	e012      	b.n	8002450 <Floodfill+0x44>
 800242a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800242e:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8002432:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002436:	4610      	mov	r0, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	0109      	lsls	r1, r1, #4
 800243c:	440b      	add	r3, r1
 800243e:	3302      	adds	r3, #2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	6058      	str	r0, [r3, #4]
 8002446:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800244a:	3301      	adds	r3, #1
 800244c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002450:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002454:	2b0f      	cmp	r3, #15
 8002456:	d9e8      	bls.n	800242a <Floodfill+0x1e>
 8002458:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800245c:	3301      	adds	r3, #1
 800245e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002462:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002466:	2b0f      	cmp	r3, #15
 8002468:	d9db      	bls.n	8002422 <Floodfill+0x16>

    uint8_t goal_count = 4;
 800246a:	2304      	movs	r3, #4
 800246c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    if (maze->goalPos[0].x == 0) { goal_count = 1; }                                                    // Check if goal is maze center or start cell
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d102      	bne.n	8002480 <Floodfill+0x74>
 800247a:	2301      	movs	r3, #1
 800247c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    struct Coord queue[MAX_COST];                                                                       // Initialize queue
 8002480:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002484:	3b01      	subs	r3, #1
 8002486:	623b      	str	r3, [r7, #32]
 8002488:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800248c:	b29b      	uxth	r3, r3
 800248e:	2200      	movs	r2, #0
 8002490:	4698      	mov	r8, r3
 8002492:	4691      	mov	r9, r2
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024a0:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024a4:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2200      	movs	r2, #0
 80024b0:	461c      	mov	r4, r3
 80024b2:	4615      	mov	r5, r2
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	01ab      	lsls	r3, r5, #6
 80024be:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80024c2:	01a2      	lsls	r2, r4, #6
 80024c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	3307      	adds	r3, #7
 80024cc:	08db      	lsrs	r3, r3, #3
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	ebad 0d03 	sub.w	sp, sp, r3
 80024d4:	466b      	mov	r3, sp
 80024d6:	3303      	adds	r3, #3
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	61fb      	str	r3, [r7, #28]
    uint16_t head = 0, tail = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80024e2:	2300      	movs	r3, #0
 80024e4:	853b      	strh	r3, [r7, #40]	@ 0x28
    for (uint8_t cell = 0; cell < goal_count; cell++) {
 80024e6:	2300      	movs	r3, #0
 80024e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80024ec:	e02f      	b.n	800254e <Floodfill+0x142>
        maze->distances[maze->goalPos[cell].y][maze->goalPos[cell].x] = 0;                              // Set goal cells to cost/distance minimum = 0
 80024ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	f203 1321 	addw	r3, r3, #289	@ 0x121
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4413      	add	r3, r2
 80024fc:	6899      	ldr	r1, [r3, #8]
 80024fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	f203 1321 	addw	r3, r3, #289	@ 0x121
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	0109      	lsls	r1, r1, #4
 8002512:	440b      	add	r3, r1
 8002514:	3302      	adds	r3, #2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	2200      	movs	r2, #0
 800251c:	605a      	str	r2, [r3, #4]
        queue[tail] = maze->goalPos[cell]; tail++;                                                      // Add goal cells to queue, increment tail
 800251e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002522:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002524:	69f9      	ldr	r1, [r7, #28]
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f202 1221 	addw	r2, r2, #289	@ 0x121
 800252c:	00d2      	lsls	r2, r2, #3
 800252e:	4402      	add	r2, r0
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	440b      	add	r3, r1
 8002534:	3204      	adds	r2, #4
 8002536:	e892 0003 	ldmia.w	r2, {r0, r1}
 800253a:	e883 0003 	stmia.w	r3, {r0, r1}
 800253e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002540:	3301      	adds	r3, #1
 8002542:	853b      	strh	r3, [r7, #40]	@ 0x28
    for (uint8_t cell = 0; cell < goal_count; cell++) {
 8002544:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002548:	3301      	adds	r3, #1
 800254a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800254e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002552:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002556:	429a      	cmp	r2, r3
 8002558:	d3c9      	bcc.n	80024ee <Floodfill+0xe2>
    }

    struct Coord curr_pos;
    while (head != tail) {
 800255a:	e085      	b.n	8002668 <Floodfill+0x25c>
        curr_pos = queue[head];
 800255c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800255e:	69f9      	ldr	r1, [r7, #28]
 8002560:	f107 020c 	add.w	r2, r7, #12
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	440b      	add	r3, r1
 8002568:	e893 0003 	ldmia.w	r3, {r0, r1}
 800256c:	e882 0003 	stmia.w	r2, {r0, r1}
        head++;
 8002570:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002572:	3301      	adds	r3, #1
 8002574:	857b      	strh	r3, [r7, #42]	@ 0x2a
        uint8_t new_distance = maze->distances[curr_pos.y][curr_pos.x] + 1;                             // Calculate cost for adjacent cells
 8002576:	6939      	ldr	r1, [r7, #16]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	0109      	lsls	r1, r1, #4
 800257e:	440b      	add	r3, r1
 8002580:	3302      	adds	r3, #2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	3301      	adds	r3, #1
 800258c:	76fb      	strb	r3, [r7, #27]

        struct CellList* neighbors = Get_Neighbor_Cells(maze, &curr_pos);
 800258e:	f107 030c 	add.w	r3, r7, #12
 8002592:	4619      	mov	r1, r3
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff fa8c 	bl	8001ab2 <Get_Neighbor_Cells>
 800259a:	6178      	str	r0, [r7, #20]

        for (uint8_t neighbor = 0; neighbor < neighbors->size; neighbor++) {                            // For each neighbor cell, check if its cost/distance is > new distance -- if so, update its value
 800259c:	2300      	movs	r3, #0
 800259e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80025a2:	e053      	b.n	800264c <Floodfill+0x240>
            if (maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] > new_distance) {
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	6859      	ldr	r1, [r3, #4]
 80025a8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80025ac:	4613      	mov	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	6858      	ldr	r0, [r3, #4]
 80025bc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80025c0:	4613      	mov	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4403      	add	r3, r0
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	0109      	lsls	r1, r1, #4
 80025d0:	440b      	add	r3, r1
 80025d2:	3302      	adds	r3, #2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	7efb      	ldrb	r3, [r7, #27]
 80025dc:	429a      	cmp	r2, r3
 80025de:	dd30      	ble.n	8002642 <Floodfill+0x236>
                maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] = new_distance;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	6858      	ldr	r0, [r3, #4]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80025fc:	4613      	mov	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	7efa      	ldrb	r2, [r7, #27]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	0100      	lsls	r0, r0, #4
 800260e:	4403      	add	r3, r0
 8002610:	3302      	adds	r3, #2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	605a      	str	r2, [r3, #4]
                queue[tail] = neighbors->cells[neighbor].pos; tail++;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	6859      	ldr	r1, [r3, #4]
 800261c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4419      	add	r1, r3
 800262a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4413      	add	r3, r2
 8002632:	460a      	mov	r2, r1
 8002634:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002638:	e883 0003 	stmia.w	r3, {r0, r1}
 800263c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800263e:	3301      	adds	r3, #1
 8002640:	853b      	strh	r3, [r7, #40]	@ 0x28
        for (uint8_t neighbor = 0; neighbor < neighbors->size; neighbor++) {                            // For each neighbor cell, check if its cost/distance is > new distance -- if so, update its value
 8002642:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002646:	3301      	adds	r3, #1
 8002648:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800264c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	dba5      	blt.n	80025a4 <Floodfill+0x198>
            }
        }
        free(neighbors->cells); free(neighbors);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4618      	mov	r0, r3
 800265e:	f005 fa8f 	bl	8007b80 <free>
 8002662:	6978      	ldr	r0, [r7, #20]
 8002664:	f005 fa8c 	bl	8007b80 <free>
    while (head != tail) {
 8002668:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800266a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800266c:	429a      	cmp	r2, r3
 800266e:	f47f af75 	bne.w	800255c <Floodfill+0x150>
 8002672:	46b5      	mov	sp, r6
    }
}
 8002674:	bf00      	nop
 8002676:	3734      	adds	r7, #52	@ 0x34
 8002678:	46bd      	mov	sp, r7
 800267a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800267e <Best_Cell>:

enum Direction Best_Cell(struct Maze* maze, struct Coord mouse_pos) {
 800267e:	b580      	push	{r7, lr}
 8002680:	b088      	sub	sp, #32
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	e883 0006 	stmia.w	r3, {r1, r2}
	struct CellList* neighbors = Get_Neighbor_Cells(maze, &mouse_pos);
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	4619      	mov	r1, r3
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f7ff fa0e 	bl	8001ab2 <Get_Neighbor_Cells>
 8002696:	61b8      	str	r0, [r7, #24]

    uint8_t best_cell_index = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	77fb      	strb	r3, [r7, #31]
    uint8_t lowest_cost = maze->distances[mouse_pos.y][mouse_pos.x];
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	0109      	lsls	r1, r1, #4
 80026a4:	440b      	add	r3, r1
 80026a6:	3302      	adds	r3, #2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	77bb      	strb	r3, [r7, #30]

    for (uint8_t neighbor = 0; neighbor < neighbors->size; neighbor++) {
 80026b0:	2300      	movs	r3, #0
 80026b2:	777b      	strb	r3, [r7, #29]
 80026b4:	e063      	b.n	800277e <Best_Cell+0x100>
        if ((maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] < lowest_cost) ||  // For each neighbor cell, check if its cost is the lowest seen
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	6859      	ldr	r1, [r3, #4]
 80026ba:	7f7a      	ldrb	r2, [r7, #29]
 80026bc:	4613      	mov	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	6858      	ldr	r0, [r3, #4]
 80026cc:	7f7a      	ldrb	r2, [r7, #29]
 80026ce:	4613      	mov	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4403      	add	r3, r0
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	0109      	lsls	r1, r1, #4
 80026de:	440b      	add	r3, r1
 80026e0:	3302      	adds	r3, #2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	7fbb      	ldrb	r3, [r7, #30]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	db28      	blt.n	8002740 <Best_Cell+0xc2>
           ((maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] == lowest_cost) && // Or check cost == lowest and the dir of the cell matches that of the mouse (prioritize forward)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	6859      	ldr	r1, [r3, #4]
 80026f2:	7f7a      	ldrb	r2, [r7, #29]
 80026f4:	4613      	mov	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	6858      	ldr	r0, [r3, #4]
 8002704:	7f7a      	ldrb	r2, [r7, #29]
 8002706:	4613      	mov	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4403      	add	r3, r0
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	0109      	lsls	r1, r1, #4
 8002716:	440b      	add	r3, r1
 8002718:	3302      	adds	r3, #2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	7fbb      	ldrb	r3, [r7, #30]
        if ((maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] < lowest_cost) ||  // For each neighbor cell, check if its cost is the lowest seen
 8002722:	429a      	cmp	r2, r3
 8002724:	d128      	bne.n	8002778 <Best_Cell+0xfa>
           (maze->mouse_dir == neighbors->cells[neighbor].dir))) {
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	7a19      	ldrb	r1, [r3, #8]
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	6858      	ldr	r0, [r3, #4]
 800272e:	7f7a      	ldrb	r2, [r7, #29]
 8002730:	4613      	mov	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4403      	add	r3, r0
 800273a:	7a1b      	ldrb	r3, [r3, #8]
           ((maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] == lowest_cost) && // Or check cost == lowest and the dir of the cell matches that of the mouse (prioritize forward)
 800273c:	4299      	cmp	r1, r3
 800273e:	d11b      	bne.n	8002778 <Best_Cell+0xfa>
                best_cell_index = neighbor;
 8002740:	7f7b      	ldrb	r3, [r7, #29]
 8002742:	77fb      	strb	r3, [r7, #31]
                lowest_cost = maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x];  // Update best cell index and lowest cost seen
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	7f7a      	ldrb	r2, [r7, #29]
 800274a:	4613      	mov	r3, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	6859      	ldr	r1, [r3, #4]
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	6858      	ldr	r0, [r3, #4]
 800275a:	7f7a      	ldrb	r2, [r7, #29]
 800275c:	4613      	mov	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4403      	add	r3, r0
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	0109      	lsls	r1, r1, #4
 800276c:	440b      	add	r3, r1
 800276e:	3302      	adds	r3, #2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	77bb      	strb	r3, [r7, #30]
    for (uint8_t neighbor = 0; neighbor < neighbors->size; neighbor++) {
 8002778:	7f7b      	ldrb	r3, [r7, #29]
 800277a:	3301      	adds	r3, #1
 800277c:	777b      	strb	r3, [r7, #29]
 800277e:	7f7a      	ldrb	r2, [r7, #29]
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	db96      	blt.n	80026b6 <Best_Cell+0x38>
           }
    }
    enum Direction ret_dir = neighbors->cells[best_cell_index].dir;
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	7ffa      	ldrb	r2, [r7, #31]
 800278e:	4613      	mov	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	7a1b      	ldrb	r3, [r3, #8]
 800279a:	75fb      	strb	r3, [r7, #23]
    free(neighbors->cells); free(neighbors);
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f005 f9ed 	bl	8007b80 <free>
 80027a6:	69b8      	ldr	r0, [r7, #24]
 80027a8:	f005 f9ea 	bl	8007b80 <free>

    return ret_dir;                                                                                                 // Return direction of lowest cost cell
 80027ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3720      	adds	r7, #32
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <Maze_Init>:

void Maze_Init(struct Maze* maze) {
 80027b6:	b480      	push	{r7}
 80027b8:	b087      	sub	sp, #28
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
    for (uint8_t y = 0; y < 16; y++) { for (uint8_t x = 0; x < 16; x++) { maze->cellWalls[y][x] = 0; } }            // Initialize all wall values to 0
 80027be:	2300      	movs	r3, #0
 80027c0:	75fb      	strb	r3, [r7, #23]
 80027c2:	e016      	b.n	80027f2 <Maze_Init+0x3c>
 80027c4:	2300      	movs	r3, #0
 80027c6:	75bb      	strb	r3, [r7, #22]
 80027c8:	e00d      	b.n	80027e6 <Maze_Init+0x30>
 80027ca:	7df9      	ldrb	r1, [r7, #23]
 80027cc:	7dbb      	ldrb	r3, [r7, #22]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	0109      	lsls	r1, r1, #4
 80027d2:	440b      	add	r3, r1
 80027d4:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	2200      	movs	r2, #0
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	7dbb      	ldrb	r3, [r7, #22]
 80027e2:	3301      	adds	r3, #1
 80027e4:	75bb      	strb	r3, [r7, #22]
 80027e6:	7dbb      	ldrb	r3, [r7, #22]
 80027e8:	2b0f      	cmp	r3, #15
 80027ea:	d9ee      	bls.n	80027ca <Maze_Init+0x14>
 80027ec:	7dfb      	ldrb	r3, [r7, #23]
 80027ee:	3301      	adds	r3, #1
 80027f0:	75fb      	strb	r3, [r7, #23]
 80027f2:	7dfb      	ldrb	r3, [r7, #23]
 80027f4:	2b0f      	cmp	r3, #15
 80027f6:	d9e5      	bls.n	80027c4 <Maze_Init+0xe>
    maze->mouse_dir = NORTH;                                                                                        // Mouse starting direction/pos always NORTH/{0,0}
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	721a      	strb	r2, [r3, #8]
    maze->mouse_pos = (struct Coord){0,0};
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	605a      	str	r2, [r3, #4]
}
 800280a:	bf00      	nop
 800280c:	371c      	adds	r7, #28
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <Search_Mode>:

void Search_Mode(struct Maze* maze) {
 8002814:	b5b0      	push	{r4, r5, r7, lr}
 8002816:	b094      	sub	sp, #80	@ 0x50
 8002818:	af0c      	add	r7, sp, #48	@ 0x30
 800281a:	6178      	str	r0, [r7, #20]
	disable_adc = true;
 800281c:	4ba3      	ldr	r3, [pc, #652]	@ (8002aac <Search_Mode+0x298>)
 800281e:	2201      	movs	r2, #1
 8002820:	701a      	strb	r2, [r3, #0]
	Scan_Walls(maze);
 8002822:	6978      	ldr	r0, [r7, #20]
 8002824:	f7ff fa9a 	bl	8001d5c <Scan_Walls>
	disable_adc = false;
 8002828:	4ba0      	ldr	r3, [pc, #640]	@ (8002aac <Search_Mode+0x298>)
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
	Floodfill(maze);
 800282e:	6978      	ldr	r0, [r7, #20]
 8002830:	f7ff fdec 	bl	800240c <Floodfill>

	enum Direction best_dir = Best_Cell(maze, maze->mouse_pos);
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	e893 0006 	ldmia.w	r3, {r1, r2}
 800283a:	6978      	ldr	r0, [r7, #20]
 800283c:	f7ff ff1f 	bl	800267e <Best_Cell>
 8002840:	4603      	mov	r3, r0
 8002842:	77fb      	strb	r3, [r7, #31]

	if (best_dir == (enum Direction)((maze->mouse_dir + 3) % 4)) { // Right Turn
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	7a1b      	ldrb	r3, [r3, #8]
 8002848:	3303      	adds	r3, #3
 800284a:	425a      	negs	r2, r3
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	f002 0203 	and.w	r2, r2, #3
 8002854:	bf58      	it	pl
 8002856:	4253      	negpl	r3, r2
 8002858:	b2db      	uxtb	r3, r3
 800285a:	7ffa      	ldrb	r2, [r7, #31]
 800285c:	429a      	cmp	r2, r3
 800285e:	d13b      	bne.n	80028d8 <Search_Mode+0xc4>
		rot_placeholder_1 = Parameter_Packer(RIGHT_TURN_DEG, SEARCH_SPEED_ROT_MAX, 0, SEARCH_ACCELERATION);
 8002860:	4993      	ldr	r1, [pc, #588]	@ (8002ab0 <Search_Mode+0x29c>)
 8002862:	4a94      	ldr	r2, [pc, #592]	@ (8002ab4 <Search_Mode+0x2a0>)
 8002864:	4b94      	ldr	r3, [pc, #592]	@ (8002ab8 <Search_Mode+0x2a4>)
 8002866:	4c95      	ldr	r4, [pc, #596]	@ (8002abc <Search_Mode+0x2a8>)
 8002868:	4638      	mov	r0, r7
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	f000 fd52 	bl	8003318 <Parameter_Packer>
 8002874:	463b      	mov	r3, r7
 8002876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002878:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		#ifndef SMOOTH_TURNS
			fwd_placeholder_1 = Parameter_Packer(CELL_TO_CENTER_MM, SEARCH_SPEED_FWD_MAX, SEARCH_SPEED_FWD_MAX, SEARCH_ACCELERATION);
 800287c:	498c      	ldr	r1, [pc, #560]	@ (8002ab0 <Search_Mode+0x29c>)
 800287e:	4a8d      	ldr	r2, [pc, #564]	@ (8002ab4 <Search_Mode+0x2a0>)
 8002880:	4c8c      	ldr	r4, [pc, #560]	@ (8002ab4 <Search_Mode+0x2a0>)
 8002882:	4b8d      	ldr	r3, [pc, #564]	@ (8002ab8 <Search_Mode+0x2a4>)
 8002884:	4d8e      	ldr	r5, [pc, #568]	@ (8002ac0 <Search_Mode+0x2ac>)
 8002886:	4638      	mov	r0, r7
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	4623      	mov	r3, r4
 800288c:	f000 fd44 	bl	8003318 <Parameter_Packer>
 8002890:	462c      	mov	r4, r5
 8002892:	463b      	mov	r3, r7
 8002894:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002896:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			Turn_Container(fwd_placeholder_1, rot_placeholder_1, &forward_profile, &rotational_profile);
 800289a:	4d89      	ldr	r5, [pc, #548]	@ (8002ac0 <Search_Mode+0x2ac>)
 800289c:	4b89      	ldr	r3, [pc, #548]	@ (8002ac4 <Search_Mode+0x2b0>)
 800289e:	9305      	str	r3, [sp, #20]
 80028a0:	4b89      	ldr	r3, [pc, #548]	@ (8002ac8 <Search_Mode+0x2b4>)
 80028a2:	9304      	str	r3, [sp, #16]
 80028a4:	4b85      	ldr	r3, [pc, #532]	@ (8002abc <Search_Mode+0x2a8>)
 80028a6:	466c      	mov	r4, sp
 80028a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80028ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80028b2:	f000 fcb1 	bl	8003218 <Turn_Container>
		#else
			fwd_placeholder_1 = Parameter_Packer(SMOOTH_TURN_FWD_MM, SEARCH_SPEED_FWD_MAX, SEARCH_SPEED_FWD_MAX, SEARCH_ACCELERATION);
			Smooth_Turn_Container(fwd_placeholder_1, rot_placeholder_1, &forward_profile, &rotational_profile);
		#endif
			maze->mouse_dir = (enum Direction)((maze->mouse_dir + 3) % 4);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	7a1b      	ldrb	r3, [r3, #8]
 80028ba:	3303      	adds	r3, #3
 80028bc:	425a      	negs	r2, r3
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	f002 0203 	and.w	r2, r2, #3
 80028c6:	bf58      	it	pl
 80028c8:	4253      	negpl	r3, r2
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	721a      	strb	r2, [r3, #8]
			prev_action = RIGHT_TURN;
 80028d0:	4b7e      	ldr	r3, [pc, #504]	@ (8002acc <Search_Mode+0x2b8>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	e0d0      	b.n	8002a7a <Search_Mode+0x266>
		}
	else if (best_dir == (enum Direction)((maze->mouse_dir + 1) % 4)) { // Left Turn
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	7a1b      	ldrb	r3, [r3, #8]
 80028dc:	3301      	adds	r3, #1
 80028de:	425a      	negs	r2, r3
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	f002 0203 	and.w	r2, r2, #3
 80028e8:	bf58      	it	pl
 80028ea:	4253      	negpl	r3, r2
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	7ffa      	ldrb	r2, [r7, #31]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d13b      	bne.n	800296c <Search_Mode+0x158>
		rot_placeholder_1 = Parameter_Packer(LEFT_TURN_DEG, SEARCH_SPEED_ROT_MAX, 0, SEARCH_ACCELERATION);
 80028f4:	4976      	ldr	r1, [pc, #472]	@ (8002ad0 <Search_Mode+0x2bc>)
 80028f6:	4a6f      	ldr	r2, [pc, #444]	@ (8002ab4 <Search_Mode+0x2a0>)
 80028f8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ab8 <Search_Mode+0x2a4>)
 80028fa:	4c70      	ldr	r4, [pc, #448]	@ (8002abc <Search_Mode+0x2a8>)
 80028fc:	4638      	mov	r0, r7
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	f000 fd08 	bl	8003318 <Parameter_Packer>
 8002908:	463b      	mov	r3, r7
 800290a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800290c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		#ifndef SMOOTH_TURNS
			fwd_placeholder_1 = Parameter_Packer(CELL_TO_CENTER_MM, SEARCH_SPEED_FWD_MAX, SEARCH_SPEED_FWD_MAX, SEARCH_ACCELERATION);
 8002910:	4967      	ldr	r1, [pc, #412]	@ (8002ab0 <Search_Mode+0x29c>)
 8002912:	4a68      	ldr	r2, [pc, #416]	@ (8002ab4 <Search_Mode+0x2a0>)
 8002914:	4c67      	ldr	r4, [pc, #412]	@ (8002ab4 <Search_Mode+0x2a0>)
 8002916:	4b68      	ldr	r3, [pc, #416]	@ (8002ab8 <Search_Mode+0x2a4>)
 8002918:	4d69      	ldr	r5, [pc, #420]	@ (8002ac0 <Search_Mode+0x2ac>)
 800291a:	4638      	mov	r0, r7
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	4623      	mov	r3, r4
 8002920:	f000 fcfa 	bl	8003318 <Parameter_Packer>
 8002924:	462c      	mov	r4, r5
 8002926:	463b      	mov	r3, r7
 8002928:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800292a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			Turn_Container(fwd_placeholder_1, rot_placeholder_1, &forward_profile, &rotational_profile);
 800292e:	4d64      	ldr	r5, [pc, #400]	@ (8002ac0 <Search_Mode+0x2ac>)
 8002930:	4b64      	ldr	r3, [pc, #400]	@ (8002ac4 <Search_Mode+0x2b0>)
 8002932:	9305      	str	r3, [sp, #20]
 8002934:	4b64      	ldr	r3, [pc, #400]	@ (8002ac8 <Search_Mode+0x2b4>)
 8002936:	9304      	str	r3, [sp, #16]
 8002938:	4b60      	ldr	r3, [pc, #384]	@ (8002abc <Search_Mode+0x2a8>)
 800293a:	466c      	mov	r4, sp
 800293c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800293e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002942:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002946:	f000 fc67 	bl	8003218 <Turn_Container>
		#else
			fwd_placeholder_1 = Parameter_Packer(CELL_TO_CENTER_MM, SEARCH_SPEED_FWD_MAX, SEARCH_SPEED_FWD_MAX, SEARCH_ACCELERATION);
			Smooth_Turn_Container(fwd_placeholder_1, rot_placeholder_1, &forward_profile, &rotational_profile);
		#endif
			maze->mouse_dir = (enum Direction)((maze->mouse_dir + 1) % 4);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	7a1b      	ldrb	r3, [r3, #8]
 800294e:	3301      	adds	r3, #1
 8002950:	425a      	negs	r2, r3
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	f002 0203 	and.w	r2, r2, #3
 800295a:	bf58      	it	pl
 800295c:	4253      	negpl	r3, r2
 800295e:	b2da      	uxtb	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	721a      	strb	r2, [r3, #8]
			prev_action = LEFT_TURN;
 8002964:	4b59      	ldr	r3, [pc, #356]	@ (8002acc <Search_Mode+0x2b8>)
 8002966:	2202      	movs	r2, #2
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	e086      	b.n	8002a7a <Search_Mode+0x266>
		}
	else if (best_dir == (enum Direction)((maze->mouse_dir + 2) % 4)) { // About turn
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	7a1b      	ldrb	r3, [r3, #8]
 8002970:	3302      	adds	r3, #2
 8002972:	425a      	negs	r2, r3
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	f002 0203 	and.w	r2, r2, #3
 800297c:	bf58      	it	pl
 800297e:	4253      	negpl	r3, r2
 8002980:	b2db      	uxtb	r3, r3
 8002982:	7ffa      	ldrb	r2, [r7, #31]
 8002984:	429a      	cmp	r2, r3
 8002986:	d178      	bne.n	8002a7a <Search_Mode+0x266>
		rot_placeholder_1 = Parameter_Packer(ABOUT_TURN_DEG, SEARCH_SPEED_ROT_MAX, 0, SEARCH_ACCELERATION);
 8002988:	4952      	ldr	r1, [pc, #328]	@ (8002ad4 <Search_Mode+0x2c0>)
 800298a:	4a4a      	ldr	r2, [pc, #296]	@ (8002ab4 <Search_Mode+0x2a0>)
 800298c:	4b4a      	ldr	r3, [pc, #296]	@ (8002ab8 <Search_Mode+0x2a4>)
 800298e:	4c4b      	ldr	r4, [pc, #300]	@ (8002abc <Search_Mode+0x2a8>)
 8002990:	4638      	mov	r0, r7
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	f04f 0300 	mov.w	r3, #0
 8002998:	f000 fcbe 	bl	8003318 <Parameter_Packer>
 800299c:	463b      	mov	r3, r7
 800299e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if (wall_front) { // Back up into wall to realign, continue from there
 80029a4:	4b4c      	ldr	r3, [pc, #304]	@ (8002ad8 <Search_Mode+0x2c4>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d041      	beq.n	8002a30 <Search_Mode+0x21c>
			fwd_placeholder_1 = Parameter_Packer(CELL_TO_CENTER_MM, SEARCH_SPEED_FWD_MAX, 0, SEARCH_ACCELERATION);
 80029ac:	4940      	ldr	r1, [pc, #256]	@ (8002ab0 <Search_Mode+0x29c>)
 80029ae:	4a41      	ldr	r2, [pc, #260]	@ (8002ab4 <Search_Mode+0x2a0>)
 80029b0:	4b41      	ldr	r3, [pc, #260]	@ (8002ab8 <Search_Mode+0x2a4>)
 80029b2:	4c43      	ldr	r4, [pc, #268]	@ (8002ac0 <Search_Mode+0x2ac>)
 80029b4:	4638      	mov	r0, r7
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	f000 fcac 	bl	8003318 <Parameter_Packer>
 80029c0:	463b      	mov	r3, r7
 80029c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			fwd_placeholder_2 = Parameter_Packer(CENTER_TO_WALL_REVERSE_MM, SEARCH_SPEED_FWD_MAX, 0, SEARCH_ACCELERATION);
 80029c8:	4944      	ldr	r1, [pc, #272]	@ (8002adc <Search_Mode+0x2c8>)
 80029ca:	4a3a      	ldr	r2, [pc, #232]	@ (8002ab4 <Search_Mode+0x2a0>)
 80029cc:	4b3a      	ldr	r3, [pc, #232]	@ (8002ab8 <Search_Mode+0x2a4>)
 80029ce:	4c44      	ldr	r4, [pc, #272]	@ (8002ae0 <Search_Mode+0x2cc>)
 80029d0:	4638      	mov	r0, r7
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	f000 fc9e 	bl	8003318 <Parameter_Packer>
 80029dc:	463b      	mov	r3, r7
 80029de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			About_Face_Container(fwd_placeholder_1, fwd_placeholder_2, rot_placeholder_1, &forward_profile, &rotational_profile, true);
 80029e4:	4d36      	ldr	r5, [pc, #216]	@ (8002ac0 <Search_Mode+0x2ac>)
 80029e6:	2301      	movs	r3, #1
 80029e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80029ea:	4b36      	ldr	r3, [pc, #216]	@ (8002ac4 <Search_Mode+0x2b0>)
 80029ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80029ee:	4b36      	ldr	r3, [pc, #216]	@ (8002ac8 <Search_Mode+0x2b4>)
 80029f0:	9308      	str	r3, [sp, #32]
 80029f2:	4b32      	ldr	r3, [pc, #200]	@ (8002abc <Search_Mode+0x2a8>)
 80029f4:	ac04      	add	r4, sp, #16
 80029f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80029fc:	4b38      	ldr	r3, [pc, #224]	@ (8002ae0 <Search_Mode+0x2cc>)
 80029fe:	466c      	mov	r4, sp
 8002a00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002a06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002a0a:	f000 fc35 	bl	8003278 <About_Face_Container>
			maze->mouse_dir = (enum Direction)((maze->mouse_dir + 2) % 4);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	7a1b      	ldrb	r3, [r3, #8]
 8002a12:	3302      	adds	r3, #2
 8002a14:	425a      	negs	r2, r3
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	f002 0203 	and.w	r2, r2, #3
 8002a1e:	bf58      	it	pl
 8002a20:	4253      	negpl	r3, r2
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	721a      	strb	r2, [r3, #8]
			prev_action = ABOUT_FACE;
 8002a28:	4b28      	ldr	r3, [pc, #160]	@ (8002acc <Search_Mode+0x2b8>)
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	e024      	b.n	8002a7a <Search_Mode+0x266>
		}
		else { // If no wall, simply turn 180 degrees
			About_Face_Container(fwd_placeholder_1, fwd_placeholder_2, rot_placeholder_1, &forward_profile, &rotational_profile, false);
 8002a30:	4d23      	ldr	r5, [pc, #140]	@ (8002ac0 <Search_Mode+0x2ac>)
 8002a32:	2300      	movs	r3, #0
 8002a34:	930a      	str	r3, [sp, #40]	@ 0x28
 8002a36:	4b23      	ldr	r3, [pc, #140]	@ (8002ac4 <Search_Mode+0x2b0>)
 8002a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a3a:	4b23      	ldr	r3, [pc, #140]	@ (8002ac8 <Search_Mode+0x2b4>)
 8002a3c:	9308      	str	r3, [sp, #32]
 8002a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8002abc <Search_Mode+0x2a8>)
 8002a40:	ac04      	add	r4, sp, #16
 8002a42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002a48:	4b25      	ldr	r3, [pc, #148]	@ (8002ae0 <Search_Mode+0x2cc>)
 8002a4a:	466c      	mov	r4, sp
 8002a4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002a52:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002a56:	f000 fc0f 	bl	8003278 <About_Face_Container>
			maze->mouse_dir = (enum Direction)((maze->mouse_dir + 2) % 4);
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	7a1b      	ldrb	r3, [r3, #8]
 8002a5e:	3302      	adds	r3, #2
 8002a60:	425a      	negs	r2, r3
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	f002 0203 	and.w	r2, r2, #3
 8002a6a:	bf58      	it	pl
 8002a6c:	4253      	negpl	r3, r2
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	721a      	strb	r2, [r3, #8]
			prev_action = NONE;
 8002a74:	4b15      	ldr	r3, [pc, #84]	@ (8002acc <Search_Mode+0x2b8>)
 8002a76:	2204      	movs	r2, #4
 8002a78:	701a      	strb	r2, [r3, #0]
		}
	}

	if (prev_action == FORWARD_DRIVE) { // Normal forward movement
 8002a7a:	4b14      	ldr	r3, [pc, #80]	@ (8002acc <Search_Mode+0x2b8>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d132      	bne.n	8002ae8 <Search_Mode+0x2d4>
		fwd_placeholder_1 = Parameter_Packer(CELL_TO_CELL_MM, SEARCH_SPEED_FWD_MAX, 0, SEARCH_ACCELERATION);
 8002a82:	4918      	ldr	r1, [pc, #96]	@ (8002ae4 <Search_Mode+0x2d0>)
 8002a84:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab4 <Search_Mode+0x2a0>)
 8002a86:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab8 <Search_Mode+0x2a4>)
 8002a88:	4c0d      	ldr	r4, [pc, #52]	@ (8002ac0 <Search_Mode+0x2ac>)
 8002a8a:	4638      	mov	r0, r7
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	f000 fc41 	bl	8003318 <Parameter_Packer>
 8002a96:	463b      	mov	r3, r7
 8002a98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Profile_Container(fwd_placeholder_1, &forward_profile);
 8002a9e:	4b08      	ldr	r3, [pc, #32]	@ (8002ac0 <Search_Mode+0x2ac>)
 8002aa0:	4a09      	ldr	r2, [pc, #36]	@ (8002ac8 <Search_Mode+0x2b4>)
 8002aa2:	9200      	str	r2, [sp, #0]
 8002aa4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aa6:	f000 fb89 	bl	80031bc <Profile_Container>
 8002aaa:	e035      	b.n	8002b18 <Search_Mode+0x304>
 8002aac:	20000c0c 	.word	0x20000c0c
 8002ab0:	42b40000 	.word	0x42b40000
 8002ab4:	43fa0000 	.word	0x43fa0000
 8002ab8:	453b8000 	.word	0x453b8000
 8002abc:	20000c30 	.word	0x20000c30
 8002ac0:	20000c10 	.word	0x20000c10
 8002ac4:	20000ba0 	.word	0x20000ba0
 8002ac8:	20000b7c 	.word	0x20000b7c
 8002acc:	20000008 	.word	0x20000008
 8002ad0:	c2b40000 	.word	0xc2b40000
 8002ad4:	c3340000 	.word	0xc3340000
 8002ad8:	20000c60 	.word	0x20000c60
 8002adc:	c2c00000 	.word	0xc2c00000
 8002ae0:	20000c20 	.word	0x20000c20
 8002ae4:	43340000 	.word	0x43340000
	}
	else if (prev_action == ABOUT_FACE){ // Distance to travel is less than after a forward movement or turn
 8002ae8:	4b48      	ldr	r3, [pc, #288]	@ (8002c0c <Search_Mode+0x3f8>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d113      	bne.n	8002b18 <Search_Mode+0x304>
		fwd_placeholder_1 = Parameter_Packer(BACK_ON_WALL_TO_CELL_MM, SEARCH_SPEED_FWD_MAX, 0, SEARCH_ACCELERATION);
 8002af0:	4947      	ldr	r1, [pc, #284]	@ (8002c10 <Search_Mode+0x3fc>)
 8002af2:	4a48      	ldr	r2, [pc, #288]	@ (8002c14 <Search_Mode+0x400>)
 8002af4:	4b48      	ldr	r3, [pc, #288]	@ (8002c18 <Search_Mode+0x404>)
 8002af6:	4c49      	ldr	r4, [pc, #292]	@ (8002c1c <Search_Mode+0x408>)
 8002af8:	4638      	mov	r0, r7
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	f000 fc0a 	bl	8003318 <Parameter_Packer>
 8002b04:	463b      	mov	r3, r7
 8002b06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Profile_Container(fwd_placeholder_1, &forward_profile);
 8002b0c:	4b43      	ldr	r3, [pc, #268]	@ (8002c1c <Search_Mode+0x408>)
 8002b0e:	4a44      	ldr	r2, [pc, #272]	@ (8002c20 <Search_Mode+0x40c>)
 8002b10:	9200      	str	r2, [sp, #0]
 8002b12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b14:	f000 fb52 	bl	80031bc <Profile_Container>
	}
	else { // On a turn don't make any additional movement

	}

	prev_action = FORWARD_DRIVE;
 8002b18:	4b3c      	ldr	r3, [pc, #240]	@ (8002c0c <Search_Mode+0x3f8>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	701a      	strb	r2, [r3, #0]

	Update_Mouse_Pos(&maze->mouse_pos, maze->mouse_dir);
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	7a1b      	ldrb	r3, [r3, #8]
 8002b24:	4619      	mov	r1, r3
 8002b26:	4610      	mov	r0, r2
 8002b28:	f7ff fbc8 	bl	80022bc <Update_Mouse_Pos>

	// Check if mouse is in goal, if so change goal back to start location
	if (maze->distances[maze->mouse_pos.y][maze->mouse_pos.x] == 0) {
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	6859      	ldr	r1, [r3, #4]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	0109      	lsls	r1, r1, #4
 8002b38:	440b      	add	r3, r1
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d15d      	bne.n	8002c02 <Search_Mode+0x3ee>
		if (!((maze->goalPos[0].x == 0) && (maze->goalPos[0].y == 0))) {
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d104      	bne.n	8002b5a <Search_Mode+0x346>
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f8d3 3910 	ldr.w	r3, [r3, #2320]	@ 0x910
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d004      	beq.n	8002b64 <Search_Mode+0x350>
			Set_Goal_Cell(maze, 1); // Change goal cell back to origin
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	6978      	ldr	r0, [r7, #20]
 8002b5e:	f7ff fc13 	bl	8002388 <Set_Goal_Cell>
			armed = false;
			motor_controller_enabled = false;
		}
	}

}
 8002b62:	e04e      	b.n	8002c02 <Search_Mode+0x3ee>
			rot_placeholder_1 = Parameter_Packer(ABOUT_TURN_DEG, SEARCH_SPEED_ROT_MAX, 0, SEARCH_ACCELERATION);
 8002b64:	492f      	ldr	r1, [pc, #188]	@ (8002c24 <Search_Mode+0x410>)
 8002b66:	4a2b      	ldr	r2, [pc, #172]	@ (8002c14 <Search_Mode+0x400>)
 8002b68:	4b2b      	ldr	r3, [pc, #172]	@ (8002c18 <Search_Mode+0x404>)
 8002b6a:	4c2f      	ldr	r4, [pc, #188]	@ (8002c28 <Search_Mode+0x414>)
 8002b6c:	4638      	mov	r0, r7
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	f000 fbd0 	bl	8003318 <Parameter_Packer>
 8002b78:	463b      	mov	r3, r7
 8002b7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			fwd_placeholder_1 = Parameter_Packer(CELL_TO_CENTER_MM, SEARCH_SPEED_FWD_MAX, 0, SEARCH_ACCELERATION);
 8002b80:	492a      	ldr	r1, [pc, #168]	@ (8002c2c <Search_Mode+0x418>)
 8002b82:	4a24      	ldr	r2, [pc, #144]	@ (8002c14 <Search_Mode+0x400>)
 8002b84:	4b24      	ldr	r3, [pc, #144]	@ (8002c18 <Search_Mode+0x404>)
 8002b86:	4c25      	ldr	r4, [pc, #148]	@ (8002c1c <Search_Mode+0x408>)
 8002b88:	4638      	mov	r0, r7
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	f000 fbc2 	bl	8003318 <Parameter_Packer>
 8002b94:	463b      	mov	r3, r7
 8002b96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			fwd_placeholder_2 = Parameter_Packer(CENTER_TO_WALL_REVERSE_MM, SEARCH_SPEED_FWD_MAX, 0, SEARCH_ACCELERATION);
 8002b9c:	4924      	ldr	r1, [pc, #144]	@ (8002c30 <Search_Mode+0x41c>)
 8002b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8002c14 <Search_Mode+0x400>)
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c18 <Search_Mode+0x404>)
 8002ba2:	4c24      	ldr	r4, [pc, #144]	@ (8002c34 <Search_Mode+0x420>)
 8002ba4:	4638      	mov	r0, r7
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	f000 fbb4 	bl	8003318 <Parameter_Packer>
 8002bb0:	463b      	mov	r3, r7
 8002bb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			About_Face_Container(fwd_placeholder_1, fwd_placeholder_2, rot_placeholder_1, &forward_profile, &rotational_profile, true);
 8002bb8:	4d18      	ldr	r5, [pc, #96]	@ (8002c1c <Search_Mode+0x408>)
 8002bba:	2301      	movs	r3, #1
 8002bbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8002bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8002c38 <Search_Mode+0x424>)
 8002bc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002bc2:	4b17      	ldr	r3, [pc, #92]	@ (8002c20 <Search_Mode+0x40c>)
 8002bc4:	9308      	str	r3, [sp, #32]
 8002bc6:	4b18      	ldr	r3, [pc, #96]	@ (8002c28 <Search_Mode+0x414>)
 8002bc8:	ac04      	add	r4, sp, #16
 8002bca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002bd0:	4b18      	ldr	r3, [pc, #96]	@ (8002c34 <Search_Mode+0x420>)
 8002bd2:	466c      	mov	r4, sp
 8002bd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002bda:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002bde:	f000 fb4b 	bl	8003278 <About_Face_Container>
			maze->mouse_dir = NORTH;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2200      	movs	r2, #0
 8002be6:	721a      	strb	r2, [r3, #8]
			prev_action = ABOUT_FACE;
 8002be8:	4b08      	ldr	r3, [pc, #32]	@ (8002c0c <Search_Mode+0x3f8>)
 8002bea:	2203      	movs	r2, #3
 8002bec:	701a      	strb	r2, [r3, #0]
			Set_Goal_Cell(maze, 4); // Change goal cell back to center of maze
 8002bee:	2104      	movs	r1, #4
 8002bf0:	6978      	ldr	r0, [r7, #20]
 8002bf2:	f7ff fbc9 	bl	8002388 <Set_Goal_Cell>
			armed = false;
 8002bf6:	4b11      	ldr	r3, [pc, #68]	@ (8002c3c <Search_Mode+0x428>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
			motor_controller_enabled = false;
 8002bfc:	4b10      	ldr	r3, [pc, #64]	@ (8002c40 <Search_Mode+0x42c>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
}
 8002c02:	bf00      	nop
 8002c04:	3720      	adds	r7, #32
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bdb0      	pop	{r4, r5, r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000008 	.word	0x20000008
 8002c10:	430d8873 	.word	0x430d8873
 8002c14:	43fa0000 	.word	0x43fa0000
 8002c18:	453b8000 	.word	0x453b8000
 8002c1c:	20000c10 	.word	0x20000c10
 8002c20:	20000b7c 	.word	0x20000b7c
 8002c24:	c3340000 	.word	0xc3340000
 8002c28:	20000c30 	.word	0x20000c30
 8002c2c:	42b40000 	.word	0x42b40000
 8002c30:	c2c00000 	.word	0xc2c00000
 8002c34:	20000c20 	.word	0x20000c20
 8002c38:	20000ba0 	.word	0x20000ba0
 8002c3c:	20000240 	.word	0x20000240
 8002c40:	20000c50 	.word	0x20000c50

08002c44 <Set_Motor_Volts>:
float motor_left_previous_speed = 0;
float motor_right_previous_speed = 0;

bool motor_controller_enabled = false;

void Set_Motor_Volts(motor_t motor, float voltage_to_translate) {
 8002c44:	b590      	push	{r4, r7, lr}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	6039      	str	r1, [r7, #0]
 8002c4e:	71fb      	strb	r3, [r7, #7]
	voltage_to_translate = voltage_to_translate > MAX_MOTOR_VOLTAGE ? MAX_MOTOR_VOLTAGE : voltage_to_translate;
 8002c50:	4b2f      	ldr	r3, [pc, #188]	@ (8002d10 <Set_Motor_Volts+0xcc>)
 8002c52:	4619      	mov	r1, r3
 8002c54:	6838      	ldr	r0, [r7, #0]
 8002c56:	f7fe f989 	bl	8000f6c <__aeabi_fcmpgt>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <Set_Motor_Volts+0x20>
 8002c60:	4b2b      	ldr	r3, [pc, #172]	@ (8002d10 <Set_Motor_Volts+0xcc>)
 8002c62:	e000      	b.n	8002c66 <Set_Motor_Volts+0x22>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	603b      	str	r3, [r7, #0]
	voltage_to_translate = voltage_to_translate < -MAX_MOTOR_VOLTAGE ? -MAX_MOTOR_VOLTAGE : voltage_to_translate;
 8002c68:	4b29      	ldr	r3, [pc, #164]	@ (8002d10 <Set_Motor_Volts+0xcc>)
 8002c6a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6838      	ldr	r0, [r7, #0]
 8002c72:	f7fe f95d 	bl	8000f30 <__aeabi_fcmplt>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <Set_Motor_Volts+0x40>
 8002c7c:	4b24      	ldr	r3, [pc, #144]	@ (8002d10 <Set_Motor_Volts+0xcc>)
 8002c7e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002c82:	e000      	b.n	8002c86 <Set_Motor_Volts+0x42>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	603b      	str	r3, [r7, #0]

	int counter_period = MAX_PWM * (voltage_to_translate + Calculate_Battery_Bias(voltage_to_translate)) / mouse_state.battery_voltage;
 8002c88:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fd ff5d 	bl	8000b4c <__aeabi_i2f>
 8002c92:	4604      	mov	r4, r0
 8002c94:	6838      	ldr	r0, [r7, #0]
 8002c96:	f000 fca1 	bl	80035dc <Calculate_Battery_Bias>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	6839      	ldr	r1, [r7, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fd fea0 	bl	80009e4 <__addsf3>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f7fd ffa3 	bl	8000bf4 <__aeabi_fmul>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fd fbaf 	bl	8000414 <__aeabi_f2d>
 8002cb6:	4b17      	ldr	r3, [pc, #92]	@ (8002d14 <Set_Motor_Volts+0xd0>)
 8002cb8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002cbc:	f7fd fd2c 	bl	8000718 <__aeabi_ddiv>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f7fd fe0e 	bl	80008e8 <__aeabi_d2iz>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	60fb      	str	r3, [r7, #12]
	if (counter_period < 0) {
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	da08      	bge.n	8002ce8 <Set_Motor_Volts+0xa4>
		Set_Direction(motor, REVERSE);
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	2101      	movs	r1, #1
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f840 	bl	8002d60 <Set_Direction>
		counter_period = -counter_period;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	425b      	negs	r3, r3
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	e007      	b.n	8002cf8 <Set_Motor_Volts+0xb4>
	}
	else if (counter_period > 0) {
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	dd04      	ble.n	8002cf8 <Set_Motor_Volts+0xb4>
		Set_Direction(motor, FORWARD);
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 f834 	bl	8002d60 <Set_Direction>
	}

	Set_PWM(motor, counter_period);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 f809 	bl	8002d18 <Set_PWM>
}
 8002d06:	bf00      	nop
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd90      	pop	{r4, r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40c00000 	.word	0x40c00000
 8002d14:	20000218 	.word	0x20000218

08002d18 <Set_PWM>:

void Set_PWM(motor_t motor, uint16_t counter_period) {
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	460a      	mov	r2, r1
 8002d22:	71fb      	strb	r3, [r7, #7]
 8002d24:	4613      	mov	r3, r2
 8002d26:	80bb      	strh	r3, [r7, #4]
	// Software limit for motor voltage ~6V
	counter_period = counter_period > PWM_LIMIT ? PWM_LIMIT: counter_period;
 8002d28:	f240 52c1 	movw	r2, #1473	@ 0x5c1
 8002d2c:	88bb      	ldrh	r3, [r7, #4]
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	bf28      	it	cs
 8002d32:	4613      	movcs	r3, r2
 8002d34:	80bb      	strh	r3, [r7, #4]
	switch(motor) {
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <Set_PWM+0x2a>
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d005      	beq.n	8002d4c <Set_PWM+0x34>
			break;
		case MOTOR_RIGHT:
			TIM2->CCR3 = counter_period;
			break;
	}
}
 8002d40:	e009      	b.n	8002d56 <Set_PWM+0x3e>
			TIM2->CCR4 = counter_period;
 8002d42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d46:	88bb      	ldrh	r3, [r7, #4]
 8002d48:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8002d4a:	e004      	b.n	8002d56 <Set_PWM+0x3e>
			TIM2->CCR3 = counter_period;
 8002d4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d50:	88bb      	ldrh	r3, [r7, #4]
 8002d52:	63d3      	str	r3, [r2, #60]	@ 0x3c
			break;
 8002d54:	bf00      	nop
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <Set_Direction>:

void Set_Direction(motor_t motor, motor_direction_t direction) {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	460a      	mov	r2, r1
 8002d6a:	71fb      	strb	r3, [r7, #7]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	71bb      	strb	r3, [r7, #6]
	switch(motor) {
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <Set_Direction+0x1c>
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d032      	beq.n	8002de0 <Set_Direction+0x80>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
					break;
			}
			break;
	}
}
 8002d7a:	e066      	b.n	8002e4a <Set_Direction+0xea>
			switch(direction) {
 8002d7c:	79bb      	ldrb	r3, [r7, #6]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d020      	beq.n	8002dc4 <Set_Direction+0x64>
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	dc5e      	bgt.n	8002e44 <Set_Direction+0xe4>
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <Set_Direction+0x30>
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d00d      	beq.n	8002daa <Set_Direction+0x4a>
			break;
 8002d8e:	e059      	b.n	8002e44 <Set_Direction+0xe4>
					HAL_GPIO_WritePin(ML_FWD_GPIO_Port,  ML_FWD_Pin, 1);
 8002d90:	2201      	movs	r2, #1
 8002d92:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d96:	482f      	ldr	r0, [pc, #188]	@ (8002e54 <Set_Direction+0xf4>)
 8002d98:	f002 fb10 	bl	80053bc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002da2:	482d      	ldr	r0, [pc, #180]	@ (8002e58 <Set_Direction+0xf8>)
 8002da4:	f002 fb0a 	bl	80053bc <HAL_GPIO_WritePin>
					break;
 8002da8:	e019      	b.n	8002dde <Set_Direction+0x7e>
					HAL_GPIO_WritePin(ML_FWD_GPIO_Port,  ML_FWD_Pin, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002db0:	4828      	ldr	r0, [pc, #160]	@ (8002e54 <Set_Direction+0xf4>)
 8002db2:	f002 fb03 	bl	80053bc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 1);
 8002db6:	2201      	movs	r2, #1
 8002db8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002dbc:	4826      	ldr	r0, [pc, #152]	@ (8002e58 <Set_Direction+0xf8>)
 8002dbe:	f002 fafd 	bl	80053bc <HAL_GPIO_WritePin>
					break;
 8002dc2:	e00c      	b.n	8002dde <Set_Direction+0x7e>
					HAL_GPIO_WritePin(ML_FWD_GPIO_Port,  ML_FWD_Pin, 0);
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002dca:	4822      	ldr	r0, [pc, #136]	@ (8002e54 <Set_Direction+0xf4>)
 8002dcc:	f002 faf6 	bl	80053bc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002dd6:	4820      	ldr	r0, [pc, #128]	@ (8002e58 <Set_Direction+0xf8>)
 8002dd8:	f002 faf0 	bl	80053bc <HAL_GPIO_WritePin>
					break;
 8002ddc:	bf00      	nop
			break;
 8002dde:	e031      	b.n	8002e44 <Set_Direction+0xe4>
			switch(direction) {
 8002de0:	79bb      	ldrb	r3, [r7, #6]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d020      	beq.n	8002e28 <Set_Direction+0xc8>
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	dc2e      	bgt.n	8002e48 <Set_Direction+0xe8>
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <Set_Direction+0x94>
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d00d      	beq.n	8002e0e <Set_Direction+0xae>
			break;
 8002df2:	e029      	b.n	8002e48 <Set_Direction+0xe8>
					HAL_GPIO_WritePin(MR_FWD_GPIO_Port,  MR_FWD_Pin, 1);
 8002df4:	2201      	movs	r2, #1
 8002df6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002dfa:	4816      	ldr	r0, [pc, #88]	@ (8002e54 <Set_Direction+0xf4>)
 8002dfc:	f002 fade 	bl	80053bc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
 8002e00:	2200      	movs	r2, #0
 8002e02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e06:	4813      	ldr	r0, [pc, #76]	@ (8002e54 <Set_Direction+0xf4>)
 8002e08:	f002 fad8 	bl	80053bc <HAL_GPIO_WritePin>
					break;
 8002e0c:	e019      	b.n	8002e42 <Set_Direction+0xe2>
					HAL_GPIO_WritePin(MR_FWD_GPIO_Port,  MR_FWD_Pin, 0);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e14:	480f      	ldr	r0, [pc, #60]	@ (8002e54 <Set_Direction+0xf4>)
 8002e16:	f002 fad1 	bl	80053bc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 1);
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e20:	480c      	ldr	r0, [pc, #48]	@ (8002e54 <Set_Direction+0xf4>)
 8002e22:	f002 facb 	bl	80053bc <HAL_GPIO_WritePin>
					break;
 8002e26:	e00c      	b.n	8002e42 <Set_Direction+0xe2>
					HAL_GPIO_WritePin(MR_FWD_GPIO_Port,  MR_FWD_Pin, 0);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e2e:	4809      	ldr	r0, [pc, #36]	@ (8002e54 <Set_Direction+0xf4>)
 8002e30:	f002 fac4 	bl	80053bc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
 8002e34:	2200      	movs	r2, #0
 8002e36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e3a:	4806      	ldr	r0, [pc, #24]	@ (8002e54 <Set_Direction+0xf4>)
 8002e3c:	f002 fabe 	bl	80053bc <HAL_GPIO_WritePin>
					break;
 8002e40:	bf00      	nop
			break;
 8002e42:	e001      	b.n	8002e48 <Set_Direction+0xe8>
			break;
 8002e44:	bf00      	nop
 8002e46:	e000      	b.n	8002e4a <Set_Direction+0xea>
			break;
 8002e48:	bf00      	nop
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40010c00 	.word	0x40010c00
 8002e58:	40010800 	.word	0x40010800

08002e5c <Position_Controller>:

float Position_Controller(float velocity) {
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	float increment = velocity * SYSTICK_INTERVAL;
 8002e64:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee4 <Position_Controller+0x88>)
 8002e66:	4619      	mov	r1, r3
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7fd fec3 	bl	8000bf4 <__aeabi_fmul>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	60fb      	str	r3, [r7, #12]
	forward_error += increment - delta_position_forward;
 8002e72:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee8 <Position_Controller+0x8c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4619      	mov	r1, r3
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f7fd fdb1 	bl	80009e0 <__aeabi_fsub>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	461a      	mov	r2, r3
 8002e82:	4b1a      	ldr	r3, [pc, #104]	@ (8002eec <Position_Controller+0x90>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4619      	mov	r1, r3
 8002e88:	4610      	mov	r0, r2
 8002e8a:	f7fd fdab 	bl	80009e4 <__addsf3>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	461a      	mov	r2, r3
 8002e92:	4b16      	ldr	r3, [pc, #88]	@ (8002eec <Position_Controller+0x90>)
 8002e94:	601a      	str	r2, [r3, #0]
	float forward_error_difference = forward_error - previous_forward_error;
 8002e96:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <Position_Controller+0x90>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a15      	ldr	r2, [pc, #84]	@ (8002ef0 <Position_Controller+0x94>)
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fd fd9d 	bl	80009e0 <__aeabi_fsub>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	60bb      	str	r3, [r7, #8]
	previous_forward_error = forward_error;
 8002eaa:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <Position_Controller+0x90>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a10      	ldr	r2, [pc, #64]	@ (8002ef0 <Position_Controller+0x94>)
 8002eb0:	6013      	str	r3, [r2, #0]

	return FWD_KP * forward_error + FWD_KD * forward_error_difference;
 8002eb2:	4a10      	ldr	r2, [pc, #64]	@ (8002ef4 <Position_Controller+0x98>)
 8002eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002eec <Position_Controller+0x90>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f7fd fe9a 	bl	8000bf4 <__aeabi_fmul>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	461c      	mov	r4, r3
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef8 <Position_Controller+0x9c>)
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fd fe93 	bl	8000bf4 <__aeabi_fmul>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	f7fd fd86 	bl	80009e4 <__addsf3>
 8002ed8:	4603      	mov	r3, r0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd90      	pop	{r4, r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	3b03126f 	.word	0x3b03126f
 8002ee8:	20000bec 	.word	0x20000bec
 8002eec:	20000c40 	.word	0x20000c40
 8002ef0:	20000c44 	.word	0x20000c44
 8002ef4:	3e9f6cf2 	.word	0x3e9f6cf2
 8002ef8:	4159e619 	.word	0x4159e619

08002efc <Rotational_Controller>:

float Rotational_Controller(float steering_adjustment, float omega) {
 8002efc:	b590      	push	{r4, r7, lr}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
	float increment = omega * SYSTICK_INTERVAL;
 8002f06:	4b24      	ldr	r3, [pc, #144]	@ (8002f98 <Rotational_Controller+0x9c>)
 8002f08:	4619      	mov	r1, r3
 8002f0a:	6838      	ldr	r0, [r7, #0]
 8002f0c:	f7fd fe72 	bl	8000bf4 <__aeabi_fmul>
 8002f10:	4603      	mov	r3, r0
 8002f12:	60fb      	str	r3, [r7, #12]
	rotational_error += increment - delta_position_rotational;
 8002f14:	4b21      	ldr	r3, [pc, #132]	@ (8002f9c <Rotational_Controller+0xa0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7fd fd60 	bl	80009e0 <__aeabi_fsub>
 8002f20:	4603      	mov	r3, r0
 8002f22:	461a      	mov	r2, r3
 8002f24:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa0 <Rotational_Controller+0xa4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	f7fd fd5a 	bl	80009e4 <__addsf3>
 8002f30:	4603      	mov	r3, r0
 8002f32:	461a      	mov	r2, r3
 8002f34:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa0 <Rotational_Controller+0xa4>)
 8002f36:	601a      	str	r2, [r3, #0]
	rotational_error += steering_adjustment;
 8002f38:	4b19      	ldr	r3, [pc, #100]	@ (8002fa0 <Rotational_Controller+0xa4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fd fd50 	bl	80009e4 <__addsf3>
 8002f44:	4603      	mov	r3, r0
 8002f46:	461a      	mov	r2, r3
 8002f48:	4b15      	ldr	r3, [pc, #84]	@ (8002fa0 <Rotational_Controller+0xa4>)
 8002f4a:	601a      	str	r2, [r3, #0]
	float rotational_error_difference = rotational_error - previous_rotational_error;
 8002f4c:	4b14      	ldr	r3, [pc, #80]	@ (8002fa0 <Rotational_Controller+0xa4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a14      	ldr	r2, [pc, #80]	@ (8002fa4 <Rotational_Controller+0xa8>)
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	4611      	mov	r1, r2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fd fd42 	bl	80009e0 <__aeabi_fsub>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	60bb      	str	r3, [r7, #8]
	previous_rotational_error = rotational_error;
 8002f60:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa0 <Rotational_Controller+0xa4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a0f      	ldr	r2, [pc, #60]	@ (8002fa4 <Rotational_Controller+0xa8>)
 8002f66:	6013      	str	r3, [r2, #0]

	return ROT_KP * rotational_error + ROT_KD * rotational_error_difference;
 8002f68:	4a0f      	ldr	r2, [pc, #60]	@ (8002fa8 <Rotational_Controller+0xac>)
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa0 <Rotational_Controller+0xa4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4610      	mov	r0, r2
 8002f72:	f7fd fe3f 	bl	8000bf4 <__aeabi_fmul>
 8002f76:	4603      	mov	r3, r0
 8002f78:	461c      	mov	r4, r3
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002fac <Rotational_Controller+0xb0>)
 8002f7c:	68b9      	ldr	r1, [r7, #8]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd fe38 	bl	8000bf4 <__aeabi_fmul>
 8002f84:	4603      	mov	r3, r0
 8002f86:	4619      	mov	r1, r3
 8002f88:	4620      	mov	r0, r4
 8002f8a:	f7fd fd2b 	bl	80009e4 <__addsf3>
 8002f8e:	4603      	mov	r3, r0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd90      	pop	{r4, r7, pc}
 8002f98:	3b03126f 	.word	0x3b03126f
 8002f9c:	20000bf0 	.word	0x20000bf0
 8002fa0:	20000c48 	.word	0x20000c48
 8002fa4:	20000c4c 	.word	0x20000c4c
 8002fa8:	3ef54525 	.word	0x3ef54525
 8002fac:	408fab68 	.word	0x408fab68

08002fb0 <Update_Motors>:
	feedforward += acceleration_feedforward;

	return feedforward;
}

void Update_Motors(float velocity, float omega, float steering_adjustment) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08c      	sub	sp, #48	@ 0x30
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
	steering_adjustment = rotational_profile.state == IDLE || rotational_profile.state == COMPLETE ? steering_adjustment : 0;
 8002fbc:	4b29      	ldr	r3, [pc, #164]	@ (8003064 <Update_Motors+0xb4>)
 8002fbe:	7c1b      	ldrb	r3, [r3, #16]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <Update_Motors+0x1c>
 8002fc4:	4b27      	ldr	r3, [pc, #156]	@ (8003064 <Update_Motors+0xb4>)
 8002fc6:	7c1b      	ldrb	r3, [r3, #16]
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d101      	bne.n	8002fd0 <Update_Motors+0x20>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	e001      	b.n	8002fd4 <Update_Motors+0x24>
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]

	float position_output = Position_Controller(velocity);
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f7ff ff40 	bl	8002e5c <Position_Controller>
 8002fdc:	62f8      	str	r0, [r7, #44]	@ 0x2c
	float rotational_output = Rotational_Controller(steering_adjustment, omega);
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff ff8b 	bl	8002efc <Rotational_Controller>
 8002fe6:	62b8      	str	r0, [r7, #40]	@ 0x28

	float motor_left_voltage = 0;
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	627b      	str	r3, [r7, #36]	@ 0x24
	float motor_right_voltage = 0;
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	623b      	str	r3, [r7, #32]
	motor_left_voltage = position_output - rotational_output;
 8002ff4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ff6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ff8:	f7fd fcf2 	bl	80009e0 <__aeabi_fsub>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	627b      	str	r3, [r7, #36]	@ 0x24
	motor_right_voltage = position_output + rotational_output;
 8003000:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003002:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003004:	f7fd fcee 	bl	80009e4 <__addsf3>
 8003008:	4603      	mov	r3, r0
 800300a:	623b      	str	r3, [r7, #32]

	float tangent_speed = omega * MOUSE_RADIUS * RADIANS_PER_DEGREE;
 800300c:	4b16      	ldr	r3, [pc, #88]	@ (8003068 <Update_Motors+0xb8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68b9      	ldr	r1, [r7, #8]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fdee 	bl	8000bf4 <__aeabi_fmul>
 8003018:	4603      	mov	r3, r0
 800301a:	461a      	mov	r2, r3
 800301c:	4b13      	ldr	r3, [pc, #76]	@ (800306c <Update_Motors+0xbc>)
 800301e:	4619      	mov	r1, r3
 8003020:	4610      	mov	r0, r2
 8003022:	f7fd fde7 	bl	8000bf4 <__aeabi_fmul>
 8003026:	4603      	mov	r3, r0
 8003028:	61fb      	str	r3, [r7, #28]
	float motor_left_speed = velocity - tangent_speed;
 800302a:	69f9      	ldr	r1, [r7, #28]
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f7fd fcd7 	bl	80009e0 <__aeabi_fsub>
 8003032:	4603      	mov	r3, r0
 8003034:	61bb      	str	r3, [r7, #24]
	float motor_right_speed = velocity + tangent_speed;
 8003036:	69f9      	ldr	r1, [r7, #28]
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f7fd fcd3 	bl	80009e4 <__addsf3>
 800303e:	4603      	mov	r3, r0
 8003040:	617b      	str	r3, [r7, #20]
	#ifdef FEEDFORWARD_ENABLE
		motor_left_voltage += Feed_Forward(MOTOR_LEFT, motor_left_speed);
		motor_right_voltage += Feed_Forward(MOTOR_RIGHT, motor_right_speed);
	#endif
	if (motor_controller_enabled) {
 8003042:	4b0b      	ldr	r3, [pc, #44]	@ (8003070 <Update_Motors+0xc0>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d007      	beq.n	800305a <Update_Motors+0xaa>
		Set_Motor_Volts(MOTOR_LEFT, motor_left_voltage);
 800304a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800304c:	2000      	movs	r0, #0
 800304e:	f7ff fdf9 	bl	8002c44 <Set_Motor_Volts>
		Set_Motor_Volts(MOTOR_RIGHT, motor_right_voltage);
 8003052:	6a39      	ldr	r1, [r7, #32]
 8003054:	2001      	movs	r0, #1
 8003056:	f7ff fdf5 	bl	8002c44 <Set_Motor_Volts>
	}
}
 800305a:	bf00      	nop
 800305c:	3730      	adds	r7, #48	@ 0x30
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000ba0 	.word	0x20000ba0
 8003068:	08007e60 	.word	0x08007e60
 800306c:	3c8efa35 	.word	0x3c8efa35
 8003070:	20000c50 	.word	0x20000c50

08003074 <Clear_Profile>:

extern uint16_t wall_front_thresh;
extern uint16_t wall_left_thresh;
extern uint16_t wall_right_thresh;

void Clear_Profile(profile_t* profile) {
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
	bzero(profile, sizeof(profile_t));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4618      	mov	r0, r3
 8003080:	2324      	movs	r3, #36	@ 0x24
 8003082:	461a      	mov	r2, r3
 8003084:	2100      	movs	r1, #0
 8003086:	f004 fe31 	bl	8007cec <memset>
	profile->state = IDLE; // Should be handled above, just make sure it's IDLE
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	741a      	strb	r2, [r3, #16]
	profile->direction = 1;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	621a      	str	r2, [r3, #32]
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <Start_Profile>:

void Start_Profile(param_t parameters, profile_t* profile) {
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	463c      	mov	r4, r7
 80030a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (parameters.distance < 0) {
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f04f 0100 	mov.w	r1, #0
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd ff3c 	bl	8000f30 <__aeabi_fcmplt>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <Start_Profile+0x2e>
		profile->direction = -1;
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	f04f 32ff 	mov.w	r2, #4294967295
 80030c4:	621a      	str	r2, [r3, #32]
		parameters.distance *= -1;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80030cc:	603b      	str	r3, [r7, #0]
	}
	if (parameters.distance < 1.0) {
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fd ff2b 	bl	8000f30 <__aeabi_fcmplt>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <Start_Profile+0x48>
		profile->state = COMPLETE;
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	2203      	movs	r2, #3
 80030e4:	741a      	strb	r2, [r3, #16]
		return;
 80030e6:	e062      	b.n	80031ae <Start_Profile+0x10e>
	}
	if (parameters.end_speed > parameters.max_speed) {
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	4611      	mov	r1, r2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fd ff3c 	bl	8000f6c <__aeabi_fcmpgt>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <Start_Profile+0x5e>
		parameters.end_speed = parameters.max_speed;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	60bb      	str	r3, [r7, #8]
	}

	profile->position = 0;
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	619a      	str	r2, [r3, #24]
	profile->parameters.distance += profile == &forward_profile ? on_completion_error_forward : 0;
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	4929      	ldr	r1, [pc, #164]	@ (80031b4 <Start_Profile+0x114>)
 800310e:	428b      	cmp	r3, r1
 8003110:	d102      	bne.n	8003118 <Start_Profile+0x78>
 8003112:	4b29      	ldr	r3, [pc, #164]	@ (80031b8 <Start_Profile+0x118>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	e001      	b.n	800311c <Start_Profile+0x7c>
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	4611      	mov	r1, r2
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd fc60 	bl	80009e4 <__addsf3>
 8003124:	4603      	mov	r3, r0
 8003126:	461a      	mov	r2, r3
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	601a      	str	r2, [r3, #0]
	parameters.max_speed = profile->direction * fabsf(parameters.max_speed);
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd fd0b 	bl	8000b4c <__aeabi_i2f>
 8003136:	4602      	mov	r2, r0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800313e:	4619      	mov	r1, r3
 8003140:	4610      	mov	r0, r2
 8003142:	f7fd fd57 	bl	8000bf4 <__aeabi_fmul>
 8003146:	4603      	mov	r3, r0
 8003148:	607b      	str	r3, [r7, #4]
	parameters.end_speed = profile->direction * fabsf(parameters.end_speed);
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd fcfc 	bl	8000b4c <__aeabi_i2f>
 8003154:	4602      	mov	r2, r0
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800315c:	4619      	mov	r1, r3
 800315e:	4610      	mov	r0, r2
 8003160:	f7fd fd48 	bl	8000bf4 <__aeabi_fmul>
 8003164:	4603      	mov	r3, r0
 8003166:	60bb      	str	r3, [r7, #8]
	parameters.acceleration = fabsf(parameters.acceleration);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800316e:	60fb      	str	r3, [r7, #12]
	memcpy(&(profile->parameters), &parameters, sizeof(param_t));
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	4639      	mov	r1, r7
 8003174:	2210      	movs	r2, #16
 8003176:	4618      	mov	r0, r3
 8003178:	f004 fdfc 	bl	8007d74 <memcpy>
	profile->inverse_acceleration = parameters.acceleration >= 1 ? (1.0f / parameters.acceleration) : 1.0;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003182:	4618      	mov	r0, r3
 8003184:	f7fd fee8 	bl	8000f58 <__aeabi_fcmpge>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <Start_Profile+0x100>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4619      	mov	r1, r3
 8003192:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003196:	f7fd fde1 	bl	8000d5c <__aeabi_fdiv>
 800319a:	4603      	mov	r3, r0
 800319c:	461a      	mov	r2, r3
 800319e:	e001      	b.n	80031a4 <Start_Profile+0x104>
 80031a0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	61da      	str	r2, [r3, #28]

	profile->state = ACCELERATING;
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	2201      	movs	r2, #1
 80031ac:	741a      	strb	r2, [r3, #16]
}
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd90      	pop	{r4, r7, pc}
 80031b4:	20000b7c 	.word	0x20000b7c
 80031b8:	20000c54 	.word	0x20000c54

080031bc <Profile_Container>:

void Profile_Container(param_t parameters, profile_t* profile) {
 80031bc:	b590      	push	{r4, r7, lr}
 80031be:	b089      	sub	sp, #36	@ 0x24
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	463c      	mov	r4, r7
 80031c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float original_position = mouse_position;
 80031c8:	4b11      	ldr	r3, [pc, #68]	@ (8003210 <Profile_Container+0x54>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	617b      	str	r3, [r7, #20]
	Start_Profile(parameters, profile);
 80031ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	463b      	mov	r3, r7
 80031d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031d6:	f7ff ff63 	bl	80030a0 <Start_Profile>
	while (profile->state != COMPLETE);
 80031da:	bf00      	nop
 80031dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031de:	7c1b      	ldrb	r3, [r3, #16]
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d1fb      	bne.n	80031dc <Profile_Container+0x20>
	float delta_position = mouse_position - original_position;
 80031e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003210 <Profile_Container+0x54>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6979      	ldr	r1, [r7, #20]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd fbf8 	bl	80009e0 <__aeabi_fsub>
 80031f0:	4603      	mov	r3, r0
 80031f2:	613b      	str	r3, [r7, #16]
	on_completion_error_forward = parameters.distance - delta_position;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	6939      	ldr	r1, [r7, #16]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fd fbf1 	bl	80009e0 <__aeabi_fsub>
 80031fe:	4603      	mov	r3, r0
 8003200:	461a      	mov	r2, r3
 8003202:	4b04      	ldr	r3, [pc, #16]	@ (8003214 <Profile_Container+0x58>)
 8003204:	601a      	str	r2, [r3, #0]
}
 8003206:	bf00      	nop
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	bd90      	pop	{r4, r7, pc}
 800320e:	bf00      	nop
 8003210:	20000bf8 	.word	0x20000bf8
 8003214:	20000c54 	.word	0x20000c54

08003218 <Turn_Container>:

void Turn_Container(param_t fwd_parameters, param_t rot_parameters, profile_t* fwd_profile, profile_t* rot_profile) {
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b087      	sub	sp, #28
 800321c:	af02      	add	r7, sp, #8
 800321e:	463c      	mov	r4, r7
 8003220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Profile_Container(fwd_parameters, fwd_profile);
 8003224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	463b      	mov	r3, r7
 800322a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800322c:	f7ff ffc6 	bl	80031bc <Profile_Container>
    adjust_steering = false;
 8003230:	4b10      	ldr	r3, [pc, #64]	@ (8003274 <Turn_Container+0x5c>)
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]
    Clear_Profile(fwd_profile);
 8003236:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003238:	f7ff ff1c 	bl	8003074 <Clear_Profile>
    Clear_Profile(rot_profile);
 800323c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800323e:	f7ff ff19 	bl	8003074 <Clear_Profile>
    Profile_Container(rot_parameters, rot_profile);
 8003242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	f107 0320 	add.w	r3, r7, #32
 800324a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800324c:	f7ff ffb6 	bl	80031bc <Profile_Container>
    Clear_Profile(rot_profile);
 8003250:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003252:	f7ff ff0f 	bl	8003074 <Clear_Profile>
    fwd_parameters.end_speed = fwd_parameters.max_speed;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	60bb      	str	r3, [r7, #8]
    adjust_steering = true;
 800325a:	4b06      	ldr	r3, [pc, #24]	@ (8003274 <Turn_Container+0x5c>)
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
    Profile_Container(fwd_parameters, fwd_profile);
 8003260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	463b      	mov	r3, r7
 8003266:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003268:	f7ff ffa8 	bl	80031bc <Profile_Container>
}
 800326c:	bf00      	nop
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	bd90      	pop	{r4, r7, pc}
 8003274:	20000c68 	.word	0x20000c68

08003278 <About_Face_Container>:
	Clear_Profile(rot_profile);
	adjust_steering = true;
	Profile_Container(fwd_parameters, fwd_profile);
}

void About_Face_Container(param_t fwd_parameters, param_t rev_parameters, param_t rot_parameters, profile_t* fwd_profile, profile_t* rot_profile, bool wall_realignment) {
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b087      	sub	sp, #28
 800327c:	af02      	add	r7, sp, #8
 800327e:	463c      	mov	r4, r7
 8003280:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (wall_realignment) { // Back up into existing wall
 8003284:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8003288:	2b00      	cmp	r3, #0
 800328a:	d02a      	beq.n	80032e2 <About_Face_Container+0x6a>
		Profile_Container(fwd_parameters, fwd_profile);
 800328c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	463b      	mov	r3, r7
 8003292:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003294:	f7ff ff92 	bl	80031bc <Profile_Container>
		adjust_steering = false;
 8003298:	4b1e      	ldr	r3, [pc, #120]	@ (8003314 <About_Face_Container+0x9c>)
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]
		Profile_Container(rot_parameters, rot_profile);
 800329e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80032a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032a8:	f7ff ff88 	bl	80031bc <Profile_Container>
		Clear_Profile(rot_profile);
 80032ac:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80032ae:	f7ff fee1 	bl	8003074 <Clear_Profile>
		Profile_Container(rev_parameters, fwd_profile);
 80032b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	f107 0320 	add.w	r3, r7, #32
 80032ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032bc:	f7ff ff7e 	bl	80031bc <Profile_Container>
		fwd_profile->direction *= -1;
 80032c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	425a      	negs	r2, r3
 80032c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032c8:	621a      	str	r2, [r3, #32]
		fwd_profile->position = 0;
 80032ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	619a      	str	r2, [r3, #24]
		HAL_Delay(500);
 80032d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80032d6:	f001 f8b1 	bl	800443c <HAL_Delay>
		adjust_steering = true;
 80032da:	4b0e      	ldr	r3, [pc, #56]	@ (8003314 <About_Face_Container+0x9c>)
 80032dc:	2201      	movs	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]
		Profile_Container(rot_parameters, rot_profile);
		Clear_Profile(rot_profile);
		HAL_Delay(500);
		adjust_steering = true;
	}
}
 80032e0:	e013      	b.n	800330a <About_Face_Container+0x92>
		adjust_steering = false;
 80032e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003314 <About_Face_Container+0x9c>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
		Profile_Container(rot_parameters, rot_profile);
 80032e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80032f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032f2:	f7ff ff63 	bl	80031bc <Profile_Container>
		Clear_Profile(rot_profile);
 80032f6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80032f8:	f7ff febc 	bl	8003074 <Clear_Profile>
		HAL_Delay(500);
 80032fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003300:	f001 f89c 	bl	800443c <HAL_Delay>
		adjust_steering = true;
 8003304:	4b03      	ldr	r3, [pc, #12]	@ (8003314 <About_Face_Container+0x9c>)
 8003306:	2201      	movs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]
}
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	bd90      	pop	{r4, r7, pc}
 8003312:	bf00      	nop
 8003314:	20000c68 	.word	0x20000c68

08003318 <Parameter_Packer>:

param_t Parameter_Packer(float distance, float max_speed, float end_speed, float acceleration) {
 8003318:	b490      	push	{r4, r7}
 800331a:	b088      	sub	sp, #32
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]
	param_t return_parameters = {
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	61bb      	str	r3, [r7, #24]
 8003332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003334:	61fb      	str	r3, [r7, #28]
			.max_speed = max_speed,
			.end_speed = end_speed,
			.acceleration = acceleration
	};

	return return_parameters;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	461c      	mov	r4, r3
 800333a:	f107 0310 	add.w	r3, r7, #16
 800333e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	3720      	adds	r7, #32
 8003348:	46bd      	mov	sp, r7
 800334a:	bc90      	pop	{r4, r7}
 800334c:	4770      	bx	lr
	...

08003350 <Calculate_Braking_Distance>:

float Calculate_Braking_Distance(float current_speed, float end_speed, float inverse_acceleration) {
 8003350:	b5b0      	push	{r4, r5, r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
	return fabsf(current_speed * current_speed - end_speed * end_speed) * 0.5 * inverse_acceleration;
 800335c:	68f9      	ldr	r1, [r7, #12]
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f7fd fc48 	bl	8000bf4 <__aeabi_fmul>
 8003364:	4603      	mov	r3, r0
 8003366:	461c      	mov	r4, r3
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	68b8      	ldr	r0, [r7, #8]
 800336c:	f7fd fc42 	bl	8000bf4 <__aeabi_fmul>
 8003370:	4603      	mov	r3, r0
 8003372:	4619      	mov	r1, r3
 8003374:	4620      	mov	r0, r4
 8003376:	f7fd fb33 	bl	80009e0 <__aeabi_fsub>
 800337a:	4603      	mov	r3, r0
 800337c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003380:	4618      	mov	r0, r3
 8003382:	f7fd f847 	bl	8000414 <__aeabi_f2d>
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	4b0d      	ldr	r3, [pc, #52]	@ (80033c0 <Calculate_Braking_Distance+0x70>)
 800338c:	f7fd f89a 	bl	80004c4 <__aeabi_dmul>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4614      	mov	r4, r2
 8003396:	461d      	mov	r5, r3
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7fd f83b 	bl	8000414 <__aeabi_f2d>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4620      	mov	r0, r4
 80033a4:	4629      	mov	r1, r5
 80033a6:	f7fd f88d 	bl	80004c4 <__aeabi_dmul>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4610      	mov	r0, r2
 80033b0:	4619      	mov	r1, r3
 80033b2:	f7fd fac1 	bl	8000938 <__aeabi_d2f>
 80033b6:	4603      	mov	r3, r0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bdb0      	pop	{r4, r5, r7, pc}
 80033c0:	3fe00000 	.word	0x3fe00000

080033c4 <Update_Profile>:

void Update_Profile(profile_t* profile) {
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	if (profile->state == IDLE || profile->state == COMPLETE) {
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	7c1b      	ldrb	r3, [r3, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80c1 	beq.w	8003558 <Update_Profile+0x194>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	7c1b      	ldrb	r3, [r3, #16]
 80033da:	2b03      	cmp	r3, #3
 80033dc:	f000 80bc 	beq.w	8003558 <Update_Profile+0x194>
		return;
	}

	float delta_v = profile->parameters.acceleration * SYSTICK_INTERVAL;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4a5e      	ldr	r2, [pc, #376]	@ (8003560 <Update_Profile+0x19c>)
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	4611      	mov	r1, r2
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd fc02 	bl	8000bf4 <__aeabi_fmul>
 80033f0:	4603      	mov	r3, r0
 80033f2:	617b      	str	r3, [r7, #20]
	float remaining_distance = fabsf(profile->parameters.distance) - fabsf(profile->position);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003404:	4619      	mov	r1, r3
 8003406:	4610      	mov	r0, r2
 8003408:	f7fd faea 	bl	80009e0 <__aeabi_fsub>
 800340c:	4603      	mov	r3, r0
 800340e:	613b      	str	r3, [r7, #16]
	if (profile->state == ACCELERATING) {
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	7c1b      	ldrb	r3, [r3, #16]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d130      	bne.n	800347a <Update_Profile+0xb6>
		float braking_distance = Calculate_Braking_Distance(profile->speed, profile->parameters.end_speed, profile->inverse_acceleration);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6958      	ldr	r0, [r3, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6899      	ldr	r1, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	461a      	mov	r2, r3
 8003426:	f7ff ff93 	bl	8003350 <Calculate_Braking_Distance>
 800342a:	60f8      	str	r0, [r7, #12]
		if (remaining_distance < braking_distance) {
 800342c:	68f9      	ldr	r1, [r7, #12]
 800342e:	6938      	ldr	r0, [r7, #16]
 8003430:	f7fd fd7e 	bl	8000f30 <__aeabi_fcmplt>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d01f      	beq.n	800347a <Update_Profile+0xb6>
			profile->state = BRAKING;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2202      	movs	r2, #2
 800343e:	741a      	strb	r2, [r3, #16]
			if (profile->parameters.end_speed == 0) {
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f04f 0100 	mov.w	r1, #0
 8003448:	4618      	mov	r0, r3
 800344a:	f7fd fd67 	bl	8000f1c <__aeabi_fcmpeq>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00e      	beq.n	8003472 <Update_Profile+0xae>
				profile->parameters.max_speed = profile->direction * 5.0f;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	4618      	mov	r0, r3
 800345a:	f7fd fb77 	bl	8000b4c <__aeabi_i2f>
 800345e:	4603      	mov	r3, r0
 8003460:	4940      	ldr	r1, [pc, #256]	@ (8003564 <Update_Profile+0x1a0>)
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd fbc6 	bl	8000bf4 <__aeabi_fmul>
 8003468:	4603      	mov	r3, r0
 800346a:	461a      	mov	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	605a      	str	r2, [r3, #4]
 8003470:	e003      	b.n	800347a <Update_Profile+0xb6>
			}
			else {
				profile->parameters.max_speed = profile->parameters.end_speed;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	605a      	str	r2, [r3, #4]
			}
		}
	}

	if (profile->speed < profile->parameters.max_speed) {
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695a      	ldr	r2, [r3, #20]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	4619      	mov	r1, r3
 8003484:	4610      	mov	r0, r2
 8003486:	f7fd fd53 	bl	8000f30 <__aeabi_fcmplt>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d018      	beq.n	80034c2 <Update_Profile+0xfe>
		profile->speed += delta_v;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	6979      	ldr	r1, [r7, #20]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fd faa4 	bl	80009e4 <__addsf3>
 800349c:	4603      	mov	r3, r0
 800349e:	461a      	mov	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	615a      	str	r2, [r3, #20]
		if (profile->speed > profile->parameters.max_speed) {
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	695a      	ldr	r2, [r3, #20]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	4619      	mov	r1, r3
 80034ae:	4610      	mov	r0, r2
 80034b0:	f7fd fd5c 	bl	8000f6c <__aeabi_fcmpgt>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <Update_Profile+0xfe>
			profile->speed = profile->parameters.max_speed;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	615a      	str	r2, [r3, #20]
		}
	}
	if (profile->speed > profile->parameters.max_speed) {
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695a      	ldr	r2, [r3, #20]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	4619      	mov	r1, r3
 80034cc:	4610      	mov	r0, r2
 80034ce:	f7fd fd4d 	bl	8000f6c <__aeabi_fcmpgt>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d018      	beq.n	800350a <Update_Profile+0x146>
		profile->speed -= delta_v;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	6979      	ldr	r1, [r7, #20]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd fa7e 	bl	80009e0 <__aeabi_fsub>
 80034e4:	4603      	mov	r3, r0
 80034e6:	461a      	mov	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	615a      	str	r2, [r3, #20]
		if (profile->speed < profile->parameters.max_speed) {
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4619      	mov	r1, r3
 80034f6:	4610      	mov	r0, r2
 80034f8:	f7fd fd1a 	bl	8000f30 <__aeabi_fcmplt>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <Update_Profile+0x146>
			profile->speed = profile->parameters.max_speed;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	615a      	str	r2, [r3, #20]
		}
	}

	profile->position += profile->speed * SYSTICK_INTERVAL;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699c      	ldr	r4, [r3, #24]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	4a13      	ldr	r2, [pc, #76]	@ (8003560 <Update_Profile+0x19c>)
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	4611      	mov	r1, r2
 8003518:	4618      	mov	r0, r3
 800351a:	f7fd fb6b 	bl	8000bf4 <__aeabi_fmul>
 800351e:	4603      	mov	r3, r0
 8003520:	4619      	mov	r1, r3
 8003522:	4620      	mov	r0, r4
 8003524:	f7fd fa5e 	bl	80009e4 <__addsf3>
 8003528:	4603      	mov	r3, r0
 800352a:	461a      	mov	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	619a      	str	r2, [r3, #24]
	if (profile->state != COMPLETE && remaining_distance < 0.125) {
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	7c1b      	ldrb	r3, [r3, #16]
 8003534:	2b03      	cmp	r3, #3
 8003536:	d010      	beq.n	800355a <Update_Profile+0x196>
 8003538:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 800353c:	6938      	ldr	r0, [r7, #16]
 800353e:	f7fd fcf7 	bl	8000f30 <__aeabi_fcmplt>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <Update_Profile+0x196>
		profile->state = COMPLETE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2203      	movs	r2, #3
 800354c:	741a      	strb	r2, [r3, #16]
		profile->parameters.max_speed = profile->parameters.end_speed;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	e000      	b.n	800355a <Update_Profile+0x196>
		return;
 8003558:	bf00      	nop
	}
}
 800355a:	371c      	adds	r7, #28
 800355c:	46bd      	mov	sp, r7
 800355e:	bd90      	pop	{r4, r7, pc}
 8003560:	08007e64 	.word	0x08007e64
 8003564:	40a00000 	.word	0x40a00000

08003568 <LED_Power_Init>:
const float ADC_MAX_READING = 4096.0;
const float ADC_REFERENCE_V = 3.3;

const float BATTERY_MULTIPLIER = (ADC_REFERENCE_V / ADC_MAX_READING / DIVIDER_RATIO);

void LED_Power_Init() {
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Power_GPIO_Port, LED_Power_Pin);
 800356c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003570:	4802      	ldr	r0, [pc, #8]	@ (800357c <LED_Power_Init+0x14>)
 8003572:	f001 ff3b 	bl	80053ec <HAL_GPIO_TogglePin>
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40011000 	.word	0x40011000

08003580 <Pulse_Buzzer>:
void Reset_Buffers(uint8_t rxBuff, uint8_t txBuff) {
	rxBuff = 0;
	txBuff = 0;
}

void Pulse_Buzzer(uint16_t delay) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800358a:	2201      	movs	r2, #1
 800358c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003590:	4804      	ldr	r0, [pc, #16]	@ (80035a4 <Pulse_Buzzer+0x24>)
 8003592:	f001 ff13 	bl	80053bc <HAL_GPIO_WritePin>
	buzzerDelay = delay;
 8003596:	4a04      	ldr	r2, [pc, #16]	@ (80035a8 <Pulse_Buzzer+0x28>)
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	8013      	strh	r3, [r2, #0]
}
 800359c:	bf00      	nop
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40010c00 	.word	0x40010c00
 80035a8:	20000c58 	.word	0x20000c58

080035ac <LED_Red_Toggle>:

void LED_Red_Toggle() {
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 80035b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80035b4:	4802      	ldr	r0, [pc, #8]	@ (80035c0 <LED_Red_Toggle+0x14>)
 80035b6:	f001 ff19 	bl	80053ec <HAL_GPIO_TogglePin>
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40010800 	.word	0x40010800

080035c4 <LED_Blue_Toggle>:

void LED_Green_Toggle() {
	HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
}

void LED_Blue_Toggle() {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 80035c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80035cc:	4802      	ldr	r0, [pc, #8]	@ (80035d8 <LED_Blue_Toggle+0x14>)
 80035ce:	f001 ff0d 	bl	80053ec <HAL_GPIO_TogglePin>
}
 80035d2:	bf00      	nop
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40010800 	.word	0x40010800

080035dc <Calculate_Battery_Bias>:

float Calculate_Battery_Bias(float commanded_voltage) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	return (BATTERY_BIAS_SLOPE * commanded_voltage + BATTERY_BIAS_OFFSET) / BATTERY_RATIO;
 80035e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003614 <Calculate_Battery_Bias+0x38>)
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fd fb03 	bl	8000bf4 <__aeabi_fmul>
 80035ee:	4603      	mov	r3, r0
 80035f0:	461a      	mov	r2, r3
 80035f2:	4b09      	ldr	r3, [pc, #36]	@ (8003618 <Calculate_Battery_Bias+0x3c>)
 80035f4:	4619      	mov	r1, r3
 80035f6:	4610      	mov	r0, r2
 80035f8:	f7fd f9f4 	bl	80009e4 <__addsf3>
 80035fc:	4603      	mov	r3, r0
 80035fe:	461a      	mov	r2, r3
 8003600:	4b06      	ldr	r3, [pc, #24]	@ (800361c <Calculate_Battery_Bias+0x40>)
 8003602:	4619      	mov	r1, r3
 8003604:	4610      	mov	r0, r2
 8003606:	f7fd fba9 	bl	8000d5c <__aeabi_fdiv>
 800360a:	4603      	mov	r3, r0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	3d9b089a 	.word	0x3d9b089a
 8003618:	3cbb98c8 	.word	0x3cbb98c8
 800361c:	3f69ba5e 	.word	0x3f69ba5e

08003620 <Read_Battery>:

double Read_Battery() {
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 8003626:	4815      	ldr	r0, [pc, #84]	@ (800367c <Read_Battery+0x5c>)
 8003628:	f001 f804 	bl	8004634 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 800362c:	f04f 31ff 	mov.w	r1, #4294967295
 8003630:	4812      	ldr	r0, [pc, #72]	@ (800367c <Read_Battery+0x5c>)
 8003632:	f001 f8d9 	bl	80047e8 <HAL_ADC_PollForConversion>
	uint16_t raw_adc = HAL_ADC_GetValue(&hadc2);
 8003636:	4811      	ldr	r0, [pc, #68]	@ (800367c <Read_Battery+0x5c>)
 8003638:	f001 f9dc 	bl	80049f4 <HAL_ADC_GetValue>
 800363c:	4603      	mov	r3, r0
 800363e:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc2);
 8003640:	480e      	ldr	r0, [pc, #56]	@ (800367c <Read_Battery+0x5c>)
 8003642:	f001 f8a5 	bl	8004790 <HAL_ADC_Stop>

	return raw_adc * BATTERY_MULTIPLIER + 1.0;
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	4618      	mov	r0, r3
 800364a:	f7fd fa7f 	bl	8000b4c <__aeabi_i2f>
 800364e:	4603      	mov	r3, r0
 8003650:	4a0b      	ldr	r2, [pc, #44]	@ (8003680 <Read_Battery+0x60>)
 8003652:	4611      	mov	r1, r2
 8003654:	4618      	mov	r0, r3
 8003656:	f7fd facd 	bl	8000bf4 <__aeabi_fmul>
 800365a:	4603      	mov	r3, r0
 800365c:	4618      	mov	r0, r3
 800365e:	f7fc fed9 	bl	8000414 <__aeabi_f2d>
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	4b07      	ldr	r3, [pc, #28]	@ (8003684 <Read_Battery+0x64>)
 8003668:	f7fc fd76 	bl	8000158 <__adddf3>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
}
 8003670:	4610      	mov	r0, r2
 8003672:	4619      	mov	r1, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	200000c4 	.word	0x200000c4
 8003680:	3b1e6666 	.word	0x3b1e6666
 8003684:	3ff00000 	.word	0x3ff00000

08003688 <ARM_Button>:

void ARM_Button() {
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
	for (uint8_t i=0; i < 5; i++) {
 800368e:	2300      	movs	r3, #0
 8003690:	71fb      	strb	r3, [r7, #7]
 8003692:	e008      	b.n	80036a6 <ARM_Button+0x1e>
		LED_Red_Toggle();
 8003694:	f7ff ff8a 	bl	80035ac <LED_Red_Toggle>
		HAL_Delay(500);
 8003698:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800369c:	f000 fece 	bl	800443c <HAL_Delay>
	for (uint8_t i=0; i < 5; i++) {
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	3301      	adds	r3, #1
 80036a4:	71fb      	strb	r3, [r7, #7]
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d9f3      	bls.n	8003694 <ARM_Button+0xc>
	}
	armed = true;
 80036ac:	4b03      	ldr	r3, [pc, #12]	@ (80036bc <ARM_Button+0x34>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20000240 	.word	0x20000240

080036c0 <RACE_Button>:

void RACE_Button() {
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
	switch (mouse_mode) {
 80036c4:	4b0a      	ldr	r3, [pc, #40]	@ (80036f0 <RACE_Button+0x30>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <RACE_Button+0x12>
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d004      	beq.n	80036da <RACE_Button+0x1a>
			break;
		case RACING:
			mouse_mode = SEARCHING;
			break;
		default:
			return;
 80036d0:	e00d      	b.n	80036ee <RACE_Button+0x2e>
			mouse_mode = RACING;
 80036d2:	4b07      	ldr	r3, [pc, #28]	@ (80036f0 <RACE_Button+0x30>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	701a      	strb	r2, [r3, #0]
			break;
 80036d8:	e003      	b.n	80036e2 <RACE_Button+0x22>
			mouse_mode = SEARCHING;
 80036da:	4b05      	ldr	r3, [pc, #20]	@ (80036f0 <RACE_Button+0x30>)
 80036dc:	2200      	movs	r2, #0
 80036de:	701a      	strb	r2, [r3, #0]
			break;
 80036e0:	bf00      	nop
	}

	LED_Blue_Toggle();
 80036e2:	f7ff ff6f 	bl	80035c4 <LED_Blue_Toggle>
	HAL_Delay(1000);
 80036e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80036ea:	f000 fea7 	bl	800443c <HAL_Delay>
}
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20000b78 	.word	0x20000b78

080036f4 <LOADMAZE_Button>:

void LOADMAZE_Button() {
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
	// TODO: Implement load from flash
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <Systick>:
extern float steering_adjustment;
extern bool disable_adc;

uint32_t time_last_updated_ms = 0;

void Systick() {
 8003700:	b5b0      	push	{r4, r5, r7, lr}
 8003702:	af00      	add	r7, sp, #0
	global_time = HAL_GetTick();
 8003704:	f000 fe90 	bl	8004428 <HAL_GetTick>
 8003708:	4603      	mov	r3, r0
 800370a:	4a2b      	ldr	r2, [pc, #172]	@ (80037b8 <Systick+0xb8>)
 800370c:	6013      	str	r3, [r2, #0]

	Debug_Mode();
 800370e:	f000 f865 	bl	80037dc <Debug_Mode>
	Buzzer_Check();
 8003712:	f000 f8a1 	bl	8003858 <Buzzer_Check>

	if (global_time > time_last_updated_ms + (SYSTICK_INTERVAL * 1000)) {
 8003716:	4b28      	ldr	r3, [pc, #160]	@ (80037b8 <Systick+0xb8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7fd fa12 	bl	8000b44 <__aeabi_ui2f>
 8003720:	4604      	mov	r4, r0
 8003722:	4b26      	ldr	r3, [pc, #152]	@ (80037bc <Systick+0xbc>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7fd fa0c 	bl	8000b44 <__aeabi_ui2f>
 800372c:	4605      	mov	r5, r0
 800372e:	4b24      	ldr	r3, [pc, #144]	@ (80037c0 <Systick+0xc0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4924      	ldr	r1, [pc, #144]	@ (80037c4 <Systick+0xc4>)
 8003734:	4618      	mov	r0, r3
 8003736:	f7fd fa5d 	bl	8000bf4 <__aeabi_fmul>
 800373a:	4603      	mov	r3, r0
 800373c:	4619      	mov	r1, r3
 800373e:	4628      	mov	r0, r5
 8003740:	f7fd f950 	bl	80009e4 <__addsf3>
 8003744:	4603      	mov	r3, r0
 8003746:	4619      	mov	r1, r3
 8003748:	4620      	mov	r0, r4
 800374a:	f7fd fc0f 	bl	8000f6c <__aeabi_fcmpgt>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d100      	bne.n	8003756 <Systick+0x56>
		// Update motor voltages
		Update_Motors(forward_profile.speed, rotational_profile.speed, steering_adjustment);

		time_last_updated_ms = global_time;
	}
}
 8003754:	e02d      	b.n	80037b2 <Systick+0xb2>
		Update_Encoders();
 8003756:	f7fe f923 	bl	80019a0 <Update_Encoders>
		Update_Profile(&forward_profile);
 800375a:	481b      	ldr	r0, [pc, #108]	@ (80037c8 <Systick+0xc8>)
 800375c:	f7ff fe32 	bl	80033c4 <Update_Profile>
		Update_Profile(&rotational_profile);
 8003760:	481a      	ldr	r0, [pc, #104]	@ (80037cc <Systick+0xcc>)
 8003762:	f7ff fe2f 	bl	80033c4 <Update_Profile>
		if (!disable_adc) {
 8003766:	4b1a      	ldr	r3, [pc, #104]	@ (80037d0 <Systick+0xd0>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	f083 0301 	eor.w	r3, r3, #1
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <Systick+0x86>
			Poll_Sensors(&mouse_state);
 8003774:	4817      	ldr	r0, [pc, #92]	@ (80037d4 <Systick+0xd4>)
 8003776:	f000 f9e5 	bl	8003b44 <Poll_Sensors>
			Wall_Front();
 800377a:	f000 fa3f 	bl	8003bfc <Wall_Front>
			Wall_Left();
 800377e:	f000 fa71 	bl	8003c64 <Wall_Left>
			Wall_Right();
 8003782:	f000 fa97 	bl	8003cb4 <Wall_Right>
		Calculate_Error();
 8003786:	f000 fb1f 	bl	8003dc8 <Calculate_Error>
		mouse_state.battery_voltage = Read_Battery();
 800378a:	f7ff ff49 	bl	8003620 <Read_Battery>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	4910      	ldr	r1, [pc, #64]	@ (80037d4 <Systick+0xd4>)
 8003794:	e9c1 2306 	strd	r2, r3, [r1, #24]
		Update_Motors(forward_profile.speed, rotational_profile.speed, steering_adjustment);
 8003798:	4b0b      	ldr	r3, [pc, #44]	@ (80037c8 <Systick+0xc8>)
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	4a0b      	ldr	r2, [pc, #44]	@ (80037cc <Systick+0xcc>)
 800379e:	6951      	ldr	r1, [r2, #20]
 80037a0:	4a0d      	ldr	r2, [pc, #52]	@ (80037d8 <Systick+0xd8>)
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fc03 	bl	8002fb0 <Update_Motors>
		time_last_updated_ms = global_time;
 80037aa:	4b03      	ldr	r3, [pc, #12]	@ (80037b8 <Systick+0xb8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a03      	ldr	r2, [pc, #12]	@ (80037bc <Systick+0xbc>)
 80037b0:	6013      	str	r3, [r2, #0]
}
 80037b2:	bf00      	nop
 80037b4:	bdb0      	pop	{r4, r5, r7, pc}
 80037b6:	bf00      	nop
 80037b8:	2000023c 	.word	0x2000023c
 80037bc:	20000c5c 	.word	0x20000c5c
 80037c0:	08007e64 	.word	0x08007e64
 80037c4:	447a0000 	.word	0x447a0000
 80037c8:	20000b7c 	.word	0x20000b7c
 80037cc:	20000ba0 	.word	0x20000ba0
 80037d0:	20000c0c 	.word	0x20000c0c
 80037d4:	20000218 	.word	0x20000218
 80037d8:	20000c6c 	.word	0x20000c6c

080037dc <Debug_Mode>:

void Debug_Mode() {
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
	if (debugMode) {
 80037e0:	4b17      	ldr	r3, [pc, #92]	@ (8003840 <Debug_Mode+0x64>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d029      	beq.n	800383c <Debug_Mode+0x60>
		debugCounter = (debugCounter + 1) % DEBUG_PERIOD;
 80037e8:	4b16      	ldr	r3, [pc, #88]	@ (8003844 <Debug_Mode+0x68>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	3301      	adds	r3, #1
 80037ee:	4a16      	ldr	r2, [pc, #88]	@ (8003848 <Debug_Mode+0x6c>)
 80037f0:	fb82 1203 	smull	r1, r2, r2, r3
 80037f4:	1111      	asrs	r1, r2, #4
 80037f6:	17da      	asrs	r2, r3, #31
 80037f8:	1a8a      	subs	r2, r1, r2
 80037fa:	2132      	movs	r1, #50	@ 0x32
 80037fc:	fb01 f202 	mul.w	r2, r1, r2
 8003800:	1a9a      	subs	r2, r3, r2
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	4b0f      	ldr	r3, [pc, #60]	@ (8003844 <Debug_Mode+0x68>)
 8003806:	701a      	strb	r2, [r3, #0]
		if (debugCounter == 0) {
 8003808:	4b0e      	ldr	r3, [pc, #56]	@ (8003844 <Debug_Mode+0x68>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d115      	bne.n	800383c <Debug_Mode+0x60>
			mouse_state.rpm.left_rpm = Calculate_RPM(objective_L, MOTOR_LEFT);
 8003810:	4b0e      	ldr	r3, [pc, #56]	@ (800384c <Debug_Mode+0x70>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2100      	movs	r1, #0
 8003816:	4618      	mov	r0, r3
 8003818:	f7fe f872 	bl	8001900 <Calculate_RPM>
 800381c:	4603      	mov	r3, r0
 800381e:	461a      	mov	r2, r3
 8003820:	4b0b      	ldr	r3, [pc, #44]	@ (8003850 <Debug_Mode+0x74>)
 8003822:	809a      	strh	r2, [r3, #4]
			mouse_state.rpm.right_rpm  = Calculate_RPM(objective_R, MOTOR_RIGHT);
 8003824:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <Debug_Mode+0x78>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2101      	movs	r1, #1
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe f868 	bl	8001900 <Calculate_RPM>
 8003830:	4603      	mov	r3, r0
 8003832:	461a      	mov	r2, r3
 8003834:	4b06      	ldr	r3, [pc, #24]	@ (8003850 <Debug_Mode+0x74>)
 8003836:	80da      	strh	r2, [r3, #6]

			Debug_Packet_Send();
 8003838:	f7fd fff0 	bl	800181c <Debug_Packet_Send>
		}
	}
}
 800383c:	bf00      	nop
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20000238 	.word	0x20000238
 8003844:	20000239 	.word	0x20000239
 8003848:	51eb851f 	.word	0x51eb851f
 800384c:	20000244 	.word	0x20000244
 8003850:	20000218 	.word	0x20000218
 8003854:	20000248 	.word	0x20000248

08003858 <Buzzer_Check>:

void Buzzer_Check() {
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
	if (buzzerDelay > 0) {
 800385c:	4b0a      	ldr	r3, [pc, #40]	@ (8003888 <Buzzer_Check+0x30>)
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d007      	beq.n	8003876 <Buzzer_Check+0x1e>
		buzzerDelay--;
 8003866:	4b08      	ldr	r3, [pc, #32]	@ (8003888 <Buzzer_Check+0x30>)
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	4b05      	ldr	r3, [pc, #20]	@ (8003888 <Buzzer_Check+0x30>)
 8003872:	801a      	strh	r2, [r3, #0]
	}
	else {
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
	}
}
 8003874:	e005      	b.n	8003882 <Buzzer_Check+0x2a>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8003876:	2200      	movs	r2, #0
 8003878:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800387c:	4803      	ldr	r0, [pc, #12]	@ (800388c <Buzzer_Check+0x34>)
 800387e:	f001 fd9d 	bl	80053bc <HAL_GPIO_WritePin>
}
 8003882:	bf00      	nop
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000c58 	.word	0x20000c58
 800388c:	40010c00 	.word	0x40010c00

08003890 <ADC1_Select_CH9>:

float previous_error = 0;
bool adjust_steering = false;
float steering_adjustment = 0;

static void ADC1_Select_CH9(void) {
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003896:	1d3b      	adds	r3, r7, #4
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_9;
 80038a0:	2309      	movs	r3, #9
 80038a2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80038a4:	2301      	movs	r3, #1
 80038a6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80038a8:	2301      	movs	r3, #1
 80038aa:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel (&hadc1, &sConfig) != HAL_OK) {
 80038ac:	1d3b      	adds	r3, r7, #4
 80038ae:	4619      	mov	r1, r3
 80038b0:	4805      	ldr	r0, [pc, #20]	@ (80038c8 <ADC1_Select_CH9+0x38>)
 80038b2:	f001 f8ab 	bl	8004a0c <HAL_ADC_ConfigChannel>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <ADC1_Select_CH9+0x30>
		Error_Handler();
 80038bc:	f7fd fef7 	bl	80016ae <Error_Handler>
	}
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20000094 	.word	0x20000094

080038cc <ADC1_Select_CH8>:

static void ADC1_Select_CH8(void) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80038d2:	1d3b      	adds	r3, r7, #4
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	605a      	str	r2, [r3, #4]
 80038da:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_8;
 80038dc:	2308      	movs	r3, #8
 80038de:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80038e0:	2301      	movs	r3, #1
 80038e2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80038e4:	2301      	movs	r3, #1
 80038e6:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80038e8:	1d3b      	adds	r3, r7, #4
 80038ea:	4619      	mov	r1, r3
 80038ec:	4805      	ldr	r0, [pc, #20]	@ (8003904 <ADC1_Select_CH8+0x38>)
 80038ee:	f001 f88d 	bl	8004a0c <HAL_ADC_ConfigChannel>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <ADC1_Select_CH8+0x30>
		Error_Handler();
 80038f8:	f7fd fed9 	bl	80016ae <Error_Handler>
	}
}
 80038fc:	bf00      	nop
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000094 	.word	0x20000094

08003908 <ADC1_Select_CH5>:

static void ADC1_Select_CH5(void) {
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800390e:	1d3b      	adds	r3, r7, #4
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_5;
 8003918:	2305      	movs	r3, #5
 800391a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800391c:	2301      	movs	r3, #1
 800391e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8003920:	2301      	movs	r3, #1
 8003922:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003924:	1d3b      	adds	r3, r7, #4
 8003926:	4619      	mov	r1, r3
 8003928:	4805      	ldr	r0, [pc, #20]	@ (8003940 <ADC1_Select_CH5+0x38>)
 800392a:	f001 f86f 	bl	8004a0c <HAL_ADC_ConfigChannel>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <ADC1_Select_CH5+0x30>
		Error_Handler();
 8003934:	f7fd febb 	bl	80016ae <Error_Handler>
	}
}
 8003938:	bf00      	nop
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000094 	.word	0x20000094

08003944 <ADC1_Select_CH4>:

static void ADC1_Select_CH4(void) {
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800394a:	1d3b      	adds	r3, r7, #4
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_4;
 8003954:	2304      	movs	r3, #4
 8003956:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003958:	2301      	movs	r3, #1
 800395a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800395c:	2301      	movs	r3, #1
 800395e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel (&hadc1, &sConfig) != HAL_OK) {
 8003960:	1d3b      	adds	r3, r7, #4
 8003962:	4619      	mov	r1, r3
 8003964:	4805      	ldr	r0, [pc, #20]	@ (800397c <ADC1_Select_CH4+0x38>)
 8003966:	f001 f851 	bl	8004a0c <HAL_ADC_ConfigChannel>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <ADC1_Select_CH4+0x30>
		Error_Handler();
 8003970:	f7fd fe9d 	bl	80016ae <Error_Handler>
	}
}
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20000094 	.word	0x20000094

08003980 <Measure_Dist>:

uint16_t Measure_Dist(dist_t dist) { // Poll raw IR sensors
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef* emitter_port;
	uint16_t emitter_pin;

	switch(dist) {
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	2b03      	cmp	r3, #3
 800398e:	d82a      	bhi.n	80039e6 <Measure_Dist+0x66>
 8003990:	a201      	add	r2, pc, #4	@ (adr r2, 8003998 <Measure_Dist+0x18>)
 8003992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003996:	bf00      	nop
 8003998:	080039a9 	.word	0x080039a9
 800399c:	080039b7 	.word	0x080039b7
 80039a0:	080039c7 	.word	0x080039c7
 80039a4:	080039d7 	.word	0x080039d7
	case DIST_FL:
		emitter_port = EMIT_FL_GPIO_Port;
 80039a8:	4b20      	ldr	r3, [pc, #128]	@ (8003a2c <Measure_Dist+0xac>)
 80039aa:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_FL_Pin;
 80039ac:	2320      	movs	r3, #32
 80039ae:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH4();
 80039b0:	f7ff ffc8 	bl	8003944 <ADC1_Select_CH4>
		break;
 80039b4:	e018      	b.n	80039e8 <Measure_Dist+0x68>
	case DIST_L:
		emitter_port = EMIT_L_GPIO_Port;
 80039b6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a2c <Measure_Dist+0xac>)
 80039b8:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_L_Pin;
 80039ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039be:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH5();
 80039c0:	f7ff ffa2 	bl	8003908 <ADC1_Select_CH5>
		break;
 80039c4:	e010      	b.n	80039e8 <Measure_Dist+0x68>
	case DIST_R:
		emitter_port = EMIT_R_GPIO_Port;
 80039c6:	4b19      	ldr	r3, [pc, #100]	@ (8003a2c <Measure_Dist+0xac>)
 80039c8:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_R_Pin;
 80039ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80039ce:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH8();
 80039d0:	f7ff ff7c 	bl	80038cc <ADC1_Select_CH8>
		break;
 80039d4:	e008      	b.n	80039e8 <Measure_Dist+0x68>
	case DIST_FR:
		emitter_port = EMIT_FR_GPIO_Port;
 80039d6:	4b15      	ldr	r3, [pc, #84]	@ (8003a2c <Measure_Dist+0xac>)
 80039d8:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_FR_Pin;
 80039da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039de:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH9();
 80039e0:	f7ff ff56 	bl	8003890 <ADC1_Select_CH9>
		break;
 80039e4:	e000      	b.n	80039e8 <Measure_Dist+0x68>
	default:
		break;
 80039e6:	bf00      	nop
	}
	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_SET);
 80039e8:	897b      	ldrh	r3, [r7, #10]
 80039ea:	2201      	movs	r2, #1
 80039ec:	4619      	mov	r1, r3
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f001 fce4 	bl	80053bc <HAL_GPIO_WritePin>

	HAL_ADC_Start(&hadc1);
 80039f4:	480e      	ldr	r0, [pc, #56]	@ (8003a30 <Measure_Dist+0xb0>)
 80039f6:	f000 fe1d 	bl	8004634 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80039fa:	f04f 31ff 	mov.w	r1, #4294967295
 80039fe:	480c      	ldr	r0, [pc, #48]	@ (8003a30 <Measure_Dist+0xb0>)
 8003a00:	f000 fef2 	bl	80047e8 <HAL_ADC_PollForConversion>
	uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 8003a04:	480a      	ldr	r0, [pc, #40]	@ (8003a30 <Measure_Dist+0xb0>)
 8003a06:	f000 fff5 	bl	80049f4 <HAL_ADC_GetValue>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	813b      	strh	r3, [r7, #8]
	HAL_ADC_Stop(&hadc1);
 8003a0e:	4808      	ldr	r0, [pc, #32]	@ (8003a30 <Measure_Dist+0xb0>)
 8003a10:	f000 febe 	bl	8004790 <HAL_ADC_Stop>

	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_RESET);
 8003a14:	897b      	ldrh	r3, [r7, #10]
 8003a16:	2200      	movs	r2, #0
 8003a18:	4619      	mov	r1, r3
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f001 fcce 	bl	80053bc <HAL_GPIO_WritePin>

	return adc_val;
 8003a20:	893b      	ldrh	r3, [r7, #8]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40010c00 	.word	0x40010c00
 8003a30:	20000094 	.word	0x20000094

08003a34 <Calibrate_Readings>:

void Calibrate_Readings(mouse_state_t* mouse_state) { // Normalize raw IR values
 8003a34:	b590      	push	{r4, r7, lr}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
	mouse_state->cal.front_left  = 200 * ((float)mouse_state->raw.front_left / (float)translation_FL);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	891b      	ldrh	r3, [r3, #8]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fd f87f 	bl	8000b44 <__aeabi_ui2f>
 8003a46:	4604      	mov	r4, r0
 8003a48:	4b38      	ldr	r3, [pc, #224]	@ (8003b2c <Calibrate_Readings+0xf8>)
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fd f879 	bl	8000b44 <__aeabi_ui2f>
 8003a52:	4603      	mov	r3, r0
 8003a54:	4619      	mov	r1, r3
 8003a56:	4620      	mov	r0, r4
 8003a58:	f7fd f980 	bl	8000d5c <__aeabi_fdiv>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	4934      	ldr	r1, [pc, #208]	@ (8003b30 <Calibrate_Readings+0xfc>)
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fd f8c7 	bl	8000bf4 <__aeabi_fmul>
 8003a66:	4603      	mov	r3, r0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fd fa89 	bl	8000f80 <__aeabi_f2uiz>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	821a      	strh	r2, [r3, #16]
	mouse_state->cal.left        = 100 * ((float)mouse_state->raw.left / (float)translation_L);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	895b      	ldrh	r3, [r3, #10]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fd f862 	bl	8000b44 <__aeabi_ui2f>
 8003a80:	4604      	mov	r4, r0
 8003a82:	4b2c      	ldr	r3, [pc, #176]	@ (8003b34 <Calibrate_Readings+0x100>)
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fd f85c 	bl	8000b44 <__aeabi_ui2f>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4620      	mov	r0, r4
 8003a92:	f7fd f963 	bl	8000d5c <__aeabi_fdiv>
 8003a96:	4603      	mov	r3, r0
 8003a98:	4927      	ldr	r1, [pc, #156]	@ (8003b38 <Calibrate_Readings+0x104>)
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fd f8aa 	bl	8000bf4 <__aeabi_fmul>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fd fa6c 	bl	8000f80 <__aeabi_f2uiz>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	825a      	strh	r2, [r3, #18]
	mouse_state->cal.right       = 100 * ((float)mouse_state->raw.right / (float)translation_R);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	899b      	ldrh	r3, [r3, #12]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fd f845 	bl	8000b44 <__aeabi_ui2f>
 8003aba:	4604      	mov	r4, r0
 8003abc:	4b1f      	ldr	r3, [pc, #124]	@ (8003b3c <Calibrate_Readings+0x108>)
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fd f83f 	bl	8000b44 <__aeabi_ui2f>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4620      	mov	r0, r4
 8003acc:	f7fd f946 	bl	8000d5c <__aeabi_fdiv>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	4919      	ldr	r1, [pc, #100]	@ (8003b38 <Calibrate_Readings+0x104>)
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fd f88d 	bl	8000bf4 <__aeabi_fmul>
 8003ada:	4603      	mov	r3, r0
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fd fa4f 	bl	8000f80 <__aeabi_f2uiz>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	829a      	strh	r2, [r3, #20]
	mouse_state->cal.front_right = 200 * ((float)mouse_state->raw.front_right / (float)translation_FR);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	89db      	ldrh	r3, [r3, #14]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fd f828 	bl	8000b44 <__aeabi_ui2f>
 8003af4:	4604      	mov	r4, r0
 8003af6:	4b12      	ldr	r3, [pc, #72]	@ (8003b40 <Calibrate_Readings+0x10c>)
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fd f822 	bl	8000b44 <__aeabi_ui2f>
 8003b00:	4603      	mov	r3, r0
 8003b02:	4619      	mov	r1, r3
 8003b04:	4620      	mov	r0, r4
 8003b06:	f7fd f929 	bl	8000d5c <__aeabi_fdiv>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4908      	ldr	r1, [pc, #32]	@ (8003b30 <Calibrate_Readings+0xfc>)
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fd f870 	bl	8000bf4 <__aeabi_fmul>
 8003b14:	4603      	mov	r3, r0
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fd fa32 	bl	8000f80 <__aeabi_f2uiz>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	82da      	strh	r2, [r3, #22]
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd90      	pop	{r4, r7, pc}
 8003b2c:	2000000a 	.word	0x2000000a
 8003b30:	43480000 	.word	0x43480000
 8003b34:	2000000c 	.word	0x2000000c
 8003b38:	42c80000 	.word	0x42c80000
 8003b3c:	2000000e 	.word	0x2000000e
 8003b40:	20000010 	.word	0x20000010

08003b44 <Poll_Sensors>:

void Poll_Sensors(mouse_state_t* mouse_state){ // Gather all raw IR values
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	const uint8_t NUM_POLLS = 5;
 8003b4c:	2305      	movs	r3, #5
 8003b4e:	73bb      	strb	r3, [r7, #14]
	uint16_t front_left_total = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	82fb      	strh	r3, [r7, #22]
	uint16_t left_total = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	82bb      	strh	r3, [r7, #20]
	uint16_t right_total = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	827b      	strh	r3, [r7, #18]
	uint16_t front_right_total = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	823b      	strh	r3, [r7, #16]
	for (uint8_t i = 0; i < NUM_POLLS; ++i) {
 8003b60:	2300      	movs	r3, #0
 8003b62:	73fb      	strb	r3, [r7, #15]
 8003b64:	e022      	b.n	8003bac <Poll_Sensors+0x68>
		front_left_total += Measure_Dist(DIST_FL);
 8003b66:	2000      	movs	r0, #0
 8003b68:	f7ff ff0a 	bl	8003980 <Measure_Dist>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	461a      	mov	r2, r3
 8003b70:	8afb      	ldrh	r3, [r7, #22]
 8003b72:	4413      	add	r3, r2
 8003b74:	82fb      	strh	r3, [r7, #22]
		left_total += Measure_Dist(DIST_L);
 8003b76:	2001      	movs	r0, #1
 8003b78:	f7ff ff02 	bl	8003980 <Measure_Dist>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	461a      	mov	r2, r3
 8003b80:	8abb      	ldrh	r3, [r7, #20]
 8003b82:	4413      	add	r3, r2
 8003b84:	82bb      	strh	r3, [r7, #20]
		right_total += Measure_Dist(DIST_R);
 8003b86:	2002      	movs	r0, #2
 8003b88:	f7ff fefa 	bl	8003980 <Measure_Dist>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	461a      	mov	r2, r3
 8003b90:	8a7b      	ldrh	r3, [r7, #18]
 8003b92:	4413      	add	r3, r2
 8003b94:	827b      	strh	r3, [r7, #18]
		front_right_total += Measure_Dist(DIST_FR);
 8003b96:	2003      	movs	r0, #3
 8003b98:	f7ff fef2 	bl	8003980 <Measure_Dist>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	8a3b      	ldrh	r3, [r7, #16]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	823b      	strh	r3, [r7, #16]
	for (uint8_t i = 0; i < NUM_POLLS; ++i) {
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
 8003bac:	7bfa      	ldrb	r2, [r7, #15]
 8003bae:	7bbb      	ldrb	r3, [r7, #14]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d3d8      	bcc.n	8003b66 <Poll_Sensors+0x22>
	}

	mouse_state->raw.front_left =  front_left_total / NUM_POLLS;
 8003bb4:	8afa      	ldrh	r2, [r7, #22]
 8003bb6:	7bbb      	ldrb	r3, [r7, #14]
 8003bb8:	fb92 f3f3 	sdiv	r3, r2, r3
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	811a      	strh	r2, [r3, #8]
	mouse_state->raw.left = left_total / NUM_POLLS;
 8003bc2:	8aba      	ldrh	r2, [r7, #20]
 8003bc4:	7bbb      	ldrb	r3, [r7, #14]
 8003bc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	815a      	strh	r2, [r3, #10]
	mouse_state->raw.right = right_total / NUM_POLLS;
 8003bd0:	8a7a      	ldrh	r2, [r7, #18]
 8003bd2:	7bbb      	ldrb	r3, [r7, #14]
 8003bd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	819a      	strh	r2, [r3, #12]
	mouse_state->raw.front_right =  front_right_total / NUM_POLLS;
 8003bde:	8a3a      	ldrh	r2, [r7, #16]
 8003be0:	7bbb      	ldrb	r3, [r7, #14]
 8003be2:	fb92 f3f3 	sdiv	r3, r2, r3
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	81da      	strh	r2, [r3, #14]

	Calibrate_Readings(mouse_state);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff ff21 	bl	8003a34 <Calibrate_Readings>
}
 8003bf2:	bf00      	nop
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <Wall_Front>:

bool Wall_Front() {
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
	uint16_t front_avg = (mouse_state.cal.front_left + mouse_state.cal.front_right) / 2;
 8003c02:	4b14      	ldr	r3, [pc, #80]	@ (8003c54 <Wall_Front+0x58>)
 8003c04:	8a1b      	ldrh	r3, [r3, #16]
 8003c06:	461a      	mov	r2, r3
 8003c08:	4b12      	ldr	r3, [pc, #72]	@ (8003c54 <Wall_Front+0x58>)
 8003c0a:	8adb      	ldrh	r3, [r3, #22]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	0fda      	lsrs	r2, r3, #31
 8003c10:	4413      	add	r3, r2
 8003c12:	105b      	asrs	r3, r3, #1
 8003c14:	80fb      	strh	r3, [r7, #6]
	if (front_avg > wall_front_thresh) {
 8003c16:	4b10      	ldr	r3, [pc, #64]	@ (8003c58 <Wall_Front+0x5c>)
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	88fa      	ldrh	r2, [r7, #6]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d909      	bls.n	8003c34 <Wall_Front+0x38>
		wall_front = true;
 8003c20:	4b0e      	ldr	r3, [pc, #56]	@ (8003c5c <Wall_Front+0x60>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8003c26:	2200      	movs	r2, #0
 8003c28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c2c:	480c      	ldr	r0, [pc, #48]	@ (8003c60 <Wall_Front+0x64>)
 8003c2e:	f001 fbc5 	bl	80053bc <HAL_GPIO_WritePin>
 8003c32:	e008      	b.n	8003c46 <Wall_Front+0x4a>

	}
	else {
		wall_front = false;
 8003c34:	4b09      	ldr	r3, [pc, #36]	@ (8003c5c <Wall_Front+0x60>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c40:	4807      	ldr	r0, [pc, #28]	@ (8003c60 <Wall_Front+0x64>)
 8003c42:	f001 fbbb 	bl	80053bc <HAL_GPIO_WritePin>
	}
	return wall_front;
 8003c46:	4b05      	ldr	r3, [pc, #20]	@ (8003c5c <Wall_Front+0x60>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000218 	.word	0x20000218
 8003c58:	20000012 	.word	0x20000012
 8003c5c:	20000c60 	.word	0x20000c60
 8003c60:	40010800 	.word	0x40010800

08003c64 <Wall_Left>:

bool Wall_Left() {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
	if (mouse_state.cal.left > wall_left_thresh) {
 8003c68:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca4 <Wall_Left+0x40>)
 8003c6a:	8a5a      	ldrh	r2, [r3, #18]
 8003c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca8 <Wall_Left+0x44>)
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d909      	bls.n	8003c88 <Wall_Left+0x24>
		wall_left = true;
 8003c74:	4b0d      	ldr	r3, [pc, #52]	@ (8003cac <Wall_Left+0x48>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003c80:	480b      	ldr	r0, [pc, #44]	@ (8003cb0 <Wall_Left+0x4c>)
 8003c82:	f001 fb9b 	bl	80053bc <HAL_GPIO_WritePin>
 8003c86:	e008      	b.n	8003c9a <Wall_Left+0x36>
	}
	else {
		wall_left = false;
 8003c88:	4b08      	ldr	r3, [pc, #32]	@ (8003cac <Wall_Left+0x48>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003c94:	4806      	ldr	r0, [pc, #24]	@ (8003cb0 <Wall_Left+0x4c>)
 8003c96:	f001 fb91 	bl	80053bc <HAL_GPIO_WritePin>
	}
	return wall_left;
 8003c9a:	4b04      	ldr	r3, [pc, #16]	@ (8003cac <Wall_Left+0x48>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20000218 	.word	0x20000218
 8003ca8:	20000014 	.word	0x20000014
 8003cac:	20000c61 	.word	0x20000c61
 8003cb0:	40010800 	.word	0x40010800

08003cb4 <Wall_Right>:

bool Wall_Right() {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
	if (mouse_state.cal.right > wall_right_thresh) {
 8003cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf4 <Wall_Right+0x40>)
 8003cba:	8a9a      	ldrh	r2, [r3, #20]
 8003cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf8 <Wall_Right+0x44>)
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d909      	bls.n	8003cd8 <Wall_Right+0x24>
		wall_right = true;
 8003cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8003cfc <Wall_Right+0x48>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003cd0:	480b      	ldr	r0, [pc, #44]	@ (8003d00 <Wall_Right+0x4c>)
 8003cd2:	f001 fb73 	bl	80053bc <HAL_GPIO_WritePin>
 8003cd6:	e008      	b.n	8003cea <Wall_Right+0x36>

	}
	else {
		wall_right = false;
 8003cd8:	4b08      	ldr	r3, [pc, #32]	@ (8003cfc <Wall_Right+0x48>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ce4:	4806      	ldr	r0, [pc, #24]	@ (8003d00 <Wall_Right+0x4c>)
 8003ce6:	f001 fb69 	bl	80053bc <HAL_GPIO_WritePin>
	}
	return wall_right;
 8003cea:	4b04      	ldr	r3, [pc, #16]	@ (8003cfc <Wall_Right+0x48>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000218 	.word	0x20000218
 8003cf8:	20000016 	.word	0x20000016
 8003cfc:	20000c62 	.word	0x20000c62
 8003d00:	40010800 	.word	0x40010800

08003d04 <Calculate_Steering_Adjustment>:

void Calculate_Steering_Adjustment(int error) {
 8003d04:	b590      	push	{r4, r7, lr}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
	float adjustment = IR_KP * error + IR_KD * (error - previous_error);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7fc ff1d 	bl	8000b4c <__aeabi_i2f>
 8003d12:	4603      	mov	r3, r0
 8003d14:	4a26      	ldr	r2, [pc, #152]	@ (8003db0 <Calculate_Steering_Adjustment+0xac>)
 8003d16:	4611      	mov	r1, r2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fc ff6b 	bl	8000bf4 <__aeabi_fmul>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	461c      	mov	r4, r3
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fc ff12 	bl	8000b4c <__aeabi_i2f>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	4b22      	ldr	r3, [pc, #136]	@ (8003db4 <Calculate_Steering_Adjustment+0xb0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4610      	mov	r0, r2
 8003d32:	f7fc fe55 	bl	80009e0 <__aeabi_fsub>
 8003d36:	4603      	mov	r3, r0
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8003db8 <Calculate_Steering_Adjustment+0xb4>)
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4610      	mov	r0, r2
 8003d40:	f7fc ff58 	bl	8000bf4 <__aeabi_fmul>
 8003d44:	4603      	mov	r3, r0
 8003d46:	4619      	mov	r1, r3
 8003d48:	4620      	mov	r0, r4
 8003d4a:	f7fc fe4b 	bl	80009e4 <__addsf3>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	60fb      	str	r3, [r7, #12]

	adjustment = adjustment > STEERING_ADJUSTMENT_LIMIT ? STEERING_ADJUSTMENT_LIMIT: adjustment;
 8003d52:	4b1a      	ldr	r3, [pc, #104]	@ (8003dbc <Calculate_Steering_Adjustment+0xb8>)
 8003d54:	4619      	mov	r1, r3
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f7fd f908 	bl	8000f6c <__aeabi_fcmpgt>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <Calculate_Steering_Adjustment+0x62>
 8003d62:	4b16      	ldr	r3, [pc, #88]	@ (8003dbc <Calculate_Steering_Adjustment+0xb8>)
 8003d64:	e000      	b.n	8003d68 <Calculate_Steering_Adjustment+0x64>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	60fb      	str	r3, [r7, #12]
	adjustment = adjustment < -STEERING_ADJUSTMENT_LIMIT ? -STEERING_ADJUSTMENT_LIMIT: adjustment;
 8003d6a:	4b14      	ldr	r3, [pc, #80]	@ (8003dbc <Calculate_Steering_Adjustment+0xb8>)
 8003d6c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003d70:	4619      	mov	r1, r3
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f7fd f8dc 	bl	8000f30 <__aeabi_fcmplt>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <Calculate_Steering_Adjustment+0x82>
 8003d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003dbc <Calculate_Steering_Adjustment+0xb8>)
 8003d80:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003d84:	e000      	b.n	8003d88 <Calculate_Steering_Adjustment+0x84>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	60fb      	str	r3, [r7, #12]

	steering_adjustment = rotational_profile.state == COMPLETE || rotational_profile.state == IDLE ? adjustment : 0;
 8003d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc0 <Calculate_Steering_Adjustment+0xbc>)
 8003d8c:	7c1b      	ldrb	r3, [r3, #16]
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d003      	beq.n	8003d9a <Calculate_Steering_Adjustment+0x96>
 8003d92:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc0 <Calculate_Steering_Adjustment+0xbc>)
 8003d94:	7c1b      	ldrb	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <Calculate_Steering_Adjustment+0x9a>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	e001      	b.n	8003da2 <Calculate_Steering_Adjustment+0x9e>
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	4a08      	ldr	r2, [pc, #32]	@ (8003dc4 <Calculate_Steering_Adjustment+0xc0>)
 8003da4:	6013      	str	r3, [r2, #0]
}
 8003da6:	bf00      	nop
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd90      	pop	{r4, r7, pc}
 8003dae:	bf00      	nop
 8003db0:	3c03126f 	.word	0x3c03126f
 8003db4:	20000c64 	.word	0x20000c64
 8003db8:	38d1b717 	.word	0x38d1b717
 8003dbc:	3dcccccd 	.word	0x3dcccccd
 8003dc0:	20000ba0 	.word	0x20000ba0
 8003dc4:	20000c6c 	.word	0x20000c6c

08003dc8 <Calculate_Error>:

void Calculate_Error() {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
	int error = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]
	int right_error = 100 - mouse_state.cal.right;
 8003dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8003e50 <Calculate_Error+0x88>)
 8003dd4:	8a9b      	ldrh	r3, [r3, #20]
 8003dd6:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8003dda:	60bb      	str	r3, [r7, #8]
	int left_error = 100 - mouse_state.cal.left;
 8003ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8003e50 <Calculate_Error+0x88>)
 8003dde:	8a5b      	ldrh	r3, [r3, #18]
 8003de0:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8003de4:	607b      	str	r3, [r7, #4]

	if (adjust_steering && ((mouse_state.cal.front_left + mouse_state.cal.front_left) / 2) < FRONT_WALL_LIMIT) {
 8003de6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e54 <Calculate_Error+0x8c>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d023      	beq.n	8003e36 <Calculate_Error+0x6e>
 8003dee:	4b18      	ldr	r3, [pc, #96]	@ (8003e50 <Calculate_Error+0x88>)
 8003df0:	8a1b      	ldrh	r3, [r3, #16]
 8003df2:	22fa      	movs	r2, #250	@ 0xfa
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d21e      	bcs.n	8003e36 <Calculate_Error+0x6e>
		if (wall_left && wall_right) {
 8003df8:	4b17      	ldr	r3, [pc, #92]	@ (8003e58 <Calculate_Error+0x90>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <Calculate_Error+0x4a>
 8003e00:	4b16      	ldr	r3, [pc, #88]	@ (8003e5c <Calculate_Error+0x94>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d004      	beq.n	8003e12 <Calculate_Error+0x4a>
			error = right_error - left_error;
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	e011      	b.n	8003e36 <Calculate_Error+0x6e>
		}
		else if (wall_left) {
 8003e12:	4b11      	ldr	r3, [pc, #68]	@ (8003e58 <Calculate_Error+0x90>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d006      	beq.n	8003e28 <Calculate_Error+0x60>
			error = -2 * left_error;
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	07db      	lsls	r3, r3, #31
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	e006      	b.n	8003e36 <Calculate_Error+0x6e>
		}
		else if (wall_right) {
 8003e28:	4b0c      	ldr	r3, [pc, #48]	@ (8003e5c <Calculate_Error+0x94>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <Calculate_Error+0x6e>
			error = 2 * right_error;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	60fb      	str	r3, [r7, #12]
		}
	}

	Calculate_Steering_Adjustment(error);
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f7ff ff64 	bl	8003d04 <Calculate_Steering_Adjustment>

	previous_error = error;
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f7fc fe85 	bl	8000b4c <__aeabi_i2f>
 8003e42:	4603      	mov	r3, r0
 8003e44:	4a06      	ldr	r2, [pc, #24]	@ (8003e60 <Calculate_Error+0x98>)
 8003e46:	6013      	str	r3, [r2, #0]
}
 8003e48:	bf00      	nop
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	20000218 	.word	0x20000218
 8003e54:	20000c68 	.word	0x20000c68
 8003e58:	20000c61 	.word	0x20000c61
 8003e5c:	20000c62 	.word	0x20000c62
 8003e60:	20000c64 	.word	0x20000c64

08003e64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003e6a:	4b15      	ldr	r3, [pc, #84]	@ (8003ec0 <HAL_MspInit+0x5c>)
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	4a14      	ldr	r2, [pc, #80]	@ (8003ec0 <HAL_MspInit+0x5c>)
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	6193      	str	r3, [r2, #24]
 8003e76:	4b12      	ldr	r3, [pc, #72]	@ (8003ec0 <HAL_MspInit+0x5c>)
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	60bb      	str	r3, [r7, #8]
 8003e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e82:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec0 <HAL_MspInit+0x5c>)
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	4a0e      	ldr	r2, [pc, #56]	@ (8003ec0 <HAL_MspInit+0x5c>)
 8003e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e8c:	61d3      	str	r3, [r2, #28]
 8003e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec0 <HAL_MspInit+0x5c>)
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e96:	607b      	str	r3, [r7, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec4 <HAL_MspInit+0x60>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	4a04      	ldr	r2, [pc, #16]	@ (8003ec4 <HAL_MspInit+0x60>)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eb6:	bf00      	nop
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40010000 	.word	0x40010000

08003ec8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08c      	sub	sp, #48	@ 0x30
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ed0:	f107 0320 	add.w	r3, r7, #32
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	605a      	str	r2, [r3, #4]
 8003eda:	609a      	str	r2, [r3, #8]
 8003edc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a33      	ldr	r2, [pc, #204]	@ (8003fb0 <HAL_ADC_MspInit+0xe8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d138      	bne.n	8003f5a <HAL_ADC_MspInit+0x92>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ee8:	4b32      	ldr	r3, [pc, #200]	@ (8003fb4 <HAL_ADC_MspInit+0xec>)
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	4a31      	ldr	r2, [pc, #196]	@ (8003fb4 <HAL_ADC_MspInit+0xec>)
 8003eee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ef2:	6193      	str	r3, [r2, #24]
 8003ef4:	4b2f      	ldr	r3, [pc, #188]	@ (8003fb4 <HAL_ADC_MspInit+0xec>)
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f00:	4b2c      	ldr	r3, [pc, #176]	@ (8003fb4 <HAL_ADC_MspInit+0xec>)
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	4a2b      	ldr	r2, [pc, #172]	@ (8003fb4 <HAL_ADC_MspInit+0xec>)
 8003f06:	f043 0304 	orr.w	r3, r3, #4
 8003f0a:	6193      	str	r3, [r2, #24]
 8003f0c:	4b29      	ldr	r3, [pc, #164]	@ (8003fb4 <HAL_ADC_MspInit+0xec>)
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f18:	4b26      	ldr	r3, [pc, #152]	@ (8003fb4 <HAL_ADC_MspInit+0xec>)
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	4a25      	ldr	r2, [pc, #148]	@ (8003fb4 <HAL_ADC_MspInit+0xec>)
 8003f1e:	f043 0308 	orr.w	r3, r3, #8
 8003f22:	6193      	str	r3, [r2, #24]
 8003f24:	4b23      	ldr	r3, [pc, #140]	@ (8003fb4 <HAL_ADC_MspInit+0xec>)
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	697b      	ldr	r3, [r7, #20]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RECIV_FL_Pin|RECIV_L_Pin;
 8003f30:	2330      	movs	r3, #48	@ 0x30
 8003f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f34:	2303      	movs	r3, #3
 8003f36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f38:	f107 0320 	add.w	r3, r7, #32
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	481e      	ldr	r0, [pc, #120]	@ (8003fb8 <HAL_ADC_MspInit+0xf0>)
 8003f40:	f001 f8b8 	bl	80050b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RECIV_R_Pin|RECIV_FR_Pin;
 8003f44:	2303      	movs	r3, #3
 8003f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f4c:	f107 0320 	add.w	r3, r7, #32
 8003f50:	4619      	mov	r1, r3
 8003f52:	481a      	ldr	r0, [pc, #104]	@ (8003fbc <HAL_ADC_MspInit+0xf4>)
 8003f54:	f001 f8ae 	bl	80050b4 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003f58:	e026      	b.n	8003fa8 <HAL_ADC_MspInit+0xe0>
  else if(hadc->Instance==ADC2)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a18      	ldr	r2, [pc, #96]	@ (8003fc0 <HAL_ADC_MspInit+0xf8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d121      	bne.n	8003fa8 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003f64:	4b13      	ldr	r3, [pc, #76]	@ (8003fb4 <HAL_ADC_MspInit+0xec>)
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	4a12      	ldr	r2, [pc, #72]	@ (8003fb4 <HAL_ADC_MspInit+0xec>)
 8003f6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f6e:	6193      	str	r3, [r2, #24]
 8003f70:	4b10      	ldr	r3, [pc, #64]	@ (8003fb4 <HAL_ADC_MspInit+0xec>)
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb4 <HAL_ADC_MspInit+0xec>)
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	4a0c      	ldr	r2, [pc, #48]	@ (8003fb4 <HAL_ADC_MspInit+0xec>)
 8003f82:	f043 0304 	orr.w	r3, r3, #4
 8003f86:	6193      	str	r3, [r2, #24]
 8003f88:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb4 <HAL_ADC_MspInit+0xec>)
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_METER_Pin;
 8003f94:	2302      	movs	r3, #2
 8003f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(V_METER_GPIO_Port, &GPIO_InitStruct);
 8003f9c:	f107 0320 	add.w	r3, r7, #32
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4805      	ldr	r0, [pc, #20]	@ (8003fb8 <HAL_ADC_MspInit+0xf0>)
 8003fa4:	f001 f886 	bl	80050b4 <HAL_GPIO_Init>
}
 8003fa8:	bf00      	nop
 8003faa:	3730      	adds	r7, #48	@ 0x30
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40012400 	.word	0x40012400
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	40010800 	.word	0x40010800
 8003fbc:	40010c00 	.word	0x40010c00
 8003fc0:	40012800 	.word	0x40012800

08003fc4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fd4:	d10b      	bne.n	8003fee <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fd6:	4b08      	ldr	r3, [pc, #32]	@ (8003ff8 <HAL_TIM_Base_MspInit+0x34>)
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	4a07      	ldr	r2, [pc, #28]	@ (8003ff8 <HAL_TIM_Base_MspInit+0x34>)
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	61d3      	str	r3, [r2, #28]
 8003fe2:	4b05      	ldr	r3, [pc, #20]	@ (8003ff8 <HAL_TIM_Base_MspInit+0x34>)
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003fee:	bf00      	nop
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr
 8003ff8:	40021000 	.word	0x40021000

08003ffc <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08a      	sub	sp, #40	@ 0x28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004004:	f107 0318 	add.w	r3, r7, #24
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	605a      	str	r2, [r3, #4]
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a32      	ldr	r2, [pc, #200]	@ (80040e0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d12c      	bne.n	8004076 <HAL_TIM_Encoder_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800401c:	4b31      	ldr	r3, [pc, #196]	@ (80040e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	4a30      	ldr	r2, [pc, #192]	@ (80040e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004022:	f043 0302 	orr.w	r3, r3, #2
 8004026:	61d3      	str	r3, [r2, #28]
 8004028:	4b2e      	ldr	r3, [pc, #184]	@ (80040e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004034:	4b2b      	ldr	r3, [pc, #172]	@ (80040e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	4a2a      	ldr	r2, [pc, #168]	@ (80040e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800403a:	f043 0304 	orr.w	r3, r3, #4
 800403e:	6193      	str	r3, [r2, #24]
 8004040:	4b28      	ldr	r3, [pc, #160]	@ (80040e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ML_ENC_A_Pin|ML_ENC_B_Pin;
 800404c:	23c0      	movs	r3, #192	@ 0xc0
 800404e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004050:	2300      	movs	r3, #0
 8004052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004054:	2300      	movs	r3, #0
 8004056:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004058:	f107 0318 	add.w	r3, r7, #24
 800405c:	4619      	mov	r1, r3
 800405e:	4822      	ldr	r0, [pc, #136]	@ (80040e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004060:	f001 f828 	bl	80050b4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004064:	2200      	movs	r2, #0
 8004066:	2100      	movs	r1, #0
 8004068:	201d      	movs	r0, #29
 800406a:	f000 ff3a 	bl	8004ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800406e:	201d      	movs	r0, #29
 8004070:	f000 ff53 	bl	8004f1a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004074:	e030      	b.n	80040d8 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1c      	ldr	r2, [pc, #112]	@ (80040ec <HAL_TIM_Encoder_MspInit+0xf0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d12b      	bne.n	80040d8 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004080:	4b18      	ldr	r3, [pc, #96]	@ (80040e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	4a17      	ldr	r2, [pc, #92]	@ (80040e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004086:	f043 0304 	orr.w	r3, r3, #4
 800408a:	61d3      	str	r3, [r2, #28]
 800408c:	4b15      	ldr	r3, [pc, #84]	@ (80040e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004098:	4b12      	ldr	r3, [pc, #72]	@ (80040e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	4a11      	ldr	r2, [pc, #68]	@ (80040e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800409e:	f043 0308 	orr.w	r3, r3, #8
 80040a2:	6193      	str	r3, [r2, #24]
 80040a4:	4b0f      	ldr	r3, [pc, #60]	@ (80040e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MR_ENC_B_Pin|MR_ENC_A_Pin;
 80040b0:	23c0      	movs	r3, #192	@ 0xc0
 80040b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040b4:	2300      	movs	r3, #0
 80040b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040bc:	f107 0318 	add.w	r3, r7, #24
 80040c0:	4619      	mov	r1, r3
 80040c2:	480b      	ldr	r0, [pc, #44]	@ (80040f0 <HAL_TIM_Encoder_MspInit+0xf4>)
 80040c4:	f000 fff6 	bl	80050b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80040c8:	2200      	movs	r2, #0
 80040ca:	2100      	movs	r1, #0
 80040cc:	201e      	movs	r0, #30
 80040ce:	f000 ff08 	bl	8004ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80040d2:	201e      	movs	r0, #30
 80040d4:	f000 ff21 	bl	8004f1a <HAL_NVIC_EnableIRQ>
}
 80040d8:	bf00      	nop
 80040da:	3728      	adds	r7, #40	@ 0x28
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40000400 	.word	0x40000400
 80040e4:	40021000 	.word	0x40021000
 80040e8:	40010800 	.word	0x40010800
 80040ec:	40000800 	.word	0x40000800
 80040f0:	40010c00 	.word	0x40010c00

080040f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040fc:	f107 0310 	add.w	r3, r7, #16
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	605a      	str	r2, [r3, #4]
 8004106:	609a      	str	r2, [r3, #8]
 8004108:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004112:	d117      	bne.n	8004144 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004114:	4b0d      	ldr	r3, [pc, #52]	@ (800414c <HAL_TIM_MspPostInit+0x58>)
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	4a0c      	ldr	r2, [pc, #48]	@ (800414c <HAL_TIM_MspPostInit+0x58>)
 800411a:	f043 0304 	orr.w	r3, r3, #4
 800411e:	6193      	str	r3, [r2, #24]
 8004120:	4b0a      	ldr	r3, [pc, #40]	@ (800414c <HAL_TIM_MspPostInit+0x58>)
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ML_PWM_Pin|MR_PWM_Pin;
 800412c:	230c      	movs	r3, #12
 800412e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004130:	2302      	movs	r3, #2
 8004132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004134:	2302      	movs	r3, #2
 8004136:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004138:	f107 0310 	add.w	r3, r7, #16
 800413c:	4619      	mov	r1, r3
 800413e:	4804      	ldr	r0, [pc, #16]	@ (8004150 <HAL_TIM_MspPostInit+0x5c>)
 8004140:	f000 ffb8 	bl	80050b4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004144:	bf00      	nop
 8004146:	3720      	adds	r7, #32
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40021000 	.word	0x40021000
 8004150:	40010800 	.word	0x40010800

08004154 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800415c:	f107 0310 	add.w	r3, r7, #16
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	609a      	str	r2, [r3, #8]
 8004168:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a20      	ldr	r2, [pc, #128]	@ (80041f0 <HAL_UART_MspInit+0x9c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d139      	bne.n	80041e8 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004174:	4b1f      	ldr	r3, [pc, #124]	@ (80041f4 <HAL_UART_MspInit+0xa0>)
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	4a1e      	ldr	r2, [pc, #120]	@ (80041f4 <HAL_UART_MspInit+0xa0>)
 800417a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800417e:	6193      	str	r3, [r2, #24]
 8004180:	4b1c      	ldr	r3, [pc, #112]	@ (80041f4 <HAL_UART_MspInit+0xa0>)
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800418c:	4b19      	ldr	r3, [pc, #100]	@ (80041f4 <HAL_UART_MspInit+0xa0>)
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	4a18      	ldr	r2, [pc, #96]	@ (80041f4 <HAL_UART_MspInit+0xa0>)
 8004192:	f043 0304 	orr.w	r3, r3, #4
 8004196:	6193      	str	r3, [r2, #24]
 8004198:	4b16      	ldr	r3, [pc, #88]	@ (80041f4 <HAL_UART_MspInit+0xa0>)
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	60bb      	str	r3, [r7, #8]
 80041a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80041a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041aa:	2302      	movs	r3, #2
 80041ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041ae:	2303      	movs	r3, #3
 80041b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b2:	f107 0310 	add.w	r3, r7, #16
 80041b6:	4619      	mov	r1, r3
 80041b8:	480f      	ldr	r0, [pc, #60]	@ (80041f8 <HAL_UART_MspInit+0xa4>)
 80041ba:	f000 ff7b 	bl	80050b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80041be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041cc:	f107 0310 	add.w	r3, r7, #16
 80041d0:	4619      	mov	r1, r3
 80041d2:	4809      	ldr	r0, [pc, #36]	@ (80041f8 <HAL_UART_MspInit+0xa4>)
 80041d4:	f000 ff6e 	bl	80050b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80041d8:	2200      	movs	r2, #0
 80041da:	2100      	movs	r1, #0
 80041dc:	2025      	movs	r0, #37	@ 0x25
 80041de:	f000 fe80 	bl	8004ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80041e2:	2025      	movs	r0, #37	@ 0x25
 80041e4:	f000 fe99 	bl	8004f1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80041e8:	bf00      	nop
 80041ea:	3720      	adds	r7, #32
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40013800 	.word	0x40013800
 80041f4:	40021000 	.word	0x40021000
 80041f8:	40010800 	.word	0x40010800

080041fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004200:	bf00      	nop
 8004202:	e7fd      	b.n	8004200 <NMI_Handler+0x4>

08004204 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004208:	bf00      	nop
 800420a:	e7fd      	b.n	8004208 <HardFault_Handler+0x4>

0800420c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004210:	bf00      	nop
 8004212:	e7fd      	b.n	8004210 <MemManage_Handler+0x4>

08004214 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004218:	bf00      	nop
 800421a:	e7fd      	b.n	8004218 <BusFault_Handler+0x4>

0800421c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004220:	bf00      	nop
 8004222:	e7fd      	b.n	8004220 <UsageFault_Handler+0x4>

08004224 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004228:	bf00      	nop
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr

08004230 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004234:	bf00      	nop
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr

0800423c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004240:	bf00      	nop
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr

08004248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800424c:	f000 f8da 	bl	8004404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Systick();
 8004250:	f7ff fa56 	bl	8003700 <Systick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004254:	bf00      	nop
 8004256:	bd80      	pop	{r7, pc}

08004258 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ARM_SW1_Pin);
 800425c:	2010      	movs	r0, #16
 800425e:	f001 f8df 	bl	8005420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004262:	bf00      	nop
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800426c:	4802      	ldr	r0, [pc, #8]	@ (8004278 <TIM3_IRQHandler+0x10>)
 800426e:	f002 f905 	bl	800647c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004272:	bf00      	nop
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	2000013c 	.word	0x2000013c

0800427c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004280:	4802      	ldr	r0, [pc, #8]	@ (800428c <TIM4_IRQHandler+0x10>)
 8004282:	f002 f8fb 	bl	800647c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004286:	bf00      	nop
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20000184 	.word	0x20000184

08004290 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004294:	4802      	ldr	r0, [pc, #8]	@ (80042a0 <USART1_IRQHandler+0x10>)
 8004296:	f002 ff59 	bl	800714c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800429a:	bf00      	nop
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	200001cc 	.word	0x200001cc

080042a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RACE_SW2_Pin);
 80042a8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80042ac:	f001 f8b8 	bl	8005420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80042b0:	bf00      	nop
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042bc:	4a14      	ldr	r2, [pc, #80]	@ (8004310 <_sbrk+0x5c>)
 80042be:	4b15      	ldr	r3, [pc, #84]	@ (8004314 <_sbrk+0x60>)
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042c8:	4b13      	ldr	r3, [pc, #76]	@ (8004318 <_sbrk+0x64>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d102      	bne.n	80042d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042d0:	4b11      	ldr	r3, [pc, #68]	@ (8004318 <_sbrk+0x64>)
 80042d2:	4a12      	ldr	r2, [pc, #72]	@ (800431c <_sbrk+0x68>)
 80042d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042d6:	4b10      	ldr	r3, [pc, #64]	@ (8004318 <_sbrk+0x64>)
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4413      	add	r3, r2
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d207      	bcs.n	80042f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042e4:	f003 fd1a 	bl	8007d1c <__errno>
 80042e8:	4603      	mov	r3, r0
 80042ea:	220c      	movs	r2, #12
 80042ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042ee:	f04f 33ff 	mov.w	r3, #4294967295
 80042f2:	e009      	b.n	8004308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042f4:	4b08      	ldr	r3, [pc, #32]	@ (8004318 <_sbrk+0x64>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042fa:	4b07      	ldr	r3, [pc, #28]	@ (8004318 <_sbrk+0x64>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4413      	add	r3, r2
 8004302:	4a05      	ldr	r2, [pc, #20]	@ (8004318 <_sbrk+0x64>)
 8004304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004306:	68fb      	ldr	r3, [r7, #12]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20005000 	.word	0x20005000
 8004314:	00000400 	.word	0x00000400
 8004318:	20000c70 	.word	0x20000c70
 800431c:	20000dc0 	.word	0x20000dc0

08004320 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004324:	bf00      	nop
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr

0800432c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800432c:	f7ff fff8 	bl	8004320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004330:	480b      	ldr	r0, [pc, #44]	@ (8004360 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004332:	490c      	ldr	r1, [pc, #48]	@ (8004364 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004334:	4a0c      	ldr	r2, [pc, #48]	@ (8004368 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004338:	e002      	b.n	8004340 <LoopCopyDataInit>

0800433a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800433a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800433c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800433e:	3304      	adds	r3, #4

08004340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004344:	d3f9      	bcc.n	800433a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004346:	4a09      	ldr	r2, [pc, #36]	@ (800436c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004348:	4c09      	ldr	r4, [pc, #36]	@ (8004370 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800434a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800434c:	e001      	b.n	8004352 <LoopFillZerobss>

0800434e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800434e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004350:	3204      	adds	r2, #4

08004352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004354:	d3fb      	bcc.n	800434e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004356:	f003 fce7 	bl	8007d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800435a:	f7fc fe31 	bl	8000fc0 <main>
  bx lr
 800435e:	4770      	bx	lr
  ldr r0, =_sdata
 8004360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004364:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8004368:	08007eb0 	.word	0x08007eb0
  ldr r2, =_sbss
 800436c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004370:	20000dc0 	.word	0x20000dc0

08004374 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004374:	e7fe      	b.n	8004374 <ADC1_2_IRQHandler>
	...

08004378 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800437c:	4b08      	ldr	r3, [pc, #32]	@ (80043a0 <HAL_Init+0x28>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a07      	ldr	r2, [pc, #28]	@ (80043a0 <HAL_Init+0x28>)
 8004382:	f043 0310 	orr.w	r3, r3, #16
 8004386:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004388:	2003      	movs	r0, #3
 800438a:	f000 fd9f 	bl	8004ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800438e:	200e      	movs	r0, #14
 8004390:	f000 f808 	bl	80043a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004394:	f7ff fd66 	bl	8003e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40022000 	.word	0x40022000

080043a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043ac:	4b12      	ldr	r3, [pc, #72]	@ (80043f8 <HAL_InitTick+0x54>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b12      	ldr	r3, [pc, #72]	@ (80043fc <HAL_InitTick+0x58>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	4619      	mov	r1, r3
 80043b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80043be:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fdb7 	bl	8004f36 <HAL_SYSTICK_Config>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e00e      	b.n	80043f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b0f      	cmp	r3, #15
 80043d6:	d80a      	bhi.n	80043ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043d8:	2200      	movs	r2, #0
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	f04f 30ff 	mov.w	r0, #4294967295
 80043e0:	f000 fd7f 	bl	8004ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043e4:	4a06      	ldr	r2, [pc, #24]	@ (8004400 <HAL_InitTick+0x5c>)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e000      	b.n	80043f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	20000018 	.word	0x20000018
 80043fc:	20000020 	.word	0x20000020
 8004400:	2000001c 	.word	0x2000001c

08004404 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004408:	4b05      	ldr	r3, [pc, #20]	@ (8004420 <HAL_IncTick+0x1c>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	4b05      	ldr	r3, [pc, #20]	@ (8004424 <HAL_IncTick+0x20>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4413      	add	r3, r2
 8004414:	4a03      	ldr	r2, [pc, #12]	@ (8004424 <HAL_IncTick+0x20>)
 8004416:	6013      	str	r3, [r2, #0]
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr
 8004420:	20000020 	.word	0x20000020
 8004424:	20000c74 	.word	0x20000c74

08004428 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return uwTick;
 800442c:	4b02      	ldr	r3, [pc, #8]	@ (8004438 <HAL_GetTick+0x10>)
 800442e:	681b      	ldr	r3, [r3, #0]
}
 8004430:	4618      	mov	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr
 8004438:	20000c74 	.word	0x20000c74

0800443c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004444:	f7ff fff0 	bl	8004428 <HAL_GetTick>
 8004448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004454:	d005      	beq.n	8004462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004456:	4b0a      	ldr	r3, [pc, #40]	@ (8004480 <HAL_Delay+0x44>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4413      	add	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004462:	bf00      	nop
 8004464:	f7ff ffe0 	bl	8004428 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	429a      	cmp	r2, r3
 8004472:	d8f7      	bhi.n	8004464 <HAL_Delay+0x28>
  {
  }
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20000020 	.word	0x20000020

08004484 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e0be      	b.n	8004624 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d109      	bne.n	80044c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff fd00 	bl	8003ec8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fbf1 	bl	8004cb0 <ADC_ConversionStop_Disable>
 80044ce:	4603      	mov	r3, r0
 80044d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d6:	f003 0310 	and.w	r3, r3, #16
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f040 8099 	bne.w	8004612 <HAL_ADC_Init+0x18e>
 80044e0:	7dfb      	ldrb	r3, [r7, #23]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f040 8095 	bne.w	8004612 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80044f0:	f023 0302 	bic.w	r3, r3, #2
 80044f4:	f043 0202 	orr.w	r2, r3, #2
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004504:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	7b1b      	ldrb	r3, [r3, #12]
 800450a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800450c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	4313      	orrs	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800451c:	d003      	beq.n	8004526 <HAL_ADC_Init+0xa2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d102      	bne.n	800452c <HAL_ADC_Init+0xa8>
 8004526:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800452a:	e000      	b.n	800452e <HAL_ADC_Init+0xaa>
 800452c:	2300      	movs	r3, #0
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	7d1b      	ldrb	r3, [r3, #20]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d119      	bne.n	8004570 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	7b1b      	ldrb	r3, [r3, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d109      	bne.n	8004558 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	3b01      	subs	r3, #1
 800454a:	035a      	lsls	r2, r3, #13
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	e00b      	b.n	8004570 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455c:	f043 0220 	orr.w	r2, r3, #32
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004568:	f043 0201 	orr.w	r2, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	430a      	orrs	r2, r1
 8004582:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	4b28      	ldr	r3, [pc, #160]	@ (800462c <HAL_ADC_Init+0x1a8>)
 800458c:	4013      	ands	r3, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6812      	ldr	r2, [r2, #0]
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	430b      	orrs	r3, r1
 8004596:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045a0:	d003      	beq.n	80045aa <HAL_ADC_Init+0x126>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d104      	bne.n	80045b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	051b      	lsls	r3, r3, #20
 80045b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ba:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	4b18      	ldr	r3, [pc, #96]	@ (8004630 <HAL_ADC_Init+0x1ac>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d10b      	bne.n	80045f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e2:	f023 0303 	bic.w	r3, r3, #3
 80045e6:	f043 0201 	orr.w	r2, r3, #1
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80045ee:	e018      	b.n	8004622 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f4:	f023 0312 	bic.w	r3, r3, #18
 80045f8:	f043 0210 	orr.w	r2, r3, #16
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004604:	f043 0201 	orr.w	r2, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004610:	e007      	b.n	8004622 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004616:	f043 0210 	orr.w	r2, r3, #16
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004622:	7dfb      	ldrb	r3, [r7, #23]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	ffe1f7fd 	.word	0xffe1f7fd
 8004630:	ff1f0efe 	.word	0xff1f0efe

08004634 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_ADC_Start+0x1a>
 800464a:	2302      	movs	r3, #2
 800464c:	e098      	b.n	8004780 <HAL_ADC_Start+0x14c>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fad0 	bl	8004bfc <ADC_Enable>
 800465c:	4603      	mov	r3, r0
 800465e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f040 8087 	bne.w	8004776 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004670:	f023 0301 	bic.w	r3, r3, #1
 8004674:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a41      	ldr	r2, [pc, #260]	@ (8004788 <HAL_ADC_Start+0x154>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d105      	bne.n	8004692 <HAL_ADC_Start+0x5e>
 8004686:	4b41      	ldr	r3, [pc, #260]	@ (800478c <HAL_ADC_Start+0x158>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d115      	bne.n	80046be <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004696:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d026      	beq.n	80046fa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80046b4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80046bc:	e01d      	b.n	80046fa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a2f      	ldr	r2, [pc, #188]	@ (800478c <HAL_ADC_Start+0x158>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d004      	beq.n	80046de <HAL_ADC_Start+0xaa>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004788 <HAL_ADC_Start+0x154>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d10d      	bne.n	80046fa <HAL_ADC_Start+0xc6>
 80046de:	4b2b      	ldr	r3, [pc, #172]	@ (800478c <HAL_ADC_Start+0x158>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d007      	beq.n	80046fa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80046f2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d006      	beq.n	8004714 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470a:	f023 0206 	bic.w	r2, r3, #6
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004712:	e002      	b.n	800471a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f06f 0202 	mvn.w	r2, #2
 800472a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004736:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800473a:	d113      	bne.n	8004764 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004740:	4a11      	ldr	r2, [pc, #68]	@ (8004788 <HAL_ADC_Start+0x154>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d105      	bne.n	8004752 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004746:	4b11      	ldr	r3, [pc, #68]	@ (800478c <HAL_ADC_Start+0x158>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800474e:	2b00      	cmp	r3, #0
 8004750:	d108      	bne.n	8004764 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8004760:	609a      	str	r2, [r3, #8]
 8004762:	e00c      	b.n	800477e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004772:	609a      	str	r2, [r3, #8]
 8004774:	e003      	b.n	800477e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800477e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40012800 	.word	0x40012800
 800478c:	40012400 	.word	0x40012400

08004790 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d101      	bne.n	80047aa <HAL_ADC_Stop+0x1a>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e01a      	b.n	80047e0 <HAL_ADC_Stop+0x50>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fa7c 	bl	8004cb0 <ADC_ConversionStop_Disable>
 80047b8:	4603      	mov	r3, r0
 80047ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80047ca:	f023 0301 	bic.w	r3, r3, #1
 80047ce:	f043 0201 	orr.w	r2, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80047de:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80047e8:	b590      	push	{r4, r7, lr}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80047fe:	f7ff fe13 	bl	8004428 <HAL_GetTick>
 8004802:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004816:	f043 0220 	orr.w	r2, r3, #32
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e0d3      	b.n	80049d2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d131      	bne.n	800489c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004842:	2b00      	cmp	r3, #0
 8004844:	d12a      	bne.n	800489c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004846:	e021      	b.n	800488c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484e:	d01d      	beq.n	800488c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <HAL_ADC_PollForConversion+0x7e>
 8004856:	f7ff fde7 	bl	8004428 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d212      	bcs.n	800488c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10b      	bne.n	800488c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004878:	f043 0204 	orr.w	r2, r3, #4
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e0a2      	b.n	80049d2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0d6      	beq.n	8004848 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800489a:	e070      	b.n	800497e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800489c:	4b4f      	ldr	r3, [pc, #316]	@ (80049dc <HAL_ADC_PollForConversion+0x1f4>)
 800489e:	681c      	ldr	r4, [r3, #0]
 80048a0:	2002      	movs	r0, #2
 80048a2:	f001 fa9b 	bl	8005ddc <HAL_RCCEx_GetPeriphCLKFreq>
 80048a6:	4603      	mov	r3, r0
 80048a8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6919      	ldr	r1, [r3, #16]
 80048b2:	4b4b      	ldr	r3, [pc, #300]	@ (80049e0 <HAL_ADC_PollForConversion+0x1f8>)
 80048b4:	400b      	ands	r3, r1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d118      	bne.n	80048ec <HAL_ADC_PollForConversion+0x104>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68d9      	ldr	r1, [r3, #12]
 80048c0:	4b48      	ldr	r3, [pc, #288]	@ (80049e4 <HAL_ADC_PollForConversion+0x1fc>)
 80048c2:	400b      	ands	r3, r1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d111      	bne.n	80048ec <HAL_ADC_PollForConversion+0x104>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6919      	ldr	r1, [r3, #16]
 80048ce:	4b46      	ldr	r3, [pc, #280]	@ (80049e8 <HAL_ADC_PollForConversion+0x200>)
 80048d0:	400b      	ands	r3, r1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d108      	bne.n	80048e8 <HAL_ADC_PollForConversion+0x100>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68d9      	ldr	r1, [r3, #12]
 80048dc:	4b43      	ldr	r3, [pc, #268]	@ (80049ec <HAL_ADC_PollForConversion+0x204>)
 80048de:	400b      	ands	r3, r1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_ADC_PollForConversion+0x100>
 80048e4:	2314      	movs	r3, #20
 80048e6:	e020      	b.n	800492a <HAL_ADC_PollForConversion+0x142>
 80048e8:	2329      	movs	r3, #41	@ 0x29
 80048ea:	e01e      	b.n	800492a <HAL_ADC_PollForConversion+0x142>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6919      	ldr	r1, [r3, #16]
 80048f2:	4b3d      	ldr	r3, [pc, #244]	@ (80049e8 <HAL_ADC_PollForConversion+0x200>)
 80048f4:	400b      	ands	r3, r1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <HAL_ADC_PollForConversion+0x120>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68d9      	ldr	r1, [r3, #12]
 8004900:	4b3a      	ldr	r3, [pc, #232]	@ (80049ec <HAL_ADC_PollForConversion+0x204>)
 8004902:	400b      	ands	r3, r1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00d      	beq.n	8004924 <HAL_ADC_PollForConversion+0x13c>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6919      	ldr	r1, [r3, #16]
 800490e:	4b38      	ldr	r3, [pc, #224]	@ (80049f0 <HAL_ADC_PollForConversion+0x208>)
 8004910:	400b      	ands	r3, r1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d108      	bne.n	8004928 <HAL_ADC_PollForConversion+0x140>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68d9      	ldr	r1, [r3, #12]
 800491c:	4b34      	ldr	r3, [pc, #208]	@ (80049f0 <HAL_ADC_PollForConversion+0x208>)
 800491e:	400b      	ands	r3, r1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_ADC_PollForConversion+0x140>
 8004924:	2354      	movs	r3, #84	@ 0x54
 8004926:	e000      	b.n	800492a <HAL_ADC_PollForConversion+0x142>
 8004928:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800492a:	fb02 f303 	mul.w	r3, r2, r3
 800492e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004930:	e021      	b.n	8004976 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004938:	d01a      	beq.n	8004970 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d007      	beq.n	8004950 <HAL_ADC_PollForConversion+0x168>
 8004940:	f7ff fd72 	bl	8004428 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d20f      	bcs.n	8004970 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	429a      	cmp	r2, r3
 8004956:	d90b      	bls.n	8004970 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495c:	f043 0204 	orr.w	r2, r3, #4
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e030      	b.n	80049d2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	3301      	adds	r3, #1
 8004974:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	429a      	cmp	r2, r3
 800497c:	d8d9      	bhi.n	8004932 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f06f 0212 	mvn.w	r2, #18
 8004986:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800499e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80049a2:	d115      	bne.n	80049d0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d111      	bne.n	80049d0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d105      	bne.n	80049d0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c8:	f043 0201 	orr.w	r2, r3, #1
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd90      	pop	{r4, r7, pc}
 80049da:	bf00      	nop
 80049dc:	20000018 	.word	0x20000018
 80049e0:	24924924 	.word	0x24924924
 80049e4:	00924924 	.word	0x00924924
 80049e8:	12492492 	.word	0x12492492
 80049ec:	00492492 	.word	0x00492492
 80049f0:	00249249 	.word	0x00249249

080049f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr

08004a0c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_ADC_ConfigChannel+0x20>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e0dc      	b.n	8004be6 <HAL_ADC_ConfigChannel+0x1da>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b06      	cmp	r3, #6
 8004a3a:	d81c      	bhi.n	8004a76 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	3b05      	subs	r3, #5
 8004a4e:	221f      	movs	r2, #31
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	43db      	mvns	r3, r3
 8004a56:	4019      	ands	r1, r3
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	6818      	ldr	r0, [r3, #0]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	3b05      	subs	r3, #5
 8004a68:	fa00 f203 	lsl.w	r2, r0, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a74:	e03c      	b.n	8004af0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b0c      	cmp	r3, #12
 8004a7c:	d81c      	bhi.n	8004ab8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3b23      	subs	r3, #35	@ 0x23
 8004a90:	221f      	movs	r2, #31
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	43db      	mvns	r3, r3
 8004a98:	4019      	ands	r1, r3
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3b23      	subs	r3, #35	@ 0x23
 8004aaa:	fa00 f203 	lsl.w	r2, r0, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ab6:	e01b      	b.n	8004af0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3b41      	subs	r3, #65	@ 0x41
 8004aca:	221f      	movs	r2, #31
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	4019      	ands	r1, r3
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	6818      	ldr	r0, [r3, #0]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	3b41      	subs	r3, #65	@ 0x41
 8004ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b09      	cmp	r3, #9
 8004af6:	d91c      	bls.n	8004b32 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68d9      	ldr	r1, [r3, #12]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	4613      	mov	r3, r2
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	4413      	add	r3, r2
 8004b08:	3b1e      	subs	r3, #30
 8004b0a:	2207      	movs	r2, #7
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	43db      	mvns	r3, r3
 8004b12:	4019      	ands	r1, r3
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	6898      	ldr	r0, [r3, #8]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	4413      	add	r3, r2
 8004b22:	3b1e      	subs	r3, #30
 8004b24:	fa00 f203 	lsl.w	r2, r0, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	60da      	str	r2, [r3, #12]
 8004b30:	e019      	b.n	8004b66 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6919      	ldr	r1, [r3, #16]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	4413      	add	r3, r2
 8004b42:	2207      	movs	r2, #7
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	4019      	ands	r1, r3
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	6898      	ldr	r0, [r3, #8]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	4613      	mov	r3, r2
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	4413      	add	r3, r2
 8004b5a:	fa00 f203 	lsl.w	r2, r0, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b10      	cmp	r3, #16
 8004b6c:	d003      	beq.n	8004b76 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004b72:	2b11      	cmp	r3, #17
 8004b74:	d132      	bne.n	8004bdc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf0 <HAL_ADC_ConfigChannel+0x1e4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d125      	bne.n	8004bcc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d126      	bne.n	8004bdc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004b9c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b10      	cmp	r3, #16
 8004ba4:	d11a      	bne.n	8004bdc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004ba6:	4b13      	ldr	r3, [pc, #76]	@ (8004bf4 <HAL_ADC_ConfigChannel+0x1e8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a13      	ldr	r2, [pc, #76]	@ (8004bf8 <HAL_ADC_ConfigChannel+0x1ec>)
 8004bac:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb0:	0c9a      	lsrs	r2, r3, #18
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004bbc:	e002      	b.n	8004bc4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f9      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x1b2>
 8004bca:	e007      	b.n	8004bdc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd0:	f043 0220 	orr.w	r2, r3, #32
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bc80      	pop	{r7}
 8004bee:	4770      	bx	lr
 8004bf0:	40012400 	.word	0x40012400
 8004bf4:	20000018 	.word	0x20000018
 8004bf8:	431bde83 	.word	0x431bde83

08004bfc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d040      	beq.n	8004c9c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0201 	orr.w	r2, r2, #1
 8004c28:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ca8 <ADC_Enable+0xac>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8004cac <ADC_Enable+0xb0>)
 8004c30:	fba2 2303 	umull	r2, r3, r2, r3
 8004c34:	0c9b      	lsrs	r3, r3, #18
 8004c36:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004c38:	e002      	b.n	8004c40 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f9      	bne.n	8004c3a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004c46:	f7ff fbef 	bl	8004428 <HAL_GetTick>
 8004c4a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004c4c:	e01f      	b.n	8004c8e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c4e:	f7ff fbeb 	bl	8004428 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d918      	bls.n	8004c8e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d011      	beq.n	8004c8e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6e:	f043 0210 	orr.w	r2, r3, #16
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7a:	f043 0201 	orr.w	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e007      	b.n	8004c9e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d1d8      	bne.n	8004c4e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20000018 	.word	0x20000018
 8004cac:	431bde83 	.word	0x431bde83

08004cb0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d12e      	bne.n	8004d28 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0201 	bic.w	r2, r2, #1
 8004cd8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004cda:	f7ff fba5 	bl	8004428 <HAL_GetTick>
 8004cde:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004ce0:	e01b      	b.n	8004d1a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ce2:	f7ff fba1 	bl	8004428 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d914      	bls.n	8004d1a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d10d      	bne.n	8004d1a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d02:	f043 0210 	orr.w	r2, r3, #16
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0e:	f043 0201 	orr.w	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e007      	b.n	8004d2a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d0dc      	beq.n	8004ce2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d44:	4b0c      	ldr	r3, [pc, #48]	@ (8004d78 <__NVIC_SetPriorityGrouping+0x44>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d50:	4013      	ands	r3, r2
 8004d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d66:	4a04      	ldr	r2, [pc, #16]	@ (8004d78 <__NVIC_SetPriorityGrouping+0x44>)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	60d3      	str	r3, [r2, #12]
}
 8004d6c:	bf00      	nop
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	e000ed00 	.word	0xe000ed00

08004d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d80:	4b04      	ldr	r3, [pc, #16]	@ (8004d94 <__NVIC_GetPriorityGrouping+0x18>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	0a1b      	lsrs	r3, r3, #8
 8004d86:	f003 0307 	and.w	r3, r3, #7
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bc80      	pop	{r7}
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	e000ed00 	.word	0xe000ed00

08004d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	4603      	mov	r3, r0
 8004da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	db0b      	blt.n	8004dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	f003 021f 	and.w	r2, r3, #31
 8004db0:	4906      	ldr	r1, [pc, #24]	@ (8004dcc <__NVIC_EnableIRQ+0x34>)
 8004db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	2001      	movs	r0, #1
 8004dba:	fa00 f202 	lsl.w	r2, r0, r2
 8004dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr
 8004dcc:	e000e100 	.word	0xe000e100

08004dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	6039      	str	r1, [r7, #0]
 8004dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	db0a      	blt.n	8004dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	490c      	ldr	r1, [pc, #48]	@ (8004e1c <__NVIC_SetPriority+0x4c>)
 8004dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dee:	0112      	lsls	r2, r2, #4
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	440b      	add	r3, r1
 8004df4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004df8:	e00a      	b.n	8004e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	4908      	ldr	r1, [pc, #32]	@ (8004e20 <__NVIC_SetPriority+0x50>)
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	3b04      	subs	r3, #4
 8004e08:	0112      	lsls	r2, r2, #4
 8004e0a:	b2d2      	uxtb	r2, r2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	761a      	strb	r2, [r3, #24]
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	e000e100 	.word	0xe000e100
 8004e20:	e000ed00 	.word	0xe000ed00

08004e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b089      	sub	sp, #36	@ 0x24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f1c3 0307 	rsb	r3, r3, #7
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	bf28      	it	cs
 8004e42:	2304      	movcs	r3, #4
 8004e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	2b06      	cmp	r3, #6
 8004e4c:	d902      	bls.n	8004e54 <NVIC_EncodePriority+0x30>
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	3b03      	subs	r3, #3
 8004e52:	e000      	b.n	8004e56 <NVIC_EncodePriority+0x32>
 8004e54:	2300      	movs	r3, #0
 8004e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e58:	f04f 32ff 	mov.w	r2, #4294967295
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	43da      	mvns	r2, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	401a      	ands	r2, r3
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	fa01 f303 	lsl.w	r3, r1, r3
 8004e76:	43d9      	mvns	r1, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e7c:	4313      	orrs	r3, r2
         );
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3724      	adds	r7, #36	@ 0x24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bc80      	pop	{r7}
 8004e86:	4770      	bx	lr

08004e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e98:	d301      	bcc.n	8004e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e00f      	b.n	8004ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec8 <SysTick_Config+0x40>)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ea6:	210f      	movs	r1, #15
 8004ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eac:	f7ff ff90 	bl	8004dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004eb0:	4b05      	ldr	r3, [pc, #20]	@ (8004ec8 <SysTick_Config+0x40>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004eb6:	4b04      	ldr	r3, [pc, #16]	@ (8004ec8 <SysTick_Config+0x40>)
 8004eb8:	2207      	movs	r2, #7
 8004eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	e000e010 	.word	0xe000e010

08004ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff ff2d 	bl	8004d34 <__NVIC_SetPriorityGrouping>
}
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b086      	sub	sp, #24
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	4603      	mov	r3, r0
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	607a      	str	r2, [r7, #4]
 8004eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ef4:	f7ff ff42 	bl	8004d7c <__NVIC_GetPriorityGrouping>
 8004ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	68b9      	ldr	r1, [r7, #8]
 8004efe:	6978      	ldr	r0, [r7, #20]
 8004f00:	f7ff ff90 	bl	8004e24 <NVIC_EncodePriority>
 8004f04:	4602      	mov	r2, r0
 8004f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff ff5f 	bl	8004dd0 <__NVIC_SetPriority>
}
 8004f12:	bf00      	nop
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b082      	sub	sp, #8
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	4603      	mov	r3, r0
 8004f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff ff35 	bl	8004d98 <__NVIC_EnableIRQ>
}
 8004f2e:	bf00      	nop
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b082      	sub	sp, #8
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff ffa2 	bl	8004e88 <SysTick_Config>
 8004f44:	4603      	mov	r3, r0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d008      	beq.n	8004f78 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2204      	movs	r2, #4
 8004f6a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e020      	b.n	8004fba <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 020e 	bic.w	r2, r2, #14
 8004f86:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0201 	bic.w	r2, r2, #1
 8004f96:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d005      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2204      	movs	r2, #4
 8004fe0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	73fb      	strb	r3, [r7, #15]
 8004fe6:	e051      	b.n	800508c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 020e 	bic.w	r2, r2, #14
 8004ff6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0201 	bic.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a22      	ldr	r2, [pc, #136]	@ (8005098 <HAL_DMA_Abort_IT+0xd4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d029      	beq.n	8005066 <HAL_DMA_Abort_IT+0xa2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a21      	ldr	r2, [pc, #132]	@ (800509c <HAL_DMA_Abort_IT+0xd8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d022      	beq.n	8005062 <HAL_DMA_Abort_IT+0x9e>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1f      	ldr	r2, [pc, #124]	@ (80050a0 <HAL_DMA_Abort_IT+0xdc>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d01a      	beq.n	800505c <HAL_DMA_Abort_IT+0x98>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1e      	ldr	r2, [pc, #120]	@ (80050a4 <HAL_DMA_Abort_IT+0xe0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d012      	beq.n	8005056 <HAL_DMA_Abort_IT+0x92>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1c      	ldr	r2, [pc, #112]	@ (80050a8 <HAL_DMA_Abort_IT+0xe4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00a      	beq.n	8005050 <HAL_DMA_Abort_IT+0x8c>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a1b      	ldr	r2, [pc, #108]	@ (80050ac <HAL_DMA_Abort_IT+0xe8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d102      	bne.n	800504a <HAL_DMA_Abort_IT+0x86>
 8005044:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005048:	e00e      	b.n	8005068 <HAL_DMA_Abort_IT+0xa4>
 800504a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800504e:	e00b      	b.n	8005068 <HAL_DMA_Abort_IT+0xa4>
 8005050:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005054:	e008      	b.n	8005068 <HAL_DMA_Abort_IT+0xa4>
 8005056:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800505a:	e005      	b.n	8005068 <HAL_DMA_Abort_IT+0xa4>
 800505c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005060:	e002      	b.n	8005068 <HAL_DMA_Abort_IT+0xa4>
 8005062:	2310      	movs	r3, #16
 8005064:	e000      	b.n	8005068 <HAL_DMA_Abort_IT+0xa4>
 8005066:	2301      	movs	r3, #1
 8005068:	4a11      	ldr	r2, [pc, #68]	@ (80050b0 <HAL_DMA_Abort_IT+0xec>)
 800506a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	4798      	blx	r3
    } 
  }
  return status;
 800508c:	7bfb      	ldrb	r3, [r7, #15]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40020008 	.word	0x40020008
 800509c:	4002001c 	.word	0x4002001c
 80050a0:	40020030 	.word	0x40020030
 80050a4:	40020044 	.word	0x40020044
 80050a8:	40020058 	.word	0x40020058
 80050ac:	4002006c 	.word	0x4002006c
 80050b0:	40020000 	.word	0x40020000

080050b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b08b      	sub	sp, #44	@ 0x2c
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050be:	2300      	movs	r3, #0
 80050c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80050c2:	2300      	movs	r3, #0
 80050c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050c6:	e169      	b.n	800539c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80050c8:	2201      	movs	r2, #1
 80050ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69fa      	ldr	r2, [r7, #28]
 80050d8:	4013      	ands	r3, r2
 80050da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	f040 8158 	bne.w	8005396 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	4a9a      	ldr	r2, [pc, #616]	@ (8005354 <HAL_GPIO_Init+0x2a0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d05e      	beq.n	80051ae <HAL_GPIO_Init+0xfa>
 80050f0:	4a98      	ldr	r2, [pc, #608]	@ (8005354 <HAL_GPIO_Init+0x2a0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d875      	bhi.n	80051e2 <HAL_GPIO_Init+0x12e>
 80050f6:	4a98      	ldr	r2, [pc, #608]	@ (8005358 <HAL_GPIO_Init+0x2a4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d058      	beq.n	80051ae <HAL_GPIO_Init+0xfa>
 80050fc:	4a96      	ldr	r2, [pc, #600]	@ (8005358 <HAL_GPIO_Init+0x2a4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d86f      	bhi.n	80051e2 <HAL_GPIO_Init+0x12e>
 8005102:	4a96      	ldr	r2, [pc, #600]	@ (800535c <HAL_GPIO_Init+0x2a8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d052      	beq.n	80051ae <HAL_GPIO_Init+0xfa>
 8005108:	4a94      	ldr	r2, [pc, #592]	@ (800535c <HAL_GPIO_Init+0x2a8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d869      	bhi.n	80051e2 <HAL_GPIO_Init+0x12e>
 800510e:	4a94      	ldr	r2, [pc, #592]	@ (8005360 <HAL_GPIO_Init+0x2ac>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d04c      	beq.n	80051ae <HAL_GPIO_Init+0xfa>
 8005114:	4a92      	ldr	r2, [pc, #584]	@ (8005360 <HAL_GPIO_Init+0x2ac>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d863      	bhi.n	80051e2 <HAL_GPIO_Init+0x12e>
 800511a:	4a92      	ldr	r2, [pc, #584]	@ (8005364 <HAL_GPIO_Init+0x2b0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d046      	beq.n	80051ae <HAL_GPIO_Init+0xfa>
 8005120:	4a90      	ldr	r2, [pc, #576]	@ (8005364 <HAL_GPIO_Init+0x2b0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d85d      	bhi.n	80051e2 <HAL_GPIO_Init+0x12e>
 8005126:	2b12      	cmp	r3, #18
 8005128:	d82a      	bhi.n	8005180 <HAL_GPIO_Init+0xcc>
 800512a:	2b12      	cmp	r3, #18
 800512c:	d859      	bhi.n	80051e2 <HAL_GPIO_Init+0x12e>
 800512e:	a201      	add	r2, pc, #4	@ (adr r2, 8005134 <HAL_GPIO_Init+0x80>)
 8005130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005134:	080051af 	.word	0x080051af
 8005138:	08005189 	.word	0x08005189
 800513c:	0800519b 	.word	0x0800519b
 8005140:	080051dd 	.word	0x080051dd
 8005144:	080051e3 	.word	0x080051e3
 8005148:	080051e3 	.word	0x080051e3
 800514c:	080051e3 	.word	0x080051e3
 8005150:	080051e3 	.word	0x080051e3
 8005154:	080051e3 	.word	0x080051e3
 8005158:	080051e3 	.word	0x080051e3
 800515c:	080051e3 	.word	0x080051e3
 8005160:	080051e3 	.word	0x080051e3
 8005164:	080051e3 	.word	0x080051e3
 8005168:	080051e3 	.word	0x080051e3
 800516c:	080051e3 	.word	0x080051e3
 8005170:	080051e3 	.word	0x080051e3
 8005174:	080051e3 	.word	0x080051e3
 8005178:	08005191 	.word	0x08005191
 800517c:	080051a5 	.word	0x080051a5
 8005180:	4a79      	ldr	r2, [pc, #484]	@ (8005368 <HAL_GPIO_Init+0x2b4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d013      	beq.n	80051ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005186:	e02c      	b.n	80051e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	623b      	str	r3, [r7, #32]
          break;
 800518e:	e029      	b.n	80051e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	3304      	adds	r3, #4
 8005196:	623b      	str	r3, [r7, #32]
          break;
 8005198:	e024      	b.n	80051e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	3308      	adds	r3, #8
 80051a0:	623b      	str	r3, [r7, #32]
          break;
 80051a2:	e01f      	b.n	80051e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	330c      	adds	r3, #12
 80051aa:	623b      	str	r3, [r7, #32]
          break;
 80051ac:	e01a      	b.n	80051e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d102      	bne.n	80051bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80051b6:	2304      	movs	r3, #4
 80051b8:	623b      	str	r3, [r7, #32]
          break;
 80051ba:	e013      	b.n	80051e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d105      	bne.n	80051d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80051c4:	2308      	movs	r3, #8
 80051c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	69fa      	ldr	r2, [r7, #28]
 80051cc:	611a      	str	r2, [r3, #16]
          break;
 80051ce:	e009      	b.n	80051e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80051d0:	2308      	movs	r3, #8
 80051d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	69fa      	ldr	r2, [r7, #28]
 80051d8:	615a      	str	r2, [r3, #20]
          break;
 80051da:	e003      	b.n	80051e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80051dc:	2300      	movs	r3, #0
 80051de:	623b      	str	r3, [r7, #32]
          break;
 80051e0:	e000      	b.n	80051e4 <HAL_GPIO_Init+0x130>
          break;
 80051e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	2bff      	cmp	r3, #255	@ 0xff
 80051e8:	d801      	bhi.n	80051ee <HAL_GPIO_Init+0x13a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	e001      	b.n	80051f2 <HAL_GPIO_Init+0x13e>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3304      	adds	r3, #4
 80051f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	2bff      	cmp	r3, #255	@ 0xff
 80051f8:	d802      	bhi.n	8005200 <HAL_GPIO_Init+0x14c>
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	e002      	b.n	8005206 <HAL_GPIO_Init+0x152>
 8005200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005202:	3b08      	subs	r3, #8
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	210f      	movs	r1, #15
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	fa01 f303 	lsl.w	r3, r1, r3
 8005214:	43db      	mvns	r3, r3
 8005216:	401a      	ands	r2, r3
 8005218:	6a39      	ldr	r1, [r7, #32]
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	fa01 f303 	lsl.w	r3, r1, r3
 8005220:	431a      	orrs	r2, r3
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 80b1 	beq.w	8005396 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005234:	4b4d      	ldr	r3, [pc, #308]	@ (800536c <HAL_GPIO_Init+0x2b8>)
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	4a4c      	ldr	r2, [pc, #304]	@ (800536c <HAL_GPIO_Init+0x2b8>)
 800523a:	f043 0301 	orr.w	r3, r3, #1
 800523e:	6193      	str	r3, [r2, #24]
 8005240:	4b4a      	ldr	r3, [pc, #296]	@ (800536c <HAL_GPIO_Init+0x2b8>)
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800524c:	4a48      	ldr	r2, [pc, #288]	@ (8005370 <HAL_GPIO_Init+0x2bc>)
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	089b      	lsrs	r3, r3, #2
 8005252:	3302      	adds	r3, #2
 8005254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005258:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525c:	f003 0303 	and.w	r3, r3, #3
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	220f      	movs	r2, #15
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	43db      	mvns	r3, r3
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	4013      	ands	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a40      	ldr	r2, [pc, #256]	@ (8005374 <HAL_GPIO_Init+0x2c0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d013      	beq.n	80052a0 <HAL_GPIO_Init+0x1ec>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a3f      	ldr	r2, [pc, #252]	@ (8005378 <HAL_GPIO_Init+0x2c4>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00d      	beq.n	800529c <HAL_GPIO_Init+0x1e8>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a3e      	ldr	r2, [pc, #248]	@ (800537c <HAL_GPIO_Init+0x2c8>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d007      	beq.n	8005298 <HAL_GPIO_Init+0x1e4>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a3d      	ldr	r2, [pc, #244]	@ (8005380 <HAL_GPIO_Init+0x2cc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d101      	bne.n	8005294 <HAL_GPIO_Init+0x1e0>
 8005290:	2303      	movs	r3, #3
 8005292:	e006      	b.n	80052a2 <HAL_GPIO_Init+0x1ee>
 8005294:	2304      	movs	r3, #4
 8005296:	e004      	b.n	80052a2 <HAL_GPIO_Init+0x1ee>
 8005298:	2302      	movs	r3, #2
 800529a:	e002      	b.n	80052a2 <HAL_GPIO_Init+0x1ee>
 800529c:	2301      	movs	r3, #1
 800529e:	e000      	b.n	80052a2 <HAL_GPIO_Init+0x1ee>
 80052a0:	2300      	movs	r3, #0
 80052a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a4:	f002 0203 	and.w	r2, r2, #3
 80052a8:	0092      	lsls	r2, r2, #2
 80052aa:	4093      	lsls	r3, r2
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80052b2:	492f      	ldr	r1, [pc, #188]	@ (8005370 <HAL_GPIO_Init+0x2bc>)
 80052b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b6:	089b      	lsrs	r3, r3, #2
 80052b8:	3302      	adds	r3, #2
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d006      	beq.n	80052da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80052cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005384 <HAL_GPIO_Init+0x2d0>)
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	492c      	ldr	r1, [pc, #176]	@ (8005384 <HAL_GPIO_Init+0x2d0>)
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	608b      	str	r3, [r1, #8]
 80052d8:	e006      	b.n	80052e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80052da:	4b2a      	ldr	r3, [pc, #168]	@ (8005384 <HAL_GPIO_Init+0x2d0>)
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	43db      	mvns	r3, r3
 80052e2:	4928      	ldr	r1, [pc, #160]	@ (8005384 <HAL_GPIO_Init+0x2d0>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d006      	beq.n	8005302 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80052f4:	4b23      	ldr	r3, [pc, #140]	@ (8005384 <HAL_GPIO_Init+0x2d0>)
 80052f6:	68da      	ldr	r2, [r3, #12]
 80052f8:	4922      	ldr	r1, [pc, #136]	@ (8005384 <HAL_GPIO_Init+0x2d0>)
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60cb      	str	r3, [r1, #12]
 8005300:	e006      	b.n	8005310 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005302:	4b20      	ldr	r3, [pc, #128]	@ (8005384 <HAL_GPIO_Init+0x2d0>)
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	43db      	mvns	r3, r3
 800530a:	491e      	ldr	r1, [pc, #120]	@ (8005384 <HAL_GPIO_Init+0x2d0>)
 800530c:	4013      	ands	r3, r2
 800530e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d006      	beq.n	800532a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800531c:	4b19      	ldr	r3, [pc, #100]	@ (8005384 <HAL_GPIO_Init+0x2d0>)
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	4918      	ldr	r1, [pc, #96]	@ (8005384 <HAL_GPIO_Init+0x2d0>)
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	4313      	orrs	r3, r2
 8005326:	604b      	str	r3, [r1, #4]
 8005328:	e006      	b.n	8005338 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800532a:	4b16      	ldr	r3, [pc, #88]	@ (8005384 <HAL_GPIO_Init+0x2d0>)
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	43db      	mvns	r3, r3
 8005332:	4914      	ldr	r1, [pc, #80]	@ (8005384 <HAL_GPIO_Init+0x2d0>)
 8005334:	4013      	ands	r3, r2
 8005336:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d021      	beq.n	8005388 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005344:	4b0f      	ldr	r3, [pc, #60]	@ (8005384 <HAL_GPIO_Init+0x2d0>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	490e      	ldr	r1, [pc, #56]	@ (8005384 <HAL_GPIO_Init+0x2d0>)
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	4313      	orrs	r3, r2
 800534e:	600b      	str	r3, [r1, #0]
 8005350:	e021      	b.n	8005396 <HAL_GPIO_Init+0x2e2>
 8005352:	bf00      	nop
 8005354:	10320000 	.word	0x10320000
 8005358:	10310000 	.word	0x10310000
 800535c:	10220000 	.word	0x10220000
 8005360:	10210000 	.word	0x10210000
 8005364:	10120000 	.word	0x10120000
 8005368:	10110000 	.word	0x10110000
 800536c:	40021000 	.word	0x40021000
 8005370:	40010000 	.word	0x40010000
 8005374:	40010800 	.word	0x40010800
 8005378:	40010c00 	.word	0x40010c00
 800537c:	40011000 	.word	0x40011000
 8005380:	40011400 	.word	0x40011400
 8005384:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005388:	4b0b      	ldr	r3, [pc, #44]	@ (80053b8 <HAL_GPIO_Init+0x304>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	43db      	mvns	r3, r3
 8005390:	4909      	ldr	r1, [pc, #36]	@ (80053b8 <HAL_GPIO_Init+0x304>)
 8005392:	4013      	ands	r3, r2
 8005394:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005398:	3301      	adds	r3, #1
 800539a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a2:	fa22 f303 	lsr.w	r3, r2, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f47f ae8e 	bne.w	80050c8 <HAL_GPIO_Init+0x14>
  }
}
 80053ac:	bf00      	nop
 80053ae:	bf00      	nop
 80053b0:	372c      	adds	r7, #44	@ 0x2c
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr
 80053b8:	40010400 	.word	0x40010400

080053bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	460b      	mov	r3, r1
 80053c6:	807b      	strh	r3, [r7, #2]
 80053c8:	4613      	mov	r3, r2
 80053ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053cc:	787b      	ldrb	r3, [r7, #1]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053d2:	887a      	ldrh	r2, [r7, #2]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80053d8:	e003      	b.n	80053e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053da:	887b      	ldrh	r3, [r7, #2]
 80053dc:	041a      	lsls	r2, r3, #16
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	611a      	str	r2, [r3, #16]
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr

080053ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	460b      	mov	r3, r1
 80053f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053fe:	887a      	ldrh	r2, [r7, #2]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4013      	ands	r3, r2
 8005404:	041a      	lsls	r2, r3, #16
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	43d9      	mvns	r1, r3
 800540a:	887b      	ldrh	r3, [r7, #2]
 800540c:	400b      	ands	r3, r1
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	611a      	str	r2, [r3, #16]
}
 8005414:	bf00      	nop
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr
	...

08005420 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	4603      	mov	r3, r0
 8005428:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800542a:	4b08      	ldr	r3, [pc, #32]	@ (800544c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800542c:	695a      	ldr	r2, [r3, #20]
 800542e:	88fb      	ldrh	r3, [r7, #6]
 8005430:	4013      	ands	r3, r2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d006      	beq.n	8005444 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005436:	4a05      	ldr	r2, [pc, #20]	@ (800544c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005438:	88fb      	ldrh	r3, [r7, #6]
 800543a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800543c:	88fb      	ldrh	r3, [r7, #6]
 800543e:	4618      	mov	r0, r3
 8005440:	f7fc f90e 	bl	8001660 <HAL_GPIO_EXTI_Callback>
  }
}
 8005444:	bf00      	nop
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	40010400 	.word	0x40010400

08005450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e272      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 8087 	beq.w	800557e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005470:	4b92      	ldr	r3, [pc, #584]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f003 030c 	and.w	r3, r3, #12
 8005478:	2b04      	cmp	r3, #4
 800547a:	d00c      	beq.n	8005496 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800547c:	4b8f      	ldr	r3, [pc, #572]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f003 030c 	and.w	r3, r3, #12
 8005484:	2b08      	cmp	r3, #8
 8005486:	d112      	bne.n	80054ae <HAL_RCC_OscConfig+0x5e>
 8005488:	4b8c      	ldr	r3, [pc, #560]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005494:	d10b      	bne.n	80054ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005496:	4b89      	ldr	r3, [pc, #548]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d06c      	beq.n	800557c <HAL_RCC_OscConfig+0x12c>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d168      	bne.n	800557c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e24c      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054b6:	d106      	bne.n	80054c6 <HAL_RCC_OscConfig+0x76>
 80054b8:	4b80      	ldr	r3, [pc, #512]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a7f      	ldr	r2, [pc, #508]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 80054be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054c2:	6013      	str	r3, [r2, #0]
 80054c4:	e02e      	b.n	8005524 <HAL_RCC_OscConfig+0xd4>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10c      	bne.n	80054e8 <HAL_RCC_OscConfig+0x98>
 80054ce:	4b7b      	ldr	r3, [pc, #492]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a7a      	ldr	r2, [pc, #488]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 80054d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	4b78      	ldr	r3, [pc, #480]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a77      	ldr	r2, [pc, #476]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 80054e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	e01d      	b.n	8005524 <HAL_RCC_OscConfig+0xd4>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054f0:	d10c      	bne.n	800550c <HAL_RCC_OscConfig+0xbc>
 80054f2:	4b72      	ldr	r3, [pc, #456]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a71      	ldr	r2, [pc, #452]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 80054f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	4b6f      	ldr	r3, [pc, #444]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a6e      	ldr	r2, [pc, #440]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	e00b      	b.n	8005524 <HAL_RCC_OscConfig+0xd4>
 800550c:	4b6b      	ldr	r3, [pc, #428]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a6a      	ldr	r2, [pc, #424]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	4b68      	ldr	r3, [pc, #416]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a67      	ldr	r2, [pc, #412]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 800551e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005522:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d013      	beq.n	8005554 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552c:	f7fe ff7c 	bl	8004428 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005534:	f7fe ff78 	bl	8004428 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b64      	cmp	r3, #100	@ 0x64
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e200      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005546:	4b5d      	ldr	r3, [pc, #372]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0f0      	beq.n	8005534 <HAL_RCC_OscConfig+0xe4>
 8005552:	e014      	b.n	800557e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005554:	f7fe ff68 	bl	8004428 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800555c:	f7fe ff64 	bl	8004428 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b64      	cmp	r3, #100	@ 0x64
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e1ec      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800556e:	4b53      	ldr	r3, [pc, #332]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1f0      	bne.n	800555c <HAL_RCC_OscConfig+0x10c>
 800557a:	e000      	b.n	800557e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800557c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d063      	beq.n	8005652 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800558a:	4b4c      	ldr	r3, [pc, #304]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f003 030c 	and.w	r3, r3, #12
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00b      	beq.n	80055ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005596:	4b49      	ldr	r3, [pc, #292]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f003 030c 	and.w	r3, r3, #12
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d11c      	bne.n	80055dc <HAL_RCC_OscConfig+0x18c>
 80055a2:	4b46      	ldr	r3, [pc, #280]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d116      	bne.n	80055dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ae:	4b43      	ldr	r3, [pc, #268]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d005      	beq.n	80055c6 <HAL_RCC_OscConfig+0x176>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d001      	beq.n	80055c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e1c0      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c6:	4b3d      	ldr	r3, [pc, #244]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	4939      	ldr	r1, [pc, #228]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055da:	e03a      	b.n	8005652 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d020      	beq.n	8005626 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055e4:	4b36      	ldr	r3, [pc, #216]	@ (80056c0 <HAL_RCC_OscConfig+0x270>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ea:	f7fe ff1d 	bl	8004428 <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f0:	e008      	b.n	8005604 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055f2:	f7fe ff19 	bl	8004428 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e1a1      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005604:	4b2d      	ldr	r3, [pc, #180]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0f0      	beq.n	80055f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005610:	4b2a      	ldr	r3, [pc, #168]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	4927      	ldr	r1, [pc, #156]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005620:	4313      	orrs	r3, r2
 8005622:	600b      	str	r3, [r1, #0]
 8005624:	e015      	b.n	8005652 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005626:	4b26      	ldr	r3, [pc, #152]	@ (80056c0 <HAL_RCC_OscConfig+0x270>)
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800562c:	f7fe fefc 	bl	8004428 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005634:	f7fe fef8 	bl	8004428 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e180      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005646:	4b1d      	ldr	r3, [pc, #116]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f0      	bne.n	8005634 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d03a      	beq.n	80056d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d019      	beq.n	800569a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005666:	4b17      	ldr	r3, [pc, #92]	@ (80056c4 <HAL_RCC_OscConfig+0x274>)
 8005668:	2201      	movs	r2, #1
 800566a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800566c:	f7fe fedc 	bl	8004428 <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005674:	f7fe fed8 	bl	8004428 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e160      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005686:	4b0d      	ldr	r3, [pc, #52]	@ (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0f0      	beq.n	8005674 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005692:	2001      	movs	r0, #1
 8005694:	f000 face 	bl	8005c34 <RCC_Delay>
 8005698:	e01c      	b.n	80056d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800569a:	4b0a      	ldr	r3, [pc, #40]	@ (80056c4 <HAL_RCC_OscConfig+0x274>)
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a0:	f7fe fec2 	bl	8004428 <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056a6:	e00f      	b.n	80056c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056a8:	f7fe febe 	bl	8004428 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d908      	bls.n	80056c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e146      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
 80056ba:	bf00      	nop
 80056bc:	40021000 	.word	0x40021000
 80056c0:	42420000 	.word	0x42420000
 80056c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056c8:	4b92      	ldr	r3, [pc, #584]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80056ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1e9      	bne.n	80056a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 80a6 	beq.w	800582e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056e2:	2300      	movs	r3, #0
 80056e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056e6:	4b8b      	ldr	r3, [pc, #556]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10d      	bne.n	800570e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056f2:	4b88      	ldr	r3, [pc, #544]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	4a87      	ldr	r2, [pc, #540]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80056f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056fc:	61d3      	str	r3, [r2, #28]
 80056fe:	4b85      	ldr	r3, [pc, #532]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005706:	60bb      	str	r3, [r7, #8]
 8005708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800570a:	2301      	movs	r3, #1
 800570c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800570e:	4b82      	ldr	r3, [pc, #520]	@ (8005918 <HAL_RCC_OscConfig+0x4c8>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005716:	2b00      	cmp	r3, #0
 8005718:	d118      	bne.n	800574c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800571a:	4b7f      	ldr	r3, [pc, #508]	@ (8005918 <HAL_RCC_OscConfig+0x4c8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a7e      	ldr	r2, [pc, #504]	@ (8005918 <HAL_RCC_OscConfig+0x4c8>)
 8005720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005726:	f7fe fe7f 	bl	8004428 <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800572e:	f7fe fe7b 	bl	8004428 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b64      	cmp	r3, #100	@ 0x64
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e103      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005740:	4b75      	ldr	r3, [pc, #468]	@ (8005918 <HAL_RCC_OscConfig+0x4c8>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0f0      	beq.n	800572e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d106      	bne.n	8005762 <HAL_RCC_OscConfig+0x312>
 8005754:	4b6f      	ldr	r3, [pc, #444]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	4a6e      	ldr	r2, [pc, #440]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 800575a:	f043 0301 	orr.w	r3, r3, #1
 800575e:	6213      	str	r3, [r2, #32]
 8005760:	e02d      	b.n	80057be <HAL_RCC_OscConfig+0x36e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10c      	bne.n	8005784 <HAL_RCC_OscConfig+0x334>
 800576a:	4b6a      	ldr	r3, [pc, #424]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	4a69      	ldr	r2, [pc, #420]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005770:	f023 0301 	bic.w	r3, r3, #1
 8005774:	6213      	str	r3, [r2, #32]
 8005776:	4b67      	ldr	r3, [pc, #412]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	4a66      	ldr	r2, [pc, #408]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 800577c:	f023 0304 	bic.w	r3, r3, #4
 8005780:	6213      	str	r3, [r2, #32]
 8005782:	e01c      	b.n	80057be <HAL_RCC_OscConfig+0x36e>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	2b05      	cmp	r3, #5
 800578a:	d10c      	bne.n	80057a6 <HAL_RCC_OscConfig+0x356>
 800578c:	4b61      	ldr	r3, [pc, #388]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	4a60      	ldr	r2, [pc, #384]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005792:	f043 0304 	orr.w	r3, r3, #4
 8005796:	6213      	str	r3, [r2, #32]
 8005798:	4b5e      	ldr	r3, [pc, #376]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	4a5d      	ldr	r2, [pc, #372]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 800579e:	f043 0301 	orr.w	r3, r3, #1
 80057a2:	6213      	str	r3, [r2, #32]
 80057a4:	e00b      	b.n	80057be <HAL_RCC_OscConfig+0x36e>
 80057a6:	4b5b      	ldr	r3, [pc, #364]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	4a5a      	ldr	r2, [pc, #360]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80057ac:	f023 0301 	bic.w	r3, r3, #1
 80057b0:	6213      	str	r3, [r2, #32]
 80057b2:	4b58      	ldr	r3, [pc, #352]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	4a57      	ldr	r2, [pc, #348]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80057b8:	f023 0304 	bic.w	r3, r3, #4
 80057bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d015      	beq.n	80057f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057c6:	f7fe fe2f 	bl	8004428 <HAL_GetTick>
 80057ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057cc:	e00a      	b.n	80057e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ce:	f7fe fe2b 	bl	8004428 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057dc:	4293      	cmp	r3, r2
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e0b1      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057e4:	4b4b      	ldr	r3, [pc, #300]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0ee      	beq.n	80057ce <HAL_RCC_OscConfig+0x37e>
 80057f0:	e014      	b.n	800581c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057f2:	f7fe fe19 	bl	8004428 <HAL_GetTick>
 80057f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057f8:	e00a      	b.n	8005810 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057fa:	f7fe fe15 	bl	8004428 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005808:	4293      	cmp	r3, r2
 800580a:	d901      	bls.n	8005810 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e09b      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005810:	4b40      	ldr	r3, [pc, #256]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1ee      	bne.n	80057fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800581c:	7dfb      	ldrb	r3, [r7, #23]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d105      	bne.n	800582e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005822:	4b3c      	ldr	r3, [pc, #240]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	4a3b      	ldr	r2, [pc, #236]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005828:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800582c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 8087 	beq.w	8005946 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005838:	4b36      	ldr	r3, [pc, #216]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f003 030c 	and.w	r3, r3, #12
 8005840:	2b08      	cmp	r3, #8
 8005842:	d061      	beq.n	8005908 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	2b02      	cmp	r3, #2
 800584a:	d146      	bne.n	80058da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800584c:	4b33      	ldr	r3, [pc, #204]	@ (800591c <HAL_RCC_OscConfig+0x4cc>)
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005852:	f7fe fde9 	bl	8004428 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800585a:	f7fe fde5 	bl	8004428 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e06d      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800586c:	4b29      	ldr	r3, [pc, #164]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1f0      	bne.n	800585a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005880:	d108      	bne.n	8005894 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005882:	4b24      	ldr	r3, [pc, #144]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	4921      	ldr	r1, [pc, #132]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005890:	4313      	orrs	r3, r2
 8005892:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005894:	4b1f      	ldr	r3, [pc, #124]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a19      	ldr	r1, [r3, #32]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a4:	430b      	orrs	r3, r1
 80058a6:	491b      	ldr	r1, [pc, #108]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058ac:	4b1b      	ldr	r3, [pc, #108]	@ (800591c <HAL_RCC_OscConfig+0x4cc>)
 80058ae:	2201      	movs	r2, #1
 80058b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b2:	f7fe fdb9 	bl	8004428 <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058b8:	e008      	b.n	80058cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ba:	f7fe fdb5 	bl	8004428 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e03d      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058cc:	4b11      	ldr	r3, [pc, #68]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0f0      	beq.n	80058ba <HAL_RCC_OscConfig+0x46a>
 80058d8:	e035      	b.n	8005946 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058da:	4b10      	ldr	r3, [pc, #64]	@ (800591c <HAL_RCC_OscConfig+0x4cc>)
 80058dc:	2200      	movs	r2, #0
 80058de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e0:	f7fe fda2 	bl	8004428 <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e8:	f7fe fd9e 	bl	8004428 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e026      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058fa:	4b06      	ldr	r3, [pc, #24]	@ (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f0      	bne.n	80058e8 <HAL_RCC_OscConfig+0x498>
 8005906:	e01e      	b.n	8005946 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d107      	bne.n	8005920 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e019      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
 8005914:	40021000 	.word	0x40021000
 8005918:	40007000 	.word	0x40007000
 800591c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005920:	4b0b      	ldr	r3, [pc, #44]	@ (8005950 <HAL_RCC_OscConfig+0x500>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	429a      	cmp	r2, r3
 8005932:	d106      	bne.n	8005942 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800593e:	429a      	cmp	r2, r3
 8005940:	d001      	beq.n	8005946 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40021000 	.word	0x40021000

08005954 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e0d0      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005968:	4b6a      	ldr	r3, [pc, #424]	@ (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d910      	bls.n	8005998 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005976:	4b67      	ldr	r3, [pc, #412]	@ (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f023 0207 	bic.w	r2, r3, #7
 800597e:	4965      	ldr	r1, [pc, #404]	@ (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	4313      	orrs	r3, r2
 8005984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005986:	4b63      	ldr	r3, [pc, #396]	@ (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d001      	beq.n	8005998 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e0b8      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d020      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059b0:	4b59      	ldr	r3, [pc, #356]	@ (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	4a58      	ldr	r2, [pc, #352]	@ (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 80059b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80059ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059c8:	4b53      	ldr	r3, [pc, #332]	@ (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	4a52      	ldr	r2, [pc, #328]	@ (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 80059ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80059d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059d4:	4b50      	ldr	r3, [pc, #320]	@ (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	494d      	ldr	r1, [pc, #308]	@ (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d040      	beq.n	8005a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d107      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059fa:	4b47      	ldr	r3, [pc, #284]	@ (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d115      	bne.n	8005a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e07f      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d107      	bne.n	8005a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a12:	4b41      	ldr	r3, [pc, #260]	@ (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d109      	bne.n	8005a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e073      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a22:	4b3d      	ldr	r3, [pc, #244]	@ (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e06b      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a32:	4b39      	ldr	r3, [pc, #228]	@ (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f023 0203 	bic.w	r2, r3, #3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	4936      	ldr	r1, [pc, #216]	@ (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a44:	f7fe fcf0 	bl	8004428 <HAL_GetTick>
 8005a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a4a:	e00a      	b.n	8005a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a4c:	f7fe fcec 	bl	8004428 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e053      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a62:	4b2d      	ldr	r3, [pc, #180]	@ (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f003 020c 	and.w	r2, r3, #12
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d1eb      	bne.n	8005a4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a74:	4b27      	ldr	r3, [pc, #156]	@ (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d210      	bcs.n	8005aa4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a82:	4b24      	ldr	r3, [pc, #144]	@ (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f023 0207 	bic.w	r2, r3, #7
 8005a8a:	4922      	ldr	r1, [pc, #136]	@ (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a92:	4b20      	ldr	r3, [pc, #128]	@ (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d001      	beq.n	8005aa4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e032      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d008      	beq.n	8005ac2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ab0:	4b19      	ldr	r3, [pc, #100]	@ (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	4916      	ldr	r1, [pc, #88]	@ (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0308 	and.w	r3, r3, #8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d009      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ace:	4b12      	ldr	r3, [pc, #72]	@ (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	490e      	ldr	r1, [pc, #56]	@ (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ae2:	f000 f821 	bl	8005b28 <HAL_RCC_GetSysClockFreq>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	091b      	lsrs	r3, r3, #4
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	490a      	ldr	r1, [pc, #40]	@ (8005b1c <HAL_RCC_ClockConfig+0x1c8>)
 8005af4:	5ccb      	ldrb	r3, [r1, r3]
 8005af6:	fa22 f303 	lsr.w	r3, r2, r3
 8005afa:	4a09      	ldr	r2, [pc, #36]	@ (8005b20 <HAL_RCC_ClockConfig+0x1cc>)
 8005afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005afe:	4b09      	ldr	r3, [pc, #36]	@ (8005b24 <HAL_RCC_ClockConfig+0x1d0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fe fc4e 	bl	80043a4 <HAL_InitTick>

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	40022000 	.word	0x40022000
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	08007e68 	.word	0x08007e68
 8005b20:	20000018 	.word	0x20000018
 8005b24:	2000001c 	.word	0x2000001c

08005b28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	2300      	movs	r3, #0
 8005b34:	60bb      	str	r3, [r7, #8]
 8005b36:	2300      	movs	r3, #0
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005b42:	4b1e      	ldr	r3, [pc, #120]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x94>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f003 030c 	and.w	r3, r3, #12
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d002      	beq.n	8005b58 <HAL_RCC_GetSysClockFreq+0x30>
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d003      	beq.n	8005b5e <HAL_RCC_GetSysClockFreq+0x36>
 8005b56:	e027      	b.n	8005ba8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b58:	4b19      	ldr	r3, [pc, #100]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b5a:	613b      	str	r3, [r7, #16]
      break;
 8005b5c:	e027      	b.n	8005bae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	0c9b      	lsrs	r3, r3, #18
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	4a17      	ldr	r2, [pc, #92]	@ (8005bc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b68:	5cd3      	ldrb	r3, [r2, r3]
 8005b6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d010      	beq.n	8005b98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b76:	4b11      	ldr	r3, [pc, #68]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x94>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	0c5b      	lsrs	r3, r3, #17
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	4a11      	ldr	r2, [pc, #68]	@ (8005bc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005b82:	5cd3      	ldrb	r3, [r2, r3]
 8005b84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a0d      	ldr	r2, [pc, #52]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b8a:	fb03 f202 	mul.w	r2, r3, r2
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b94:	617b      	str	r3, [r7, #20]
 8005b96:	e004      	b.n	8005ba2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a0c      	ldr	r2, [pc, #48]	@ (8005bcc <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ba0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	613b      	str	r3, [r7, #16]
      break;
 8005ba6:	e002      	b.n	8005bae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ba8:	4b05      	ldr	r3, [pc, #20]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005baa:	613b      	str	r3, [r7, #16]
      break;
 8005bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bae:	693b      	ldr	r3, [r7, #16]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	371c      	adds	r7, #28
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	007a1200 	.word	0x007a1200
 8005bc4:	08007e80 	.word	0x08007e80
 8005bc8:	08007e90 	.word	0x08007e90
 8005bcc:	003d0900 	.word	0x003d0900

08005bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bd4:	4b02      	ldr	r3, [pc, #8]	@ (8005be0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bc80      	pop	{r7}
 8005bde:	4770      	bx	lr
 8005be0:	20000018 	.word	0x20000018

08005be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005be8:	f7ff fff2 	bl	8005bd0 <HAL_RCC_GetHCLKFreq>
 8005bec:	4602      	mov	r2, r0
 8005bee:	4b05      	ldr	r3, [pc, #20]	@ (8005c04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	0a1b      	lsrs	r3, r3, #8
 8005bf4:	f003 0307 	and.w	r3, r3, #7
 8005bf8:	4903      	ldr	r1, [pc, #12]	@ (8005c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bfa:	5ccb      	ldrb	r3, [r1, r3]
 8005bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40021000 	.word	0x40021000
 8005c08:	08007e78 	.word	0x08007e78

08005c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c10:	f7ff ffde 	bl	8005bd0 <HAL_RCC_GetHCLKFreq>
 8005c14:	4602      	mov	r2, r0
 8005c16:	4b05      	ldr	r3, [pc, #20]	@ (8005c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	0adb      	lsrs	r3, r3, #11
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	4903      	ldr	r1, [pc, #12]	@ (8005c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c22:	5ccb      	ldrb	r3, [r1, r3]
 8005c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	40021000 	.word	0x40021000
 8005c30:	08007e78 	.word	0x08007e78

08005c34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c68 <RCC_Delay+0x34>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a0a      	ldr	r2, [pc, #40]	@ (8005c6c <RCC_Delay+0x38>)
 8005c42:	fba2 2303 	umull	r2, r3, r2, r3
 8005c46:	0a5b      	lsrs	r3, r3, #9
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	fb02 f303 	mul.w	r3, r2, r3
 8005c4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005c50:	bf00      	nop
  }
  while (Delay --);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	1e5a      	subs	r2, r3, #1
 8005c56:	60fa      	str	r2, [r7, #12]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1f9      	bne.n	8005c50 <RCC_Delay+0x1c>
}
 8005c5c:	bf00      	nop
 8005c5e:	bf00      	nop
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bc80      	pop	{r7}
 8005c66:	4770      	bx	lr
 8005c68:	20000018 	.word	0x20000018
 8005c6c:	10624dd3 	.word	0x10624dd3

08005c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	613b      	str	r3, [r7, #16]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d07d      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c90:	4b4f      	ldr	r3, [pc, #316]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10d      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c9c:	4b4c      	ldr	r3, [pc, #304]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	4a4b      	ldr	r2, [pc, #300]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ca2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ca6:	61d3      	str	r3, [r2, #28]
 8005ca8:	4b49      	ldr	r3, [pc, #292]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cb0:	60bb      	str	r3, [r7, #8]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb8:	4b46      	ldr	r3, [pc, #280]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d118      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cc4:	4b43      	ldr	r3, [pc, #268]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a42      	ldr	r2, [pc, #264]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cd0:	f7fe fbaa 	bl	8004428 <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd6:	e008      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cd8:	f7fe fba6 	bl	8004428 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b64      	cmp	r3, #100	@ 0x64
 8005ce4:	d901      	bls.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e06d      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cea:	4b3a      	ldr	r3, [pc, #232]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0f0      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cf6:	4b36      	ldr	r3, [pc, #216]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cfe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d02e      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d027      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d14:	4b2e      	ldr	r3, [pc, #184]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d24:	4b2c      	ldr	r3, [pc, #176]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d2a:	4a29      	ldr	r2, [pc, #164]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d014      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d3a:	f7fe fb75 	bl	8004428 <HAL_GetTick>
 8005d3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d40:	e00a      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d42:	f7fe fb71 	bl	8004428 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e036      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d58:	4b1d      	ldr	r3, [pc, #116]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0ee      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d64:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	4917      	ldr	r1, [pc, #92]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005d76:	7dfb      	ldrb	r3, [r7, #23]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d105      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d7c:	4b14      	ldr	r3, [pc, #80]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	4a13      	ldr	r2, [pc, #76]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d008      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d94:	4b0e      	ldr	r3, [pc, #56]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	490b      	ldr	r1, [pc, #44]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0310 	and.w	r3, r3, #16
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d008      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005db2:	4b07      	ldr	r3, [pc, #28]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	4904      	ldr	r1, [pc, #16]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	40007000 	.word	0x40007000
 8005dd8:	42420440 	.word	0x42420440

08005ddc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	2300      	movs	r3, #0
 8005dea:	61fb      	str	r3, [r7, #28]
 8005dec:	2300      	movs	r3, #0
 8005dee:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	2300      	movs	r3, #0
 8005df6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b10      	cmp	r3, #16
 8005dfc:	d00a      	beq.n	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b10      	cmp	r3, #16
 8005e02:	f200 808a 	bhi.w	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d045      	beq.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d075      	beq.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005e12:	e082      	b.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005e14:	4b46      	ldr	r3, [pc, #280]	@ (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005e1a:	4b45      	ldr	r3, [pc, #276]	@ (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d07b      	beq.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	0c9b      	lsrs	r3, r3, #18
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	4a41      	ldr	r2, [pc, #260]	@ (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005e30:	5cd3      	ldrb	r3, [r2, r3]
 8005e32:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d015      	beq.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e3e:	4b3c      	ldr	r3, [pc, #240]	@ (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	0c5b      	lsrs	r3, r3, #17
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	4a3b      	ldr	r2, [pc, #236]	@ (8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005e4a:	5cd3      	ldrb	r3, [r2, r3]
 8005e4c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00d      	beq.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005e58:	4a38      	ldr	r2, [pc, #224]	@ (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	fb02 f303 	mul.w	r3, r2, r3
 8005e66:	61fb      	str	r3, [r7, #28]
 8005e68:	e004      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	4a34      	ldr	r2, [pc, #208]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005e6e:	fb02 f303 	mul.w	r3, r2, r3
 8005e72:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005e74:	4b2e      	ldr	r3, [pc, #184]	@ (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e80:	d102      	bne.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	61bb      	str	r3, [r7, #24]
      break;
 8005e86:	e04a      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	4a2d      	ldr	r2, [pc, #180]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e92:	085b      	lsrs	r3, r3, #1
 8005e94:	61bb      	str	r3, [r7, #24]
      break;
 8005e96:	e042      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005e98:	4b25      	ldr	r3, [pc, #148]	@ (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ea4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ea8:	d108      	bne.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d003      	beq.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005eb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eb8:	61bb      	str	r3, [r7, #24]
 8005eba:	e01f      	b.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ec2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ec6:	d109      	bne.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005ec8:	4b19      	ldr	r3, [pc, #100]	@ (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005ed4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005ed8:	61bb      	str	r3, [r7, #24]
 8005eda:	e00f      	b.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ee2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ee6:	d11c      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005ee8:	4b11      	ldr	r3, [pc, #68]	@ (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d016      	beq.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005ef4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005ef8:	61bb      	str	r3, [r7, #24]
      break;
 8005efa:	e012      	b.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005efc:	e011      	b.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005efe:	f7ff fe85 	bl	8005c0c <HAL_RCC_GetPCLK2Freq>
 8005f02:	4602      	mov	r2, r0
 8005f04:	4b0a      	ldr	r3, [pc, #40]	@ (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	0b9b      	lsrs	r3, r3, #14
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	3301      	adds	r3, #1
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f16:	61bb      	str	r3, [r7, #24]
      break;
 8005f18:	e004      	b.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005f1a:	bf00      	nop
 8005f1c:	e002      	b.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005f1e:	bf00      	nop
 8005f20:	e000      	b.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005f22:	bf00      	nop
    }
  }
  return (frequency);
 8005f24:	69bb      	ldr	r3, [r7, #24]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3720      	adds	r7, #32
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40021000 	.word	0x40021000
 8005f34:	08007e94 	.word	0x08007e94
 8005f38:	08007ea4 	.word	0x08007ea4
 8005f3c:	007a1200 	.word	0x007a1200
 8005f40:	003d0900 	.word	0x003d0900
 8005f44:	aaaaaaab 	.word	0xaaaaaaab

08005f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e041      	b.n	8005fde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fe f828 	bl	8003fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3304      	adds	r3, #4
 8005f84:	4619      	mov	r1, r3
 8005f86:	4610      	mov	r0, r2
 8005f88:	f000 fd16 	bl	80069b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b082      	sub	sp, #8
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e041      	b.n	800607c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b00      	cmp	r3, #0
 8006002:	d106      	bne.n	8006012 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f839 	bl	8006084 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2202      	movs	r2, #2
 8006016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3304      	adds	r3, #4
 8006022:	4619      	mov	r1, r3
 8006024:	4610      	mov	r0, r2
 8006026:	f000 fcc7 	bl	80069b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	bc80      	pop	{r7}
 8006094:	4770      	bx	lr
	...

08006098 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d109      	bne.n	80060bc <HAL_TIM_PWM_Start+0x24>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	bf14      	ite	ne
 80060b4:	2301      	movne	r3, #1
 80060b6:	2300      	moveq	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	e022      	b.n	8006102 <HAL_TIM_PWM_Start+0x6a>
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	2b04      	cmp	r3, #4
 80060c0:	d109      	bne.n	80060d6 <HAL_TIM_PWM_Start+0x3e>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	bf14      	ite	ne
 80060ce:	2301      	movne	r3, #1
 80060d0:	2300      	moveq	r3, #0
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	e015      	b.n	8006102 <HAL_TIM_PWM_Start+0x6a>
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d109      	bne.n	80060f0 <HAL_TIM_PWM_Start+0x58>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	bf14      	ite	ne
 80060e8:	2301      	movne	r3, #1
 80060ea:	2300      	moveq	r3, #0
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	e008      	b.n	8006102 <HAL_TIM_PWM_Start+0x6a>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	bf14      	ite	ne
 80060fc:	2301      	movne	r3, #1
 80060fe:	2300      	moveq	r3, #0
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e05e      	b.n	80061c8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d104      	bne.n	800611a <HAL_TIM_PWM_Start+0x82>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006118:	e013      	b.n	8006142 <HAL_TIM_PWM_Start+0xaa>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b04      	cmp	r3, #4
 800611e:	d104      	bne.n	800612a <HAL_TIM_PWM_Start+0x92>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006128:	e00b      	b.n	8006142 <HAL_TIM_PWM_Start+0xaa>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b08      	cmp	r3, #8
 800612e:	d104      	bne.n	800613a <HAL_TIM_PWM_Start+0xa2>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006138:	e003      	b.n	8006142 <HAL_TIM_PWM_Start+0xaa>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2202      	movs	r2, #2
 800613e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2201      	movs	r2, #1
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fec0 	bl	8006ed0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a1e      	ldr	r2, [pc, #120]	@ (80061d0 <HAL_TIM_PWM_Start+0x138>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d107      	bne.n	800616a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006168:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a18      	ldr	r2, [pc, #96]	@ (80061d0 <HAL_TIM_PWM_Start+0x138>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d00e      	beq.n	8006192 <HAL_TIM_PWM_Start+0xfa>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800617c:	d009      	beq.n	8006192 <HAL_TIM_PWM_Start+0xfa>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a14      	ldr	r2, [pc, #80]	@ (80061d4 <HAL_TIM_PWM_Start+0x13c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d004      	beq.n	8006192 <HAL_TIM_PWM_Start+0xfa>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a12      	ldr	r2, [pc, #72]	@ (80061d8 <HAL_TIM_PWM_Start+0x140>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d111      	bne.n	80061b6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2b06      	cmp	r3, #6
 80061a2:	d010      	beq.n	80061c6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f042 0201 	orr.w	r2, r2, #1
 80061b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b4:	e007      	b.n	80061c6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f042 0201 	orr.w	r2, r2, #1
 80061c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	40012c00 	.word	0x40012c00
 80061d4:	40000400 	.word	0x40000400
 80061d8:	40000800 	.word	0x40000800

080061dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e093      	b.n	8006318 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d106      	bne.n	800620a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7fd fef9 	bl	8003ffc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2202      	movs	r2, #2
 800620e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	6812      	ldr	r2, [r2, #0]
 800621c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006220:	f023 0307 	bic.w	r3, r3, #7
 8006224:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	3304      	adds	r3, #4
 800622e:	4619      	mov	r1, r3
 8006230:	4610      	mov	r0, r2
 8006232:	f000 fbc1 	bl	80069b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	4313      	orrs	r3, r2
 8006256:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800625e:	f023 0303 	bic.w	r3, r3, #3
 8006262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	021b      	lsls	r3, r3, #8
 800626e:	4313      	orrs	r3, r2
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800627c:	f023 030c 	bic.w	r3, r3, #12
 8006280:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006288:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800628c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	021b      	lsls	r3, r3, #8
 8006298:	4313      	orrs	r3, r2
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	4313      	orrs	r3, r2
 800629e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	011a      	lsls	r2, r3, #4
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	031b      	lsls	r3, r3, #12
 80062ac:	4313      	orrs	r3, r2
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80062ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	011b      	lsls	r3, r3, #4
 80062c6:	4313      	orrs	r3, r2
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006330:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006338:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006340:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006348:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d110      	bne.n	8006372 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d102      	bne.n	800635c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006356:	7b7b      	ldrb	r3, [r7, #13]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d001      	beq.n	8006360 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e089      	b.n	8006474 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006370:	e031      	b.n	80063d6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b04      	cmp	r3, #4
 8006376:	d110      	bne.n	800639a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006378:	7bbb      	ldrb	r3, [r7, #14]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d102      	bne.n	8006384 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800637e:	7b3b      	ldrb	r3, [r7, #12]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d001      	beq.n	8006388 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e075      	b.n	8006474 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2202      	movs	r2, #2
 800638c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2202      	movs	r2, #2
 8006394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006398:	e01d      	b.n	80063d6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d108      	bne.n	80063b2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d105      	bne.n	80063b2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063a6:	7b7b      	ldrb	r3, [r7, #13]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d102      	bne.n	80063b2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80063ac:	7b3b      	ldrb	r3, [r7, #12]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d001      	beq.n	80063b6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e05e      	b.n	8006474 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2202      	movs	r2, #2
 80063ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2202      	movs	r2, #2
 80063c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2202      	movs	r2, #2
 80063ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2202      	movs	r2, #2
 80063d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <HAL_TIM_Encoder_Start_IT+0xc4>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d010      	beq.n	8006404 <HAL_TIM_Encoder_Start_IT+0xe4>
 80063e2:	e01f      	b.n	8006424 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2201      	movs	r2, #1
 80063ea:	2100      	movs	r1, #0
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 fd6f 	bl	8006ed0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68da      	ldr	r2, [r3, #12]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f042 0202 	orr.w	r2, r2, #2
 8006400:	60da      	str	r2, [r3, #12]
      break;
 8006402:	e02e      	b.n	8006462 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2201      	movs	r2, #1
 800640a:	2104      	movs	r1, #4
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fd5f 	bl	8006ed0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68da      	ldr	r2, [r3, #12]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f042 0204 	orr.w	r2, r2, #4
 8006420:	60da      	str	r2, [r3, #12]
      break;
 8006422:	e01e      	b.n	8006462 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2201      	movs	r2, #1
 800642a:	2100      	movs	r1, #0
 800642c:	4618      	mov	r0, r3
 800642e:	f000 fd4f 	bl	8006ed0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2201      	movs	r2, #1
 8006438:	2104      	movs	r1, #4
 800643a:	4618      	mov	r0, r3
 800643c:	f000 fd48 	bl	8006ed0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0202 	orr.w	r2, r2, #2
 800644e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0204 	orr.w	r2, r2, #4
 800645e:	60da      	str	r2, [r3, #12]
      break;
 8006460:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0201 	orr.w	r2, r2, #1
 8006470:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d020      	beq.n	80064e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d01b      	beq.n	80064e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f06f 0202 	mvn.w	r2, #2
 80064b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fb f9dc 	bl	8001884 <HAL_TIM_IC_CaptureCallback>
 80064cc:	e005      	b.n	80064da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa56 	bl	8006980 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fa5c 	bl	8006992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d020      	beq.n	800652c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d01b      	beq.n	800652c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f06f 0204 	mvn.w	r2, #4
 80064fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2202      	movs	r2, #2
 8006502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7fb f9b6 	bl	8001884 <HAL_TIM_IC_CaptureCallback>
 8006518:	e005      	b.n	8006526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fa30 	bl	8006980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fa36 	bl	8006992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f003 0308 	and.w	r3, r3, #8
 8006532:	2b00      	cmp	r3, #0
 8006534:	d020      	beq.n	8006578 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f003 0308 	and.w	r3, r3, #8
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01b      	beq.n	8006578 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f06f 0208 	mvn.w	r2, #8
 8006548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2204      	movs	r2, #4
 800654e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	f003 0303 	and.w	r3, r3, #3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7fb f990 	bl	8001884 <HAL_TIM_IC_CaptureCallback>
 8006564:	e005      	b.n	8006572 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fa0a 	bl	8006980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fa10 	bl	8006992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f003 0310 	and.w	r3, r3, #16
 800657e:	2b00      	cmp	r3, #0
 8006580:	d020      	beq.n	80065c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f003 0310 	and.w	r3, r3, #16
 8006588:	2b00      	cmp	r3, #0
 800658a:	d01b      	beq.n	80065c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f06f 0210 	mvn.w	r2, #16
 8006594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2208      	movs	r2, #8
 800659a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7fb f96a 	bl	8001884 <HAL_TIM_IC_CaptureCallback>
 80065b0:	e005      	b.n	80065be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f9e4 	bl	8006980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f9ea 	bl	8006992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00c      	beq.n	80065e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d007      	beq.n	80065e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0201 	mvn.w	r2, #1
 80065e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f9c3 	bl	800696e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00c      	beq.n	800660c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d007      	beq.n	800660c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fced 	bl	8006fe6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00c      	beq.n	8006630 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800661c:	2b00      	cmp	r3, #0
 800661e:	d007      	beq.n	8006630 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f9ba 	bl	80069a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00c      	beq.n	8006654 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f003 0320 	and.w	r3, r3, #32
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f06f 0220 	mvn.w	r2, #32
 800664c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fcc0 	bl	8006fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006654:	bf00      	nop
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006668:	2300      	movs	r3, #0
 800666a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006672:	2b01      	cmp	r3, #1
 8006674:	d101      	bne.n	800667a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006676:	2302      	movs	r3, #2
 8006678:	e0ae      	b.n	80067d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b0c      	cmp	r3, #12
 8006686:	f200 809f 	bhi.w	80067c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800668a:	a201      	add	r2, pc, #4	@ (adr r2, 8006690 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800668c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006690:	080066c5 	.word	0x080066c5
 8006694:	080067c9 	.word	0x080067c9
 8006698:	080067c9 	.word	0x080067c9
 800669c:	080067c9 	.word	0x080067c9
 80066a0:	08006705 	.word	0x08006705
 80066a4:	080067c9 	.word	0x080067c9
 80066a8:	080067c9 	.word	0x080067c9
 80066ac:	080067c9 	.word	0x080067c9
 80066b0:	08006747 	.word	0x08006747
 80066b4:	080067c9 	.word	0x080067c9
 80066b8:	080067c9 	.word	0x080067c9
 80066bc:	080067c9 	.word	0x080067c9
 80066c0:	08006787 	.word	0x08006787
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68b9      	ldr	r1, [r7, #8]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 f9e2 	bl	8006a94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699a      	ldr	r2, [r3, #24]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0208 	orr.w	r2, r2, #8
 80066de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699a      	ldr	r2, [r3, #24]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0204 	bic.w	r2, r2, #4
 80066ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6999      	ldr	r1, [r3, #24]
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	691a      	ldr	r2, [r3, #16]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	619a      	str	r2, [r3, #24]
      break;
 8006702:	e064      	b.n	80067ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68b9      	ldr	r1, [r7, #8]
 800670a:	4618      	mov	r0, r3
 800670c:	f000 fa28 	bl	8006b60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	699a      	ldr	r2, [r3, #24]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800671e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699a      	ldr	r2, [r3, #24]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800672e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6999      	ldr	r1, [r3, #24]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	021a      	lsls	r2, r3, #8
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	619a      	str	r2, [r3, #24]
      break;
 8006744:	e043      	b.n	80067ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68b9      	ldr	r1, [r7, #8]
 800674c:	4618      	mov	r0, r3
 800674e:	f000 fa71 	bl	8006c34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69da      	ldr	r2, [r3, #28]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f042 0208 	orr.w	r2, r2, #8
 8006760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	69da      	ldr	r2, [r3, #28]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f022 0204 	bic.w	r2, r2, #4
 8006770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	69d9      	ldr	r1, [r3, #28]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	691a      	ldr	r2, [r3, #16]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	430a      	orrs	r2, r1
 8006782:	61da      	str	r2, [r3, #28]
      break;
 8006784:	e023      	b.n	80067ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68b9      	ldr	r1, [r7, #8]
 800678c:	4618      	mov	r0, r3
 800678e:	f000 fabb 	bl	8006d08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	69da      	ldr	r2, [r3, #28]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69da      	ldr	r2, [r3, #28]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69d9      	ldr	r1, [r3, #28]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	021a      	lsls	r2, r3, #8
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	61da      	str	r2, [r3, #28]
      break;
 80067c6:	e002      	b.n	80067ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	75fb      	strb	r3, [r7, #23]
      break;
 80067cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3718      	adds	r7, #24
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d101      	bne.n	80067fc <HAL_TIM_ConfigClockSource+0x1c>
 80067f8:	2302      	movs	r3, #2
 80067fa:	e0b4      	b.n	8006966 <HAL_TIM_ConfigClockSource+0x186>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800681a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006822:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006834:	d03e      	beq.n	80068b4 <HAL_TIM_ConfigClockSource+0xd4>
 8006836:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800683a:	f200 8087 	bhi.w	800694c <HAL_TIM_ConfigClockSource+0x16c>
 800683e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006842:	f000 8086 	beq.w	8006952 <HAL_TIM_ConfigClockSource+0x172>
 8006846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800684a:	d87f      	bhi.n	800694c <HAL_TIM_ConfigClockSource+0x16c>
 800684c:	2b70      	cmp	r3, #112	@ 0x70
 800684e:	d01a      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0xa6>
 8006850:	2b70      	cmp	r3, #112	@ 0x70
 8006852:	d87b      	bhi.n	800694c <HAL_TIM_ConfigClockSource+0x16c>
 8006854:	2b60      	cmp	r3, #96	@ 0x60
 8006856:	d050      	beq.n	80068fa <HAL_TIM_ConfigClockSource+0x11a>
 8006858:	2b60      	cmp	r3, #96	@ 0x60
 800685a:	d877      	bhi.n	800694c <HAL_TIM_ConfigClockSource+0x16c>
 800685c:	2b50      	cmp	r3, #80	@ 0x50
 800685e:	d03c      	beq.n	80068da <HAL_TIM_ConfigClockSource+0xfa>
 8006860:	2b50      	cmp	r3, #80	@ 0x50
 8006862:	d873      	bhi.n	800694c <HAL_TIM_ConfigClockSource+0x16c>
 8006864:	2b40      	cmp	r3, #64	@ 0x40
 8006866:	d058      	beq.n	800691a <HAL_TIM_ConfigClockSource+0x13a>
 8006868:	2b40      	cmp	r3, #64	@ 0x40
 800686a:	d86f      	bhi.n	800694c <HAL_TIM_ConfigClockSource+0x16c>
 800686c:	2b30      	cmp	r3, #48	@ 0x30
 800686e:	d064      	beq.n	800693a <HAL_TIM_ConfigClockSource+0x15a>
 8006870:	2b30      	cmp	r3, #48	@ 0x30
 8006872:	d86b      	bhi.n	800694c <HAL_TIM_ConfigClockSource+0x16c>
 8006874:	2b20      	cmp	r3, #32
 8006876:	d060      	beq.n	800693a <HAL_TIM_ConfigClockSource+0x15a>
 8006878:	2b20      	cmp	r3, #32
 800687a:	d867      	bhi.n	800694c <HAL_TIM_ConfigClockSource+0x16c>
 800687c:	2b00      	cmp	r3, #0
 800687e:	d05c      	beq.n	800693a <HAL_TIM_ConfigClockSource+0x15a>
 8006880:	2b10      	cmp	r3, #16
 8006882:	d05a      	beq.n	800693a <HAL_TIM_ConfigClockSource+0x15a>
 8006884:	e062      	b.n	800694c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006896:	f000 fafc 	bl	8006e92 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80068a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	609a      	str	r2, [r3, #8]
      break;
 80068b2:	e04f      	b.n	8006954 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068c4:	f000 fae5 	bl	8006e92 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689a      	ldr	r2, [r3, #8]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068d6:	609a      	str	r2, [r3, #8]
      break;
 80068d8:	e03c      	b.n	8006954 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068e6:	461a      	mov	r2, r3
 80068e8:	f000 fa5c 	bl	8006da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2150      	movs	r1, #80	@ 0x50
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 fab3 	bl	8006e5e <TIM_ITRx_SetConfig>
      break;
 80068f8:	e02c      	b.n	8006954 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006906:	461a      	mov	r2, r3
 8006908:	f000 fa7a 	bl	8006e00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2160      	movs	r1, #96	@ 0x60
 8006912:	4618      	mov	r0, r3
 8006914:	f000 faa3 	bl	8006e5e <TIM_ITRx_SetConfig>
      break;
 8006918:	e01c      	b.n	8006954 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006926:	461a      	mov	r2, r3
 8006928:	f000 fa3c 	bl	8006da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2140      	movs	r1, #64	@ 0x40
 8006932:	4618      	mov	r0, r3
 8006934:	f000 fa93 	bl	8006e5e <TIM_ITRx_SetConfig>
      break;
 8006938:	e00c      	b.n	8006954 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4619      	mov	r1, r3
 8006944:	4610      	mov	r0, r2
 8006946:	f000 fa8a 	bl	8006e5e <TIM_ITRx_SetConfig>
      break;
 800694a:	e003      	b.n	8006954 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	73fb      	strb	r3, [r7, #15]
      break;
 8006950:	e000      	b.n	8006954 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006952:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006964:	7bfb      	ldrb	r3, [r7, #15]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	bc80      	pop	{r7}
 800697e:	4770      	bx	lr

08006980 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	bc80      	pop	{r7}
 8006990:	4770      	bx	lr

08006992 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	bc80      	pop	{r7}
 80069a2:	4770      	bx	lr

080069a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bc80      	pop	{r7}
 80069b4:	4770      	bx	lr
	...

080069b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a2f      	ldr	r2, [pc, #188]	@ (8006a88 <TIM_Base_SetConfig+0xd0>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d00b      	beq.n	80069e8 <TIM_Base_SetConfig+0x30>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069d6:	d007      	beq.n	80069e8 <TIM_Base_SetConfig+0x30>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a2c      	ldr	r2, [pc, #176]	@ (8006a8c <TIM_Base_SetConfig+0xd4>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d003      	beq.n	80069e8 <TIM_Base_SetConfig+0x30>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a2b      	ldr	r2, [pc, #172]	@ (8006a90 <TIM_Base_SetConfig+0xd8>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d108      	bne.n	80069fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a22      	ldr	r2, [pc, #136]	@ (8006a88 <TIM_Base_SetConfig+0xd0>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d00b      	beq.n	8006a1a <TIM_Base_SetConfig+0x62>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a08:	d007      	beq.n	8006a1a <TIM_Base_SetConfig+0x62>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8006a8c <TIM_Base_SetConfig+0xd4>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d003      	beq.n	8006a1a <TIM_Base_SetConfig+0x62>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a1e      	ldr	r2, [pc, #120]	@ (8006a90 <TIM_Base_SetConfig+0xd8>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d108      	bne.n	8006a2c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a0d      	ldr	r2, [pc, #52]	@ (8006a88 <TIM_Base_SetConfig+0xd0>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d103      	bne.n	8006a60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	691a      	ldr	r2, [r3, #16]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d005      	beq.n	8006a7e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	f023 0201 	bic.w	r2, r3, #1
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	611a      	str	r2, [r3, #16]
  }
}
 8006a7e:	bf00      	nop
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bc80      	pop	{r7}
 8006a86:	4770      	bx	lr
 8006a88:	40012c00 	.word	0x40012c00
 8006a8c:	40000400 	.word	0x40000400
 8006a90:	40000800 	.word	0x40000800

08006a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	f023 0201 	bic.w	r2, r3, #1
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f023 0303 	bic.w	r3, r3, #3
 8006aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f023 0302 	bic.w	r3, r3, #2
 8006adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a1c      	ldr	r2, [pc, #112]	@ (8006b5c <TIM_OC1_SetConfig+0xc8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d10c      	bne.n	8006b0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f023 0308 	bic.w	r3, r3, #8
 8006af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f023 0304 	bic.w	r3, r3, #4
 8006b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a13      	ldr	r2, [pc, #76]	@ (8006b5c <TIM_OC1_SetConfig+0xc8>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d111      	bne.n	8006b36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	621a      	str	r2, [r3, #32]
}
 8006b50:	bf00      	nop
 8006b52:	371c      	adds	r7, #28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bc80      	pop	{r7}
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40012c00 	.word	0x40012c00

08006b60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	f023 0210 	bic.w	r2, r3, #16
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	021b      	lsls	r3, r3, #8
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f023 0320 	bic.w	r3, r3, #32
 8006baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a1d      	ldr	r2, [pc, #116]	@ (8006c30 <TIM_OC2_SetConfig+0xd0>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d10d      	bne.n	8006bdc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	011b      	lsls	r3, r3, #4
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a14      	ldr	r2, [pc, #80]	@ (8006c30 <TIM_OC2_SetConfig+0xd0>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d113      	bne.n	8006c0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	621a      	str	r2, [r3, #32]
}
 8006c26:	bf00      	nop
 8006c28:	371c      	adds	r7, #28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bc80      	pop	{r7}
 8006c2e:	4770      	bx	lr
 8006c30:	40012c00 	.word	0x40012c00

08006c34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f023 0303 	bic.w	r3, r3, #3
 8006c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	021b      	lsls	r3, r3, #8
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8006d04 <TIM_OC3_SetConfig+0xd0>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d10d      	bne.n	8006cae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	021b      	lsls	r3, r3, #8
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a14      	ldr	r2, [pc, #80]	@ (8006d04 <TIM_OC3_SetConfig+0xd0>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d113      	bne.n	8006cde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	011b      	lsls	r3, r3, #4
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	011b      	lsls	r3, r3, #4
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	621a      	str	r2, [r3, #32]
}
 8006cf8:	bf00      	nop
 8006cfa:	371c      	adds	r7, #28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bc80      	pop	{r7}
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	40012c00 	.word	0x40012c00

08006d08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	021b      	lsls	r3, r3, #8
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	031b      	lsls	r3, r3, #12
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a0f      	ldr	r2, [pc, #60]	@ (8006da0 <TIM_OC4_SetConfig+0x98>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d109      	bne.n	8006d7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	019b      	lsls	r3, r3, #6
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	621a      	str	r2, [r3, #32]
}
 8006d96:	bf00      	nop
 8006d98:	371c      	adds	r7, #28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bc80      	pop	{r7}
 8006d9e:	4770      	bx	lr
 8006da0:	40012c00 	.word	0x40012c00

08006da4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	f023 0201 	bic.w	r2, r3, #1
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f023 030a 	bic.w	r3, r3, #10
 8006de0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	621a      	str	r2, [r3, #32]
}
 8006df6:	bf00      	nop
 8006df8:	371c      	adds	r7, #28
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bc80      	pop	{r7}
 8006dfe:	4770      	bx	lr

08006e00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6a1b      	ldr	r3, [r3, #32]
 8006e10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	f023 0210 	bic.w	r2, r3, #16
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	031b      	lsls	r3, r3, #12
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e3c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	011b      	lsls	r3, r3, #4
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	621a      	str	r2, [r3, #32]
}
 8006e54:	bf00      	nop
 8006e56:	371c      	adds	r7, #28
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bc80      	pop	{r7}
 8006e5c:	4770      	bx	lr

08006e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b085      	sub	sp, #20
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	f043 0307 	orr.w	r3, r3, #7
 8006e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	609a      	str	r2, [r3, #8]
}
 8006e88:	bf00      	nop
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bc80      	pop	{r7}
 8006e90:	4770      	bx	lr

08006e92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b087      	sub	sp, #28
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	60f8      	str	r0, [r7, #12]
 8006e9a:	60b9      	str	r1, [r7, #8]
 8006e9c:	607a      	str	r2, [r7, #4]
 8006e9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006eac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	021a      	lsls	r2, r3, #8
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	609a      	str	r2, [r3, #8]
}
 8006ec6:	bf00      	nop
 8006ec8:	371c      	adds	r7, #28
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bc80      	pop	{r7}
 8006ece:	4770      	bx	lr

08006ed0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	f003 031f 	and.w	r3, r3, #31
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6a1a      	ldr	r2, [r3, #32]
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	43db      	mvns	r3, r3
 8006ef2:	401a      	ands	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6a1a      	ldr	r2, [r3, #32]
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f003 031f 	and.w	r3, r3, #31
 8006f02:	6879      	ldr	r1, [r7, #4]
 8006f04:	fa01 f303 	lsl.w	r3, r1, r3
 8006f08:	431a      	orrs	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	621a      	str	r2, [r3, #32]
}
 8006f0e:	bf00      	nop
 8006f10:	371c      	adds	r7, #28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bc80      	pop	{r7}
 8006f16:	4770      	bx	lr

08006f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d101      	bne.n	8006f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	e046      	b.n	8006fbe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a16      	ldr	r2, [pc, #88]	@ (8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d00e      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f7c:	d009      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a12      	ldr	r2, [pc, #72]	@ (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d004      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a10      	ldr	r2, [pc, #64]	@ (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d10c      	bne.n	8006fac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bc80      	pop	{r7}
 8006fc6:	4770      	bx	lr
 8006fc8:	40012c00 	.word	0x40012c00
 8006fcc:	40000400 	.word	0x40000400
 8006fd0:	40000800 	.word	0x40000800

08006fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bc80      	pop	{r7}
 8006fe4:	4770      	bx	lr

08006fe6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b083      	sub	sp, #12
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fee:	bf00      	nop
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bc80      	pop	{r7}
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e042      	b.n	8007090 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d106      	bne.n	8007024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7fd f898 	bl	8004154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2224      	movs	r2, #36	@ 0x24
 8007028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68da      	ldr	r2, [r3, #12]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800703a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fd09 	bl	8007a54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	691a      	ldr	r2, [r3, #16]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	695a      	ldr	r2, [r3, #20]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2220      	movs	r2, #32
 8007084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	4613      	mov	r3, r2
 80070a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b20      	cmp	r3, #32
 80070b0:	d121      	bne.n	80070f6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <HAL_UART_Transmit_IT+0x26>
 80070b8:	88fb      	ldrh	r3, [r7, #6]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e01a      	b.n	80070f8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	88fa      	ldrh	r2, [r7, #6]
 80070cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	88fa      	ldrh	r2, [r7, #6]
 80070d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2221      	movs	r2, #33	@ 0x21
 80070de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68da      	ldr	r2, [r3, #12]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80070f0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	e000      	b.n	80070f8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80070f6:	2302      	movs	r3, #2
  }
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bc80      	pop	{r7}
 8007100:	4770      	bx	lr

08007102 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	60f8      	str	r0, [r7, #12]
 800710a:	60b9      	str	r1, [r7, #8]
 800710c:	4613      	mov	r3, r2
 800710e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b20      	cmp	r3, #32
 800711a:	d112      	bne.n	8007142 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <HAL_UART_Receive_IT+0x26>
 8007122:	88fb      	ldrh	r3, [r7, #6]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e00b      	b.n	8007144 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007132:	88fb      	ldrh	r3, [r7, #6]
 8007134:	461a      	mov	r2, r3
 8007136:	68b9      	ldr	r1, [r7, #8]
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f000 fab6 	bl	80076aa <UART_Start_Receive_IT>
 800713e:	4603      	mov	r3, r0
 8007140:	e000      	b.n	8007144 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007142:	2302      	movs	r3, #2
  }
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b0ba      	sub	sp, #232	@ 0xe8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007172:	2300      	movs	r3, #0
 8007174:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007178:	2300      	movs	r3, #0
 800717a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800717e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800718a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10f      	bne.n	80071b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007196:	f003 0320 	and.w	r3, r3, #32
 800719a:	2b00      	cmp	r3, #0
 800719c:	d009      	beq.n	80071b2 <HAL_UART_IRQHandler+0x66>
 800719e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d003      	beq.n	80071b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fb93 	bl	80078d6 <UART_Receive_IT>
      return;
 80071b0:	e25b      	b.n	800766a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80071b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f000 80de 	beq.w	8007378 <HAL_UART_IRQHandler+0x22c>
 80071bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d106      	bne.n	80071d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 80d1 	beq.w	8007378 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80071d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00b      	beq.n	80071fa <HAL_UART_IRQHandler+0xae>
 80071e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d005      	beq.n	80071fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071f2:	f043 0201 	orr.w	r2, r3, #1
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071fe:	f003 0304 	and.w	r3, r3, #4
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00b      	beq.n	800721e <HAL_UART_IRQHandler+0xd2>
 8007206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d005      	beq.n	800721e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007216:	f043 0202 	orr.w	r2, r3, #2
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800721e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00b      	beq.n	8007242 <HAL_UART_IRQHandler+0xf6>
 800722a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d005      	beq.n	8007242 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800723a:	f043 0204 	orr.w	r2, r3, #4
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007246:	f003 0308 	and.w	r3, r3, #8
 800724a:	2b00      	cmp	r3, #0
 800724c:	d011      	beq.n	8007272 <HAL_UART_IRQHandler+0x126>
 800724e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007252:	f003 0320 	and.w	r3, r3, #32
 8007256:	2b00      	cmp	r3, #0
 8007258:	d105      	bne.n	8007266 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800725a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	2b00      	cmp	r3, #0
 8007264:	d005      	beq.n	8007272 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800726a:	f043 0208 	orr.w	r2, r3, #8
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 81f2 	beq.w	8007660 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800727c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007280:	f003 0320 	and.w	r3, r3, #32
 8007284:	2b00      	cmp	r3, #0
 8007286:	d008      	beq.n	800729a <HAL_UART_IRQHandler+0x14e>
 8007288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800728c:	f003 0320 	and.w	r3, r3, #32
 8007290:	2b00      	cmp	r3, #0
 8007292:	d002      	beq.n	800729a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fb1e 	bl	80078d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	bf14      	ite	ne
 80072a8:	2301      	movne	r3, #1
 80072aa:	2300      	moveq	r3, #0
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072b6:	f003 0308 	and.w	r3, r3, #8
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d103      	bne.n	80072c6 <HAL_UART_IRQHandler+0x17a>
 80072be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d04f      	beq.n	8007366 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fa28 	bl	800771c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d041      	beq.n	800735e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3314      	adds	r3, #20
 80072e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80072e8:	e853 3f00 	ldrex	r3, [r3]
 80072ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80072f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3314      	adds	r3, #20
 8007302:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007306:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800730a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007312:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007316:	e841 2300 	strex	r3, r2, [r1]
 800731a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800731e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1d9      	bne.n	80072da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800732a:	2b00      	cmp	r3, #0
 800732c:	d013      	beq.n	8007356 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007332:	4a7e      	ldr	r2, [pc, #504]	@ (800752c <HAL_UART_IRQHandler+0x3e0>)
 8007334:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800733a:	4618      	mov	r0, r3
 800733c:	f7fd fe42 	bl	8004fc4 <HAL_DMA_Abort_IT>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d016      	beq.n	8007374 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800734a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007350:	4610      	mov	r0, r2
 8007352:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007354:	e00e      	b.n	8007374 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f993 	bl	8007682 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800735c:	e00a      	b.n	8007374 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f98f 	bl	8007682 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007364:	e006      	b.n	8007374 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f98b 	bl	8007682 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007372:	e175      	b.n	8007660 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007374:	bf00      	nop
    return;
 8007376:	e173      	b.n	8007660 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800737c:	2b01      	cmp	r3, #1
 800737e:	f040 814f 	bne.w	8007620 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007386:	f003 0310 	and.w	r3, r3, #16
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 8148 	beq.w	8007620 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007394:	f003 0310 	and.w	r3, r3, #16
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 8141 	beq.w	8007620 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800739e:	2300      	movs	r3, #0
 80073a0:	60bb      	str	r3, [r7, #8]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	60bb      	str	r3, [r7, #8]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	60bb      	str	r3, [r7, #8]
 80073b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 80b6 	beq.w	8007530 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 8145 	beq.w	8007664 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073e2:	429a      	cmp	r2, r3
 80073e4:	f080 813e 	bcs.w	8007664 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	2b20      	cmp	r3, #32
 80073f8:	f000 8088 	beq.w	800750c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	330c      	adds	r3, #12
 8007402:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800740a:	e853 3f00 	ldrex	r3, [r3]
 800740e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007412:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007416:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800741a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	330c      	adds	r3, #12
 8007424:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007428:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800742c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007430:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007434:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007438:	e841 2300 	strex	r3, r2, [r1]
 800743c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007440:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1d9      	bne.n	80073fc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3314      	adds	r3, #20
 800744e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007458:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800745a:	f023 0301 	bic.w	r3, r3, #1
 800745e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3314      	adds	r3, #20
 8007468:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800746c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007470:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007472:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007474:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007478:	e841 2300 	strex	r3, r2, [r1]
 800747c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800747e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1e1      	bne.n	8007448 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	3314      	adds	r3, #20
 800748a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800748e:	e853 3f00 	ldrex	r3, [r3]
 8007492:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007494:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007496:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800749a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3314      	adds	r3, #20
 80074a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80074a8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80074aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80074ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80074b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e3      	bne.n	8007484 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2220      	movs	r2, #32
 80074c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	330c      	adds	r3, #12
 80074d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074d4:	e853 3f00 	ldrex	r3, [r3]
 80074d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80074da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074dc:	f023 0310 	bic.w	r3, r3, #16
 80074e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	330c      	adds	r3, #12
 80074ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80074ee:	65ba      	str	r2, [r7, #88]	@ 0x58
 80074f0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074f6:	e841 2300 	strex	r3, r2, [r1]
 80074fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80074fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1e3      	bne.n	80074ca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007506:	4618      	mov	r0, r3
 8007508:	f7fd fd21 	bl	8004f4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800751a:	b29b      	uxth	r3, r3
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	b29b      	uxth	r3, r3
 8007520:	4619      	mov	r1, r3
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f8b6 	bl	8007694 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007528:	e09c      	b.n	8007664 <HAL_UART_IRQHandler+0x518>
 800752a:	bf00      	nop
 800752c:	080077e1 	.word	0x080077e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007538:	b29b      	uxth	r3, r3
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007544:	b29b      	uxth	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	f000 808e 	beq.w	8007668 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800754c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 8089 	beq.w	8007668 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	330c      	adds	r3, #12
 800755c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007560:	e853 3f00 	ldrex	r3, [r3]
 8007564:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007568:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800756c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	330c      	adds	r3, #12
 8007576:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800757a:	647a      	str	r2, [r7, #68]	@ 0x44
 800757c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007580:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e3      	bne.n	8007556 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3314      	adds	r3, #20
 8007594:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007598:	e853 3f00 	ldrex	r3, [r3]
 800759c:	623b      	str	r3, [r7, #32]
   return(result);
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	f023 0301 	bic.w	r3, r3, #1
 80075a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3314      	adds	r3, #20
 80075ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80075b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80075b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ba:	e841 2300 	strex	r3, r2, [r1]
 80075be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1e3      	bne.n	800758e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2220      	movs	r2, #32
 80075ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	330c      	adds	r3, #12
 80075da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	e853 3f00 	ldrex	r3, [r3]
 80075e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 0310 	bic.w	r3, r3, #16
 80075ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	330c      	adds	r3, #12
 80075f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80075f8:	61fa      	str	r2, [r7, #28]
 80075fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fc:	69b9      	ldr	r1, [r7, #24]
 80075fe:	69fa      	ldr	r2, [r7, #28]
 8007600:	e841 2300 	strex	r3, r2, [r1]
 8007604:	617b      	str	r3, [r7, #20]
   return(result);
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1e3      	bne.n	80075d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007612:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 f83b 	bl	8007694 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800761e:	e023      	b.n	8007668 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007628:	2b00      	cmp	r3, #0
 800762a:	d009      	beq.n	8007640 <HAL_UART_IRQHandler+0x4f4>
 800762c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007634:	2b00      	cmp	r3, #0
 8007636:	d003      	beq.n	8007640 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 f8e5 	bl	8007808 <UART_Transmit_IT>
    return;
 800763e:	e014      	b.n	800766a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00e      	beq.n	800766a <HAL_UART_IRQHandler+0x51e>
 800764c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007654:	2b00      	cmp	r3, #0
 8007656:	d008      	beq.n	800766a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f924 	bl	80078a6 <UART_EndTransmit_IT>
    return;
 800765e:	e004      	b.n	800766a <HAL_UART_IRQHandler+0x51e>
    return;
 8007660:	bf00      	nop
 8007662:	e002      	b.n	800766a <HAL_UART_IRQHandler+0x51e>
      return;
 8007664:	bf00      	nop
 8007666:	e000      	b.n	800766a <HAL_UART_IRQHandler+0x51e>
      return;
 8007668:	bf00      	nop
  }
}
 800766a:	37e8      	adds	r7, #232	@ 0xe8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	bc80      	pop	{r7}
 8007680:	4770      	bx	lr

08007682 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007682:	b480      	push	{r7}
 8007684:	b083      	sub	sp, #12
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800768a:	bf00      	nop
 800768c:	370c      	adds	r7, #12
 800768e:	46bd      	mov	sp, r7
 8007690:	bc80      	pop	{r7}
 8007692:	4770      	bx	lr

08007694 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bc80      	pop	{r7}
 80076a8:	4770      	bx	lr

080076aa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b085      	sub	sp, #20
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	60f8      	str	r0, [r7, #12]
 80076b2:	60b9      	str	r1, [r7, #8]
 80076b4:	4613      	mov	r3, r2
 80076b6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	88fa      	ldrh	r2, [r7, #6]
 80076c2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	88fa      	ldrh	r2, [r7, #6]
 80076c8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2222      	movs	r2, #34	@ 0x22
 80076d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d007      	beq.n	80076f0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68da      	ldr	r2, [r3, #12]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80076ee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	695a      	ldr	r2, [r3, #20]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f042 0201 	orr.w	r2, r2, #1
 80076fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68da      	ldr	r2, [r3, #12]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0220 	orr.w	r2, r2, #32
 800770e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3714      	adds	r7, #20
 8007716:	46bd      	mov	sp, r7
 8007718:	bc80      	pop	{r7}
 800771a:	4770      	bx	lr

0800771c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800771c:	b480      	push	{r7}
 800771e:	b095      	sub	sp, #84	@ 0x54
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	330c      	adds	r3, #12
 800772a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800772e:	e853 3f00 	ldrex	r3, [r3]
 8007732:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007736:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800773a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	330c      	adds	r3, #12
 8007742:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007744:	643a      	str	r2, [r7, #64]	@ 0x40
 8007746:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007748:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800774a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800774c:	e841 2300 	strex	r3, r2, [r1]
 8007750:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1e5      	bne.n	8007724 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3314      	adds	r3, #20
 800775e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	e853 3f00 	ldrex	r3, [r3]
 8007766:	61fb      	str	r3, [r7, #28]
   return(result);
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	f023 0301 	bic.w	r3, r3, #1
 800776e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	3314      	adds	r3, #20
 8007776:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007778:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800777a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800777e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007780:	e841 2300 	strex	r3, r2, [r1]
 8007784:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1e5      	bne.n	8007758 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007790:	2b01      	cmp	r3, #1
 8007792:	d119      	bne.n	80077c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	330c      	adds	r3, #12
 800779a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	e853 3f00 	ldrex	r3, [r3]
 80077a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f023 0310 	bic.w	r3, r3, #16
 80077aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	330c      	adds	r3, #12
 80077b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077b4:	61ba      	str	r2, [r7, #24]
 80077b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b8:	6979      	ldr	r1, [r7, #20]
 80077ba:	69ba      	ldr	r2, [r7, #24]
 80077bc:	e841 2300 	strex	r3, r2, [r1]
 80077c0:	613b      	str	r3, [r7, #16]
   return(result);
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e5      	bne.n	8007794 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2220      	movs	r2, #32
 80077cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80077d6:	bf00      	nop
 80077d8:	3754      	adds	r7, #84	@ 0x54
 80077da:	46bd      	mov	sp, r7
 80077dc:	bc80      	pop	{r7}
 80077de:	4770      	bx	lr

080077e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f7ff ff41 	bl	8007682 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007800:	bf00      	nop
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b21      	cmp	r3, #33	@ 0x21
 800781a:	d13e      	bne.n	800789a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007824:	d114      	bne.n	8007850 <UART_Transmit_IT+0x48>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d110      	bne.n	8007850 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007842:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	1c9a      	adds	r2, r3, #2
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	621a      	str	r2, [r3, #32]
 800784e:	e008      	b.n	8007862 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a1b      	ldr	r3, [r3, #32]
 8007854:	1c59      	adds	r1, r3, #1
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	6211      	str	r1, [r2, #32]
 800785a:	781a      	ldrb	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007866:	b29b      	uxth	r3, r3
 8007868:	3b01      	subs	r3, #1
 800786a:	b29b      	uxth	r3, r3
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	4619      	mov	r1, r3
 8007870:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10f      	bne.n	8007896 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68da      	ldr	r2, [r3, #12]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007884:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007894:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	e000      	b.n	800789c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800789a:	2302      	movs	r3, #2
  }
}
 800789c:	4618      	mov	r0, r3
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bc80      	pop	{r7}
 80078a4:	4770      	bx	lr

080078a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b082      	sub	sp, #8
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68da      	ldr	r2, [r3, #12]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2220      	movs	r2, #32
 80078c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7ff fed2 	bl	8007670 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b08c      	sub	sp, #48	@ 0x30
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b22      	cmp	r3, #34	@ 0x22
 80078e8:	f040 80ae 	bne.w	8007a48 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078f4:	d117      	bne.n	8007926 <UART_Receive_IT+0x50>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d113      	bne.n	8007926 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80078fe:	2300      	movs	r3, #0
 8007900:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007906:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	b29b      	uxth	r3, r3
 8007910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007914:	b29a      	uxth	r2, r3
 8007916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007918:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800791e:	1c9a      	adds	r2, r3, #2
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	629a      	str	r2, [r3, #40]	@ 0x28
 8007924:	e026      	b.n	8007974 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800792c:	2300      	movs	r3, #0
 800792e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007938:	d007      	beq.n	800794a <UART_Receive_IT+0x74>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <UART_Receive_IT+0x82>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d106      	bne.n	8007958 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	b2da      	uxtb	r2, r3
 8007952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007954:	701a      	strb	r2, [r3, #0]
 8007956:	e008      	b.n	800796a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	b2db      	uxtb	r3, r3
 8007960:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007964:	b2da      	uxtb	r2, r3
 8007966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007968:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800796e:	1c5a      	adds	r2, r3, #1
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007978:	b29b      	uxth	r3, r3
 800797a:	3b01      	subs	r3, #1
 800797c:	b29b      	uxth	r3, r3
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	4619      	mov	r1, r3
 8007982:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007984:	2b00      	cmp	r3, #0
 8007986:	d15d      	bne.n	8007a44 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68da      	ldr	r2, [r3, #12]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f022 0220 	bic.w	r2, r2, #32
 8007996:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68da      	ldr	r2, [r3, #12]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80079a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	695a      	ldr	r2, [r3, #20]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0201 	bic.w	r2, r2, #1
 80079b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2220      	movs	r2, #32
 80079bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d135      	bne.n	8007a3a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	330c      	adds	r3, #12
 80079da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	e853 3f00 	ldrex	r3, [r3]
 80079e2:	613b      	str	r3, [r7, #16]
   return(result);
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f023 0310 	bic.w	r3, r3, #16
 80079ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	330c      	adds	r3, #12
 80079f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079f4:	623a      	str	r2, [r7, #32]
 80079f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	69f9      	ldr	r1, [r7, #28]
 80079fa:	6a3a      	ldr	r2, [r7, #32]
 80079fc:	e841 2300 	strex	r3, r2, [r1]
 8007a00:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e5      	bne.n	80079d4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0310 	and.w	r3, r3, #16
 8007a12:	2b10      	cmp	r3, #16
 8007a14:	d10a      	bne.n	8007a2c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a16:	2300      	movs	r3, #0
 8007a18:	60fb      	str	r3, [r7, #12]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	60fb      	str	r3, [r7, #12]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	60fb      	str	r3, [r7, #12]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a30:	4619      	mov	r1, r3
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7ff fe2e 	bl	8007694 <HAL_UARTEx_RxEventCallback>
 8007a38:	e002      	b.n	8007a40 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7f9 fe2c 	bl	8001698 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	e002      	b.n	8007a4a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	e000      	b.n	8007a4a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007a48:	2302      	movs	r3, #2
  }
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3730      	adds	r7, #48	@ 0x30
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
	...

08007a54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	689a      	ldr	r2, [r3, #8]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007a8e:	f023 030c 	bic.w	r3, r3, #12
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	6812      	ldr	r2, [r2, #0]
 8007a96:	68b9      	ldr	r1, [r7, #8]
 8007a98:	430b      	orrs	r3, r1
 8007a9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	695b      	ldr	r3, [r3, #20]
 8007aa2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	699a      	ldr	r2, [r3, #24]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a2c      	ldr	r2, [pc, #176]	@ (8007b68 <UART_SetConfig+0x114>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d103      	bne.n	8007ac4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007abc:	f7fe f8a6 	bl	8005c0c <HAL_RCC_GetPCLK2Freq>
 8007ac0:	60f8      	str	r0, [r7, #12]
 8007ac2:	e002      	b.n	8007aca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007ac4:	f7fe f88e 	bl	8005be4 <HAL_RCC_GetPCLK1Freq>
 8007ac8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	4613      	mov	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	009a      	lsls	r2, r3, #2
 8007ad4:	441a      	add	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae0:	4a22      	ldr	r2, [pc, #136]	@ (8007b6c <UART_SetConfig+0x118>)
 8007ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae6:	095b      	lsrs	r3, r3, #5
 8007ae8:	0119      	lsls	r1, r3, #4
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	009a      	lsls	r2, r3, #2
 8007af4:	441a      	add	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b00:	4b1a      	ldr	r3, [pc, #104]	@ (8007b6c <UART_SetConfig+0x118>)
 8007b02:	fba3 0302 	umull	r0, r3, r3, r2
 8007b06:	095b      	lsrs	r3, r3, #5
 8007b08:	2064      	movs	r0, #100	@ 0x64
 8007b0a:	fb00 f303 	mul.w	r3, r0, r3
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	011b      	lsls	r3, r3, #4
 8007b12:	3332      	adds	r3, #50	@ 0x32
 8007b14:	4a15      	ldr	r2, [pc, #84]	@ (8007b6c <UART_SetConfig+0x118>)
 8007b16:	fba2 2303 	umull	r2, r3, r2, r3
 8007b1a:	095b      	lsrs	r3, r3, #5
 8007b1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b20:	4419      	add	r1, r3
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	4613      	mov	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4413      	add	r3, r2
 8007b2a:	009a      	lsls	r2, r3, #2
 8007b2c:	441a      	add	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b38:	4b0c      	ldr	r3, [pc, #48]	@ (8007b6c <UART_SetConfig+0x118>)
 8007b3a:	fba3 0302 	umull	r0, r3, r3, r2
 8007b3e:	095b      	lsrs	r3, r3, #5
 8007b40:	2064      	movs	r0, #100	@ 0x64
 8007b42:	fb00 f303 	mul.w	r3, r0, r3
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	011b      	lsls	r3, r3, #4
 8007b4a:	3332      	adds	r3, #50	@ 0x32
 8007b4c:	4a07      	ldr	r2, [pc, #28]	@ (8007b6c <UART_SetConfig+0x118>)
 8007b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b52:	095b      	lsrs	r3, r3, #5
 8007b54:	f003 020f 	and.w	r2, r3, #15
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	440a      	add	r2, r1
 8007b5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007b60:	bf00      	nop
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	40013800 	.word	0x40013800
 8007b6c:	51eb851f 	.word	0x51eb851f

08007b70 <malloc>:
 8007b70:	4b02      	ldr	r3, [pc, #8]	@ (8007b7c <malloc+0xc>)
 8007b72:	4601      	mov	r1, r0
 8007b74:	6818      	ldr	r0, [r3, #0]
 8007b76:	f000 b82d 	b.w	8007bd4 <_malloc_r>
 8007b7a:	bf00      	nop
 8007b7c:	20000024 	.word	0x20000024

08007b80 <free>:
 8007b80:	4b02      	ldr	r3, [pc, #8]	@ (8007b8c <free+0xc>)
 8007b82:	4601      	mov	r1, r0
 8007b84:	6818      	ldr	r0, [r3, #0]
 8007b86:	f000 b903 	b.w	8007d90 <_free_r>
 8007b8a:	bf00      	nop
 8007b8c:	20000024 	.word	0x20000024

08007b90 <sbrk_aligned>:
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	4e0f      	ldr	r6, [pc, #60]	@ (8007bd0 <sbrk_aligned+0x40>)
 8007b94:	460c      	mov	r4, r1
 8007b96:	6831      	ldr	r1, [r6, #0]
 8007b98:	4605      	mov	r5, r0
 8007b9a:	b911      	cbnz	r1, 8007ba2 <sbrk_aligned+0x12>
 8007b9c:	f000 f8ae 	bl	8007cfc <_sbrk_r>
 8007ba0:	6030      	str	r0, [r6, #0]
 8007ba2:	4621      	mov	r1, r4
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	f000 f8a9 	bl	8007cfc <_sbrk_r>
 8007baa:	1c43      	adds	r3, r0, #1
 8007bac:	d103      	bne.n	8007bb6 <sbrk_aligned+0x26>
 8007bae:	f04f 34ff 	mov.w	r4, #4294967295
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	bd70      	pop	{r4, r5, r6, pc}
 8007bb6:	1cc4      	adds	r4, r0, #3
 8007bb8:	f024 0403 	bic.w	r4, r4, #3
 8007bbc:	42a0      	cmp	r0, r4
 8007bbe:	d0f8      	beq.n	8007bb2 <sbrk_aligned+0x22>
 8007bc0:	1a21      	subs	r1, r4, r0
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	f000 f89a 	bl	8007cfc <_sbrk_r>
 8007bc8:	3001      	adds	r0, #1
 8007bca:	d1f2      	bne.n	8007bb2 <sbrk_aligned+0x22>
 8007bcc:	e7ef      	b.n	8007bae <sbrk_aligned+0x1e>
 8007bce:	bf00      	nop
 8007bd0:	20000c78 	.word	0x20000c78

08007bd4 <_malloc_r>:
 8007bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bd8:	1ccd      	adds	r5, r1, #3
 8007bda:	f025 0503 	bic.w	r5, r5, #3
 8007bde:	3508      	adds	r5, #8
 8007be0:	2d0c      	cmp	r5, #12
 8007be2:	bf38      	it	cc
 8007be4:	250c      	movcc	r5, #12
 8007be6:	2d00      	cmp	r5, #0
 8007be8:	4606      	mov	r6, r0
 8007bea:	db01      	blt.n	8007bf0 <_malloc_r+0x1c>
 8007bec:	42a9      	cmp	r1, r5
 8007bee:	d904      	bls.n	8007bfa <_malloc_r+0x26>
 8007bf0:	230c      	movs	r3, #12
 8007bf2:	6033      	str	r3, [r6, #0]
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007cd0 <_malloc_r+0xfc>
 8007bfe:	f000 f869 	bl	8007cd4 <__malloc_lock>
 8007c02:	f8d8 3000 	ldr.w	r3, [r8]
 8007c06:	461c      	mov	r4, r3
 8007c08:	bb44      	cbnz	r4, 8007c5c <_malloc_r+0x88>
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	f7ff ffbf 	bl	8007b90 <sbrk_aligned>
 8007c12:	1c43      	adds	r3, r0, #1
 8007c14:	4604      	mov	r4, r0
 8007c16:	d158      	bne.n	8007cca <_malloc_r+0xf6>
 8007c18:	f8d8 4000 	ldr.w	r4, [r8]
 8007c1c:	4627      	mov	r7, r4
 8007c1e:	2f00      	cmp	r7, #0
 8007c20:	d143      	bne.n	8007caa <_malloc_r+0xd6>
 8007c22:	2c00      	cmp	r4, #0
 8007c24:	d04b      	beq.n	8007cbe <_malloc_r+0xea>
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	4639      	mov	r1, r7
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	eb04 0903 	add.w	r9, r4, r3
 8007c30:	f000 f864 	bl	8007cfc <_sbrk_r>
 8007c34:	4581      	cmp	r9, r0
 8007c36:	d142      	bne.n	8007cbe <_malloc_r+0xea>
 8007c38:	6821      	ldr	r1, [r4, #0]
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	1a6d      	subs	r5, r5, r1
 8007c3e:	4629      	mov	r1, r5
 8007c40:	f7ff ffa6 	bl	8007b90 <sbrk_aligned>
 8007c44:	3001      	adds	r0, #1
 8007c46:	d03a      	beq.n	8007cbe <_malloc_r+0xea>
 8007c48:	6823      	ldr	r3, [r4, #0]
 8007c4a:	442b      	add	r3, r5
 8007c4c:	6023      	str	r3, [r4, #0]
 8007c4e:	f8d8 3000 	ldr.w	r3, [r8]
 8007c52:	685a      	ldr	r2, [r3, #4]
 8007c54:	bb62      	cbnz	r2, 8007cb0 <_malloc_r+0xdc>
 8007c56:	f8c8 7000 	str.w	r7, [r8]
 8007c5a:	e00f      	b.n	8007c7c <_malloc_r+0xa8>
 8007c5c:	6822      	ldr	r2, [r4, #0]
 8007c5e:	1b52      	subs	r2, r2, r5
 8007c60:	d420      	bmi.n	8007ca4 <_malloc_r+0xd0>
 8007c62:	2a0b      	cmp	r2, #11
 8007c64:	d917      	bls.n	8007c96 <_malloc_r+0xc2>
 8007c66:	1961      	adds	r1, r4, r5
 8007c68:	42a3      	cmp	r3, r4
 8007c6a:	6025      	str	r5, [r4, #0]
 8007c6c:	bf18      	it	ne
 8007c6e:	6059      	strne	r1, [r3, #4]
 8007c70:	6863      	ldr	r3, [r4, #4]
 8007c72:	bf08      	it	eq
 8007c74:	f8c8 1000 	streq.w	r1, [r8]
 8007c78:	5162      	str	r2, [r4, r5]
 8007c7a:	604b      	str	r3, [r1, #4]
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	f000 f82f 	bl	8007ce0 <__malloc_unlock>
 8007c82:	f104 000b 	add.w	r0, r4, #11
 8007c86:	1d23      	adds	r3, r4, #4
 8007c88:	f020 0007 	bic.w	r0, r0, #7
 8007c8c:	1ac2      	subs	r2, r0, r3
 8007c8e:	bf1c      	itt	ne
 8007c90:	1a1b      	subne	r3, r3, r0
 8007c92:	50a3      	strne	r3, [r4, r2]
 8007c94:	e7af      	b.n	8007bf6 <_malloc_r+0x22>
 8007c96:	6862      	ldr	r2, [r4, #4]
 8007c98:	42a3      	cmp	r3, r4
 8007c9a:	bf0c      	ite	eq
 8007c9c:	f8c8 2000 	streq.w	r2, [r8]
 8007ca0:	605a      	strne	r2, [r3, #4]
 8007ca2:	e7eb      	b.n	8007c7c <_malloc_r+0xa8>
 8007ca4:	4623      	mov	r3, r4
 8007ca6:	6864      	ldr	r4, [r4, #4]
 8007ca8:	e7ae      	b.n	8007c08 <_malloc_r+0x34>
 8007caa:	463c      	mov	r4, r7
 8007cac:	687f      	ldr	r7, [r7, #4]
 8007cae:	e7b6      	b.n	8007c1e <_malloc_r+0x4a>
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	42a3      	cmp	r3, r4
 8007cb6:	d1fb      	bne.n	8007cb0 <_malloc_r+0xdc>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	6053      	str	r3, [r2, #4]
 8007cbc:	e7de      	b.n	8007c7c <_malloc_r+0xa8>
 8007cbe:	230c      	movs	r3, #12
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	6033      	str	r3, [r6, #0]
 8007cc4:	f000 f80c 	bl	8007ce0 <__malloc_unlock>
 8007cc8:	e794      	b.n	8007bf4 <_malloc_r+0x20>
 8007cca:	6005      	str	r5, [r0, #0]
 8007ccc:	e7d6      	b.n	8007c7c <_malloc_r+0xa8>
 8007cce:	bf00      	nop
 8007cd0:	20000c7c 	.word	0x20000c7c

08007cd4 <__malloc_lock>:
 8007cd4:	4801      	ldr	r0, [pc, #4]	@ (8007cdc <__malloc_lock+0x8>)
 8007cd6:	f000 b84b 	b.w	8007d70 <__retarget_lock_acquire_recursive>
 8007cda:	bf00      	nop
 8007cdc:	20000dbc 	.word	0x20000dbc

08007ce0 <__malloc_unlock>:
 8007ce0:	4801      	ldr	r0, [pc, #4]	@ (8007ce8 <__malloc_unlock+0x8>)
 8007ce2:	f000 b846 	b.w	8007d72 <__retarget_lock_release_recursive>
 8007ce6:	bf00      	nop
 8007ce8:	20000dbc 	.word	0x20000dbc

08007cec <memset>:
 8007cec:	4603      	mov	r3, r0
 8007cee:	4402      	add	r2, r0
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d100      	bne.n	8007cf6 <memset+0xa>
 8007cf4:	4770      	bx	lr
 8007cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8007cfa:	e7f9      	b.n	8007cf0 <memset+0x4>

08007cfc <_sbrk_r>:
 8007cfc:	b538      	push	{r3, r4, r5, lr}
 8007cfe:	2300      	movs	r3, #0
 8007d00:	4d05      	ldr	r5, [pc, #20]	@ (8007d18 <_sbrk_r+0x1c>)
 8007d02:	4604      	mov	r4, r0
 8007d04:	4608      	mov	r0, r1
 8007d06:	602b      	str	r3, [r5, #0]
 8007d08:	f7fc fad4 	bl	80042b4 <_sbrk>
 8007d0c:	1c43      	adds	r3, r0, #1
 8007d0e:	d102      	bne.n	8007d16 <_sbrk_r+0x1a>
 8007d10:	682b      	ldr	r3, [r5, #0]
 8007d12:	b103      	cbz	r3, 8007d16 <_sbrk_r+0x1a>
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	bd38      	pop	{r3, r4, r5, pc}
 8007d18:	20000db8 	.word	0x20000db8

08007d1c <__errno>:
 8007d1c:	4b01      	ldr	r3, [pc, #4]	@ (8007d24 <__errno+0x8>)
 8007d1e:	6818      	ldr	r0, [r3, #0]
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	20000024 	.word	0x20000024

08007d28 <__libc_init_array>:
 8007d28:	b570      	push	{r4, r5, r6, lr}
 8007d2a:	2600      	movs	r6, #0
 8007d2c:	4d0c      	ldr	r5, [pc, #48]	@ (8007d60 <__libc_init_array+0x38>)
 8007d2e:	4c0d      	ldr	r4, [pc, #52]	@ (8007d64 <__libc_init_array+0x3c>)
 8007d30:	1b64      	subs	r4, r4, r5
 8007d32:	10a4      	asrs	r4, r4, #2
 8007d34:	42a6      	cmp	r6, r4
 8007d36:	d109      	bne.n	8007d4c <__libc_init_array+0x24>
 8007d38:	f000 f872 	bl	8007e20 <_init>
 8007d3c:	2600      	movs	r6, #0
 8007d3e:	4d0a      	ldr	r5, [pc, #40]	@ (8007d68 <__libc_init_array+0x40>)
 8007d40:	4c0a      	ldr	r4, [pc, #40]	@ (8007d6c <__libc_init_array+0x44>)
 8007d42:	1b64      	subs	r4, r4, r5
 8007d44:	10a4      	asrs	r4, r4, #2
 8007d46:	42a6      	cmp	r6, r4
 8007d48:	d105      	bne.n	8007d56 <__libc_init_array+0x2e>
 8007d4a:	bd70      	pop	{r4, r5, r6, pc}
 8007d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d50:	4798      	blx	r3
 8007d52:	3601      	adds	r6, #1
 8007d54:	e7ee      	b.n	8007d34 <__libc_init_array+0xc>
 8007d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d5a:	4798      	blx	r3
 8007d5c:	3601      	adds	r6, #1
 8007d5e:	e7f2      	b.n	8007d46 <__libc_init_array+0x1e>
 8007d60:	08007ea8 	.word	0x08007ea8
 8007d64:	08007ea8 	.word	0x08007ea8
 8007d68:	08007ea8 	.word	0x08007ea8
 8007d6c:	08007eac 	.word	0x08007eac

08007d70 <__retarget_lock_acquire_recursive>:
 8007d70:	4770      	bx	lr

08007d72 <__retarget_lock_release_recursive>:
 8007d72:	4770      	bx	lr

08007d74 <memcpy>:
 8007d74:	440a      	add	r2, r1
 8007d76:	4291      	cmp	r1, r2
 8007d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d7c:	d100      	bne.n	8007d80 <memcpy+0xc>
 8007d7e:	4770      	bx	lr
 8007d80:	b510      	push	{r4, lr}
 8007d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d86:	4291      	cmp	r1, r2
 8007d88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d8c:	d1f9      	bne.n	8007d82 <memcpy+0xe>
 8007d8e:	bd10      	pop	{r4, pc}

08007d90 <_free_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	4605      	mov	r5, r0
 8007d94:	2900      	cmp	r1, #0
 8007d96:	d040      	beq.n	8007e1a <_free_r+0x8a>
 8007d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d9c:	1f0c      	subs	r4, r1, #4
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	bfb8      	it	lt
 8007da2:	18e4      	addlt	r4, r4, r3
 8007da4:	f7ff ff96 	bl	8007cd4 <__malloc_lock>
 8007da8:	4a1c      	ldr	r2, [pc, #112]	@ (8007e1c <_free_r+0x8c>)
 8007daa:	6813      	ldr	r3, [r2, #0]
 8007dac:	b933      	cbnz	r3, 8007dbc <_free_r+0x2c>
 8007dae:	6063      	str	r3, [r4, #4]
 8007db0:	6014      	str	r4, [r2, #0]
 8007db2:	4628      	mov	r0, r5
 8007db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007db8:	f7ff bf92 	b.w	8007ce0 <__malloc_unlock>
 8007dbc:	42a3      	cmp	r3, r4
 8007dbe:	d908      	bls.n	8007dd2 <_free_r+0x42>
 8007dc0:	6820      	ldr	r0, [r4, #0]
 8007dc2:	1821      	adds	r1, r4, r0
 8007dc4:	428b      	cmp	r3, r1
 8007dc6:	bf01      	itttt	eq
 8007dc8:	6819      	ldreq	r1, [r3, #0]
 8007dca:	685b      	ldreq	r3, [r3, #4]
 8007dcc:	1809      	addeq	r1, r1, r0
 8007dce:	6021      	streq	r1, [r4, #0]
 8007dd0:	e7ed      	b.n	8007dae <_free_r+0x1e>
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	b10b      	cbz	r3, 8007ddc <_free_r+0x4c>
 8007dd8:	42a3      	cmp	r3, r4
 8007dda:	d9fa      	bls.n	8007dd2 <_free_r+0x42>
 8007ddc:	6811      	ldr	r1, [r2, #0]
 8007dde:	1850      	adds	r0, r2, r1
 8007de0:	42a0      	cmp	r0, r4
 8007de2:	d10b      	bne.n	8007dfc <_free_r+0x6c>
 8007de4:	6820      	ldr	r0, [r4, #0]
 8007de6:	4401      	add	r1, r0
 8007de8:	1850      	adds	r0, r2, r1
 8007dea:	4283      	cmp	r3, r0
 8007dec:	6011      	str	r1, [r2, #0]
 8007dee:	d1e0      	bne.n	8007db2 <_free_r+0x22>
 8007df0:	6818      	ldr	r0, [r3, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	4408      	add	r0, r1
 8007df6:	6010      	str	r0, [r2, #0]
 8007df8:	6053      	str	r3, [r2, #4]
 8007dfa:	e7da      	b.n	8007db2 <_free_r+0x22>
 8007dfc:	d902      	bls.n	8007e04 <_free_r+0x74>
 8007dfe:	230c      	movs	r3, #12
 8007e00:	602b      	str	r3, [r5, #0]
 8007e02:	e7d6      	b.n	8007db2 <_free_r+0x22>
 8007e04:	6820      	ldr	r0, [r4, #0]
 8007e06:	1821      	adds	r1, r4, r0
 8007e08:	428b      	cmp	r3, r1
 8007e0a:	bf01      	itttt	eq
 8007e0c:	6819      	ldreq	r1, [r3, #0]
 8007e0e:	685b      	ldreq	r3, [r3, #4]
 8007e10:	1809      	addeq	r1, r1, r0
 8007e12:	6021      	streq	r1, [r4, #0]
 8007e14:	6063      	str	r3, [r4, #4]
 8007e16:	6054      	str	r4, [r2, #4]
 8007e18:	e7cb      	b.n	8007db2 <_free_r+0x22>
 8007e1a:	bd38      	pop	{r3, r4, r5, pc}
 8007e1c:	20000c7c 	.word	0x20000c7c

08007e20 <_init>:
 8007e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e22:	bf00      	nop
 8007e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e26:	bc08      	pop	{r3}
 8007e28:	469e      	mov	lr, r3
 8007e2a:	4770      	bx	lr

08007e2c <_fini>:
 8007e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2e:	bf00      	nop
 8007e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e32:	bc08      	pop	{r3}
 8007e34:	469e      	mov	lr, r3
 8007e36:	4770      	bx	lr
