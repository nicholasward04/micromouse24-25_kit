
TheHammer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c0c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008d18  08008d18  00009d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d88  08008d88  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000000  08008d88  08008d88  0000a07c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d88  08008d88  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d88  08008d88  00009d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d8c  08008d8c  00009d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008d90  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d80  20000080  08008e0c  0000a080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e00  08008e0c  0000ae00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013497  00000000  00000000  0000a0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ad  00000000  00000000  0001d53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00020bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d7b  00000000  00000000  00021d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5c5  00000000  00000000  00022ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d37  00000000  00000000  0003d088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009189b  00000000  00000000  00053dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e565a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c68  00000000  00000000  000e56a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ea308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08008d00 	.word	0x08008d00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08008d00 	.word	0x08008d00

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_d2f>:
 8000938:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800093c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000940:	bf24      	itt	cs
 8000942:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000946:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800094a:	d90d      	bls.n	8000968 <__aeabi_d2f+0x30>
 800094c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000950:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000954:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000958:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800095c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000960:	bf08      	it	eq
 8000962:	f020 0001 	biceq.w	r0, r0, #1
 8000966:	4770      	bx	lr
 8000968:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800096c:	d121      	bne.n	80009b2 <__aeabi_d2f+0x7a>
 800096e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000972:	bfbc      	itt	lt
 8000974:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000978:	4770      	bxlt	lr
 800097a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000982:	f1c2 0218 	rsb	r2, r2, #24
 8000986:	f1c2 0c20 	rsb	ip, r2, #32
 800098a:	fa10 f30c 	lsls.w	r3, r0, ip
 800098e:	fa20 f002 	lsr.w	r0, r0, r2
 8000992:	bf18      	it	ne
 8000994:	f040 0001 	orrne.w	r0, r0, #1
 8000998:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a4:	ea40 000c 	orr.w	r0, r0, ip
 80009a8:	fa23 f302 	lsr.w	r3, r3, r2
 80009ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b0:	e7cc      	b.n	800094c <__aeabi_d2f+0x14>
 80009b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009b6:	d107      	bne.n	80009c8 <__aeabi_d2f+0x90>
 80009b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009bc:	bf1e      	ittt	ne
 80009be:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009c2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009c6:	4770      	bxne	lr
 80009c8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <__aeabi_frsub>:
 80009d8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009dc:	e002      	b.n	80009e4 <__addsf3>
 80009de:	bf00      	nop

080009e0 <__aeabi_fsub>:
 80009e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009e4 <__addsf3>:
 80009e4:	0042      	lsls	r2, r0, #1
 80009e6:	bf1f      	itttt	ne
 80009e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009ec:	ea92 0f03 	teqne	r2, r3
 80009f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009f8:	d06a      	beq.n	8000ad0 <__addsf3+0xec>
 80009fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a02:	bfc1      	itttt	gt
 8000a04:	18d2      	addgt	r2, r2, r3
 8000a06:	4041      	eorgt	r1, r0
 8000a08:	4048      	eorgt	r0, r1
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	bfb8      	it	lt
 8000a0e:	425b      	neglt	r3, r3
 8000a10:	2b19      	cmp	r3, #25
 8000a12:	bf88      	it	hi
 8000a14:	4770      	bxhi	lr
 8000a16:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a1a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a1e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a22:	bf18      	it	ne
 8000a24:	4240      	negne	r0, r0
 8000a26:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a2a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a2e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a32:	bf18      	it	ne
 8000a34:	4249      	negne	r1, r1
 8000a36:	ea92 0f03 	teq	r2, r3
 8000a3a:	d03f      	beq.n	8000abc <__addsf3+0xd8>
 8000a3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a40:	fa41 fc03 	asr.w	ip, r1, r3
 8000a44:	eb10 000c 	adds.w	r0, r0, ip
 8000a48:	f1c3 0320 	rsb	r3, r3, #32
 8000a4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a50:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a54:	d502      	bpl.n	8000a5c <__addsf3+0x78>
 8000a56:	4249      	negs	r1, r1
 8000a58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a5c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a60:	d313      	bcc.n	8000a8a <__addsf3+0xa6>
 8000a62:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a66:	d306      	bcc.n	8000a76 <__addsf3+0x92>
 8000a68:	0840      	lsrs	r0, r0, #1
 8000a6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a6e:	f102 0201 	add.w	r2, r2, #1
 8000a72:	2afe      	cmp	r2, #254	@ 0xfe
 8000a74:	d251      	bcs.n	8000b1a <__addsf3+0x136>
 8000a76:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a7e:	bf08      	it	eq
 8000a80:	f020 0001 	biceq.w	r0, r0, #1
 8000a84:	ea40 0003 	orr.w	r0, r0, r3
 8000a88:	4770      	bx	lr
 8000a8a:	0049      	lsls	r1, r1, #1
 8000a8c:	eb40 0000 	adc.w	r0, r0, r0
 8000a90:	3a01      	subs	r2, #1
 8000a92:	bf28      	it	cs
 8000a94:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a98:	d2ed      	bcs.n	8000a76 <__addsf3+0x92>
 8000a9a:	fab0 fc80 	clz	ip, r0
 8000a9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa2:	ebb2 020c 	subs.w	r2, r2, ip
 8000aa6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aaa:	bfaa      	itet	ge
 8000aac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab0:	4252      	neglt	r2, r2
 8000ab2:	4318      	orrge	r0, r3
 8000ab4:	bfbc      	itt	lt
 8000ab6:	40d0      	lsrlt	r0, r2
 8000ab8:	4318      	orrlt	r0, r3
 8000aba:	4770      	bx	lr
 8000abc:	f092 0f00 	teq	r2, #0
 8000ac0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ac4:	bf06      	itte	eq
 8000ac6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000aca:	3201      	addeq	r2, #1
 8000acc:	3b01      	subne	r3, #1
 8000ace:	e7b5      	b.n	8000a3c <__addsf3+0x58>
 8000ad0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ad8:	bf18      	it	ne
 8000ada:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ade:	d021      	beq.n	8000b24 <__addsf3+0x140>
 8000ae0:	ea92 0f03 	teq	r2, r3
 8000ae4:	d004      	beq.n	8000af0 <__addsf3+0x10c>
 8000ae6:	f092 0f00 	teq	r2, #0
 8000aea:	bf08      	it	eq
 8000aec:	4608      	moveq	r0, r1
 8000aee:	4770      	bx	lr
 8000af0:	ea90 0f01 	teq	r0, r1
 8000af4:	bf1c      	itt	ne
 8000af6:	2000      	movne	r0, #0
 8000af8:	4770      	bxne	lr
 8000afa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000afe:	d104      	bne.n	8000b0a <__addsf3+0x126>
 8000b00:	0040      	lsls	r0, r0, #1
 8000b02:	bf28      	it	cs
 8000b04:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b08:	4770      	bx	lr
 8000b0a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b0e:	bf3c      	itt	cc
 8000b10:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b14:	4770      	bxcc	lr
 8000b16:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b1a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b22:	4770      	bx	lr
 8000b24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b28:	bf16      	itet	ne
 8000b2a:	4608      	movne	r0, r1
 8000b2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b30:	4601      	movne	r1, r0
 8000b32:	0242      	lsls	r2, r0, #9
 8000b34:	bf06      	itte	eq
 8000b36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3a:	ea90 0f01 	teqeq	r0, r1
 8000b3e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_ui2f>:
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e004      	b.n	8000b54 <__aeabi_i2f+0x8>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_i2f>:
 8000b4c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b50:	bf48      	it	mi
 8000b52:	4240      	negmi	r0, r0
 8000b54:	ea5f 0c00 	movs.w	ip, r0
 8000b58:	bf08      	it	eq
 8000b5a:	4770      	bxeq	lr
 8000b5c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b60:	4601      	mov	r1, r0
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	e01c      	b.n	8000ba2 <__aeabi_l2f+0x2a>

08000b68 <__aeabi_ul2f>:
 8000b68:	ea50 0201 	orrs.w	r2, r0, r1
 8000b6c:	bf08      	it	eq
 8000b6e:	4770      	bxeq	lr
 8000b70:	f04f 0300 	mov.w	r3, #0
 8000b74:	e00a      	b.n	8000b8c <__aeabi_l2f+0x14>
 8000b76:	bf00      	nop

08000b78 <__aeabi_l2f>:
 8000b78:	ea50 0201 	orrs.w	r2, r0, r1
 8000b7c:	bf08      	it	eq
 8000b7e:	4770      	bxeq	lr
 8000b80:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__aeabi_l2f+0x14>
 8000b86:	4240      	negs	r0, r0
 8000b88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8c:	ea5f 0c01 	movs.w	ip, r1
 8000b90:	bf02      	ittt	eq
 8000b92:	4684      	moveq	ip, r0
 8000b94:	4601      	moveq	r1, r0
 8000b96:	2000      	moveq	r0, #0
 8000b98:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ba2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ba6:	fabc f28c 	clz	r2, ip
 8000baa:	3a08      	subs	r2, #8
 8000bac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb0:	db10      	blt.n	8000bd4 <__aeabi_l2f+0x5c>
 8000bb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb6:	4463      	add	r3, ip
 8000bb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bbc:	f1c2 0220 	rsb	r2, r2, #32
 8000bc0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000bc8:	eb43 0002 	adc.w	r0, r3, r2
 8000bcc:	bf08      	it	eq
 8000bce:	f020 0001 	biceq.w	r0, r0, #1
 8000bd2:	4770      	bx	lr
 8000bd4:	f102 0220 	add.w	r2, r2, #32
 8000bd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bdc:	f1c2 0220 	rsb	r2, r2, #32
 8000be0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be4:	fa21 f202 	lsr.w	r2, r1, r2
 8000be8:	eb43 0002 	adc.w	r0, r3, r2
 8000bec:	bf08      	it	eq
 8000bee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_fmul>:
 8000bf4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c02:	ea92 0f0c 	teqne	r2, ip
 8000c06:	ea93 0f0c 	teqne	r3, ip
 8000c0a:	d06f      	beq.n	8000cec <__aeabi_fmul+0xf8>
 8000c0c:	441a      	add	r2, r3
 8000c0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c12:	0240      	lsls	r0, r0, #9
 8000c14:	bf18      	it	ne
 8000c16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1a:	d01e      	beq.n	8000c5a <__aeabi_fmul+0x66>
 8000c1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c28:	fba0 3101 	umull	r3, r1, r0, r1
 8000c2c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c30:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c34:	bf3e      	ittt	cc
 8000c36:	0049      	lslcc	r1, r1, #1
 8000c38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c3c:	005b      	lslcc	r3, r3, #1
 8000c3e:	ea40 0001 	orr.w	r0, r0, r1
 8000c42:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c46:	2afd      	cmp	r2, #253	@ 0xfd
 8000c48:	d81d      	bhi.n	8000c86 <__aeabi_fmul+0x92>
 8000c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c52:	bf08      	it	eq
 8000c54:	f020 0001 	biceq.w	r0, r0, #1
 8000c58:	4770      	bx	lr
 8000c5a:	f090 0f00 	teq	r0, #0
 8000c5e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c62:	bf08      	it	eq
 8000c64:	0249      	lsleq	r1, r1, #9
 8000c66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c6e:	3a7f      	subs	r2, #127	@ 0x7f
 8000c70:	bfc2      	ittt	gt
 8000c72:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7a:	4770      	bxgt	lr
 8000c7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	3a01      	subs	r2, #1
 8000c86:	dc5d      	bgt.n	8000d44 <__aeabi_fmul+0x150>
 8000c88:	f112 0f19 	cmn.w	r2, #25
 8000c8c:	bfdc      	itt	le
 8000c8e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c92:	4770      	bxle	lr
 8000c94:	f1c2 0200 	rsb	r2, r2, #0
 8000c98:	0041      	lsls	r1, r0, #1
 8000c9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c9e:	f1c2 0220 	rsb	r2, r2, #32
 8000ca2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000caa:	f140 0000 	adc.w	r0, r0, #0
 8000cae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb2:	bf08      	it	eq
 8000cb4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb8:	4770      	bx	lr
 8000cba:	f092 0f00 	teq	r2, #0
 8000cbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cc2:	bf02      	ittt	eq
 8000cc4:	0040      	lsleq	r0, r0, #1
 8000cc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cca:	3a01      	subeq	r2, #1
 8000ccc:	d0f9      	beq.n	8000cc2 <__aeabi_fmul+0xce>
 8000cce:	ea40 000c 	orr.w	r0, r0, ip
 8000cd2:	f093 0f00 	teq	r3, #0
 8000cd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cda:	bf02      	ittt	eq
 8000cdc:	0049      	lsleq	r1, r1, #1
 8000cde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ce2:	3b01      	subeq	r3, #1
 8000ce4:	d0f9      	beq.n	8000cda <__aeabi_fmul+0xe6>
 8000ce6:	ea41 010c 	orr.w	r1, r1, ip
 8000cea:	e78f      	b.n	8000c0c <__aeabi_fmul+0x18>
 8000cec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf0:	ea92 0f0c 	teq	r2, ip
 8000cf4:	bf18      	it	ne
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d00a      	beq.n	8000d12 <__aeabi_fmul+0x11e>
 8000cfc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d00:	bf18      	it	ne
 8000d02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d06:	d1d8      	bne.n	8000cba <__aeabi_fmul+0xc6>
 8000d08:	ea80 0001 	eor.w	r0, r0, r1
 8000d0c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d10:	4770      	bx	lr
 8000d12:	f090 0f00 	teq	r0, #0
 8000d16:	bf17      	itett	ne
 8000d18:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d1c:	4608      	moveq	r0, r1
 8000d1e:	f091 0f00 	teqne	r1, #0
 8000d22:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d26:	d014      	beq.n	8000d52 <__aeabi_fmul+0x15e>
 8000d28:	ea92 0f0c 	teq	r2, ip
 8000d2c:	d101      	bne.n	8000d32 <__aeabi_fmul+0x13e>
 8000d2e:	0242      	lsls	r2, r0, #9
 8000d30:	d10f      	bne.n	8000d52 <__aeabi_fmul+0x15e>
 8000d32:	ea93 0f0c 	teq	r3, ip
 8000d36:	d103      	bne.n	8000d40 <__aeabi_fmul+0x14c>
 8000d38:	024b      	lsls	r3, r1, #9
 8000d3a:	bf18      	it	ne
 8000d3c:	4608      	movne	r0, r1
 8000d3e:	d108      	bne.n	8000d52 <__aeabi_fmul+0x15e>
 8000d40:	ea80 0001 	eor.w	r0, r0, r1
 8000d44:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d50:	4770      	bx	lr
 8000d52:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d56:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_fdiv>:
 8000d5c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d64:	bf1e      	ittt	ne
 8000d66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6a:	ea92 0f0c 	teqne	r2, ip
 8000d6e:	ea93 0f0c 	teqne	r3, ip
 8000d72:	d069      	beq.n	8000e48 <__aeabi_fdiv+0xec>
 8000d74:	eba2 0203 	sub.w	r2, r2, r3
 8000d78:	ea80 0c01 	eor.w	ip, r0, r1
 8000d7c:	0249      	lsls	r1, r1, #9
 8000d7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d82:	d037      	beq.n	8000df4 <__aeabi_fdiv+0x98>
 8000d84:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d94:	428b      	cmp	r3, r1
 8000d96:	bf38      	it	cc
 8000d98:	005b      	lslcc	r3, r3, #1
 8000d9a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d9e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000da2:	428b      	cmp	r3, r1
 8000da4:	bf24      	itt	cs
 8000da6:	1a5b      	subcs	r3, r3, r1
 8000da8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db0:	bf24      	itt	cs
 8000db2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000db6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dbe:	bf24      	itt	cs
 8000dc0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dc8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dcc:	bf24      	itt	cs
 8000dce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dd6:	011b      	lsls	r3, r3, #4
 8000dd8:	bf18      	it	ne
 8000dda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dde:	d1e0      	bne.n	8000da2 <__aeabi_fdiv+0x46>
 8000de0:	2afd      	cmp	r2, #253	@ 0xfd
 8000de2:	f63f af50 	bhi.w	8000c86 <__aeabi_fmul+0x92>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfc:	327f      	adds	r2, #127	@ 0x7f
 8000dfe:	bfc2      	ittt	gt
 8000e00:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e08:	4770      	bxgt	lr
 8000e0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e0e:	f04f 0300 	mov.w	r3, #0
 8000e12:	3a01      	subs	r2, #1
 8000e14:	e737      	b.n	8000c86 <__aeabi_fmul+0x92>
 8000e16:	f092 0f00 	teq	r2, #0
 8000e1a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e1e:	bf02      	ittt	eq
 8000e20:	0040      	lsleq	r0, r0, #1
 8000e22:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e26:	3a01      	subeq	r2, #1
 8000e28:	d0f9      	beq.n	8000e1e <__aeabi_fdiv+0xc2>
 8000e2a:	ea40 000c 	orr.w	r0, r0, ip
 8000e2e:	f093 0f00 	teq	r3, #0
 8000e32:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e36:	bf02      	ittt	eq
 8000e38:	0049      	lsleq	r1, r1, #1
 8000e3a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e3e:	3b01      	subeq	r3, #1
 8000e40:	d0f9      	beq.n	8000e36 <__aeabi_fdiv+0xda>
 8000e42:	ea41 010c 	orr.w	r1, r1, ip
 8000e46:	e795      	b.n	8000d74 <__aeabi_fdiv+0x18>
 8000e48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	d108      	bne.n	8000e64 <__aeabi_fdiv+0x108>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	f47f af7d 	bne.w	8000d52 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	f47f af70 	bne.w	8000d40 <__aeabi_fmul+0x14c>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e776      	b.n	8000d52 <__aeabi_fmul+0x15e>
 8000e64:	ea93 0f0c 	teq	r3, ip
 8000e68:	d104      	bne.n	8000e74 <__aeabi_fdiv+0x118>
 8000e6a:	024b      	lsls	r3, r1, #9
 8000e6c:	f43f af4c 	beq.w	8000d08 <__aeabi_fmul+0x114>
 8000e70:	4608      	mov	r0, r1
 8000e72:	e76e      	b.n	8000d52 <__aeabi_fmul+0x15e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e7e:	d1ca      	bne.n	8000e16 <__aeabi_fdiv+0xba>
 8000e80:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e84:	f47f af5c 	bne.w	8000d40 <__aeabi_fmul+0x14c>
 8000e88:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e8c:	f47f af3c 	bne.w	8000d08 <__aeabi_fmul+0x114>
 8000e90:	e75f      	b.n	8000d52 <__aeabi_fmul+0x15e>
 8000e92:	bf00      	nop

08000e94 <__gesf2>:
 8000e94:	f04f 3cff 	mov.w	ip, #4294967295
 8000e98:	e006      	b.n	8000ea8 <__cmpsf2+0x4>
 8000e9a:	bf00      	nop

08000e9c <__lesf2>:
 8000e9c:	f04f 0c01 	mov.w	ip, #1
 8000ea0:	e002      	b.n	8000ea8 <__cmpsf2+0x4>
 8000ea2:	bf00      	nop

08000ea4 <__cmpsf2>:
 8000ea4:	f04f 0c01 	mov.w	ip, #1
 8000ea8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eb8:	bf18      	it	ne
 8000eba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ebe:	d011      	beq.n	8000ee4 <__cmpsf2+0x40>
 8000ec0:	b001      	add	sp, #4
 8000ec2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ec6:	bf18      	it	ne
 8000ec8:	ea90 0f01 	teqne	r0, r1
 8000ecc:	bf58      	it	pl
 8000ece:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed2:	bf88      	it	hi
 8000ed4:	17c8      	asrhi	r0, r1, #31
 8000ed6:	bf38      	it	cc
 8000ed8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000edc:	bf18      	it	ne
 8000ede:	f040 0001 	orrne.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ee8:	d102      	bne.n	8000ef0 <__cmpsf2+0x4c>
 8000eea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eee:	d105      	bne.n	8000efc <__cmpsf2+0x58>
 8000ef0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef4:	d1e4      	bne.n	8000ec0 <__cmpsf2+0x1c>
 8000ef6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efa:	d0e1      	beq.n	8000ec0 <__cmpsf2+0x1c>
 8000efc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <__aeabi_cfrcmple>:
 8000f04:	4684      	mov	ip, r0
 8000f06:	4608      	mov	r0, r1
 8000f08:	4661      	mov	r1, ip
 8000f0a:	e7ff      	b.n	8000f0c <__aeabi_cfcmpeq>

08000f0c <__aeabi_cfcmpeq>:
 8000f0c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f0e:	f7ff ffc9 	bl	8000ea4 <__cmpsf2>
 8000f12:	2800      	cmp	r0, #0
 8000f14:	bf48      	it	mi
 8000f16:	f110 0f00 	cmnmi.w	r0, #0
 8000f1a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f1c <__aeabi_fcmpeq>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff fff4 	bl	8000f0c <__aeabi_cfcmpeq>
 8000f24:	bf0c      	ite	eq
 8000f26:	2001      	moveq	r0, #1
 8000f28:	2000      	movne	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmplt>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffea 	bl	8000f0c <__aeabi_cfcmpeq>
 8000f38:	bf34      	ite	cc
 8000f3a:	2001      	movcc	r0, #1
 8000f3c:	2000      	movcs	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_fcmple>:
 8000f44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f48:	f7ff ffe0 	bl	8000f0c <__aeabi_cfcmpeq>
 8000f4c:	bf94      	ite	ls
 8000f4e:	2001      	movls	r0, #1
 8000f50:	2000      	movhi	r0, #0
 8000f52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f56:	bf00      	nop

08000f58 <__aeabi_fcmpge>:
 8000f58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f5c:	f7ff ffd2 	bl	8000f04 <__aeabi_cfrcmple>
 8000f60:	bf94      	ite	ls
 8000f62:	2001      	movls	r0, #1
 8000f64:	2000      	movhi	r0, #0
 8000f66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6a:	bf00      	nop

08000f6c <__aeabi_fcmpgt>:
 8000f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f70:	f7ff ffc8 	bl	8000f04 <__aeabi_cfrcmple>
 8000f74:	bf34      	ite	cc
 8000f76:	2001      	movcc	r0, #1
 8000f78:	2000      	movcs	r0, #0
 8000f7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7e:	bf00      	nop

08000f80 <__aeabi_f2uiz>:
 8000f80:	0042      	lsls	r2, r0, #1
 8000f82:	d20e      	bcs.n	8000fa2 <__aeabi_f2uiz+0x22>
 8000f84:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f88:	d30b      	bcc.n	8000fa2 <__aeabi_f2uiz+0x22>
 8000f8a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f8e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f92:	d409      	bmi.n	8000fa8 <__aeabi_f2uiz+0x28>
 8000f94:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f9c:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa0:	4770      	bx	lr
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	4770      	bx	lr
 8000fa8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fac:	d101      	bne.n	8000fb2 <__aeabi_f2uiz+0x32>
 8000fae:	0242      	lsls	r2, r0, #9
 8000fb0:	d102      	bne.n	8000fb8 <__aeabi_f2uiz+0x38>
 8000fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb6:	4770      	bx	lr
 8000fb8:	f04f 0000 	mov.w	r0, #0
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	f6ad 1d2c 	subw	sp, sp, #2348	@ 0x92c
 8000fc6:	f44f 6712 	mov.w	r7, #2336	@ 0x920
 8000fca:	446f      	add	r7, sp
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fcc:	f003 ff44 	bl	8004e58 <HAL_Init>

  /* USER CODE BEGIN Init */
  LED_Power_Init();
 8000fd0:	f002 ffc4 	bl	8003f5c <LED_Power_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd4:	f000 f880 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd8:	f000 faa2 	bl	8001520 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fdc:	f000 f8d2 	bl	8001184 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000fe0:	f000 f94c 	bl	800127c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fe4:	f000 f9ca 	bl	800137c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fe8:	f000 fa1c 	bl	8001424 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000fec:	f000 fa6e 	bl	80014cc <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8000ff0:	f000 f906 	bl	8001200 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t startBuff;
  HAL_UART_Receive_IT(&huart1, &startBuff, 1);
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	482b      	ldr	r0, [pc, #172]	@ (80010a8 <main+0xe8>)
 8000ffc:	f006 fff1 	bl	8007fe2 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001000:	2108      	movs	r1, #8
 8001002:	482a      	ldr	r0, [pc, #168]	@ (80010ac <main+0xec>)
 8001004:	f005 ffb8 	bl	8006f78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001008:	210c      	movs	r1, #12
 800100a:	4828      	ldr	r0, [pc, #160]	@ (80010ac <main+0xec>)
 800100c:	f005 ffb4 	bl	8006f78 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001010:	213c      	movs	r1, #60	@ 0x3c
 8001012:	4827      	ldr	r0, [pc, #156]	@ (80010b0 <main+0xf0>)
 8001014:	f006 f8f4 	bl	8007200 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001018:	213c      	movs	r1, #60	@ 0x3c
 800101a:	4826      	ldr	r0, [pc, #152]	@ (80010b4 <main+0xf4>)
 800101c:	f006 f8f0 	bl	8007200 <HAL_TIM_Encoder_Start_IT>

  // Initialize maze and set initial goal cells (center of 16x16 maze)
  Maze_Init(&maze);
 8001020:	4825      	ldr	r0, [pc, #148]	@ (80010b8 <main+0xf8>)
 8001022:	f001 fcc5 	bl	80029b0 <Maze_Init>
  Set_Goal_Cell(&maze, 4);
 8001026:	2104      	movs	r1, #4
 8001028:	4823      	ldr	r0, [pc, #140]	@ (80010b8 <main+0xf8>)
 800102a:	f001 f9c5 	bl	80023b8 <Set_Goal_Cell>

  // Initialize mouse state to 0
  bzero(&mouse_state, sizeof(mouse_state_t));
 800102e:	4b23      	ldr	r3, [pc, #140]	@ (80010bc <main+0xfc>)
 8001030:	4618      	mov	r0, r3
 8001032:	2320      	movs	r3, #32
 8001034:	461a      	mov	r2, r3
 8001036:	2100      	movs	r1, #0
 8001038:	f007 fdc8 	bl	8008bcc <memset>

  Clear_Profile(&forward_profile);
 800103c:	4820      	ldr	r0, [pc, #128]	@ (80010c0 <main+0x100>)
 800103e:	f002 fcdf 	bl	8003a00 <Clear_Profile>
  Clear_Profile(&rotational_profile);
 8001042:	4820      	ldr	r0, [pc, #128]	@ (80010c4 <main+0x104>)
 8001044:	f002 fcdc 	bl	8003a00 <Clear_Profile>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (armed) {
 8001048:	4b1f      	ldr	r3, [pc, #124]	@ (80010c8 <main+0x108>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0fb      	beq.n	8001048 <main+0x88>
		  motor_controller_enabled = true;
 8001050:	4b1e      	ldr	r3, [pc, #120]	@ (80010cc <main+0x10c>)
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
		  adjust_steering = true;
 8001056:	4b1e      	ldr	r3, [pc, #120]	@ (80010d0 <main+0x110>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
		  switch (mouse_mode) {
 800105c:	4b1d      	ldr	r3, [pc, #116]	@ (80010d4 <main+0x114>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d006      	beq.n	8001072 <main+0xb2>
 8001064:	2b02      	cmp	r3, #2
 8001066:	dcef      	bgt.n	8001048 <main+0x88>
 8001068:	2b00      	cmp	r3, #0
 800106a:	d009      	beq.n	8001080 <main+0xc0>
 800106c:	2b01      	cmp	r3, #1
 800106e:	d00b      	beq.n	8001088 <main+0xc8>
 8001070:	e018      	b.n	80010a4 <main+0xe4>
			  case TEST: // Mode for testing code without having to comment lines out
				  Save_Maze_To_Flash(&maze);
 8001072:	4811      	ldr	r0, [pc, #68]	@ (80010b8 <main+0xf8>)
 8001074:	f003 f802 	bl	800407c <Save_Maze_To_Flash>
				  // Make change to maze
				  Load_Maze_From_Flash(&maze);
 8001078:	480f      	ldr	r0, [pc, #60]	@ (80010b8 <main+0xf8>)
 800107a:	f003 f849 	bl	8004110 <Load_Maze_From_Flash>
				  break;
 800107e:	e011      	b.n	80010a4 <main+0xe4>
			  case SEARCHING:
				  Search_Mode(&maze);
 8001080:	480d      	ldr	r0, [pc, #52]	@ (80010b8 <main+0xf8>)
 8001082:	f001 fccf 	bl	8002a24 <Search_Mode>
				  break;
 8001086:	e00d      	b.n	80010a4 <main+0xe4>
			  case RACING:
				  Race_Mode(maze);
 8001088:	4c0b      	ldr	r4, [pc, #44]	@ (80010b8 <main+0xf8>)
 800108a:	4668      	mov	r0, sp
 800108c:	f104 0310 	add.w	r3, r4, #16
 8001090:	f640 121c 	movw	r2, #2332	@ 0x91c
 8001094:	4619      	mov	r1, r3
 8001096:	f007 fddd 	bl	8008c54 <memcpy>
 800109a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800109e:	f001 ff37 	bl	8002f10 <Race_Mode>
				  break;
 80010a2:	bf00      	nop
	  if (armed) {
 80010a4:	e7d0      	b.n	8001048 <main+0x88>
 80010a6:	bf00      	nop
 80010a8:	200001d4 	.word	0x200001d4
 80010ac:	200000fc 	.word	0x200000fc
 80010b0:	2000018c 	.word	0x2000018c
 80010b4:	20000144 	.word	0x20000144
 80010b8:	20000254 	.word	0x20000254
 80010bc:	20000220 	.word	0x20000220
 80010c0:	20000b84 	.word	0x20000b84
 80010c4:	20000bac 	.word	0x20000bac
 80010c8:	20000248 	.word	0x20000248
 80010cc:	20000c6c 	.word	0x20000c6c
 80010d0:	20000c84 	.word	0x20000c84
 80010d4:	20000b80 	.word	0x20000b80

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	@ 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010e2:	2228      	movs	r2, #40	@ 0x28
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f007 fd70 	bl	8008bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001108:	2302      	movs	r3, #2
 800110a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800110c:	2301      	movs	r3, #1
 800110e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001110:	2310      	movs	r3, #16
 8001112:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001114:	2302      	movs	r3, #2
 8001116:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001118:	2300      	movs	r3, #0
 800111a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800111c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001120:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001122:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001126:	4618      	mov	r0, r3
 8001128:	f005 f902 	bl	8006330 <HAL_RCC_OscConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001132:	f000 fad4 	bl	80016de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001136:	230f      	movs	r3, #15
 8001138:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113a:	2302      	movs	r3, #2
 800113c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	2101      	movs	r1, #1
 8001150:	4618      	mov	r0, r3
 8001152:	f005 fb6f 	bl	8006834 <HAL_RCC_ClockConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800115c:	f000 fabf 	bl	80016de <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001160:	2302      	movs	r3, #2
 8001162:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001164:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001168:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4618      	mov	r0, r3
 800116e:	f005 fcef 	bl	8006b50 <HAL_RCCEx_PeriphCLKConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001178:	f000 fab1 	bl	80016de <Error_Handler>
  }
}
 800117c:	bf00      	nop
 800117e:	3750      	adds	r7, #80	@ 0x50
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001194:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <MX_ADC1_Init+0x74>)
 8001196:	4a19      	ldr	r2, [pc, #100]	@ (80011fc <MX_ADC1_Init+0x78>)
 8001198:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800119a:	4b17      	ldr	r3, [pc, #92]	@ (80011f8 <MX_ADC1_Init+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011a0:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <MX_ADC1_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a6:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <MX_ADC1_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <MX_ADC1_Init+0x74>)
 80011ae:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80011b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b4:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <MX_ADC1_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80011ba:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <MX_ADC1_Init+0x74>)
 80011bc:	2201      	movs	r2, #1
 80011be:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011c0:	480d      	ldr	r0, [pc, #52]	@ (80011f8 <MX_ADC1_Init+0x74>)
 80011c2:	f003 fecf 	bl	8004f64 <HAL_ADC_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80011cc:	f000 fa87 	bl	80016de <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011d0:	2305      	movs	r3, #5
 80011d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d4:	2301      	movs	r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <MX_ADC1_Init+0x74>)
 80011e2:	f004 f983 	bl	80054ec <HAL_ADC_ConfigChannel>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80011ec:	f000 fa77 	bl	80016de <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	2000009c 	.word	0x2000009c
 80011fc:	40012400 	.word	0x40012400

08001200 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001210:	4b18      	ldr	r3, [pc, #96]	@ (8001274 <MX_ADC2_Init+0x74>)
 8001212:	4a19      	ldr	r2, [pc, #100]	@ (8001278 <MX_ADC2_Init+0x78>)
 8001214:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001216:	4b17      	ldr	r3, [pc, #92]	@ (8001274 <MX_ADC2_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800121c:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <MX_ADC2_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001222:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <MX_ADC2_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001228:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <MX_ADC2_Init+0x74>)
 800122a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800122e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001230:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <MX_ADC2_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001236:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <MX_ADC2_Init+0x74>)
 8001238:	2201      	movs	r2, #1
 800123a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800123c:	480d      	ldr	r0, [pc, #52]	@ (8001274 <MX_ADC2_Init+0x74>)
 800123e:	f003 fe91 	bl	8004f64 <HAL_ADC_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001248:	f000 fa49 	bl	80016de <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800124c:	2301      	movs	r3, #1
 800124e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001250:	2301      	movs	r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	@ (8001274 <MX_ADC2_Init+0x74>)
 800125e:	f004 f945 	bl	80054ec <HAL_ADC_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001268:	f000 fa39 	bl	80016de <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200000cc 	.word	0x200000cc
 8001278:	40012800 	.word	0x40012800

0800127c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08e      	sub	sp, #56	@ 0x38
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001282:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001290:	f107 0320 	add.w	r3, r7, #32
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
 80012a8:	615a      	str	r2, [r3, #20]
 80012aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ac:	4b32      	ldr	r3, [pc, #200]	@ (8001378 <MX_TIM2_Init+0xfc>)
 80012ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012b4:	4b30      	ldr	r3, [pc, #192]	@ (8001378 <MX_TIM2_Init+0xfc>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001378 <MX_TIM2_Init+0xfc>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2047;
 80012c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001378 <MX_TIM2_Init+0xfc>)
 80012c2:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80012c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001378 <MX_TIM2_Init+0xfc>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001378 <MX_TIM2_Init+0xfc>)
 80012d0:	2280      	movs	r2, #128	@ 0x80
 80012d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012d4:	4828      	ldr	r0, [pc, #160]	@ (8001378 <MX_TIM2_Init+0xfc>)
 80012d6:	f005 fda7 	bl	8006e28 <HAL_TIM_Base_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80012e0:	f000 f9fd 	bl	80016de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4821      	ldr	r0, [pc, #132]	@ (8001378 <MX_TIM2_Init+0xfc>)
 80012f2:	f006 f9e5 	bl	80076c0 <HAL_TIM_ConfigClockSource>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80012fc:	f000 f9ef 	bl	80016de <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001300:	481d      	ldr	r0, [pc, #116]	@ (8001378 <MX_TIM2_Init+0xfc>)
 8001302:	f005 fde0 	bl	8006ec6 <HAL_TIM_PWM_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800130c:	f000 f9e7 	bl	80016de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001318:	f107 0320 	add.w	r3, r7, #32
 800131c:	4619      	mov	r1, r3
 800131e:	4816      	ldr	r0, [pc, #88]	@ (8001378 <MX_TIM2_Init+0xfc>)
 8001320:	f006 fd6a 	bl	8007df8 <HAL_TIMEx_MasterConfigSynchronization>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800132a:	f000 f9d8 	bl	80016de <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132e:	2360      	movs	r3, #96	@ 0x60
 8001330:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2208      	movs	r2, #8
 8001342:	4619      	mov	r1, r3
 8001344:	480c      	ldr	r0, [pc, #48]	@ (8001378 <MX_TIM2_Init+0xfc>)
 8001346:	f006 f8f9 	bl	800753c <HAL_TIM_PWM_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001350:	f000 f9c5 	bl	80016de <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	220c      	movs	r2, #12
 8001358:	4619      	mov	r1, r3
 800135a:	4807      	ldr	r0, [pc, #28]	@ (8001378 <MX_TIM2_Init+0xfc>)
 800135c:	f006 f8ee 	bl	800753c <HAL_TIM_PWM_ConfigChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001366:	f000 f9ba 	bl	80016de <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800136a:	4803      	ldr	r0, [pc, #12]	@ (8001378 <MX_TIM2_Init+0xfc>)
 800136c:	f003 fc32 	bl	8004bd4 <HAL_TIM_MspPostInit>

}
 8001370:	bf00      	nop
 8001372:	3738      	adds	r7, #56	@ 0x38
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200000fc 	.word	0x200000fc

0800137c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08c      	sub	sp, #48	@ 0x30
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	2224      	movs	r2, #36	@ 0x24
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f007 fc1e 	bl	8008bcc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001398:	4b20      	ldr	r3, [pc, #128]	@ (800141c <MX_TIM3_Init+0xa0>)
 800139a:	4a21      	ldr	r2, [pc, #132]	@ (8001420 <MX_TIM3_Init+0xa4>)
 800139c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800139e:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <MX_TIM3_Init+0xa0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a4:	4b1d      	ldr	r3, [pc, #116]	@ (800141c <MX_TIM3_Init+0xa0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013aa:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <MX_TIM3_Init+0xa0>)
 80013ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <MX_TIM3_Init+0xa0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b8:	4b18      	ldr	r3, [pc, #96]	@ (800141c <MX_TIM3_Init+0xa0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013be:	2303      	movs	r3, #3
 80013c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80013c2:	2302      	movs	r3, #2
 80013c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013c6:	2301      	movs	r3, #1
 80013c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80013d2:	2302      	movs	r3, #2
 80013d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013d6:	2301      	movs	r3, #1
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	4619      	mov	r1, r3
 80013e8:	480c      	ldr	r0, [pc, #48]	@ (800141c <MX_TIM3_Init+0xa0>)
 80013ea:	f005 fe67 	bl	80070bc <HAL_TIM_Encoder_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80013f4:	f000 f973 	bl	80016de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	@ (800141c <MX_TIM3_Init+0xa0>)
 8001406:	f006 fcf7 	bl	8007df8 <HAL_TIMEx_MasterConfigSynchronization>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001410:	f000 f965 	bl	80016de <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	3730      	adds	r7, #48	@ 0x30
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000144 	.word	0x20000144
 8001420:	40000400 	.word	0x40000400

08001424 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08c      	sub	sp, #48	@ 0x30
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800142a:	f107 030c 	add.w	r3, r7, #12
 800142e:	2224      	movs	r2, #36	@ 0x24
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f007 fbca 	bl	8008bcc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001440:	4b20      	ldr	r3, [pc, #128]	@ (80014c4 <MX_TIM4_Init+0xa0>)
 8001442:	4a21      	ldr	r2, [pc, #132]	@ (80014c8 <MX_TIM4_Init+0xa4>)
 8001444:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001446:	4b1f      	ldr	r3, [pc, #124]	@ (80014c4 <MX_TIM4_Init+0xa0>)
 8001448:	2200      	movs	r2, #0
 800144a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144c:	4b1d      	ldr	r3, [pc, #116]	@ (80014c4 <MX_TIM4_Init+0xa0>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001452:	4b1c      	ldr	r3, [pc, #112]	@ (80014c4 <MX_TIM4_Init+0xa0>)
 8001454:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001458:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145a:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <MX_TIM4_Init+0xa0>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001460:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <MX_TIM4_Init+0xa0>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001466:	2303      	movs	r3, #3
 8001468:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800146a:	2302      	movs	r3, #2
 800146c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800146e:	2301      	movs	r3, #1
 8001470:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800147a:	2302      	movs	r3, #2
 800147c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800147e:	2301      	movs	r3, #1
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	4619      	mov	r1, r3
 8001490:	480c      	ldr	r0, [pc, #48]	@ (80014c4 <MX_TIM4_Init+0xa0>)
 8001492:	f005 fe13 	bl	80070bc <HAL_TIM_Encoder_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800149c:	f000 f91f 	bl	80016de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <MX_TIM4_Init+0xa0>)
 80014ae:	f006 fca3 	bl	8007df8 <HAL_TIMEx_MasterConfigSynchronization>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80014b8:	f000 f911 	bl	80016de <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	3730      	adds	r7, #48	@ 0x30
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2000018c 	.word	0x2000018c
 80014c8:	40000800 	.word	0x40000800

080014cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014d0:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <MX_USART1_UART_Init+0x4c>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	@ (800151c <MX_USART1_UART_Init+0x50>)
 80014d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <MX_USART1_UART_Init+0x4c>)
 80014d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <MX_USART1_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <MX_USART1_UART_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <MX_USART1_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014f0:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <MX_USART1_UART_Init+0x4c>)
 80014f2:	220c      	movs	r2, #12
 80014f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <MX_USART1_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <MX_USART1_UART_Init+0x4c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	@ (8001518 <MX_USART1_UART_Init+0x4c>)
 8001504:	f006 fce8 	bl	8007ed8 <HAL_UART_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800150e:	f000 f8e6 	bl	80016de <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200001d4 	.word	0x200001d4
 800151c:	40013800 	.word	0x40013800

08001520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	f107 0310 	add.w	r3, r7, #16
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001534:	4b51      	ldr	r3, [pc, #324]	@ (800167c <MX_GPIO_Init+0x15c>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a50      	ldr	r2, [pc, #320]	@ (800167c <MX_GPIO_Init+0x15c>)
 800153a:	f043 0310 	orr.w	r3, r3, #16
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b4e      	ldr	r3, [pc, #312]	@ (800167c <MX_GPIO_Init+0x15c>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	4b4b      	ldr	r3, [pc, #300]	@ (800167c <MX_GPIO_Init+0x15c>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a4a      	ldr	r2, [pc, #296]	@ (800167c <MX_GPIO_Init+0x15c>)
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b48      	ldr	r3, [pc, #288]	@ (800167c <MX_GPIO_Init+0x15c>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001564:	4b45      	ldr	r3, [pc, #276]	@ (800167c <MX_GPIO_Init+0x15c>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	4a44      	ldr	r2, [pc, #272]	@ (800167c <MX_GPIO_Init+0x15c>)
 800156a:	f043 0308 	orr.w	r3, r3, #8
 800156e:	6193      	str	r3, [r2, #24]
 8001570:	4b42      	ldr	r3, [pc, #264]	@ (800167c <MX_GPIO_Init+0x15c>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Power_GPIO_Port, LED_Power_Pin, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001582:	483f      	ldr	r0, [pc, #252]	@ (8001680 <MX_GPIO_Init+0x160>)
 8001584:	f004 fe8a 	bl	800629c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMIT_L_Pin|EMIT_R_Pin|EMIT_FR_Pin|MR_FWD_Pin
 8001588:	2200      	movs	r2, #0
 800158a:	f64f 5120 	movw	r1, #64800	@ 0xfd20
 800158e:	483d      	ldr	r0, [pc, #244]	@ (8001684 <MX_GPIO_Init+0x164>)
 8001590:	f004 fe84 	bl	800629c <HAL_GPIO_WritePin>
                          |ML_FWD_Pin|MR_BWD_Pin|EMIT_FL_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800159a:	483b      	ldr	r0, [pc, #236]	@ (8001688 <MX_GPIO_Init+0x168>)
 800159c:	f004 fe7e 	bl	800629c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Blue_Pin|LED_Green_Pin, GPIO_PIN_SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 80015a6:	4838      	ldr	r0, [pc, #224]	@ (8001688 <MX_GPIO_Init+0x168>)
 80015a8:	f004 fe78 	bl	800629c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Power_Pin */
  GPIO_InitStruct.Pin = LED_Power_Pin;
 80015ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2302      	movs	r3, #2
 80015bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_Power_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	4619      	mov	r1, r3
 80015c4:	482e      	ldr	r0, [pc, #184]	@ (8001680 <MX_GPIO_Init+0x160>)
 80015c6:	f004 fce5 	bl	8005f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : RACE_SW2_Pin */
  GPIO_InitStruct.Pin = RACE_SW2_Pin;
 80015ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015d0:	4b2e      	ldr	r3, [pc, #184]	@ (800168c <MX_GPIO_Init+0x16c>)
 80015d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RACE_SW2_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	4619      	mov	r1, r3
 80015de:	4828      	ldr	r0, [pc, #160]	@ (8001680 <MX_GPIO_Init+0x160>)
 80015e0:	f004 fcd8 	bl	8005f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_L_Pin EMIT_R_Pin EMIT_FR_Pin MR_FWD_Pin
                           ML_FWD_Pin MR_BWD_Pin EMIT_FL_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = EMIT_L_Pin|EMIT_R_Pin|EMIT_FR_Pin|MR_FWD_Pin
 80015e4:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80015e8:	613b      	str	r3, [r7, #16]
                          |ML_FWD_Pin|MR_BWD_Pin|EMIT_FL_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2302      	movs	r3, #2
 80015f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f6:	f107 0310 	add.w	r3, r7, #16
 80015fa:	4619      	mov	r1, r3
 80015fc:	4821      	ldr	r0, [pc, #132]	@ (8001684 <MX_GPIO_Init+0x164>)
 80015fe:	f004 fcc9 	bl	8005f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ML_BWD_Pin LED_Red_Pin LED_Blue_Pin LED_Green_Pin */
  GPIO_InitStruct.Pin = ML_BWD_Pin|LED_Red_Pin|LED_Blue_Pin|LED_Green_Pin;
 8001602:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8001606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001608:	2301      	movs	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2302      	movs	r3, #2
 8001612:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	4619      	mov	r1, r3
 800161a:	481b      	ldr	r0, [pc, #108]	@ (8001688 <MX_GPIO_Init+0x168>)
 800161c:	f004 fcba 	bl	8005f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARM_SW1_Pin */
  GPIO_InitStruct.Pin = ARM_SW1_Pin;
 8001620:	2310      	movs	r3, #16
 8001622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001624:	4b19      	ldr	r3, [pc, #100]	@ (800168c <MX_GPIO_Init+0x16c>)
 8001626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ARM_SW1_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	4619      	mov	r1, r3
 8001632:	4814      	ldr	r0, [pc, #80]	@ (8001684 <MX_GPIO_Init+0x164>)
 8001634:	f004 fcae 	bl	8005f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOADMAZE_SW3_Pin */
  GPIO_InitStruct.Pin = LOADMAZE_SW3_Pin;
 8001638:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800163c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LOADMAZE_SW3_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	4619      	mov	r1, r3
 800164c:	480d      	ldr	r0, [pc, #52]	@ (8001684 <MX_GPIO_Init+0x164>)
 800164e:	f004 fca1 	bl	8005f94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	210f      	movs	r1, #15
 8001656:	200a      	movs	r0, #10
 8001658:	f004 f9b3 	bl	80059c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800165c:	200a      	movs	r0, #10
 800165e:	f004 f9cc 	bl	80059fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	210f      	movs	r1, #15
 8001666:	2028      	movs	r0, #40	@ 0x28
 8001668:	f004 f9ab 	bl	80059c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800166c:	2028      	movs	r0, #40	@ 0x28
 800166e:	f004 f9c4 	bl	80059fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001672:	bf00      	nop
 8001674:	3720      	adds	r7, #32
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000
 8001680:	40011000 	.word	0x40011000
 8001684:	40010c00 	.word	0x40010c00
 8001688:	40010800 	.word	0x40010800
 800168c:	10210000 	.word	0x10210000

08001690 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ARM_SW1_Pin) {       // Set to arm mode
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	2b10      	cmp	r3, #16
 800169e:	d102      	bne.n	80016a6 <HAL_GPIO_EXTI_Callback+0x16>
		ARM_Button();
 80016a0:	f002 fd48 	bl	8004134 <ARM_Button>
		RACE_Button();
	}
	else if (GPIO_Pin == LOADMAZE_SW3_Pin) { // Load maze from memory into maze struct
		LOADMAZE_Button();
	}
}
 80016a4:	e00c      	b.n	80016c0 <HAL_GPIO_EXTI_Callback+0x30>
	else if (GPIO_Pin == RACE_SW2_Pin) { // Set to race mode
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016ac:	d102      	bne.n	80016b4 <HAL_GPIO_EXTI_Callback+0x24>
		RACE_Button();
 80016ae:	f002 fd5d 	bl	800416c <RACE_Button>
}
 80016b2:	e005      	b.n	80016c0 <HAL_GPIO_EXTI_Callback+0x30>
	else if (GPIO_Pin == LOADMAZE_SW3_Pin) { // Load maze from memory into maze struct
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016ba:	d101      	bne.n	80016c0 <HAL_GPIO_EXTI_Callback+0x30>
		LOADMAZE_Button();
 80016bc:	f002 fd70 	bl	80041a0 <LOADMAZE_Button>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	UART_Receive_Callback(huart);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f8cb 	bl	800186c <UART_Receive_Callback>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e2:	b672      	cpsid	i
}
 80016e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e6:	bf00      	nop
 80016e8:	e7fd      	b.n	80016e6 <Error_Handler+0x8>
	...

080016ec <Parse_Receive_Data>:
#define READ_BATT   0b0010  // READ BATTERY: Read battery voltage.
#define PULSE_BUZZ  0b0011  // PULSE BUZZER: Play a short noise from the buzzer.
#define START_RUN   0b0100  // START RUN: Start a maze run. For testing purposes only.
#define PAIRED      0b0101  // PAIRED: Send OK response to verify received.

void Parse_Receive_Data(uint8_t rxBuff) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
	uint8_t command = (rxBuff & 0xF0) >> 4;   // Isolate command code
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	091b      	lsrs	r3, r3, #4
 80016fa:	73fb      	strb	r3, [r7, #15]
	uint8_t data    = (rxBuff & 0x0F);        // Isolate other data (not used currently)
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	73bb      	strb	r3, [r7, #14]
	(void) data;                              // Temporary to remove warning for unused variable

	switch(command) {
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	2b07      	cmp	r3, #7
 8001708:	d837      	bhi.n	800177a <Parse_Receive_Data+0x8e>
 800170a:	a201      	add	r2, pc, #4	@ (adr r2, 8001710 <Parse_Receive_Data+0x24>)
 800170c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001710:	08001731 	.word	0x08001731
 8001714:	0800174f 	.word	0x0800174f
 8001718:	0800175f 	.word	0x0800175f
 800171c:	0800176b 	.word	0x0800176b
 8001720:	08001773 	.word	0x08001773
 8001724:	0800177b 	.word	0x0800177b
 8001728:	0800177b 	.word	0x0800177b
 800172c:	08001757 	.word	0x08001757
		case SET_MODE:
			debugMode = (debugMode + 1) % 2;
 8001730:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <Parse_Receive_Data+0x98>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	bfb8      	it	lt
 800173e:	425b      	neglt	r3, r3
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <Parse_Receive_Data+0x98>)
 8001744:	701a      	strb	r2, [r3, #0]
			debugCounter = 0;
 8001746:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <Parse_Receive_Data+0x9c>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
			break;
 800174c:	e016      	b.n	800177c <Parse_Receive_Data+0x90>
		case HALT_RUN:
			armed = false;
 800174e:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <Parse_Receive_Data+0xa0>)
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]
			break;
 8001754:	e012      	b.n	800177c <Parse_Receive_Data+0x90>
		case RESUME_RUN:
			HALTED = 0;
 8001756:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <Parse_Receive_Data+0xa4>)
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
			break;
 800175c:	e00e      	b.n	800177c <Parse_Receive_Data+0x90>
		case READ_BATT:
			HAL_UART_Transmit_IT(&huart1, (uint8_t*)&(mouse_state.battery_voltage), sizeof(double));
 800175e:	2208      	movs	r2, #8
 8001760:	490c      	ldr	r1, [pc, #48]	@ (8001794 <Parse_Receive_Data+0xa8>)
 8001762:	480d      	ldr	r0, [pc, #52]	@ (8001798 <Parse_Receive_Data+0xac>)
 8001764:	f006 fc08 	bl	8007f78 <HAL_UART_Transmit_IT>
			break;
 8001768:	e008      	b.n	800177c <Parse_Receive_Data+0x90>
		case PULSE_BUZZ:
			Pulse_Buzzer(100);
 800176a:	2064      	movs	r0, #100	@ 0x64
 800176c:	f002 fc02 	bl	8003f74 <Pulse_Buzzer>
			break;
 8001770:	e004      	b.n	800177c <Parse_Receive_Data+0x90>
		case START_RUN:
			armed = true;
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <Parse_Receive_Data+0xa0>)
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
			break;
 8001778:	e000      	b.n	800177c <Parse_Receive_Data+0x90>
		case PAIRED:
			break;
		default:
			break;
 800177a:	bf00      	nop
	}
}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000240 	.word	0x20000240
 8001788:	20000241 	.word	0x20000241
 800178c:	20000248 	.word	0x20000248
 8001790:	20000bf4 	.word	0x20000bf4
 8001794:	20000238 	.word	0x20000238
 8001798:	200001d4 	.word	0x200001d4

0800179c <Create_Byte_Stream>:

void Create_Byte_Stream(uint8_t txData[PACKET_SIZE]) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	bzero(txData, PACKET_SIZE);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	461a      	mov	r2, r3
 80017a8:	2300      	movs	r3, #0
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	6053      	str	r3, [r2, #4]
 80017ae:	6093      	str	r3, [r2, #8]
 80017b0:	60d3      	str	r3, [r2, #12]
 80017b2:	6113      	str	r3, [r2, #16]
 80017b4:	6153      	str	r3, [r2, #20]
 80017b6:	6193      	str	r3, [r2, #24]

	memcpy(txData, "Debug", 5);
 80017b8:	2205      	movs	r2, #5
 80017ba:	4922      	ldr	r1, [pc, #136]	@ (8001844 <Create_Byte_Stream+0xa8>)
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f007 fa49 	bl	8008c54 <memcpy>
	memcpy(txData + 5, &mouse_state.current_cell, sizeof(uint8_t));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3305      	adds	r3, #5
 80017c6:	4a20      	ldr	r2, [pc, #128]	@ (8001848 <Create_Byte_Stream+0xac>)
 80017c8:	7812      	ldrb	r2, [r2, #0]
 80017ca:	701a      	strb	r2, [r3, #0]
	memcpy(txData + 6, &mouse_state.rpm.left_rpm, sizeof(uint16_t));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3306      	adds	r3, #6
 80017d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001848 <Create_Byte_Stream+0xac>)
 80017d2:	8892      	ldrh	r2, [r2, #4]
 80017d4:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 8, &mouse_state.rpm.right_rpm, sizeof(uint16_t));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3308      	adds	r3, #8
 80017da:	4a1b      	ldr	r2, [pc, #108]	@ (8001848 <Create_Byte_Stream+0xac>)
 80017dc:	88d2      	ldrh	r2, [r2, #6]
 80017de:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 10, &mouse_state.mouse_direction, sizeof(uint8_t));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	330a      	adds	r3, #10
 80017e4:	4a18      	ldr	r2, [pc, #96]	@ (8001848 <Create_Byte_Stream+0xac>)
 80017e6:	78d2      	ldrb	r2, [r2, #3]
 80017e8:	701a      	strb	r2, [r3, #0]
	memset(txData + 11, ((mouse_state.mouse_position[0] << 4) | mouse_state.mouse_position[1]), sizeof(uint8_t));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f103 000b 	add.w	r0, r3, #11
 80017f0:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <Create_Byte_Stream+0xac>)
 80017f2:	785b      	ldrb	r3, [r3, #1]
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	4a14      	ldr	r2, [pc, #80]	@ (8001848 <Create_Byte_Stream+0xac>)
 80017f8:	7892      	ldrb	r2, [r2, #2]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	2201      	movs	r2, #1
 80017fe:	4619      	mov	r1, r3
 8001800:	f007 f9e4 	bl	8008bcc <memset>
	memcpy(txData + 12, &mouse_state.battery_voltage, sizeof(double));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f103 010c 	add.w	r1, r3, #12
 800180a:	4b0f      	ldr	r3, [pc, #60]	@ (8001848 <Create_Byte_Stream+0xac>)
 800180c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001810:	600a      	str	r2, [r1, #0]
 8001812:	604b      	str	r3, [r1, #4]
	memcpy(txData + 20, &mouse_state.raw.front_left, sizeof(uint16_t));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3314      	adds	r3, #20
 8001818:	4a0b      	ldr	r2, [pc, #44]	@ (8001848 <Create_Byte_Stream+0xac>)
 800181a:	8912      	ldrh	r2, [r2, #8]
 800181c:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 22, &mouse_state.raw.left, sizeof(uint16_t));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3316      	adds	r3, #22
 8001822:	4a09      	ldr	r2, [pc, #36]	@ (8001848 <Create_Byte_Stream+0xac>)
 8001824:	8952      	ldrh	r2, [r2, #10]
 8001826:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 24, &mouse_state.raw.right, sizeof(uint16_t));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3318      	adds	r3, #24
 800182c:	4a06      	ldr	r2, [pc, #24]	@ (8001848 <Create_Byte_Stream+0xac>)
 800182e:	8992      	ldrh	r2, [r2, #12]
 8001830:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 26, &mouse_state.raw.front_right, sizeof(uint16_t));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	331a      	adds	r3, #26
 8001836:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <Create_Byte_Stream+0xac>)
 8001838:	89d2      	ldrh	r2, [r2, #14]
 800183a:	801a      	strh	r2, [r3, #0]
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	08008d18 	.word	0x08008d18
 8001848:	20000220 	.word	0x20000220

0800184c <Debug_Packet_Send>:

// When mouse in debug mode transmit above data.
//  Also transmit start identifier "Debug". This totals to 28 bytes of data transmitted every 50 ms.
void Debug_Packet_Send() {
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	Create_Byte_Stream(txDebug);                                  // Create byte stream
 8001850:	4804      	ldr	r0, [pc, #16]	@ (8001864 <Debug_Packet_Send+0x18>)
 8001852:	f7ff ffa3 	bl	800179c <Create_Byte_Stream>
	HAL_UART_Transmit_IT(&huart1, txDebug, sizeof(txDebug));      // Transmit data
 8001856:	221c      	movs	r2, #28
 8001858:	4902      	ldr	r1, [pc, #8]	@ (8001864 <Debug_Packet_Send+0x18>)
 800185a:	4803      	ldr	r0, [pc, #12]	@ (8001868 <Debug_Packet_Send+0x1c>)
 800185c:	f006 fb8c 	bl	8007f78 <HAL_UART_Transmit_IT>
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000bd8 	.word	0x20000bd8
 8001868:	200001d4 	.word	0x200001d4

0800186c <UART_Receive_Callback>:

void UART_Receive_Callback(UART_HandleTypeDef *huart) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0a      	ldr	r2, [pc, #40]	@ (80018a4 <UART_Receive_Callback+0x38>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d10e      	bne.n	800189c <UART_Receive_Callback+0x30>
		Parse_Receive_Data(rxData);
 800187e:	4b0a      	ldr	r3, [pc, #40]	@ (80018a8 <UART_Receive_Callback+0x3c>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff ff32 	bl	80016ec <Parse_Receive_Data>
		HAL_UART_Transmit_IT(&huart1, &txData, sizeof(txData));      // Transmit response ACK (0xFF)                          // Parse incoming command
 8001888:	2201      	movs	r2, #1
 800188a:	4908      	ldr	r1, [pc, #32]	@ (80018ac <UART_Receive_Callback+0x40>)
 800188c:	4808      	ldr	r0, [pc, #32]	@ (80018b0 <UART_Receive_Callback+0x44>)
 800188e:	f006 fb73 	bl	8007f78 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart1, &rxData, sizeof(rxData));       // Receive incoming command
 8001892:	2201      	movs	r2, #1
 8001894:	4904      	ldr	r1, [pc, #16]	@ (80018a8 <UART_Receive_Callback+0x3c>)
 8001896:	4806      	ldr	r0, [pc, #24]	@ (80018b0 <UART_Receive_Callback+0x44>)
 8001898:	f006 fba3 	bl	8007fe2 <HAL_UART_Receive_IT>
	}
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40013800 	.word	0x40013800
 80018a8:	20000bd4 	.word	0x20000bd4
 80018ac:	20000000 	.word	0x20000000
 80018b0:	200001d4 	.word	0x200001d4

080018b4 <HAL_TIM_IC_CaptureCallback>:
float mouse_position = 0;

uint32_t last_calculated_time[2] = { 0, 0 }; // { last calculated time left, last calculated time right }
uint32_t last_tick_count[2] = { 0, 0 };

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	uint16_t current_count = __HAL_TIM_GET_COUNTER(htim);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c2:	81fb      	strh	r3, [r7, #14]
	if (htim == &htim4) { // Motor right
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a14      	ldr	r2, [pc, #80]	@ (8001918 <HAL_TIM_IC_CaptureCallback+0x64>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d10d      	bne.n	80018e8 <HAL_TIM_IC_CaptureCallback+0x34>
		objective_R -= (int16_t)(current_count - counter_R);
 80018cc:	4b13      	ldr	r3, [pc, #76]	@ (800191c <HAL_TIM_IC_CaptureCallback+0x68>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a13      	ldr	r2, [pc, #76]	@ (8001920 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80018d2:	8812      	ldrh	r2, [r2, #0]
 80018d4:	89f9      	ldrh	r1, [r7, #14]
 80018d6:	1a8a      	subs	r2, r1, r2
 80018d8:	b292      	uxth	r2, r2
 80018da:	b212      	sxth	r2, r2
 80018dc:	1a9b      	subs	r3, r3, r2
 80018de:	4a0f      	ldr	r2, [pc, #60]	@ (800191c <HAL_TIM_IC_CaptureCallback+0x68>)
 80018e0:	6013      	str	r3, [r2, #0]
		counter_R = current_count;
 80018e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001920 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80018e4:	89fb      	ldrh	r3, [r7, #14]
 80018e6:	8013      	strh	r3, [r2, #0]
	}
	if (htim == &htim3) { // Motor left
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001924 <HAL_TIM_IC_CaptureCallback+0x70>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d10d      	bne.n	800190c <HAL_TIM_IC_CaptureCallback+0x58>
		objective_L -= (int16_t)(current_count - counter_L);
 80018f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <HAL_TIM_IC_CaptureCallback+0x74>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0d      	ldr	r2, [pc, #52]	@ (800192c <HAL_TIM_IC_CaptureCallback+0x78>)
 80018f6:	8812      	ldrh	r2, [r2, #0]
 80018f8:	89f9      	ldrh	r1, [r7, #14]
 80018fa:	1a8a      	subs	r2, r1, r2
 80018fc:	b292      	uxth	r2, r2
 80018fe:	b212      	sxth	r2, r2
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	4a09      	ldr	r2, [pc, #36]	@ (8001928 <HAL_TIM_IC_CaptureCallback+0x74>)
 8001904:	6013      	str	r3, [r2, #0]
		counter_L = current_count;
 8001906:	4a09      	ldr	r2, [pc, #36]	@ (800192c <HAL_TIM_IC_CaptureCallback+0x78>)
 8001908:	89fb      	ldrh	r3, [r7, #14]
 800190a:	8013      	strh	r3, [r2, #0]
	}
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	2000018c 	.word	0x2000018c
 800191c:	20000250 	.word	0x20000250
 8001920:	20000bf8 	.word	0x20000bf8
 8001924:	20000144 	.word	0x20000144
 8001928:	2000024c 	.word	0x2000024c
 800192c:	20000bf6 	.word	0x20000bf6

08001930 <Calculate_RPM>:

// LIKELY WILL HAVE TO CHANGE
uint16_t Calculate_RPM(int32_t current_ticks, uint8_t motor) {
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	70fb      	strb	r3, [r7, #3]
	uint32_t time_difference = global_time - last_calculated_time[motor];
 800193c:	4b20      	ldr	r3, [pc, #128]	@ (80019c0 <Calculate_RPM+0x90>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	4920      	ldr	r1, [pc, #128]	@ (80019c4 <Calculate_RPM+0x94>)
 8001944:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	60fb      	str	r3, [r7, #12]
	last_calculated_time[motor] = global_time;
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	4a1c      	ldr	r2, [pc, #112]	@ (80019c0 <Calculate_RPM+0x90>)
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	491c      	ldr	r1, [pc, #112]	@ (80019c4 <Calculate_RPM+0x94>)
 8001954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	int32_t tick_difference = abs(current_ticks - last_tick_count[motor]);
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	491a      	ldr	r1, [pc, #104]	@ (80019c8 <Calculate_RPM+0x98>)
 800195e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	bfb8      	it	lt
 8001968:	425b      	neglt	r3, r3
 800196a:	60bb      	str	r3, [r7, #8]
	last_tick_count[motor] = current_ticks;
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	4915      	ldr	r1, [pc, #84]	@ (80019c8 <Calculate_RPM+0x98>)
 8001972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return ((MS_PER_SEC * SEC_PER_MIN * tick_difference) / (TICKS_PER_ROTATION * time_difference));
 8001976:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800197a:	223c      	movs	r2, #60	@ 0x3c
 800197c:	fb02 f303 	mul.w	r3, r2, r3
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	fb02 f303 	mul.w	r3, r2, r3
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff f8e0 	bl	8000b4c <__aeabi_i2f>
 800198c:	4604      	mov	r4, r0
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f7ff f8d8 	bl	8000b44 <__aeabi_ui2f>
 8001994:	4603      	mov	r3, r0
 8001996:	4a0d      	ldr	r2, [pc, #52]	@ (80019cc <Calculate_RPM+0x9c>)
 8001998:	4611      	mov	r1, r2
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff f92a 	bl	8000bf4 <__aeabi_fmul>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4619      	mov	r1, r3
 80019a4:	4620      	mov	r0, r4
 80019a6:	f7ff f9d9 	bl	8000d5c <__aeabi_fdiv>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fae7 	bl	8000f80 <__aeabi_f2uiz>
 80019b2:	4603      	mov	r3, r0
 80019b4:	b29b      	uxth	r3, r3
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd90      	pop	{r4, r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000244 	.word	0x20000244
 80019c4:	20000c0c 	.word	0x20000c0c
 80019c8:	20000c14 	.word	0x20000c14
 80019cc:	43b328f6 	.word	0x43b328f6

080019d0 <Update_Encoders>:

void Update_Encoders() {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
	int32_t delta_tick_right = objective_R;
 80019d6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a8c <Update_Encoders+0xbc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	60fb      	str	r3, [r7, #12]
	int32_t delta_tick_left = objective_L;
 80019dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001a90 <Update_Encoders+0xc0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60bb      	str	r3, [r7, #8]
	objective_R = 0;
 80019e2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a8c <Update_Encoders+0xbc>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
	objective_L = 0;
 80019e8:	4b29      	ldr	r3, [pc, #164]	@ (8001a90 <Update_Encoders+0xc0>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]

	float delta_position_right = delta_tick_right * MM_PER_TICK_LEFT;
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f7ff f8ac 	bl	8000b4c <__aeabi_i2f>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4a27      	ldr	r2, [pc, #156]	@ (8001a94 <Update_Encoders+0xc4>)
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff f8fa 	bl	8000bf4 <__aeabi_fmul>
 8001a00:	4603      	mov	r3, r0
 8001a02:	607b      	str	r3, [r7, #4]
	float delta_position_left = delta_tick_left * MM_PER_TICK_RIGHT;
 8001a04:	68b8      	ldr	r0, [r7, #8]
 8001a06:	f7ff f8a1 	bl	8000b4c <__aeabi_i2f>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4a22      	ldr	r2, [pc, #136]	@ (8001a98 <Update_Encoders+0xc8>)
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff f8ef 	bl	8000bf4 <__aeabi_fmul>
 8001a16:	4603      	mov	r3, r0
 8001a18:	603b      	str	r3, [r7, #0]
	delta_position_forward = (delta_position_right + delta_position_left) / 2; // average change in position
 8001a1a:	6839      	ldr	r1, [r7, #0]
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7fe ffe1 	bl	80009e4 <__addsf3>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff f997 	bl	8000d5c <__aeabi_fdiv>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b1a      	ldr	r3, [pc, #104]	@ (8001a9c <Update_Encoders+0xcc>)
 8001a34:	601a      	str	r2, [r3, #0]
	mouse_position += delta_position_forward;
 8001a36:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa0 <Update_Encoders+0xd0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a18      	ldr	r2, [pc, #96]	@ (8001a9c <Update_Encoders+0xcc>)
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe ffcf 	bl	80009e4 <__addsf3>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <Update_Encoders+0xd0>)
 8001a4c:	601a      	str	r2, [r3, #0]
	delta_position_rotational = (delta_position_right - delta_position_left) * DEG_PER_MM_DIFFERENCE;
 8001a4e:	6839      	ldr	r1, [r7, #0]
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7fe ffc5 	bl	80009e0 <__aeabi_fsub>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <Update_Encoders+0xd4>)
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4610      	mov	r0, r2
 8001a60:	f7ff f8c8 	bl	8000bf4 <__aeabi_fmul>
 8001a64:	4603      	mov	r3, r0
 8001a66:	461a      	mov	r2, r3
 8001a68:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa8 <Update_Encoders+0xd8>)
 8001a6a:	601a      	str	r2, [r3, #0]
	mouse_angle += delta_position_rotational;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <Update_Encoders+0xdc>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa8 <Update_Encoders+0xd8>)
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe ffb4 	bl	80009e4 <__addsf3>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <Update_Encoders+0xdc>)
 8001a82:	601a      	str	r2, [r3, #0]
}
 8001a84:	bf00      	nop
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000250 	.word	0x20000250
 8001a90:	2000024c 	.word	0x2000024c
 8001a94:	3e857c11 	.word	0x3e857c11
 8001a98:	3e718b2c 	.word	0x3e718b2c
 8001a9c:	20000bfc 	.word	0x20000bfc
 8001aa0:	20000c08 	.word	0x20000c08
 8001aa4:	3f3ba9a9 	.word	0x3f3ba9a9
 8001aa8:	20000c00 	.word	0x20000c00
 8001aac:	20000c04 	.word	0x20000c04

08001ab0 <Off_Maze>:
char dir_chars[4] = {'n', 'e', 's', 'w'};
enum DirectionBitmask mask_array[4] = {NORTH_MASK, EAST_MASK, SOUTH_MASK, WEST_MASK};

prev_action_t prev_action = ABOUT_FACE;

bool Off_Maze(int mouse_pos_x, int mouse_pos_y) {
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
    if (mouse_pos_x < 0 || mouse_pos_x > 15 || mouse_pos_y < 0 || mouse_pos_y > 15) {
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	db08      	blt.n	8001ad2 <Off_Maze+0x22>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b0f      	cmp	r3, #15
 8001ac4:	dc05      	bgt.n	8001ad2 <Off_Maze+0x22>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	db02      	blt.n	8001ad2 <Off_Maze+0x22>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2b0f      	cmp	r3, #15
 8001ad0:	dd01      	ble.n	8001ad6 <Off_Maze+0x26>
        return false; // False means a cell is off of the maze
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e000      	b.n	8001ad8 <Off_Maze+0x28>
    }
    return true;
 8001ad6:	2301      	movs	r3, #1
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <Get_Neighbor_Cells>:

param_t fwd_placeholder_1 = { 0 };
param_t fwd_placeholder_2 = { 0 };
param_t rot_placeholder_1 = { 0 };

struct CellList* Get_Neighbor_Cells(struct Maze* maze, struct Coord* pos) {
 8001ae2:	b590      	push	{r4, r7, lr}
 8001ae4:	b093      	sub	sp, #76	@ 0x4c
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6039      	str	r1, [r7, #0]
	struct CellList* cell_list = (struct CellList*)malloc(sizeof(struct CellList));
 8001aec:	2008      	movs	r0, #8
 8001aee:	f006 ffaf 	bl	8008a50 <malloc>
 8001af2:	4603      	mov	r3, r0
 8001af4:	63fb      	str	r3, [r7, #60]	@ 0x3c

    bool north_cell = false, east_cell = false, south_cell = false, west_cell = false;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001afc:	2300      	movs	r3, #0
 8001afe:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001b02:	2300      	movs	r3, #0
 8001b04:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t x_coord = pos->x, y_coord = pos->y;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    uint8_t num_cells = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    // If a cell is adjacent to the cell represented by pos, exists in the 16x16 maze, and is not blocked by a wall, add it to the cell list
    if (Off_Maze(x_coord, y_coord+1) && !(maze->cellWalls[y_coord][x_coord] & NORTH_MASK)) { north_cell = true; num_cells++; } // NORTH
 8001b24:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8001b28:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4610      	mov	r0, r2
 8001b32:	f7ff ffbd 	bl	8001ab0 <Off_Maze>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d017      	beq.n	8001b6c <Get_Neighbor_Cells+0x8a>
 8001b3c:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8001b40:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	0109      	lsls	r1, r1, #4
 8001b48:	440b      	add	r3, r1
 8001b4a:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d107      	bne.n	8001b6c <Get_Neighbor_Cells+0x8a>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001b62:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001b66:	3301      	adds	r3, #1
 8001b68:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (Off_Maze(x_coord+1, y_coord) && !(maze->cellWalls[y_coord][x_coord] & EAST_MASK)) { east_cell = true; num_cells++; }   // EAST
 8001b6c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001b70:	3301      	adds	r3, #1
 8001b72:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff99 	bl	8001ab0 <Off_Maze>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d017      	beq.n	8001bb4 <Get_Neighbor_Cells+0xd2>
 8001b84:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8001b88:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	0109      	lsls	r1, r1, #4
 8001b90:	440b      	add	r3, r1
 8001b92:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d107      	bne.n	8001bb4 <Get_Neighbor_Cells+0xd2>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001baa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001bae:	3301      	adds	r3, #1
 8001bb0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (Off_Maze(x_coord, y_coord-1) && !(maze->cellWalls[y_coord][x_coord] & SOUTH_MASK)) { south_cell = true; num_cells++; } // SOUTH
 8001bb4:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8001bb8:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	f7ff ff75 	bl	8001ab0 <Off_Maze>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d017      	beq.n	8001bfc <Get_Neighbor_Cells+0x11a>
 8001bcc:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8001bd0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	0109      	lsls	r1, r1, #4
 8001bd8:	440b      	add	r3, r1
 8001bda:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d107      	bne.n	8001bfc <Get_Neighbor_Cells+0x11a>
 8001bec:	2301      	movs	r3, #1
 8001bee:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8001bf2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (Off_Maze(x_coord-1, y_coord) && !(maze->cellWalls[y_coord][x_coord] & WEST_MASK)) { west_cell = true; num_cells++; }   // WEST
 8001bfc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c00:	3b01      	subs	r3, #1
 8001c02:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8001c06:	4611      	mov	r1, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff51 	bl	8001ab0 <Off_Maze>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d017      	beq.n	8001c44 <Get_Neighbor_Cells+0x162>
 8001c14:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8001c18:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	0109      	lsls	r1, r1, #4
 8001c20:	440b      	add	r3, r1
 8001c22:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d107      	bne.n	8001c44 <Get_Neighbor_Cells+0x162>
 8001c34:	2301      	movs	r3, #1
 8001c36:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8001c3a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001c3e:	3301      	adds	r3, #1
 8001c40:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    cell_list->size = num_cells;
 8001c44:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8001c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c4a:	601a      	str	r2, [r3, #0]
    cell_list->cells = (struct Cell*)malloc(num_cells*sizeof(struct Cell));
 8001c4c:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8001c50:	4613      	mov	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f006 fef9 	bl	8008a50 <malloc>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	461a      	mov	r2, r3
 8001c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c64:	605a      	str	r2, [r3, #4]

    uint8_t i = 0; // Create new cells with appropriate coordinate and direction and add to the cell list if it is not blocked or off the maze
 8001c66:	2300      	movs	r3, #0
 8001c68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    if (north_cell) {
 8001c6c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d01e      	beq.n	8001cb2 <Get_Neighbor_Cells+0x1d0>
    	struct Cell new_cell = {{x_coord, y_coord+1}, NORTH}; // NORTH
 8001c74:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c7a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001c7e:	3301      	adds	r3, #1
 8001c80:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c82:	2300      	movs	r3, #0
 8001c84:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        cell_list->cells[i] = new_cell; i++;
 8001c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c8a:	6859      	ldr	r1, [r3, #4]
 8001c8c:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	461c      	mov	r4, r3
 8001c9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ca0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ca4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ca8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001cac:	3301      	adds	r3, #1
 8001cae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    }
    if (east_cell) {
 8001cb2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d01e      	beq.n	8001cf8 <Get_Neighbor_Cells+0x216>
    	struct Cell new_cell = {{x_coord+1, y_coord}, EAST};  // EAST
 8001cba:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	623b      	str	r3, [r7, #32]
 8001cc2:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001cc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cc8:	2301      	movs	r3, #1
 8001cca:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        cell_list->cells[i] = new_cell; i++;
 8001cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cd0:	6859      	ldr	r1, [r3, #4]
 8001cd2:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	440b      	add	r3, r1
 8001ce0:	461c      	mov	r4, r3
 8001ce2:	f107 0320 	add.w	r3, r7, #32
 8001ce6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001cea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cee:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    }
    if (south_cell) {
 8001cf8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d01d      	beq.n	8001d3c <Get_Neighbor_Cells+0x25a>
    	struct Cell new_cell = {{x_coord, y_coord-1}, SOUTH}; // SOUTH
 8001d00:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	2302      	movs	r3, #2
 8001d10:	773b      	strb	r3, [r7, #28]
        cell_list->cells[i] = new_cell; i++;
 8001d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d14:	6859      	ldr	r1, [r3, #4]
 8001d16:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	461c      	mov	r4, r3
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d32:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001d36:	3301      	adds	r3, #1
 8001d38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    }
    if (west_cell) {
 8001d3c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01d      	beq.n	8001d80 <Get_Neighbor_Cells+0x29e>
    	struct Cell new_cell = {{x_coord-1, y_coord}, WEST}; // WEST
 8001d44:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	2303      	movs	r3, #3
 8001d54:	743b      	strb	r3, [r7, #16]
        cell_list->cells[i] = new_cell; i++;
 8001d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d58:	6859      	ldr	r1, [r3, #4]
 8001d5a:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	461c      	mov	r4, r3
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d76:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    }
    return cell_list;
 8001d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	374c      	adds	r7, #76	@ 0x4c
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd90      	pop	{r4, r7, pc}
	...

08001d8c <Scan_Walls>:

uint8_t Scan_Walls(struct Maze* maze) { // Checks wall information based on mouse's current position and updates maze walls. Returns an integer 0-3 depending on # of walls spotted
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
    enum Direction cur_dir = maze->mouse_dir;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7a1b      	ldrb	r3, [r3, #8]
 8001d98:	75bb      	strb	r3, [r7, #22]
    struct Coord cur_pos = maze->mouse_pos;
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001da4:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t walls_changed = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	75fb      	strb	r3, [r7, #23]

    Poll_Sensors(&mouse_state);
 8001dac:	48b0      	ldr	r0, [pc, #704]	@ (8002070 <Scan_Walls+0x2e4>)
 8001dae:	f002 fc33 	bl	8004618 <Poll_Sensors>
    if (Wall_Front()) {
 8001db2:	f002 fc8d 	bl	80046d0 <Wall_Front>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80cf 	beq.w	8001f5c <Scan_Walls+0x1d0>
        maze->cellWalls[cur_pos.y][cur_pos.x] |= mask_array[cur_dir];
 8001dbe:	6939      	ldr	r1, [r7, #16]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	0109      	lsls	r1, r1, #4
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	7dbb      	ldrb	r3, [r7, #22]
 8001dd4:	49a7      	ldr	r1, [pc, #668]	@ (8002074 <Scan_Walls+0x2e8>)
 8001dd6:	5ccb      	ldrb	r3, [r1, r3]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	6938      	ldr	r0, [r7, #16]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	0100      	lsls	r0, r0, #4
 8001de4:	4403      	add	r3, r0
 8001de6:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	605a      	str	r2, [r3, #4]
        walls_changed += 1;
 8001df0:	7dfb      	ldrb	r3, [r7, #23]
 8001df2:	3301      	adds	r3, #1
 8001df4:	75fb      	strb	r3, [r7, #23]
        switch (cur_dir) { // Update adjacent walls with relevant wall information
 8001df6:	7dbb      	ldrb	r3, [r7, #22]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	f200 80af 	bhi.w	8001f5c <Scan_Walls+0x1d0>
 8001dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8001e04 <Scan_Walls+0x78>)
 8001e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e04:	08001e15 	.word	0x08001e15
 8001e08:	08001e65 	.word	0x08001e65
 8001e0c:	08001eb3 	.word	0x08001eb3
 8001e10:	08001f01 	.word	0x08001f01
            case (NORTH):
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	f7ff fe47 	bl	8001ab0 <Off_Maze>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 8092 	beq.w	8001f4e <Scan_Walls+0x1c2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	1c59      	adds	r1, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	0109      	lsls	r1, r1, #4
 8001e38:	440b      	add	r3, r1
 8001e3a:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	1c58      	adds	r0, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0202 	orr.w	r2, r2, #2
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	0100      	lsls	r0, r0, #4
 8001e56:	4403      	add	r3, r0
 8001e58:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	440b      	add	r3, r1
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	e074      	b.n	8001f4e <Scan_Walls+0x1c2>
            case (EAST):
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	3301      	adds	r3, #1
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fe1f 	bl	8001ab0 <Off_Maze>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d06c      	beq.n	8001f52 <Scan_Walls+0x1c6>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6859      	ldr	r1, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	3301      	adds	r3, #1
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	0109      	lsls	r1, r1, #4
 8001e86:	440b      	add	r3, r1
 8001e88:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6858      	ldr	r0, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f042 0201 	orr.w	r2, r2, #1
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	0100      	lsls	r0, r0, #4
 8001ea4:	4403      	add	r3, r0
 8001ea6:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	e04f      	b.n	8001f52 <Scan_Walls+0x1c6>
            case (SOUTH):
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4610      	mov	r0, r2
 8001ebc:	f7ff fdf8 	bl	8001ab0 <Off_Maze>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d047      	beq.n	8001f56 <Scan_Walls+0x1ca>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	1e59      	subs	r1, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	0109      	lsls	r1, r1, #4
 8001ed4:	440b      	add	r3, r1
 8001ed6:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	1e58      	subs	r0, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0208 	orr.w	r2, r2, #8
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	0100      	lsls	r0, r0, #4
 8001ef2:	4403      	add	r3, r0
 8001ef4:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	e02a      	b.n	8001f56 <Scan_Walls+0x1ca>
            case (WEST):
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fdd1 	bl	8001ab0 <Off_Maze>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d022      	beq.n	8001f5a <Scan_Walls+0x1ce>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6859      	ldr	r1, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	0109      	lsls	r1, r1, #4
 8001f22:	440b      	add	r3, r1
 8001f24:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6858      	ldr	r0, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	f042 0204 	orr.w	r2, r2, #4
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	0100      	lsls	r0, r0, #4
 8001f40:	4403      	add	r3, r0
 8001f42:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	e005      	b.n	8001f5a <Scan_Walls+0x1ce>
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 8001f4e:	bf00      	nop
 8001f50:	e004      	b.n	8001f5c <Scan_Walls+0x1d0>
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 8001f52:	bf00      	nop
 8001f54:	e002      	b.n	8001f5c <Scan_Walls+0x1d0>
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 8001f56:	bf00      	nop
 8001f58:	e000      	b.n	8001f5c <Scan_Walls+0x1d0>
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 8001f5a:	bf00      	nop
        }
    }
    if (Wall_Right()) {
 8001f5c:	f002 fc14 	bl	8004788 <Wall_Right>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 80dd 	beq.w	8002122 <Scan_Walls+0x396>
        maze->cellWalls[cur_pos.y][cur_pos.x] |= mask_array[(cur_dir + 3) % 4];
 8001f68:	6939      	ldr	r1, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	0109      	lsls	r1, r1, #4
 8001f70:	440b      	add	r3, r1
 8001f72:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	7dbb      	ldrb	r3, [r7, #22]
 8001f7e:	3303      	adds	r3, #3
 8001f80:	4259      	negs	r1, r3
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	f001 0103 	and.w	r1, r1, #3
 8001f8a:	bf58      	it	pl
 8001f8c:	424b      	negpl	r3, r1
 8001f8e:	4939      	ldr	r1, [pc, #228]	@ (8002074 <Scan_Walls+0x2e8>)
 8001f90:	5ccb      	ldrb	r3, [r1, r3]
 8001f92:	4619      	mov	r1, r3
 8001f94:	6938      	ldr	r0, [r7, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	0100      	lsls	r0, r0, #4
 8001f9e:	4403      	add	r3, r0
 8001fa0:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	605a      	str	r2, [r3, #4]
        walls_changed += 1;
 8001faa:	7dfb      	ldrb	r3, [r7, #23]
 8001fac:	3301      	adds	r3, #1
 8001fae:	75fb      	strb	r3, [r7, #23]
        switch (cur_dir) {
 8001fb0:	7dbb      	ldrb	r3, [r7, #22]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	f200 80b5 	bhi.w	8002122 <Scan_Walls+0x396>
 8001fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc0 <Scan_Walls+0x234>)
 8001fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbe:	bf00      	nop
 8001fc0:	08001fd1 	.word	0x08001fd1
 8001fc4:	08002021 	.word	0x08002021
 8001fc8:	08002079 	.word	0x08002079
 8001fcc:	080020c7 	.word	0x080020c7
            case (NORTH):
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fd69 	bl	8001ab0 <Off_Maze>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 8097 	beq.w	8002114 <Scan_Walls+0x388>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6859      	ldr	r1, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	0109      	lsls	r1, r1, #4
 8001ff4:	440b      	add	r3, r1
 8001ff6:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6858      	ldr	r0, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3b01      	subs	r3, #1
 800200a:	f042 0204 	orr.w	r2, r2, #4
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	0100      	lsls	r0, r0, #4
 8002012:	4403      	add	r3, r0
 8002014:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	e079      	b.n	8002114 <Scan_Walls+0x388>
            case (EAST):
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	3301      	adds	r3, #1
 8002026:	4619      	mov	r1, r3
 8002028:	4610      	mov	r0, r2
 800202a:	f7ff fd41 	bl	8001ab0 <Off_Maze>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d071      	beq.n	8002118 <Scan_Walls+0x38c>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	1c59      	adds	r1, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	0109      	lsls	r1, r1, #4
 8002042:	440b      	add	r3, r1
 8002044:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	1c58      	adds	r0, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 0202 	orr.w	r2, r2, #2
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	0100      	lsls	r0, r0, #4
 8002060:	4403      	add	r3, r0
 8002062:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	e054      	b.n	8002118 <Scan_Walls+0x38c>
 800206e:	bf00      	nop
 8002070:	20000220 	.word	0x20000220
 8002074:	20000004 	.word	0x20000004
            case (SOUTH):
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3301      	adds	r3, #1
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fd15 	bl	8001ab0 <Off_Maze>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d047      	beq.n	800211c <Scan_Walls+0x390>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6859      	ldr	r1, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	0109      	lsls	r1, r1, #4
 800209a:	440b      	add	r3, r1
 800209c:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6858      	ldr	r0, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	3301      	adds	r3, #1
 80020b0:	f042 0201 	orr.w	r2, r2, #1
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	0100      	lsls	r0, r0, #4
 80020b8:	4403      	add	r3, r0
 80020ba:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	e02a      	b.n	800211c <Scan_Walls+0x390>
            case (WEST):
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	4619      	mov	r1, r3
 80020ce:	4610      	mov	r0, r2
 80020d0:	f7ff fcee 	bl	8001ab0 <Off_Maze>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d022      	beq.n	8002120 <Scan_Walls+0x394>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	1e59      	subs	r1, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	0109      	lsls	r1, r1, #4
 80020e8:	440b      	add	r3, r1
 80020ea:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	1e58      	subs	r0, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0208 	orr.w	r2, r2, #8
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	0100      	lsls	r0, r0, #4
 8002106:	4403      	add	r3, r0
 8002108:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	e005      	b.n	8002120 <Scan_Walls+0x394>
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 8002114:	bf00      	nop
 8002116:	e004      	b.n	8002122 <Scan_Walls+0x396>
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 8002118:	bf00      	nop
 800211a:	e002      	b.n	8002122 <Scan_Walls+0x396>
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 800211c:	bf00      	nop
 800211e:	e000      	b.n	8002122 <Scan_Walls+0x396>
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 8002120:	bf00      	nop
        }
    }
    if (Wall_Left()) {
 8002122:	f002 fb09 	bl	8004738 <Wall_Left>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 80d7 	beq.w	80022dc <Scan_Walls+0x550>
        maze->cellWalls[cur_pos.y][cur_pos.x] |= mask_array[(cur_dir + 1) % 4];
 800212e:	6939      	ldr	r1, [r7, #16]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	0109      	lsls	r1, r1, #4
 8002136:	440b      	add	r3, r1
 8002138:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	7dbb      	ldrb	r3, [r7, #22]
 8002144:	3301      	adds	r3, #1
 8002146:	4259      	negs	r1, r3
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	f001 0103 	and.w	r1, r1, #3
 8002150:	bf58      	it	pl
 8002152:	424b      	negpl	r3, r1
 8002154:	4964      	ldr	r1, [pc, #400]	@ (80022e8 <Scan_Walls+0x55c>)
 8002156:	5ccb      	ldrb	r3, [r1, r3]
 8002158:	4619      	mov	r1, r3
 800215a:	6938      	ldr	r0, [r7, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	430a      	orrs	r2, r1
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	0100      	lsls	r0, r0, #4
 8002164:	4403      	add	r3, r0
 8002166:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	605a      	str	r2, [r3, #4]
        walls_changed += 1;
 8002170:	7dfb      	ldrb	r3, [r7, #23]
 8002172:	3301      	adds	r3, #1
 8002174:	75fb      	strb	r3, [r7, #23]
        switch (cur_dir) {
 8002176:	7dbb      	ldrb	r3, [r7, #22]
 8002178:	2b03      	cmp	r3, #3
 800217a:	f200 80af 	bhi.w	80022dc <Scan_Walls+0x550>
 800217e:	a201      	add	r2, pc, #4	@ (adr r2, 8002184 <Scan_Walls+0x3f8>)
 8002180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002184:	08002195 	.word	0x08002195
 8002188:	080021e5 	.word	0x080021e5
 800218c:	08002233 	.word	0x08002233
 8002190:	08002281 	.word	0x08002281
            case (NORTH):
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3301      	adds	r3, #1
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff fc87 	bl	8001ab0 <Off_Maze>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 8092 	beq.w	80022ce <Scan_Walls+0x542>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6859      	ldr	r1, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3301      	adds	r3, #1
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	0109      	lsls	r1, r1, #4
 80021b8:	440b      	add	r3, r1
 80021ba:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6858      	ldr	r0, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	3301      	adds	r3, #1
 80021ce:	f042 0201 	orr.w	r2, r2, #1
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	0100      	lsls	r0, r0, #4
 80021d6:	4403      	add	r3, r0
 80021d8:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	e074      	b.n	80022ce <Scan_Walls+0x542>
            case (EAST):
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	4619      	mov	r1, r3
 80021ec:	4610      	mov	r0, r2
 80021ee:	f7ff fc5f 	bl	8001ab0 <Off_Maze>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d06c      	beq.n	80022d2 <Scan_Walls+0x546>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	1e59      	subs	r1, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	0109      	lsls	r1, r1, #4
 8002206:	440b      	add	r3, r1
 8002208:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	1e58      	subs	r0, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 0208 	orr.w	r2, r2, #8
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	0100      	lsls	r0, r0, #4
 8002224:	4403      	add	r3, r0
 8002226:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	e04f      	b.n	80022d2 <Scan_Walls+0x546>
            case (SOUTH):
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3b01      	subs	r3, #1
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fc38 	bl	8001ab0 <Off_Maze>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d047      	beq.n	80022d6 <Scan_Walls+0x54a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6859      	ldr	r1, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	3b01      	subs	r3, #1
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	0109      	lsls	r1, r1, #4
 8002254:	440b      	add	r3, r1
 8002256:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6858      	ldr	r0, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	3b01      	subs	r3, #1
 800226a:	f042 0204 	orr.w	r2, r2, #4
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	0100      	lsls	r0, r0, #4
 8002272:	4403      	add	r3, r0
 8002274:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	e02a      	b.n	80022d6 <Scan_Walls+0x54a>
            case (WEST):
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	3301      	adds	r3, #1
 8002286:	4619      	mov	r1, r3
 8002288:	4610      	mov	r0, r2
 800228a:	f7ff fc11 	bl	8001ab0 <Off_Maze>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d022      	beq.n	80022da <Scan_Walls+0x54e>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	1c59      	adds	r1, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	0109      	lsls	r1, r1, #4
 80022a2:	440b      	add	r3, r1
 80022a4:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	1c58      	adds	r0, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0202 	orr.w	r2, r2, #2
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	0100      	lsls	r0, r0, #4
 80022c0:	4403      	add	r3, r0
 80022c2:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	e005      	b.n	80022da <Scan_Walls+0x54e>
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 80022ce:	bf00      	nop
 80022d0:	e004      	b.n	80022dc <Scan_Walls+0x550>
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 80022d2:	bf00      	nop
 80022d4:	e002      	b.n	80022dc <Scan_Walls+0x550>
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 80022d6:	bf00      	nop
 80022d8:	e000      	b.n	80022dc <Scan_Walls+0x550>
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 80022da:	bf00      	nop
        }
    }
    return walls_changed;
 80022dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000004 	.word	0x20000004

080022ec <Update_Mouse_Pos>:

void Update_Mouse_Pos(struct Coord *pos, enum Direction dir, struct Maze* maze)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	460b      	mov	r3, r1
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	72fb      	strb	r3, [r7, #11]
	maze->exploredCells[pos->y][pos->x] = true;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	0112      	lsls	r2, r2, #4
 8002306:	440a      	add	r2, r1
 8002308:	4413      	add	r3, r2
 800230a:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]

    if      (dir == NORTH) { pos->y++; }
 8002312:	7afb      	ldrb	r3, [r7, #11]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d105      	bne.n	8002324 <Update_Mouse_Pos+0x38>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	e019      	b.n	8002358 <Update_Mouse_Pos+0x6c>
    else if (dir == SOUTH) { pos->y--; }
 8002324:	7afb      	ldrb	r3, [r7, #11]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d105      	bne.n	8002336 <Update_Mouse_Pos+0x4a>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	1e5a      	subs	r2, r3, #1
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	e010      	b.n	8002358 <Update_Mouse_Pos+0x6c>
    else if (dir == WEST)  { pos->x--; }
 8002336:	7afb      	ldrb	r3, [r7, #11]
 8002338:	2b03      	cmp	r3, #3
 800233a:	d105      	bne.n	8002348 <Update_Mouse_Pos+0x5c>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	1e5a      	subs	r2, r3, #1
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	e007      	b.n	8002358 <Update_Mouse_Pos+0x6c>
    else if (dir == EAST)  { pos->x++; }
 8002348:	7afb      	ldrb	r3, [r7, #11]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d104      	bne.n	8002358 <Update_Mouse_Pos+0x6c>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	601a      	str	r2, [r3, #0]

    maze->exploredCells[pos->y][pos->x] = true;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	0112      	lsls	r2, r2, #4
 8002364:	440a      	add	r2, r1
 8002366:	4413      	add	r3, r2
 8002368:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 800236c:	2201      	movs	r2, #1
 800236e:	701a      	strb	r2, [r3, #0]

    mouse_state.current_cell = maze->cellWalls[pos->y][pos->x];
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	0109      	lsls	r1, r1, #4
 800237c:	440b      	add	r3, r1
 800237e:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4b0a      	ldr	r3, [pc, #40]	@ (80023b4 <Update_Mouse_Pos+0xc8>)
 800238c:	701a      	strb	r2, [r3, #0]
	mouse_state.mouse_position[0] = (uint8_t)pos->x;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	b2da      	uxtb	r2, r3
 8002394:	4b07      	ldr	r3, [pc, #28]	@ (80023b4 <Update_Mouse_Pos+0xc8>)
 8002396:	705a      	strb	r2, [r3, #1]
	mouse_state.mouse_position[1] = (uint8_t)pos->y;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4b05      	ldr	r3, [pc, #20]	@ (80023b4 <Update_Mouse_Pos+0xc8>)
 80023a0:	709a      	strb	r2, [r3, #2]
	mouse_state.mouse_direction = dir;
 80023a2:	4a04      	ldr	r2, [pc, #16]	@ (80023b4 <Update_Mouse_Pos+0xc8>)
 80023a4:	7afb      	ldrb	r3, [r7, #11]
 80023a6:	70d3      	strb	r3, [r2, #3]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000220 	.word	0x20000220

080023b8 <Set_Goal_Cell>:

void Set_Goal_Cell(struct Maze* maze, int num_of_goals) {
 80023b8:	b480      	push	{r7}
 80023ba:	b08d      	sub	sp, #52	@ 0x34
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
    if (num_of_goals == 1) {
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d108      	bne.n	80023da <Set_Goal_Cell+0x22>
		maze->goalPos[0] = (struct Coord){0, 0};
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f8c3 2910 	str.w	r2, [r3, #2320]	@ 0x910
    	maze->goalPos[0] = (struct Coord){7, 7};
		maze->goalPos[1] = (struct Coord){7, 8};
		maze->goalPos[2] = (struct Coord){8, 7};
		maze->goalPos[3] = (struct Coord){8, 8};
    }
}
 80023d8:	e022      	b.n	8002420 <Set_Goal_Cell+0x68>
    else if (num_of_goals == 4) {
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d11f      	bne.n	8002420 <Set_Goal_Cell+0x68>
    	maze->goalPos[0] = (struct Coord){7, 7};
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a12      	ldr	r2, [pc, #72]	@ (800242c <Set_Goal_Cell+0x74>)
 80023e4:	f603 130c 	addw	r3, r3, #2316	@ 0x90c
 80023e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023ec:	e883 0003 	stmia.w	r3, {r0, r1}
		maze->goalPos[1] = (struct Coord){7, 8};
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002430 <Set_Goal_Cell+0x78>)
 80023f4:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 80023f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023fc:	e883 0003 	stmia.w	r3, {r0, r1}
		maze->goalPos[2] = (struct Coord){8, 7};
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a0c      	ldr	r2, [pc, #48]	@ (8002434 <Set_Goal_Cell+0x7c>)
 8002404:	f603 131c 	addw	r3, r3, #2332	@ 0x91c
 8002408:	e892 0003 	ldmia.w	r2, {r0, r1}
 800240c:	e883 0003 	stmia.w	r3, {r0, r1}
		maze->goalPos[3] = (struct Coord){8, 8};
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a09      	ldr	r2, [pc, #36]	@ (8002438 <Set_Goal_Cell+0x80>)
 8002414:	f603 1324 	addw	r3, r3, #2340	@ 0x924
 8002418:	e892 0003 	ldmia.w	r2, {r0, r1}
 800241c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8002420:	bf00      	nop
 8002422:	3734      	adds	r7, #52	@ 0x34
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	08008d20 	.word	0x08008d20
 8002430:	08008d28 	.word	0x08008d28
 8002434:	08008d30 	.word	0x08008d30
 8002438:	08008d38 	.word	0x08008d38

0800243c <Floodfill>:

void Floodfill(struct Maze* maze, enum mode_type_t mode) {
 800243c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002440:	b08f      	sub	sp, #60	@ 0x3c
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	460b      	mov	r3, r1
 8002448:	70fb      	strb	r3, [r7, #3]
 800244a:	466b      	mov	r3, sp
 800244c:	461e      	mov	r6, r3
    for (uint8_t y=0; y<16; y++) { for (uint8_t x=0; x<16; x++) { maze->distances[y][x] = MAX_COST; } } // Initialize all maze costs/distances to the maximum = 255
 800244e:	2300      	movs	r3, #0
 8002450:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002454:	e01f      	b.n	8002496 <Floodfill+0x5a>
 8002456:	2300      	movs	r3, #0
 8002458:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800245c:	e012      	b.n	8002484 <Floodfill+0x48>
 800245e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002462:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8002466:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800246a:	4610      	mov	r0, r2
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	0109      	lsls	r1, r1, #4
 8002470:	440b      	add	r3, r1
 8002472:	3302      	adds	r3, #2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	6058      	str	r0, [r3, #4]
 800247a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800247e:	3301      	adds	r3, #1
 8002480:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8002484:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002488:	2b0f      	cmp	r3, #15
 800248a:	d9e8      	bls.n	800245e <Floodfill+0x22>
 800248c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002490:	3301      	adds	r3, #1
 8002492:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002496:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800249a:	2b0f      	cmp	r3, #15
 800249c:	d9db      	bls.n	8002456 <Floodfill+0x1a>

    uint8_t goal_count = 4;
 800249e:	2304      	movs	r3, #4
 80024a0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    if (maze->goalPos[0].x == 0) { goal_count = 1; }                                                    // Check if goal is maze center or start cell
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <Floodfill+0x78>
 80024ae:	2301      	movs	r3, #1
 80024b0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    struct Coord queue[MAX_COST];                                                                       // Initialize queue
 80024b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024b8:	3b01      	subs	r3, #1
 80024ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2200      	movs	r2, #0
 80024c4:	4698      	mov	r8, r3
 80024c6:	4691      	mov	r9, r2
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024d4:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024d8:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2200      	movs	r2, #0
 80024e4:	461c      	mov	r4, r3
 80024e6:	4615      	mov	r5, r2
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	01ab      	lsls	r3, r5, #6
 80024f2:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80024f6:	01a2      	lsls	r2, r4, #6
 80024f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	3307      	adds	r3, #7
 8002500:	08db      	lsrs	r3, r3, #3
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	ebad 0d03 	sub.w	sp, sp, r3
 8002508:	466b      	mov	r3, sp
 800250a:	3303      	adds	r3, #3
 800250c:	089b      	lsrs	r3, r3, #2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t head = 0, tail = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	867b      	strh	r3, [r7, #50]	@ 0x32
 8002516:	2300      	movs	r3, #0
 8002518:	863b      	strh	r3, [r7, #48]	@ 0x30
    for (uint8_t cell = 0; cell < goal_count; cell++) {
 800251a:	2300      	movs	r3, #0
 800251c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002520:	e02f      	b.n	8002582 <Floodfill+0x146>
        maze->distances[maze->goalPos[cell].y][maze->goalPos[cell].x] = 0;                              // Set goal cells to cost/distance minimum = 0
 8002522:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	f203 1321 	addw	r3, r3, #289	@ 0x121
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	6899      	ldr	r1, [r3, #8]
 8002532:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	f203 1321 	addw	r3, r3, #289	@ 0x121
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4413      	add	r3, r2
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	0109      	lsls	r1, r1, #4
 8002546:	440b      	add	r3, r1
 8002548:	3302      	adds	r3, #2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	2200      	movs	r2, #0
 8002550:	605a      	str	r2, [r3, #4]
        queue[tail] = maze->goalPos[cell]; tail++;                                                      // Add goal cells to queue, increment tail
 8002552:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002556:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002558:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f202 1221 	addw	r2, r2, #289	@ 0x121
 8002560:	00d2      	lsls	r2, r2, #3
 8002562:	4402      	add	r2, r0
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	440b      	add	r3, r1
 8002568:	3204      	adds	r2, #4
 800256a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800256e:	e883 0003 	stmia.w	r3, {r0, r1}
 8002572:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002574:	3301      	adds	r3, #1
 8002576:	863b      	strh	r3, [r7, #48]	@ 0x30
    for (uint8_t cell = 0; cell < goal_count; cell++) {
 8002578:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800257c:	3301      	adds	r3, #1
 800257e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002582:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002586:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800258a:	429a      	cmp	r2, r3
 800258c:	d3c9      	bcc.n	8002522 <Floodfill+0xe6>
    }

    struct Coord curr_pos;
    while (head != tail) {
 800258e:	e0ee      	b.n	800276e <Floodfill+0x332>
        curr_pos = queue[head];
 8002590:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002592:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002594:	f107 020c 	add.w	r2, r7, #12
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	440b      	add	r3, r1
 800259c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025a0:	e882 0003 	stmia.w	r2, {r0, r1}
        head++;
 80025a4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80025a6:	3301      	adds	r3, #1
 80025a8:	867b      	strh	r3, [r7, #50]	@ 0x32
        uint8_t new_distance = maze->distances[curr_pos.y][curr_pos.x] + 1;                             // Calculate cost for adjacent cells
 80025aa:	6939      	ldr	r1, [r7, #16]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	0109      	lsls	r1, r1, #4
 80025b2:	440b      	add	r3, r1
 80025b4:	3302      	adds	r3, #2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	3301      	adds	r3, #1
 80025c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        struct CellList* neighbors = Get_Neighbor_Cells(maze, &curr_pos);
 80025c4:	f107 030c 	add.w	r3, r7, #12
 80025c8:	4619      	mov	r1, r3
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff fa89 	bl	8001ae2 <Get_Neighbor_Cells>
 80025d0:	61f8      	str	r0, [r7, #28]
        struct Cell* replacement_array = (struct Cell*)malloc(sizeof(struct Cell) * 4);
 80025d2:	2030      	movs	r0, #48	@ 0x30
 80025d4:	f006 fa3c 	bl	8008a50 <malloc>
 80025d8:	4603      	mov	r3, r0
 80025da:	61bb      	str	r3, [r7, #24]

        if (mode == RACE) {
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d157      	bne.n	8002692 <Floodfill+0x256>
            uint8_t replacement_index = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            uint8_t loop_size = neighbors->size;
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	75fb      	strb	r3, [r7, #23]
            for (uint8_t neighbor = 0; neighbor < loop_size; neighbor++) {
 80025ee:	2300      	movs	r3, #0
 80025f0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80025f4:	e045      	b.n	8002682 <Floodfill+0x246>
                if (!maze->exploredCells[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x]) {
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	6859      	ldr	r1, [r3, #4]
 80025fa:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	6858      	ldr	r0, [r3, #4]
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	6859      	ldr	r1, [r3, #4]
 800260e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	0102      	lsls	r2, r0, #4
 8002622:	440a      	add	r2, r1
 8002624:	4413      	add	r3, r2
 8002626:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	f083 0301 	eor.w	r3, r3, #1
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <Floodfill+0x206>
                    neighbors->size--;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	1e5a      	subs	r2, r3, #1
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	e01a      	b.n	8002678 <Floodfill+0x23c>
                }
                else {
                    replacement_array[replacement_index] = neighbors->cells[neighbor];
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800264a:	4613      	mov	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4419      	add	r1, r3
 8002654:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8002658:	4613      	mov	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	461a      	mov	r2, r3
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	4413      	add	r3, r2
 8002666:	460a      	mov	r2, r1
 8002668:	ca07      	ldmia	r2, {r0, r1, r2}
 800266a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                    replacement_index++;
 800266e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002672:	3301      	adds	r3, #1
 8002674:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            for (uint8_t neighbor = 0; neighbor < loop_size; neighbor++) {
 8002678:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800267c:	3301      	adds	r3, #1
 800267e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8002682:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8002686:	7dfb      	ldrb	r3, [r7, #23]
 8002688:	429a      	cmp	r2, r3
 800268a:	d3b4      	bcc.n	80025f6 <Floodfill+0x1ba>
                }
            }
            neighbors->cells = replacement_array;
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	605a      	str	r2, [r3, #4]
        }

        for (uint8_t neighbor = 0; neighbor < neighbors->size; neighbor++) {                            // For each neighbor cell, check if its cost/distance is > new distance -- if so, update its value
 8002692:	2300      	movs	r3, #0
 8002694:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8002698:	e055      	b.n	8002746 <Floodfill+0x30a>
            if (maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] > new_distance) {
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	6859      	ldr	r1, [r3, #4]
 800269e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80026a2:	4613      	mov	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	6859      	ldr	r1, [r3, #4]
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	6858      	ldr	r0, [r3, #4]
 80026b2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4403      	add	r3, r0
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	0109      	lsls	r1, r1, #4
 80026c6:	440b      	add	r3, r1
 80026c8:	3302      	adds	r3, #2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80026d4:	429a      	cmp	r2, r3
 80026d6:	dd31      	ble.n	800273c <Floodfill+0x300>
                maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] = new_distance;
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	6859      	ldr	r1, [r3, #4]
 80026dc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	6858      	ldr	r0, [r3, #4]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80026f4:	4613      	mov	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	0100      	lsls	r0, r0, #4
 8002708:	4403      	add	r3, r0
 800270a:	3302      	adds	r3, #2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	605a      	str	r2, [r3, #4]
                queue[tail] = neighbors->cells[neighbor].pos; tail++;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	6859      	ldr	r1, [r3, #4]
 8002716:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800271a:	4613      	mov	r3, r2
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4419      	add	r1, r3
 8002724:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	460a      	mov	r2, r1
 800272e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002732:	e883 0003 	stmia.w	r3, {r0, r1}
 8002736:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002738:	3301      	adds	r3, #1
 800273a:	863b      	strh	r3, [r7, #48]	@ 0x30
        for (uint8_t neighbor = 0; neighbor < neighbors->size; neighbor++) {                            // For each neighbor cell, check if its cost/distance is > new distance -- if so, update its value
 800273c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002740:	3301      	adds	r3, #1
 8002742:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8002746:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	dba3      	blt.n	800269a <Floodfill+0x25e>
            }
        }
        free(replacement_array);
 8002752:	69b8      	ldr	r0, [r7, #24]
 8002754:	f006 f984 	bl	8008a60 <free>
        if (mode == SEARCH) {
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d104      	bne.n	8002768 <Floodfill+0x32c>
            free(neighbors->cells);
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4618      	mov	r0, r3
 8002764:	f006 f97c 	bl	8008a60 <free>
        }
        free(neighbors);
 8002768:	69f8      	ldr	r0, [r7, #28]
 800276a:	f006 f979 	bl	8008a60 <free>
    while (head != tail) {
 800276e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8002770:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002772:	429a      	cmp	r2, r3
 8002774:	f47f af0c 	bne.w	8002590 <Floodfill+0x154>
 8002778:	46b5      	mov	sp, r6
    }
}
 800277a:	bf00      	nop
 800277c:	373c      	adds	r7, #60	@ 0x3c
 800277e:	46bd      	mov	sp, r7
 8002780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002784 <Best_Cell>:

enum Direction Best_Cell(struct Maze* maze, struct Coord mouse_pos, enum mode_type_t mode) {
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	@ 0x28
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	1d38      	adds	r0, r7, #4
 800278e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002792:	70fb      	strb	r3, [r7, #3]
	struct CellList* neighbors = Get_Neighbor_Cells(maze, &mouse_pos);
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	4619      	mov	r1, r3
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f7ff f9a2 	bl	8001ae2 <Get_Neighbor_Cells>
 800279e:	61f8      	str	r0, [r7, #28]
    struct Cell* replacement_array = (struct Cell*)malloc(sizeof(struct Cell) * 4);
 80027a0:	2030      	movs	r0, #48	@ 0x30
 80027a2:	f006 f955 	bl	8008a50 <malloc>
 80027a6:	4603      	mov	r3, r0
 80027a8:	61bb      	str	r3, [r7, #24]

    if (mode == RACE) {
 80027aa:	78fb      	ldrb	r3, [r7, #3]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d157      	bne.n	8002860 <Best_Cell+0xdc>
        uint8_t replacement_index = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        uint8_t loop_size = neighbors->size;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	75fb      	strb	r3, [r7, #23]
        for (uint8_t neighbor = 0; neighbor < loop_size; neighbor++) {
 80027bc:	2300      	movs	r3, #0
 80027be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80027c2:	e045      	b.n	8002850 <Best_Cell+0xcc>
            if (!maze->exploredCells[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x]) {
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	6859      	ldr	r1, [r3, #4]
 80027c8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80027cc:	4613      	mov	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	6858      	ldr	r0, [r3, #4]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	6859      	ldr	r1, [r3, #4]
 80027dc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68f9      	ldr	r1, [r7, #12]
 80027ee:	0102      	lsls	r2, r0, #4
 80027f0:	440a      	add	r2, r1
 80027f2:	4413      	add	r3, r2
 80027f4:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	f083 0301 	eor.w	r3, r3, #1
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <Best_Cell+0x8c>
                neighbors->size--;
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	1e5a      	subs	r2, r3, #1
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e01a      	b.n	8002846 <Best_Cell+0xc2>
            }
            else {
                replacement_array[replacement_index] = neighbors->cells[neighbor];
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	6859      	ldr	r1, [r3, #4]
 8002814:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002818:	4613      	mov	r3, r2
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4419      	add	r1, r3
 8002822:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002826:	4613      	mov	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	461a      	mov	r2, r3
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	4413      	add	r3, r2
 8002834:	460a      	mov	r2, r1
 8002836:	ca07      	ldmia	r2, {r0, r1, r2}
 8002838:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                replacement_index++;
 800283c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002840:	3301      	adds	r3, #1
 8002842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for (uint8_t neighbor = 0; neighbor < loop_size; neighbor++) {
 8002846:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800284a:	3301      	adds	r3, #1
 800284c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002850:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002854:	7dfb      	ldrb	r3, [r7, #23]
 8002856:	429a      	cmp	r2, r3
 8002858:	d3b4      	bcc.n	80027c4 <Best_Cell+0x40>
            }
        }
        neighbors->cells = replacement_array;
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	605a      	str	r2, [r3, #4]
    }

    uint8_t best_cell_index = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t lowest_cost = maze->distances[mouse_pos.y][mouse_pos.x];
 8002866:	68b9      	ldr	r1, [r7, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	0109      	lsls	r1, r1, #4
 800286e:	440b      	add	r3, r1
 8002870:	3302      	adds	r3, #2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    for (uint8_t neighbor = 0; neighbor < neighbors->size; neighbor++) {
 800287c:	2300      	movs	r3, #0
 800287e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002882:	e071      	b.n	8002968 <Best_Cell+0x1e4>
        if ((maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] < lowest_cost) ||  // For each neighbor cell, check if its cost is the lowest seen
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800288c:	4613      	mov	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	6858      	ldr	r0, [r3, #4]
 800289c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80028a0:	4613      	mov	r3, r2
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4403      	add	r3, r0
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	0109      	lsls	r1, r1, #4
 80028b0:	440b      	add	r3, r1
 80028b2:	3302      	adds	r3, #2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80028be:	429a      	cmp	r2, r3
 80028c0:	db2c      	blt.n	800291c <Best_Cell+0x198>
           ((maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] == lowest_cost) && // Or check cost == lowest and the dir of the cell matches that of the mouse (prioritize forward)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	6859      	ldr	r1, [r3, #4]
 80028c6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	6859      	ldr	r1, [r3, #4]
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	6858      	ldr	r0, [r3, #4]
 80028da:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80028de:	4613      	mov	r3, r2
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4403      	add	r3, r0
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	0109      	lsls	r1, r1, #4
 80028ee:	440b      	add	r3, r1
 80028f0:	3302      	adds	r3, #2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
        if ((maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] < lowest_cost) ||  // For each neighbor cell, check if its cost is the lowest seen
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d12e      	bne.n	800295e <Best_Cell+0x1da>
           (maze->mouse_dir == neighbors->cells[neighbor].dir))) {
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	7a19      	ldrb	r1, [r3, #8]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	6858      	ldr	r0, [r3, #4]
 8002908:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4403      	add	r3, r0
 8002916:	7a1b      	ldrb	r3, [r3, #8]
           ((maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] == lowest_cost) && // Or check cost == lowest and the dir of the cell matches that of the mouse (prioritize forward)
 8002918:	4299      	cmp	r1, r3
 800291a:	d120      	bne.n	800295e <Best_Cell+0x1da>
                best_cell_index = neighbor;
 800291c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002920:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                lowest_cost = maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x];  // Update best cell index and lowest cost seen
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800292c:	4613      	mov	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	6858      	ldr	r0, [r3, #4]
 800293c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002940:	4613      	mov	r3, r2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4403      	add	r3, r0
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	0109      	lsls	r1, r1, #4
 8002950:	440b      	add	r3, r1
 8002952:	3302      	adds	r3, #2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    for (uint8_t neighbor = 0; neighbor < neighbors->size; neighbor++) {
 800295e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002962:	3301      	adds	r3, #1
 8002964:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002968:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	db87      	blt.n	8002884 <Best_Cell+0x100>
           }
    }
    enum Direction ret_dir = neighbors->cells[best_cell_index].dir;
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800297c:	4613      	mov	r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	7a1b      	ldrb	r3, [r3, #8]
 8002988:	75bb      	strb	r3, [r7, #22]
    free(replacement_array);
 800298a:	69b8      	ldr	r0, [r7, #24]
 800298c:	f006 f868 	bl	8008a60 <free>
    if (mode == SEARCH) {
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d104      	bne.n	80029a0 <Best_Cell+0x21c>
        free(neighbors->cells);
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	4618      	mov	r0, r3
 800299c:	f006 f860 	bl	8008a60 <free>
    }
    free(neighbors);
 80029a0:	69f8      	ldr	r0, [r7, #28]
 80029a2:	f006 f85d 	bl	8008a60 <free>

    return ret_dir;                                                                                                 // Return direction of lowest cost cell
 80029a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3728      	adds	r7, #40	@ 0x28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <Maze_Init>:

void Maze_Init(struct Maze* maze) {
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
    for (uint8_t y = 0; y < 16; y++) { for (uint8_t x = 0; x < 16; x++) { maze->cellWalls[y][x] = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	75fb      	strb	r3, [r7, #23]
 80029bc:	e020      	b.n	8002a00 <Maze_Init+0x50>
 80029be:	2300      	movs	r3, #0
 80029c0:	75bb      	strb	r3, [r7, #22]
 80029c2:	e017      	b.n	80029f4 <Maze_Init+0x44>
 80029c4:	7df9      	ldrb	r1, [r7, #23]
 80029c6:	7dbb      	ldrb	r3, [r7, #22]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	0109      	lsls	r1, r1, #4
 80029cc:	440b      	add	r3, r1
 80029ce:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	2200      	movs	r2, #0
 80029d8:	605a      	str	r2, [r3, #4]
    																	  maze->exploredCells[y][x] = 0; } }        // Initialize all wall/explored values to 0
 80029da:	7dfa      	ldrb	r2, [r7, #23]
 80029dc:	7dbb      	ldrb	r3, [r7, #22]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	0112      	lsls	r2, r2, #4
 80029e2:	440a      	add	r2, r1
 80029e4:	4413      	add	r3, r2
 80029e6:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
    for (uint8_t y = 0; y < 16; y++) { for (uint8_t x = 0; x < 16; x++) { maze->cellWalls[y][x] = 0;
 80029ee:	7dbb      	ldrb	r3, [r7, #22]
 80029f0:	3301      	adds	r3, #1
 80029f2:	75bb      	strb	r3, [r7, #22]
 80029f4:	7dbb      	ldrb	r3, [r7, #22]
 80029f6:	2b0f      	cmp	r3, #15
 80029f8:	d9e4      	bls.n	80029c4 <Maze_Init+0x14>
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
 80029fc:	3301      	adds	r3, #1
 80029fe:	75fb      	strb	r3, [r7, #23]
 8002a00:	7dfb      	ldrb	r3, [r7, #23]
 8002a02:	2b0f      	cmp	r3, #15
 8002a04:	d9db      	bls.n	80029be <Maze_Init+0xe>
    maze->mouse_dir = NORTH;                                                                                        // Mouse starting direction/pos always NORTH/{0,0}
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	721a      	strb	r2, [r3, #8]
    maze->mouse_pos = (struct Coord){0,0};
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	605a      	str	r2, [r3, #4]
}
 8002a18:	bf00      	nop
 8002a1a:	371c      	adds	r7, #28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
	...

08002a24 <Search_Mode>:

void Search_Mode(struct Maze* maze) {
 8002a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a26:	b099      	sub	sp, #100	@ 0x64
 8002a28:	af0e      	add	r7, sp, #56	@ 0x38
 8002a2a:	61f8      	str	r0, [r7, #28]
	disable_adc = true;
 8002a2c:	4b9c      	ldr	r3, [pc, #624]	@ (8002ca0 <Search_Mode+0x27c>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]
	Scan_Walls(maze);
 8002a32:	69f8      	ldr	r0, [r7, #28]
 8002a34:	f7ff f9aa 	bl	8001d8c <Scan_Walls>
	disable_adc = false;
 8002a38:	4b99      	ldr	r3, [pc, #612]	@ (8002ca0 <Search_Mode+0x27c>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]
	Floodfill(maze, SEARCHING);
 8002a3e:	2100      	movs	r1, #0
 8002a40:	69f8      	ldr	r0, [r7, #28]
 8002a42:	f7ff fcfb 	bl	800243c <Floodfill>

	enum Direction best_dir = Best_Cell(maze, maze->mouse_pos, SEARCHING);
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	2300      	movs	r3, #0
 8002a4a:	ca06      	ldmia	r2, {r1, r2}
 8002a4c:	69f8      	ldr	r0, [r7, #28]
 8002a4e:	f7ff fe99 	bl	8002784 <Best_Cell>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (best_dir == (enum Direction)((maze->mouse_dir + 3) % 4)) { // Right Turn
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	7a1b      	ldrb	r3, [r3, #8]
 8002a5c:	3303      	adds	r3, #3
 8002a5e:	425a      	negs	r2, r3
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	f002 0203 	and.w	r2, r2, #3
 8002a68:	bf58      	it	pl
 8002a6a:	4253      	negpl	r3, r2
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d147      	bne.n	8002b06 <Search_Mode+0xe2>
		#ifndef SMOOTH_TURNS
			rot_placeholder_1 = Parameter_Packer(RIGHT_TURN_DEG, SEARCH_SPEED_ROT_MAX, 0, SEARCH_ACCELERATION, false);
			fwd_placeholder_1 = Parameter_Packer(CELL_TO_CENTER_MM, SEARCH_SPEED_FWD_MAX, 0, SEARCH_ACCELERATION, true);
			Turn_Container(fwd_placeholder_1, rot_placeholder_1, &forward_profile, &rotational_profile);
		#else
			rot_placeholder_1 = Parameter_Packer(RIGHT_TURN_DEG, SEARCH_SPEED_ROT_SMOOTH_MAX, 0, SEARCH_ACCELERATION, false);
 8002a76:	498b      	ldr	r1, [pc, #556]	@ (8002ca4 <Search_Mode+0x280>)
 8002a78:	4c8b      	ldr	r4, [pc, #556]	@ (8002ca8 <Search_Mode+0x284>)
 8002a7a:	4b8c      	ldr	r3, [pc, #560]	@ (8002cac <Search_Mode+0x288>)
 8002a7c:	4d8c      	ldr	r5, [pc, #560]	@ (8002cb0 <Search_Mode+0x28c>)
 8002a7e:	4638      	mov	r0, r7
 8002a80:	2200      	movs	r2, #0
 8002a82:	9201      	str	r2, [sp, #4]
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	4622      	mov	r2, r4
 8002a8c:	f001 f93a 	bl	8003d04 <Parameter_Packer>
 8002a90:	463c      	mov	r4, r7
 8002a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	602b      	str	r3, [r5, #0]
			fwd_placeholder_1 = Parameter_Packer(SMOOTH_TURN_FWD_MM, SEARCH_SPEED_FWD_SMOOTH_MAX, SEARCH_SPEED_FWD_SMOOTH_MAX, SEARCH_ACCELERATION, true);
 8002a9a:	4986      	ldr	r1, [pc, #536]	@ (8002cb4 <Search_Mode+0x290>)
 8002a9c:	4c82      	ldr	r4, [pc, #520]	@ (8002ca8 <Search_Mode+0x284>)
 8002a9e:	4d82      	ldr	r5, [pc, #520]	@ (8002ca8 <Search_Mode+0x284>)
 8002aa0:	4b82      	ldr	r3, [pc, #520]	@ (8002cac <Search_Mode+0x288>)
 8002aa2:	4e85      	ldr	r6, [pc, #532]	@ (8002cb8 <Search_Mode+0x294>)
 8002aa4:	4638      	mov	r0, r7
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	9201      	str	r2, [sp, #4]
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	462b      	mov	r3, r5
 8002aae:	4622      	mov	r2, r4
 8002ab0:	f001 f928 	bl	8003d04 <Parameter_Packer>
 8002ab4:	4635      	mov	r5, r6
 8002ab6:	463c      	mov	r4, r7
 8002ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002abc:	6823      	ldr	r3, [r4, #0]
 8002abe:	602b      	str	r3, [r5, #0]
			Smooth_Turn_Container(fwd_placeholder_1, rot_placeholder_1, &forward_profile, &rotational_profile);
 8002ac0:	4e7d      	ldr	r6, [pc, #500]	@ (8002cb8 <Search_Mode+0x294>)
 8002ac2:	4b7e      	ldr	r3, [pc, #504]	@ (8002cbc <Search_Mode+0x298>)
 8002ac4:	9307      	str	r3, [sp, #28]
 8002ac6:	4b7e      	ldr	r3, [pc, #504]	@ (8002cc0 <Search_Mode+0x29c>)
 8002ac8:	9306      	str	r3, [sp, #24]
 8002aca:	4b79      	ldr	r3, [pc, #484]	@ (8002cb0 <Search_Mode+0x28c>)
 8002acc:	ac01      	add	r4, sp, #4
 8002ace:	461d      	mov	r5, r3
 8002ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ad4:	682b      	ldr	r3, [r5, #0]
 8002ad6:	6023      	str	r3, [r4, #0]
 8002ad8:	6933      	ldr	r3, [r6, #16]
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002ae0:	f001 f86c 	bl	8003bbc <Smooth_Turn_Container>
		#endif
			maze->mouse_dir = (enum Direction)((maze->mouse_dir + 3) % 4);
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	7a1b      	ldrb	r3, [r3, #8]
 8002ae8:	3303      	adds	r3, #3
 8002aea:	425a      	negs	r2, r3
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	f002 0203 	and.w	r2, r2, #3
 8002af4:	bf58      	it	pl
 8002af6:	4253      	negpl	r3, r2
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	721a      	strb	r2, [r3, #8]
			prev_action = RIGHT_TURN;
 8002afe:	4b71      	ldr	r3, [pc, #452]	@ (8002cc4 <Search_Mode+0x2a0>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	e119      	b.n	8002d3a <Search_Mode+0x316>
		}
	else if (best_dir == (enum Direction)((maze->mouse_dir + 1) % 4)) { // Left Turn
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	7a1b      	ldrb	r3, [r3, #8]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	425a      	negs	r2, r3
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	f002 0203 	and.w	r2, r2, #3
 8002b16:	bf58      	it	pl
 8002b18:	4253      	negpl	r3, r2
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d147      	bne.n	8002bb4 <Search_Mode+0x190>
		#ifndef SMOOTH_TURNS
			rot_placeholder_1 = Parameter_Packer(LEFT_TURN_DEG, SEARCH_SPEED_ROT_MAX, 0, SEARCH_ACCELERATION, false);
			fwd_placeholder_1 = Parameter_Packer(CELL_TO_CENTER_MM, SEARCH_SPEED_FWD_MAX, 0, SEARCH_ACCELERATION, true);
			Turn_Container(fwd_placeholder_1, rot_placeholder_1, &forward_profile, &rotational_profile);
		#else
			rot_placeholder_1 = Parameter_Packer(LEFT_TURN_DEG, SEARCH_SPEED_ROT_SMOOTH_MAX, 0, SEARCH_ACCELERATION, false);
 8002b24:	4968      	ldr	r1, [pc, #416]	@ (8002cc8 <Search_Mode+0x2a4>)
 8002b26:	4c60      	ldr	r4, [pc, #384]	@ (8002ca8 <Search_Mode+0x284>)
 8002b28:	4b60      	ldr	r3, [pc, #384]	@ (8002cac <Search_Mode+0x288>)
 8002b2a:	4d61      	ldr	r5, [pc, #388]	@ (8002cb0 <Search_Mode+0x28c>)
 8002b2c:	4638      	mov	r0, r7
 8002b2e:	2200      	movs	r2, #0
 8002b30:	9201      	str	r2, [sp, #4]
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	4622      	mov	r2, r4
 8002b3a:	f001 f8e3 	bl	8003d04 <Parameter_Packer>
 8002b3e:	463c      	mov	r4, r7
 8002b40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b44:	6823      	ldr	r3, [r4, #0]
 8002b46:	602b      	str	r3, [r5, #0]
			fwd_placeholder_1 = Parameter_Packer(SMOOTH_TURN_FWD_MM, SEARCH_SPEED_FWD_SMOOTH_MAX, SEARCH_SPEED_FWD_SMOOTH_MAX, SEARCH_ACCELERATION, true);
 8002b48:	495a      	ldr	r1, [pc, #360]	@ (8002cb4 <Search_Mode+0x290>)
 8002b4a:	4c57      	ldr	r4, [pc, #348]	@ (8002ca8 <Search_Mode+0x284>)
 8002b4c:	4d56      	ldr	r5, [pc, #344]	@ (8002ca8 <Search_Mode+0x284>)
 8002b4e:	4b57      	ldr	r3, [pc, #348]	@ (8002cac <Search_Mode+0x288>)
 8002b50:	4e59      	ldr	r6, [pc, #356]	@ (8002cb8 <Search_Mode+0x294>)
 8002b52:	4638      	mov	r0, r7
 8002b54:	2201      	movs	r2, #1
 8002b56:	9201      	str	r2, [sp, #4]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	462b      	mov	r3, r5
 8002b5c:	4622      	mov	r2, r4
 8002b5e:	f001 f8d1 	bl	8003d04 <Parameter_Packer>
 8002b62:	4635      	mov	r5, r6
 8002b64:	463c      	mov	r4, r7
 8002b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	602b      	str	r3, [r5, #0]
			Smooth_Turn_Container(fwd_placeholder_1, rot_placeholder_1, &forward_profile, &rotational_profile);
 8002b6e:	4e52      	ldr	r6, [pc, #328]	@ (8002cb8 <Search_Mode+0x294>)
 8002b70:	4b52      	ldr	r3, [pc, #328]	@ (8002cbc <Search_Mode+0x298>)
 8002b72:	9307      	str	r3, [sp, #28]
 8002b74:	4b52      	ldr	r3, [pc, #328]	@ (8002cc0 <Search_Mode+0x29c>)
 8002b76:	9306      	str	r3, [sp, #24]
 8002b78:	4b4d      	ldr	r3, [pc, #308]	@ (8002cb0 <Search_Mode+0x28c>)
 8002b7a:	ac01      	add	r4, sp, #4
 8002b7c:	461d      	mov	r5, r3
 8002b7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b82:	682b      	ldr	r3, [r5, #0]
 8002b84:	6023      	str	r3, [r4, #0]
 8002b86:	6933      	ldr	r3, [r6, #16]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002b8e:	f001 f815 	bl	8003bbc <Smooth_Turn_Container>
		#endif
			maze->mouse_dir = (enum Direction)((maze->mouse_dir + 1) % 4);
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	7a1b      	ldrb	r3, [r3, #8]
 8002b96:	3301      	adds	r3, #1
 8002b98:	425a      	negs	r2, r3
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	f002 0203 	and.w	r2, r2, #3
 8002ba2:	bf58      	it	pl
 8002ba4:	4253      	negpl	r3, r2
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	721a      	strb	r2, [r3, #8]
			prev_action = LEFT_TURN;
 8002bac:	4b45      	ldr	r3, [pc, #276]	@ (8002cc4 <Search_Mode+0x2a0>)
 8002bae:	2202      	movs	r2, #2
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	e0c2      	b.n	8002d3a <Search_Mode+0x316>
		}
	else if (best_dir == (enum Direction)((maze->mouse_dir + 2) % 4)) { // About turn
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	7a1b      	ldrb	r3, [r3, #8]
 8002bb8:	3302      	adds	r3, #2
 8002bba:	425a      	negs	r2, r3
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	f002 0203 	and.w	r2, r2, #3
 8002bc4:	bf58      	it	pl
 8002bc6:	4253      	negpl	r3, r2
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	f040 80b3 	bne.w	8002d3a <Search_Mode+0x316>
		rot_placeholder_1 = Parameter_Packer(ABOUT_TURN_DEG, SEARCH_SPEED_ROT_MAX, 0, SEARCH_ACCELERATION, false);
 8002bd4:	493d      	ldr	r1, [pc, #244]	@ (8002ccc <Search_Mode+0x2a8>)
 8002bd6:	4c3e      	ldr	r4, [pc, #248]	@ (8002cd0 <Search_Mode+0x2ac>)
 8002bd8:	4b34      	ldr	r3, [pc, #208]	@ (8002cac <Search_Mode+0x288>)
 8002bda:	4d35      	ldr	r5, [pc, #212]	@ (8002cb0 <Search_Mode+0x28c>)
 8002bdc:	4638      	mov	r0, r7
 8002bde:	2200      	movs	r2, #0
 8002be0:	9201      	str	r2, [sp, #4]
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	4622      	mov	r2, r4
 8002bea:	f001 f88b 	bl	8003d04 <Parameter_Packer>
 8002bee:	463c      	mov	r4, r7
 8002bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bf4:	6823      	ldr	r3, [r4, #0]
 8002bf6:	602b      	str	r3, [r5, #0]
		if (wall_front) { // Back up into wall to realign, continue from there
 8002bf8:	4b36      	ldr	r3, [pc, #216]	@ (8002cd4 <Search_Mode+0x2b0>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d071      	beq.n	8002ce4 <Search_Mode+0x2c0>
			fwd_placeholder_1 = Parameter_Packer(CELL_TO_CENTER_MM, SEARCH_SPEED_FWD_MAX, 0, SEARCH_ACCELERATION, true);
 8002c00:	4935      	ldr	r1, [pc, #212]	@ (8002cd8 <Search_Mode+0x2b4>)
 8002c02:	4c33      	ldr	r4, [pc, #204]	@ (8002cd0 <Search_Mode+0x2ac>)
 8002c04:	4b29      	ldr	r3, [pc, #164]	@ (8002cac <Search_Mode+0x288>)
 8002c06:	4d2c      	ldr	r5, [pc, #176]	@ (8002cb8 <Search_Mode+0x294>)
 8002c08:	4638      	mov	r0, r7
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	9201      	str	r2, [sp, #4]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	4622      	mov	r2, r4
 8002c16:	f001 f875 	bl	8003d04 <Parameter_Packer>
 8002c1a:	463c      	mov	r4, r7
 8002c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c20:	6823      	ldr	r3, [r4, #0]
 8002c22:	602b      	str	r3, [r5, #0]
			fwd_placeholder_2 = Parameter_Packer(CENTER_TO_WALL_REVERSE_MM, SEARCH_SPEED_FWD_MAX, 0, SEARCH_ACCELERATION, true);
 8002c24:	492d      	ldr	r1, [pc, #180]	@ (8002cdc <Search_Mode+0x2b8>)
 8002c26:	4c2a      	ldr	r4, [pc, #168]	@ (8002cd0 <Search_Mode+0x2ac>)
 8002c28:	4b20      	ldr	r3, [pc, #128]	@ (8002cac <Search_Mode+0x288>)
 8002c2a:	4d2d      	ldr	r5, [pc, #180]	@ (8002ce0 <Search_Mode+0x2bc>)
 8002c2c:	4638      	mov	r0, r7
 8002c2e:	2201      	movs	r2, #1
 8002c30:	9201      	str	r2, [sp, #4]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	4622      	mov	r2, r4
 8002c3a:	f001 f863 	bl	8003d04 <Parameter_Packer>
 8002c3e:	463c      	mov	r4, r7
 8002c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c44:	6823      	ldr	r3, [r4, #0]
 8002c46:	602b      	str	r3, [r5, #0]
			About_Face_Container(fwd_placeholder_1, fwd_placeholder_2, rot_placeholder_1, &forward_profile, &rotational_profile, true);
 8002c48:	4e1b      	ldr	r6, [pc, #108]	@ (8002cb8 <Search_Mode+0x294>)
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	930d      	str	r3, [sp, #52]	@ 0x34
 8002c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cbc <Search_Mode+0x298>)
 8002c50:	930c      	str	r3, [sp, #48]	@ 0x30
 8002c52:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <Search_Mode+0x29c>)
 8002c54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002c56:	4b16      	ldr	r3, [pc, #88]	@ (8002cb0 <Search_Mode+0x28c>)
 8002c58:	ac06      	add	r4, sp, #24
 8002c5a:	461d      	mov	r5, r3
 8002c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c60:	682b      	ldr	r3, [r5, #0]
 8002c62:	6023      	str	r3, [r4, #0]
 8002c64:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce0 <Search_Mode+0x2bc>)
 8002c66:	ac01      	add	r4, sp, #4
 8002c68:	461d      	mov	r5, r3
 8002c6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c6e:	682b      	ldr	r3, [r5, #0]
 8002c70:	6023      	str	r3, [r4, #0]
 8002c72:	6933      	ldr	r3, [r6, #16]
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002c7a:	f000 ffe7 	bl	8003c4c <About_Face_Container>
			maze->mouse_dir = (enum Direction)((maze->mouse_dir + 2) % 4);
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	7a1b      	ldrb	r3, [r3, #8]
 8002c82:	3302      	adds	r3, #2
 8002c84:	425a      	negs	r2, r3
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	f002 0203 	and.w	r2, r2, #3
 8002c8e:	bf58      	it	pl
 8002c90:	4253      	negpl	r3, r2
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	721a      	strb	r2, [r3, #8]
			prev_action = ABOUT_FACE;
 8002c98:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <Search_Mode+0x2a0>)
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e04c      	b.n	8002d3a <Search_Mode+0x316>
 8002ca0:	20000c1c 	.word	0x20000c1c
 8002ca4:	42c00000 	.word	0x42c00000
 8002ca8:	43af0000 	.word	0x43af0000
 8002cac:	453b8000 	.word	0x453b8000
 8002cb0:	20000c48 	.word	0x20000c48
 8002cb4:	4228994b 	.word	0x4228994b
 8002cb8:	20000c20 	.word	0x20000c20
 8002cbc:	20000bac 	.word	0x20000bac
 8002cc0:	20000b84 	.word	0x20000b84
 8002cc4:	20000008 	.word	0x20000008
 8002cc8:	c2bc0000 	.word	0xc2bc0000
 8002ccc:	433e0000 	.word	0x433e0000
 8002cd0:	43fa0000 	.word	0x43fa0000
 8002cd4:	20000c7c 	.word	0x20000c7c
 8002cd8:	42950000 	.word	0x42950000
 8002cdc:	c2b90000 	.word	0xc2b90000
 8002ce0:	20000c34 	.word	0x20000c34
		}
		else { // If no wall, simply turn 180 degrees
			About_Face_Container(fwd_placeholder_1, fwd_placeholder_2, rot_placeholder_1, &forward_profile, &rotational_profile, false);
 8002ce4:	4e7b      	ldr	r6, [pc, #492]	@ (8002ed4 <Search_Mode+0x4b0>)
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	930d      	str	r3, [sp, #52]	@ 0x34
 8002cea:	4b7b      	ldr	r3, [pc, #492]	@ (8002ed8 <Search_Mode+0x4b4>)
 8002cec:	930c      	str	r3, [sp, #48]	@ 0x30
 8002cee:	4b7b      	ldr	r3, [pc, #492]	@ (8002edc <Search_Mode+0x4b8>)
 8002cf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002cf2:	4b7b      	ldr	r3, [pc, #492]	@ (8002ee0 <Search_Mode+0x4bc>)
 8002cf4:	ac06      	add	r4, sp, #24
 8002cf6:	461d      	mov	r5, r3
 8002cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cfc:	682b      	ldr	r3, [r5, #0]
 8002cfe:	6023      	str	r3, [r4, #0]
 8002d00:	4b78      	ldr	r3, [pc, #480]	@ (8002ee4 <Search_Mode+0x4c0>)
 8002d02:	ac01      	add	r4, sp, #4
 8002d04:	461d      	mov	r5, r3
 8002d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d0a:	682b      	ldr	r3, [r5, #0]
 8002d0c:	6023      	str	r3, [r4, #0]
 8002d0e:	6933      	ldr	r3, [r6, #16]
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002d16:	f000 ff99 	bl	8003c4c <About_Face_Container>
			maze->mouse_dir = (enum Direction)((maze->mouse_dir + 2) % 4);
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	7a1b      	ldrb	r3, [r3, #8]
 8002d1e:	3302      	adds	r3, #2
 8002d20:	425a      	negs	r2, r3
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	f002 0203 	and.w	r2, r2, #3
 8002d2a:	bf58      	it	pl
 8002d2c:	4253      	negpl	r3, r2
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	721a      	strb	r2, [r3, #8]
			prev_action = NONE;
 8002d34:	4b6c      	ldr	r3, [pc, #432]	@ (8002ee8 <Search_Mode+0x4c4>)
 8002d36:	2204      	movs	r2, #4
 8002d38:	701a      	strb	r2, [r3, #0]
		}
	}

	if (prev_action == FORWARD_DRIVE) { // Normal forward movement
 8002d3a:	4b6b      	ldr	r3, [pc, #428]	@ (8002ee8 <Search_Mode+0x4c4>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d11b      	bne.n	8002d7a <Search_Mode+0x356>
		fwd_placeholder_1 = Parameter_Packer(CELL_TO_CELL_MM, SEARCH_SPEED_FWD_MAX, SEARCH_SPEED_FWD_MAX, SEARCH_ACCELERATION, true);
 8002d42:	496a      	ldr	r1, [pc, #424]	@ (8002eec <Search_Mode+0x4c8>)
 8002d44:	4c6a      	ldr	r4, [pc, #424]	@ (8002ef0 <Search_Mode+0x4cc>)
 8002d46:	4d6a      	ldr	r5, [pc, #424]	@ (8002ef0 <Search_Mode+0x4cc>)
 8002d48:	4b6a      	ldr	r3, [pc, #424]	@ (8002ef4 <Search_Mode+0x4d0>)
 8002d4a:	4e62      	ldr	r6, [pc, #392]	@ (8002ed4 <Search_Mode+0x4b0>)
 8002d4c:	4638      	mov	r0, r7
 8002d4e:	2201      	movs	r2, #1
 8002d50:	9201      	str	r2, [sp, #4]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	462b      	mov	r3, r5
 8002d56:	4622      	mov	r2, r4
 8002d58:	f000 ffd4 	bl	8003d04 <Parameter_Packer>
 8002d5c:	4635      	mov	r5, r6
 8002d5e:	463c      	mov	r4, r7
 8002d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	602b      	str	r3, [r5, #0]
		Profile_Container(fwd_placeholder_1, &forward_profile);
 8002d68:	4b5a      	ldr	r3, [pc, #360]	@ (8002ed4 <Search_Mode+0x4b0>)
 8002d6a:	4a5c      	ldr	r2, [pc, #368]	@ (8002edc <Search_Mode+0x4b8>)
 8002d6c:	9201      	str	r2, [sp, #4]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	9200      	str	r2, [sp, #0]
 8002d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d74:	f000 feec 	bl	8003b50 <Profile_Container>
 8002d78:	e01e      	b.n	8002db8 <Search_Mode+0x394>
	}
	else if (prev_action == ABOUT_FACE){ // Distance to travel is less than after a forward movement or turn
 8002d7a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ee8 <Search_Mode+0x4c4>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d11a      	bne.n	8002db8 <Search_Mode+0x394>
		fwd_placeholder_1 = Parameter_Packer(BACK_ON_WALL_TO_CELL_MM, SEARCH_SPEED_FWD_MAX, SEARCH_SPEED_FWD_MAX, SEARCH_ACCELERATION, true);
 8002d82:	495d      	ldr	r1, [pc, #372]	@ (8002ef8 <Search_Mode+0x4d4>)
 8002d84:	4c5a      	ldr	r4, [pc, #360]	@ (8002ef0 <Search_Mode+0x4cc>)
 8002d86:	4d5a      	ldr	r5, [pc, #360]	@ (8002ef0 <Search_Mode+0x4cc>)
 8002d88:	4b5a      	ldr	r3, [pc, #360]	@ (8002ef4 <Search_Mode+0x4d0>)
 8002d8a:	4e52      	ldr	r6, [pc, #328]	@ (8002ed4 <Search_Mode+0x4b0>)
 8002d8c:	4638      	mov	r0, r7
 8002d8e:	2201      	movs	r2, #1
 8002d90:	9201      	str	r2, [sp, #4]
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	462b      	mov	r3, r5
 8002d96:	4622      	mov	r2, r4
 8002d98:	f000 ffb4 	bl	8003d04 <Parameter_Packer>
 8002d9c:	4635      	mov	r5, r6
 8002d9e:	463c      	mov	r4, r7
 8002da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	602b      	str	r3, [r5, #0]
		Profile_Container(fwd_placeholder_1, &forward_profile);
 8002da8:	4b4a      	ldr	r3, [pc, #296]	@ (8002ed4 <Search_Mode+0x4b0>)
 8002daa:	4a4c      	ldr	r2, [pc, #304]	@ (8002edc <Search_Mode+0x4b8>)
 8002dac:	9201      	str	r2, [sp, #4]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	9200      	str	r2, [sp, #0]
 8002db2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002db4:	f000 fecc 	bl	8003b50 <Profile_Container>
	}
	else { // On a turn don't make any additional movement

	}

	prev_action = FORWARD_DRIVE;
 8002db8:	4b4b      	ldr	r3, [pc, #300]	@ (8002ee8 <Search_Mode+0x4c4>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	701a      	strb	r2, [r3, #0]

	Update_Mouse_Pos(&maze->mouse_pos, maze->mouse_dir, maze);
 8002dbe:	69f8      	ldr	r0, [r7, #28]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	7a1b      	ldrb	r3, [r3, #8]
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f7ff fa90 	bl	80022ec <Update_Mouse_Pos>

	// Check if mouse is in goal, if so change goal back to start location
	if (maze->distances[maze->mouse_pos.y][maze->mouse_pos.x] == 0) {
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	6859      	ldr	r1, [r3, #4]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	0109      	lsls	r1, r1, #4
 8002dd8:	440b      	add	r3, r1
 8002dda:	3302      	adds	r3, #2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d172      	bne.n	8002ecc <Search_Mode+0x4a8>
		if (!((maze->goalPos[0].x == 0) && (maze->goalPos[0].y == 0))) {
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d104      	bne.n	8002dfa <Search_Mode+0x3d6>
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f8d3 3910 	ldr.w	r3, [r3, #2320]	@ 0x910
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <Search_Mode+0x3e6>
			Set_Goal_Cell(maze, 1); // Change goal cell back to origin
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	69f8      	ldr	r0, [r7, #28]
 8002dfe:	f7ff fadb 	bl	80023b8 <Set_Goal_Cell>

			// Save maze to flash memory
			Save_Maze_To_Flash(maze);
 8002e02:	69f8      	ldr	r0, [r7, #28]
 8002e04:	f001 f93a 	bl	800407c <Save_Maze_To_Flash>
			armed = false;
			motor_controller_enabled = false;
		}
	}

}
 8002e08:	e060      	b.n	8002ecc <Search_Mode+0x4a8>
			rot_placeholder_1 = Parameter_Packer(ABOUT_TURN_DEG, SEARCH_SPEED_ROT_MAX, 0, SEARCH_ACCELERATION, false);
 8002e0a:	493c      	ldr	r1, [pc, #240]	@ (8002efc <Search_Mode+0x4d8>)
 8002e0c:	4c38      	ldr	r4, [pc, #224]	@ (8002ef0 <Search_Mode+0x4cc>)
 8002e0e:	4b39      	ldr	r3, [pc, #228]	@ (8002ef4 <Search_Mode+0x4d0>)
 8002e10:	4d33      	ldr	r5, [pc, #204]	@ (8002ee0 <Search_Mode+0x4bc>)
 8002e12:	4638      	mov	r0, r7
 8002e14:	2200      	movs	r2, #0
 8002e16:	9201      	str	r2, [sp, #4]
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	4622      	mov	r2, r4
 8002e20:	f000 ff70 	bl	8003d04 <Parameter_Packer>
 8002e24:	463c      	mov	r4, r7
 8002e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e2a:	6823      	ldr	r3, [r4, #0]
 8002e2c:	602b      	str	r3, [r5, #0]
			fwd_placeholder_1 = Parameter_Packer(CELL_TO_CENTER_MM, SEARCH_SPEED_FWD_MAX, 0, SEARCH_ACCELERATION, true);
 8002e2e:	4934      	ldr	r1, [pc, #208]	@ (8002f00 <Search_Mode+0x4dc>)
 8002e30:	4c2f      	ldr	r4, [pc, #188]	@ (8002ef0 <Search_Mode+0x4cc>)
 8002e32:	4b30      	ldr	r3, [pc, #192]	@ (8002ef4 <Search_Mode+0x4d0>)
 8002e34:	4d27      	ldr	r5, [pc, #156]	@ (8002ed4 <Search_Mode+0x4b0>)
 8002e36:	4638      	mov	r0, r7
 8002e38:	2201      	movs	r2, #1
 8002e3a:	9201      	str	r2, [sp, #4]
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	4622      	mov	r2, r4
 8002e44:	f000 ff5e 	bl	8003d04 <Parameter_Packer>
 8002e48:	463c      	mov	r4, r7
 8002e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	602b      	str	r3, [r5, #0]
			fwd_placeholder_2 = Parameter_Packer(CENTER_TO_WALL_REVERSE_MM, SEARCH_SPEED_FWD_MAX, 0, SEARCH_ACCELERATION, true);
 8002e52:	492c      	ldr	r1, [pc, #176]	@ (8002f04 <Search_Mode+0x4e0>)
 8002e54:	4c26      	ldr	r4, [pc, #152]	@ (8002ef0 <Search_Mode+0x4cc>)
 8002e56:	4b27      	ldr	r3, [pc, #156]	@ (8002ef4 <Search_Mode+0x4d0>)
 8002e58:	4d22      	ldr	r5, [pc, #136]	@ (8002ee4 <Search_Mode+0x4c0>)
 8002e5a:	4638      	mov	r0, r7
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	9201      	str	r2, [sp, #4]
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	4622      	mov	r2, r4
 8002e68:	f000 ff4c 	bl	8003d04 <Parameter_Packer>
 8002e6c:	463c      	mov	r4, r7
 8002e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e72:	6823      	ldr	r3, [r4, #0]
 8002e74:	602b      	str	r3, [r5, #0]
			About_Face_Container(fwd_placeholder_1, fwd_placeholder_2, rot_placeholder_1, &forward_profile, &rotational_profile, true);
 8002e76:	4e17      	ldr	r6, [pc, #92]	@ (8002ed4 <Search_Mode+0x4b0>)
 8002e78:	2301      	movs	r3, #1
 8002e7a:	930d      	str	r3, [sp, #52]	@ 0x34
 8002e7c:	4b16      	ldr	r3, [pc, #88]	@ (8002ed8 <Search_Mode+0x4b4>)
 8002e7e:	930c      	str	r3, [sp, #48]	@ 0x30
 8002e80:	4b16      	ldr	r3, [pc, #88]	@ (8002edc <Search_Mode+0x4b8>)
 8002e82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002e84:	4b16      	ldr	r3, [pc, #88]	@ (8002ee0 <Search_Mode+0x4bc>)
 8002e86:	ac06      	add	r4, sp, #24
 8002e88:	461d      	mov	r5, r3
 8002e8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e8e:	682b      	ldr	r3, [r5, #0]
 8002e90:	6023      	str	r3, [r4, #0]
 8002e92:	4b14      	ldr	r3, [pc, #80]	@ (8002ee4 <Search_Mode+0x4c0>)
 8002e94:	ac01      	add	r4, sp, #4
 8002e96:	461d      	mov	r5, r3
 8002e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e9c:	682b      	ldr	r3, [r5, #0]
 8002e9e:	6023      	str	r3, [r4, #0]
 8002ea0:	6933      	ldr	r3, [r6, #16]
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002ea8:	f000 fed0 	bl	8003c4c <About_Face_Container>
			maze->mouse_dir = NORTH;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	721a      	strb	r2, [r3, #8]
			prev_action = ABOUT_FACE;
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee8 <Search_Mode+0x4c4>)
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	701a      	strb	r2, [r3, #0]
			Set_Goal_Cell(maze, 4); // Change goal cell back to center of maze
 8002eb8:	2104      	movs	r1, #4
 8002eba:	69f8      	ldr	r0, [r7, #28]
 8002ebc:	f7ff fa7c 	bl	80023b8 <Set_Goal_Cell>
			armed = false;
 8002ec0:	4b11      	ldr	r3, [pc, #68]	@ (8002f08 <Search_Mode+0x4e4>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
			motor_controller_enabled = false;
 8002ec6:	4b11      	ldr	r3, [pc, #68]	@ (8002f0c <Search_Mode+0x4e8>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
}
 8002ecc:	bf00      	nop
 8002ece:	372c      	adds	r7, #44	@ 0x2c
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ed4:	20000c20 	.word	0x20000c20
 8002ed8:	20000bac 	.word	0x20000bac
 8002edc:	20000b84 	.word	0x20000b84
 8002ee0:	20000c48 	.word	0x20000c48
 8002ee4:	20000c34 	.word	0x20000c34
 8002ee8:	20000008 	.word	0x20000008
 8002eec:	432d0000 	.word	0x432d0000
 8002ef0:	43fa0000 	.word	0x43fa0000
 8002ef4:	453b8000 	.word	0x453b8000
 8002ef8:	43068873 	.word	0x43068873
 8002efc:	433e0000 	.word	0x433e0000
 8002f00:	42950000 	.word	0x42950000
 8002f04:	c2b90000 	.word	0xc2b90000
 8002f08:	20000248 	.word	0x20000248
 8002f0c:	20000c6c 	.word	0x20000c6c

08002f10 <Race_Mode>:

void Race_Mode(struct Maze maze) {
 8002f10:	b084      	sub	sp, #16
 8002f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f16:	f5ad 5d25 	sub.w	sp, sp, #10560	@ 0x2940
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af08      	add	r7, sp, #32
 8002f1e:	f507 5425 	add.w	r4, r7, #10560	@ 0x2940
 8002f22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Floodfill(&maze, RACE);
 8002f26:	2101      	movs	r1, #1
 8002f28:	f507 5025 	add.w	r0, r7, #10560	@ 0x2940
 8002f2c:	f7ff fa86 	bl	800243c <Floodfill>

    uint16_t prelim_motions_length = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8002f36:	f102 0226 	add.w	r2, r2, #38	@ 0x26
 8002f3a:	8013      	strh	r3, [r2, #0]
    enum motion_type_t prelim_motion_queue[256];

    Set_Goal_Cell(&maze, 4);
 8002f3c:	2104      	movs	r1, #4
 8002f3e:	f507 5025 	add.w	r0, r7, #10560	@ 0x2940
 8002f42:	f7ff fa39 	bl	80023b8 <Set_Goal_Cell>
    while (true) {
        enum Direction best_dir = Best_Cell(&maze, maze.mouse_pos, RACE);
 8002f46:	2301      	movs	r3, #1
 8002f48:	f507 5225 	add.w	r2, r7, #10560	@ 0x2940
 8002f4c:	ca06      	ldmia	r2, {r1, r2}
 8002f4e:	f507 5025 	add.w	r0, r7, #10560	@ 0x2940
 8002f52:	f7ff fc17 	bl	8002784 <Best_Cell>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8002f5c:	f102 021d 	add.w	r2, r2, #29
 8002f60:	7013      	strb	r3, [r2, #0]

        if (best_dir == (enum Direction)((maze.mouse_dir + 3) % 4)) {       // Right turn
 8002f62:	f507 5325 	add.w	r3, r7, #10560	@ 0x2940
 8002f66:	f103 0308 	add.w	r3, r3, #8
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	3303      	adds	r3, #3
 8002f6e:	425a      	negs	r2, r3
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	f002 0203 	and.w	r2, r2, #3
 8002f78:	bf58      	it	pl
 8002f7a:	4253      	negpl	r3, r2
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8002f82:	f102 021d 	add.w	r2, r2, #29
 8002f86:	7812      	ldrb	r2, [r2, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d120      	bne.n	8002fce <Race_Mode+0xbe>
            prelim_motion_queue[prelim_motions_length] = TURN_RIGHT;
 8002f8c:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8002f90:	f103 0326 	add.w	r3, r3, #38	@ 0x26
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8002f9a:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002f9e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	54d1      	strb	r1, [r2, r3]
            maze.mouse_dir = (enum Direction)((maze.mouse_dir + 3) % 4);
 8002fa6:	f507 5325 	add.w	r3, r7, #10560	@ 0x2940
 8002faa:	f103 0308 	add.w	r3, r3, #8
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	3303      	adds	r3, #3
 8002fb2:	425a      	negs	r2, r3
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	f002 0203 	and.w	r2, r2, #3
 8002fbc:	bf58      	it	pl
 8002fbe:	4253      	negpl	r3, r2
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	f507 5225 	add.w	r2, r7, #10560	@ 0x2940
 8002fc6:	f102 0208 	add.w	r2, r2, #8
 8002fca:	7013      	strb	r3, [r2, #0]
 8002fcc:	e042      	b.n	8003054 <Race_Mode+0x144>
        }
        else if (best_dir == (enum Direction)((maze.mouse_dir + 1) % 4)) {  // Left turn
 8002fce:	f507 5325 	add.w	r3, r7, #10560	@ 0x2940
 8002fd2:	f103 0308 	add.w	r3, r3, #8
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	425a      	negs	r2, r3
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	f002 0203 	and.w	r2, r2, #3
 8002fe4:	bf58      	it	pl
 8002fe6:	4253      	negpl	r3, r2
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8002fee:	f102 021d 	add.w	r2, r2, #29
 8002ff2:	7812      	ldrb	r2, [r2, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d120      	bne.n	800303a <Race_Mode+0x12a>
            prelim_motion_queue[prelim_motions_length] = TURN_LEFT;
 8002ff8:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8002ffc:	f103 0326 	add.w	r3, r3, #38	@ 0x26
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8003006:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800300a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800300e:	2102      	movs	r1, #2
 8003010:	54d1      	strb	r1, [r2, r3]
            maze.mouse_dir = (enum Direction)((maze.mouse_dir + 1) % 4);
 8003012:	f507 5325 	add.w	r3, r7, #10560	@ 0x2940
 8003016:	f103 0308 	add.w	r3, r3, #8
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	3301      	adds	r3, #1
 800301e:	425a      	negs	r2, r3
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	f002 0203 	and.w	r2, r2, #3
 8003028:	bf58      	it	pl
 800302a:	4253      	negpl	r3, r2
 800302c:	b2db      	uxtb	r3, r3
 800302e:	f507 5225 	add.w	r2, r7, #10560	@ 0x2940
 8003032:	f102 0208 	add.w	r2, r2, #8
 8003036:	7013      	strb	r3, [r2, #0]
 8003038:	e00c      	b.n	8003054 <Race_Mode+0x144>
        }
        else {
            prelim_motion_queue[prelim_motions_length] = FORWARD_ONE_CELL;
 800303a:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800303e:	f103 0326 	add.w	r3, r3, #38	@ 0x26
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8003048:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800304c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003050:	2100      	movs	r1, #0
 8003052:	54d1      	strb	r1, [r2, r3]
        }

        prelim_motions_length++;
 8003054:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003058:	f103 0326 	add.w	r3, r3, #38	@ 0x26
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	3301      	adds	r3, #1
 8003060:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8003064:	f102 0226 	add.w	r2, r2, #38	@ 0x26
 8003068:	8013      	strh	r3, [r2, #0]
        Update_Mouse_Pos(&maze.mouse_pos, maze.mouse_dir, &maze);
 800306a:	f507 5325 	add.w	r3, r7, #10560	@ 0x2940
 800306e:	f103 0308 	add.w	r3, r3, #8
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	f507 5225 	add.w	r2, r7, #10560	@ 0x2940
 8003078:	4619      	mov	r1, r3
 800307a:	f507 5025 	add.w	r0, r7, #10560	@ 0x2940
 800307e:	f7ff f935 	bl	80022ec <Update_Mouse_Pos>

        if (maze.distances[maze.mouse_pos.y][maze.mouse_pos.x] == 0) {    // Check if mouse has reached the goal position, if so break
 8003082:	f507 5325 	add.w	r3, r7, #10560	@ 0x2940
 8003086:	f103 0304 	add.w	r3, r3, #4
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	f507 5325 	add.w	r3, r7, #10560	@ 0x2940
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	0112      	lsls	r2, r2, #4
 8003094:	4413      	add	r3, r2
 8003096:	3302      	adds	r3, #2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	f503 5325 	add.w	r3, r3, #10560	@ 0x2940
 800309e:	443b      	add	r3, r7
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d000      	beq.n	80030a8 <Race_Mode+0x198>
    while (true) {
 80030a6:	e74e      	b.n	8002f46 <Race_Mode+0x36>
            break;
 80030a8:	bf00      	nop
        }
    }

    uint16_t total_params = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 80030b0:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80030b4:	8013      	strh	r3, [r2, #0]
	param_t param_list[512] = { 0 };
 80030b6:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80030ba:	f6a3 130c 	subw	r3, r3, #2316	@ 0x90c
 80030be:	4618      	mov	r0, r3
 80030c0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80030c4:	461a      	mov	r2, r3
 80030c6:	2100      	movs	r1, #0
 80030c8:	f005 fd80 	bl	8008bcc <memset>
	bool back_to_wall = true;
 80030cc:	2301      	movs	r3, #1
 80030ce:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 80030d2:	f102 0223 	add.w	r2, r2, #35	@ 0x23
 80030d6:	7013      	strb	r3, [r2, #0]
    // Combine indivudal motions into larger profiles
    for (uint16_t curr_motion = 0; curr_motion < prelim_motions_length; curr_motion++) {
 80030d8:	2300      	movs	r3, #0
 80030da:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 80030de:	f102 0220 	add.w	r2, r2, #32
 80030e2:	8013      	strh	r3, [r2, #0]
 80030e4:	e1b3      	b.n	800344e <Race_Mode+0x53e>
        switch (prelim_motion_queue[curr_motion]) {
 80030e6:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80030ea:	f103 0320 	add.w	r3, r3, #32
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 80030f4:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80030f8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80030fc:	5cd3      	ldrb	r3, [r2, r3]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	f000 8116 	beq.w	8003330 <Race_Mode+0x420>
 8003104:	2b02      	cmp	r3, #2
 8003106:	f300 8197 	bgt.w	8003438 <Race_Mode+0x528>
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <Race_Mode+0x204>
 800310e:	2b01      	cmp	r3, #1
 8003110:	d07b      	beq.n	800320a <Race_Mode+0x2fa>
 8003112:	e191      	b.n	8003438 <Race_Mode+0x528>
            case FORWARD_ONE_CELL:
            	param_list[total_params].acceleration = RACE_ACCELERATION;
 8003114:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003118:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800311c:	881a      	ldrh	r2, [r3, #0]
 800311e:	487d      	ldr	r0, [pc, #500]	@ (8003314 <Race_Mode+0x404>)
 8003120:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 8003124:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	330c      	adds	r3, #12
 8003134:	6018      	str	r0, [r3, #0]
				param_list[total_params].max_speed = RACE_SPEED_FWD_MAX;
 8003136:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800313a:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800313e:	881a      	ldrh	r2, [r3, #0]
 8003140:	4875      	ldr	r0, [pc, #468]	@ (8003318 <Race_Mode+0x408>)
 8003142:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 8003146:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	3304      	adds	r3, #4
 8003156:	6018      	str	r0, [r3, #0]
            	if (back_to_wall) { // For start cell in maze
 8003158:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800315c:	f103 0323 	add.w	r3, r3, #35	@ 0x23
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d02b      	beq.n	80031be <Race_Mode+0x2ae>
            		param_list[total_params].distance += BACK_ON_WALL_TO_CELL_MM;
 8003166:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800316a:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800316e:	881a      	ldrh	r2, [r3, #0]
 8003170:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 8003174:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a65      	ldr	r2, [pc, #404]	@ (800331c <Race_Mode+0x40c>)
 8003186:	f507 5124 	add.w	r1, r7, #10496	@ 0x2900
 800318a:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 800318e:	880c      	ldrh	r4, [r1, #0]
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd fc26 	bl	80009e4 <__addsf3>
 8003198:	4603      	mov	r3, r0
 800319a:	4619      	mov	r1, r3
 800319c:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80031a0:	f6a3 120c 	subw	r2, r3, #2316	@ 0x90c
 80031a4:	4623      	mov	r3, r4
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4423      	add	r3, r4
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	6019      	str	r1, [r3, #0]
            		back_to_wall = false;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 80031b6:	f102 0223 	add.w	r2, r2, #35	@ 0x23
 80031ba:	7013      	strb	r3, [r2, #0]
            	}
            	else {
            		param_list[total_params].distance += CELL_TO_CELL_MM;
            	}
                break;
 80031bc:	e13c      	b.n	8003438 <Race_Mode+0x528>
            		param_list[total_params].distance += CELL_TO_CELL_MM;
 80031be:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80031c2:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80031c6:	881a      	ldrh	r2, [r3, #0]
 80031c8:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80031cc:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a50      	ldr	r2, [pc, #320]	@ (8003320 <Race_Mode+0x410>)
 80031de:	f507 5124 	add.w	r1, r7, #10496	@ 0x2900
 80031e2:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 80031e6:	880c      	ldrh	r4, [r1, #0]
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd fbfa 	bl	80009e4 <__addsf3>
 80031f0:	4603      	mov	r3, r0
 80031f2:	4619      	mov	r1, r3
 80031f4:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80031f8:	f6a3 120c 	subw	r2, r3, #2316	@ 0x90c
 80031fc:	4623      	mov	r3, r4
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4423      	add	r3, r4
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	6019      	str	r1, [r3, #0]
                break;
 8003208:	e116      	b.n	8003438 <Race_Mode+0x528>

					// Start new forward profile for intial movement
					param_list[total_params].distance += CELL_TO_CENTER_MM;
				#else
            		// Smooth turns
            		param_list[total_params].end_speed = RACE_SPEED_FWD_SMOOTH_MAX;
 800320a:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800320e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003212:	881a      	ldrh	r2, [r3, #0]
 8003214:	4843      	ldr	r0, [pc, #268]	@ (8003324 <Race_Mode+0x414>)
 8003216:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 800321a:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	3308      	adds	r3, #8
 800322a:	6018      	str	r0, [r3, #0]

            		total_params++;
 800322c:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003230:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	3301      	adds	r3, #1
 8003238:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 800323c:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8003240:	8013      	strh	r3, [r2, #0]

            		// Add rotational parameters then forward parameters for smooth turn
            		param_list[total_params] = Parameter_Packer(RIGHT_TURN_DEG, RACE_SPEED_ROT_SMOOTH_MAX, 0, RACE_ACCELERATION, false);
 8003242:	4d39      	ldr	r5, [pc, #228]	@ (8003328 <Race_Mode+0x418>)
 8003244:	4e37      	ldr	r6, [pc, #220]	@ (8003324 <Race_Mode+0x414>)
 8003246:	4c33      	ldr	r4, [pc, #204]	@ (8003314 <Race_Mode+0x404>)
 8003248:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800324c:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003250:	881a      	ldrh	r2, [r3, #0]
 8003252:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 8003256:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	eb01 0803 	add.w	r8, r1, r3
 8003266:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800326a:	3828      	subs	r0, #40	@ 0x28
 800326c:	2300      	movs	r3, #0
 800326e:	9301      	str	r3, [sp, #4]
 8003270:	9400      	str	r4, [sp, #0]
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	4632      	mov	r2, r6
 8003278:	4629      	mov	r1, r5
 800327a:	f000 fd43 	bl	8003d04 <Parameter_Packer>
 800327e:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 8003282:	f6a3 1328 	subw	r3, r3, #2344	@ 0x928
 8003286:	4644      	mov	r4, r8
 8003288:	461d      	mov	r5, r3
 800328a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800328c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800328e:	682b      	ldr	r3, [r5, #0]
 8003290:	6023      	str	r3, [r4, #0]
            		total_params++;
 8003292:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003296:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	3301      	adds	r3, #1
 800329e:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 80032a2:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80032a6:	8013      	strh	r3, [r2, #0]
            		param_list[total_params] = Parameter_Packer(SMOOTH_TURN_FWD_MM, RACE_SPEED_FWD_SMOOTH_MAX, RACE_SPEED_FWD_SMOOTH_MAX, RACE_ACCELERATION, false);
 80032a8:	4d20      	ldr	r5, [pc, #128]	@ (800332c <Race_Mode+0x41c>)
 80032aa:	4e1e      	ldr	r6, [pc, #120]	@ (8003324 <Race_Mode+0x414>)
 80032ac:	f8df c074 	ldr.w	ip, [pc, #116]	@ 8003324 <Race_Mode+0x414>
 80032b0:	4c18      	ldr	r4, [pc, #96]	@ (8003314 <Race_Mode+0x404>)
 80032b2:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80032b6:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80032ba:	881a      	ldrh	r2, [r3, #0]
 80032bc:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80032c0:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	eb01 0803 	add.w	r8, r1, r3
 80032d0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80032d4:	3828      	subs	r0, #40	@ 0x28
 80032d6:	2300      	movs	r3, #0
 80032d8:	9301      	str	r3, [sp, #4]
 80032da:	9400      	str	r4, [sp, #0]
 80032dc:	4663      	mov	r3, ip
 80032de:	4632      	mov	r2, r6
 80032e0:	4629      	mov	r1, r5
 80032e2:	f000 fd0f 	bl	8003d04 <Parameter_Packer>
 80032e6:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80032ea:	f6a3 1328 	subw	r3, r3, #2344	@ 0x928
 80032ee:	4644      	mov	r4, r8
 80032f0:	461d      	mov	r5, r3
 80032f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032f6:	682b      	ldr	r3, [r5, #0]
 80032f8:	6023      	str	r3, [r4, #0]
            		total_params++;
 80032fa:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80032fe:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	3301      	adds	r3, #1
 8003306:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 800330a:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800330e:	8013      	strh	r3, [r2, #0]
				#endif
                break;
 8003310:	e092      	b.n	8003438 <Race_Mode+0x528>
 8003312:	bf00      	nop
 8003314:	453b8000 	.word	0x453b8000
 8003318:	447a0000 	.word	0x447a0000
 800331c:	43068873 	.word	0x43068873
 8003320:	432d0000 	.word	0x432d0000
 8003324:	43af0000 	.word	0x43af0000
 8003328:	42c00000 	.word	0x42c00000
 800332c:	4228994b 	.word	0x4228994b

					// Start new forward profile for intial movement
					param_list[total_params].distance += CELL_TO_CENTER_MM;
				#else
            		// Smooth turns
            		param_list[total_params].end_speed = RACE_SPEED_FWD_SMOOTH_MAX;
 8003330:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003334:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003338:	881a      	ldrh	r2, [r3, #0]
 800333a:	4893      	ldr	r0, [pc, #588]	@ (8003588 <Race_Mode+0x678>)
 800333c:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 8003340:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	3308      	adds	r3, #8
 8003350:	6018      	str	r0, [r3, #0]

            		total_params++;
 8003352:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003356:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	3301      	adds	r3, #1
 800335e:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8003362:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8003366:	8013      	strh	r3, [r2, #0]

            		// Add rotational parameters then forward parameters for smooth turn
            		param_list[total_params] = Parameter_Packer(LEFT_TURN_DEG, RACE_SPEED_ROT_SMOOTH_MAX, 0, RACE_ACCELERATION, false);
 8003368:	4d88      	ldr	r5, [pc, #544]	@ (800358c <Race_Mode+0x67c>)
 800336a:	4e87      	ldr	r6, [pc, #540]	@ (8003588 <Race_Mode+0x678>)
 800336c:	4c88      	ldr	r4, [pc, #544]	@ (8003590 <Race_Mode+0x680>)
 800336e:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003372:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003376:	881a      	ldrh	r2, [r3, #0]
 8003378:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 800337c:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	eb01 0803 	add.w	r8, r1, r3
 800338c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003390:	3828      	subs	r0, #40	@ 0x28
 8003392:	2300      	movs	r3, #0
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	9400      	str	r4, [sp, #0]
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	4632      	mov	r2, r6
 800339e:	4629      	mov	r1, r5
 80033a0:	f000 fcb0 	bl	8003d04 <Parameter_Packer>
 80033a4:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80033a8:	f6a3 1328 	subw	r3, r3, #2344	@ 0x928
 80033ac:	4644      	mov	r4, r8
 80033ae:	461d      	mov	r5, r3
 80033b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033b4:	682b      	ldr	r3, [r5, #0]
 80033b6:	6023      	str	r3, [r4, #0]
            		total_params++;
 80033b8:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80033bc:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	3301      	adds	r3, #1
 80033c4:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 80033c8:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80033cc:	8013      	strh	r3, [r2, #0]
            		param_list[total_params] = Parameter_Packer(SMOOTH_TURN_FWD_MM, RACE_SPEED_FWD_SMOOTH_MAX, RACE_SPEED_FWD_SMOOTH_MAX, RACE_ACCELERATION, false);
 80033ce:	4d71      	ldr	r5, [pc, #452]	@ (8003594 <Race_Mode+0x684>)
 80033d0:	4e6d      	ldr	r6, [pc, #436]	@ (8003588 <Race_Mode+0x678>)
 80033d2:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 8003588 <Race_Mode+0x678>
 80033d6:	4c6e      	ldr	r4, [pc, #440]	@ (8003590 <Race_Mode+0x680>)
 80033d8:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80033dc:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80033e0:	881a      	ldrh	r2, [r3, #0]
 80033e2:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80033e6:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	eb01 0803 	add.w	r8, r1, r3
 80033f6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80033fa:	3828      	subs	r0, #40	@ 0x28
 80033fc:	2300      	movs	r3, #0
 80033fe:	9301      	str	r3, [sp, #4]
 8003400:	9400      	str	r4, [sp, #0]
 8003402:	4663      	mov	r3, ip
 8003404:	4632      	mov	r2, r6
 8003406:	4629      	mov	r1, r5
 8003408:	f000 fc7c 	bl	8003d04 <Parameter_Packer>
 800340c:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 8003410:	f6a3 1328 	subw	r3, r3, #2344	@ 0x928
 8003414:	4644      	mov	r4, r8
 8003416:	461d      	mov	r5, r3
 8003418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800341a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800341c:	682b      	ldr	r3, [r5, #0]
 800341e:	6023      	str	r3, [r4, #0]
            		total_params++;
 8003420:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003424:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	3301      	adds	r3, #1
 800342c:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8003430:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8003434:	8013      	strh	r3, [r2, #0]
				#endif
                break;
 8003436:	bf00      	nop
    for (uint16_t curr_motion = 0; curr_motion < prelim_motions_length; curr_motion++) {
 8003438:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800343c:	f103 0320 	add.w	r3, r3, #32
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	3301      	adds	r3, #1
 8003444:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8003448:	f102 0220 	add.w	r2, r2, #32
 800344c:	8013      	strh	r3, [r2, #0]
 800344e:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003452:	f103 0320 	add.w	r3, r3, #32
 8003456:	881a      	ldrh	r2, [r3, #0]
 8003458:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800345c:	f103 0326 	add.w	r3, r3, #38	@ 0x26
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	f4ff ae3f 	bcc.w	80030e6 <Race_Mode+0x1d6>
        }
    }

    // Execute motions according to parameter list
    uint16_t param = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 800346e:	f102 021e 	add.w	r2, r2, #30
 8003472:	8013      	strh	r3, [r2, #0]
    while (param < (total_params + 1)) {
 8003474:	e06a      	b.n	800354c <Race_Mode+0x63c>
    	if (param_list[param].forward) { // Forward
 8003476:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800347a:	f103 031e 	add.w	r3, r3, #30
 800347e:	881a      	ldrh	r2, [r3, #0]
 8003480:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 8003484:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	3310      	adds	r3, #16
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d015      	beq.n	80034c6 <Race_Mode+0x5b6>
    		Profile_Container(param_list[param], &forward_profile);
 800349a:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800349e:	f103 031e 	add.w	r3, r3, #30
 80034a2:	881a      	ldrh	r2, [r3, #0]
 80034a4:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80034a8:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	4a38      	ldr	r2, [pc, #224]	@ (8003598 <Race_Mode+0x688>)
 80034b8:	9201      	str	r2, [sp, #4]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	9200      	str	r2, [sp, #0]
 80034be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034c0:	f000 fb46 	bl	8003b50 <Profile_Container>
 80034c4:	e037      	b.n	8003536 <Race_Mode+0x626>
    	}
    	else { // Rotational
			#ifndef SMOOTH_TURNS
    			Profile_Container(param_list[param], &rotational_profile);
			#else // Use 2 parameters from list on smooth turns
    			Smooth_Turn_Container(param_list[param], param_list[param+1], &forward_profile, &rotational_profile);
 80034c6:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80034ca:	f103 031e 	add.w	r3, r3, #30
 80034ce:	8819      	ldrh	r1, [r3, #0]
 80034d0:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80034d4:	f103 031e 	add.w	r3, r3, #30
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80034e0:	f6a3 100c 	subw	r0, r3, #2316	@ 0x90c
 80034e4:	460b      	mov	r3, r1
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	18c6      	adds	r6, r0, r3
 80034ee:	4b2b      	ldr	r3, [pc, #172]	@ (800359c <Race_Mode+0x68c>)
 80034f0:	9307      	str	r3, [sp, #28]
 80034f2:	4b29      	ldr	r3, [pc, #164]	@ (8003598 <Race_Mode+0x688>)
 80034f4:	9306      	str	r3, [sp, #24]
 80034f6:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80034fa:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	ac01      	add	r4, sp, #4
 800350a:	461d      	mov	r5, r3
 800350c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800350e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003510:	682b      	ldr	r3, [r5, #0]
 8003512:	6023      	str	r3, [r4, #0]
 8003514:	6933      	ldr	r3, [r6, #16]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800351c:	f000 fb4e 	bl	8003bbc <Smooth_Turn_Container>
    			param++;
 8003520:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003524:	f103 031e 	add.w	r3, r3, #30
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	3301      	adds	r3, #1
 800352c:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8003530:	f102 021e 	add.w	r2, r2, #30
 8003534:	8013      	strh	r3, [r2, #0]
			#endif
    	}
    	param++;
 8003536:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800353a:	f103 031e 	add.w	r3, r3, #30
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	3301      	adds	r3, #1
 8003542:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8003546:	f102 021e 	add.w	r2, r2, #30
 800354a:	8013      	strh	r3, [r2, #0]
    while (param < (total_params + 1)) {
 800354c:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003550:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003554:	881a      	ldrh	r2, [r3, #0]
 8003556:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800355a:	f103 031e 	add.w	r3, r3, #30
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d288      	bcs.n	8003476 <Race_Mode+0x566>
    }

    armed = false;
 8003564:	4b0e      	ldr	r3, [pc, #56]	@ (80035a0 <Race_Mode+0x690>)
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
    motor_controller_enabled = false;
 800356a:	4b0e      	ldr	r3, [pc, #56]	@ (80035a4 <Race_Mode+0x694>)
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]

    Complete_Stop();
 8003570:	f000 f926 	bl	80037c0 <Complete_Stop>
}
 8003574:	bf00      	nop
 8003576:	f507 5724 	add.w	r7, r7, #10496	@ 0x2900
 800357a:	3728      	adds	r7, #40	@ 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003582:	b004      	add	sp, #16
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	43af0000 	.word	0x43af0000
 800358c:	c2bc0000 	.word	0xc2bc0000
 8003590:	453b8000 	.word	0x453b8000
 8003594:	4228994b 	.word	0x4228994b
 8003598:	20000b84 	.word	0x20000b84
 800359c:	20000bac 	.word	0x20000bac
 80035a0:	20000248 	.word	0x20000248
 80035a4:	20000c6c 	.word	0x20000c6c

080035a8 <Set_Motor_Volts>:
float motor_left_previous_speed = 0;
float motor_right_previous_speed = 0;

bool motor_controller_enabled = false;

void Set_Motor_Volts(motor_t motor, float voltage_to_translate) {
 80035a8:	b590      	push	{r4, r7, lr}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	6039      	str	r1, [r7, #0]
 80035b2:	71fb      	strb	r3, [r7, #7]
	voltage_to_translate = voltage_to_translate > MAX_MOTOR_VOLTAGE ? MAX_MOTOR_VOLTAGE : voltage_to_translate;
 80035b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003674 <Set_Motor_Volts+0xcc>)
 80035b6:	4619      	mov	r1, r3
 80035b8:	6838      	ldr	r0, [r7, #0]
 80035ba:	f7fd fcd7 	bl	8000f6c <__aeabi_fcmpgt>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <Set_Motor_Volts+0x20>
 80035c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003674 <Set_Motor_Volts+0xcc>)
 80035c6:	e000      	b.n	80035ca <Set_Motor_Volts+0x22>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	603b      	str	r3, [r7, #0]
	voltage_to_translate = voltage_to_translate < -MAX_MOTOR_VOLTAGE ? -MAX_MOTOR_VOLTAGE : voltage_to_translate;
 80035cc:	4b29      	ldr	r3, [pc, #164]	@ (8003674 <Set_Motor_Volts+0xcc>)
 80035ce:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80035d2:	4619      	mov	r1, r3
 80035d4:	6838      	ldr	r0, [r7, #0]
 80035d6:	f7fd fcab 	bl	8000f30 <__aeabi_fcmplt>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <Set_Motor_Volts+0x40>
 80035e0:	4b24      	ldr	r3, [pc, #144]	@ (8003674 <Set_Motor_Volts+0xcc>)
 80035e2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80035e6:	e000      	b.n	80035ea <Set_Motor_Volts+0x42>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	603b      	str	r3, [r7, #0]

	int counter_period = MAX_PWM * (voltage_to_translate + Calculate_Battery_Bias(voltage_to_translate)) / mouse_state.battery_voltage;
 80035ec:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fd faab 	bl	8000b4c <__aeabi_i2f>
 80035f6:	4604      	mov	r4, r0
 80035f8:	6838      	ldr	r0, [r7, #0]
 80035fa:	f000 fce9 	bl	8003fd0 <Calculate_Battery_Bias>
 80035fe:	4603      	mov	r3, r0
 8003600:	6839      	ldr	r1, [r7, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fd f9ee 	bl	80009e4 <__addsf3>
 8003608:	4603      	mov	r3, r0
 800360a:	4619      	mov	r1, r3
 800360c:	4620      	mov	r0, r4
 800360e:	f7fd faf1 	bl	8000bf4 <__aeabi_fmul>
 8003612:	4603      	mov	r3, r0
 8003614:	4618      	mov	r0, r3
 8003616:	f7fc fefd 	bl	8000414 <__aeabi_f2d>
 800361a:	4b17      	ldr	r3, [pc, #92]	@ (8003678 <Set_Motor_Volts+0xd0>)
 800361c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003620:	f7fd f87a 	bl	8000718 <__aeabi_ddiv>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4610      	mov	r0, r2
 800362a:	4619      	mov	r1, r3
 800362c:	f7fd f95c 	bl	80008e8 <__aeabi_d2iz>
 8003630:	4603      	mov	r3, r0
 8003632:	60fb      	str	r3, [r7, #12]
	if (counter_period < 0) {
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	da08      	bge.n	800364c <Set_Motor_Volts+0xa4>
		Set_Direction(motor, REVERSE);
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	2101      	movs	r1, #1
 800363e:	4618      	mov	r0, r3
 8003640:	f000 f840 	bl	80036c4 <Set_Direction>
		counter_period = -counter_period;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	425b      	negs	r3, r3
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	e007      	b.n	800365c <Set_Motor_Volts+0xb4>
	}
	else if (counter_period > 0) {
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	dd04      	ble.n	800365c <Set_Motor_Volts+0xb4>
		Set_Direction(motor, FORWARD);
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	2100      	movs	r1, #0
 8003656:	4618      	mov	r0, r3
 8003658:	f000 f834 	bl	80036c4 <Set_Direction>
	}

	Set_PWM(motor, counter_period);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	b29a      	uxth	r2, r3
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f000 f809 	bl	800367c <Set_PWM>
}
 800366a:	bf00      	nop
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	bd90      	pop	{r4, r7, pc}
 8003672:	bf00      	nop
 8003674:	40c00000 	.word	0x40c00000
 8003678:	20000220 	.word	0x20000220

0800367c <Set_PWM>:

void Set_PWM(motor_t motor, uint16_t counter_period) {
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	460a      	mov	r2, r1
 8003686:	71fb      	strb	r3, [r7, #7]
 8003688:	4613      	mov	r3, r2
 800368a:	80bb      	strh	r3, [r7, #4]
	// Software limit for motor voltage ~6V
	counter_period = counter_period > PWM_LIMIT ? PWM_LIMIT: counter_period;
 800368c:	f240 52c1 	movw	r2, #1473	@ 0x5c1
 8003690:	88bb      	ldrh	r3, [r7, #4]
 8003692:	4293      	cmp	r3, r2
 8003694:	bf28      	it	cs
 8003696:	4613      	movcs	r3, r2
 8003698:	80bb      	strh	r3, [r7, #4]
	switch(motor) {
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <Set_PWM+0x2a>
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d005      	beq.n	80036b0 <Set_PWM+0x34>
			break;
		case MOTOR_RIGHT:
			TIM2->CCR3 = counter_period;
			break;
	}
}
 80036a4:	e009      	b.n	80036ba <Set_PWM+0x3e>
			TIM2->CCR4 = counter_period;
 80036a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80036aa:	88bb      	ldrh	r3, [r7, #4]
 80036ac:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 80036ae:	e004      	b.n	80036ba <Set_PWM+0x3e>
			TIM2->CCR3 = counter_period;
 80036b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80036b4:	88bb      	ldrh	r3, [r7, #4]
 80036b6:	63d3      	str	r3, [r2, #60]	@ 0x3c
			break;
 80036b8:	bf00      	nop
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <Set_Direction>:

void Set_Direction(motor_t motor, motor_direction_t direction) {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	460a      	mov	r2, r1
 80036ce:	71fb      	strb	r3, [r7, #7]
 80036d0:	4613      	mov	r3, r2
 80036d2:	71bb      	strb	r3, [r7, #6]
	switch(motor) {
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <Set_Direction+0x1c>
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d032      	beq.n	8003744 <Set_Direction+0x80>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
					break;
			}
			break;
	}
}
 80036de:	e066      	b.n	80037ae <Set_Direction+0xea>
			switch(direction) {
 80036e0:	79bb      	ldrb	r3, [r7, #6]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d020      	beq.n	8003728 <Set_Direction+0x64>
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	dc5e      	bgt.n	80037a8 <Set_Direction+0xe4>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <Set_Direction+0x30>
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d00d      	beq.n	800370e <Set_Direction+0x4a>
			break;
 80036f2:	e059      	b.n	80037a8 <Set_Direction+0xe4>
					HAL_GPIO_WritePin(ML_FWD_GPIO_Port,  ML_FWD_Pin, 1);
 80036f4:	2201      	movs	r2, #1
 80036f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80036fa:	482f      	ldr	r0, [pc, #188]	@ (80037b8 <Set_Direction+0xf4>)
 80036fc:	f002 fdce 	bl	800629c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 8003700:	2200      	movs	r2, #0
 8003702:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003706:	482d      	ldr	r0, [pc, #180]	@ (80037bc <Set_Direction+0xf8>)
 8003708:	f002 fdc8 	bl	800629c <HAL_GPIO_WritePin>
					break;
 800370c:	e019      	b.n	8003742 <Set_Direction+0x7e>
					HAL_GPIO_WritePin(ML_FWD_GPIO_Port,  ML_FWD_Pin, 0);
 800370e:	2200      	movs	r2, #0
 8003710:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003714:	4828      	ldr	r0, [pc, #160]	@ (80037b8 <Set_Direction+0xf4>)
 8003716:	f002 fdc1 	bl	800629c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 1);
 800371a:	2201      	movs	r2, #1
 800371c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003720:	4826      	ldr	r0, [pc, #152]	@ (80037bc <Set_Direction+0xf8>)
 8003722:	f002 fdbb 	bl	800629c <HAL_GPIO_WritePin>
					break;
 8003726:	e00c      	b.n	8003742 <Set_Direction+0x7e>
					HAL_GPIO_WritePin(ML_FWD_GPIO_Port,  ML_FWD_Pin, 0);
 8003728:	2200      	movs	r2, #0
 800372a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800372e:	4822      	ldr	r0, [pc, #136]	@ (80037b8 <Set_Direction+0xf4>)
 8003730:	f002 fdb4 	bl	800629c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 8003734:	2200      	movs	r2, #0
 8003736:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800373a:	4820      	ldr	r0, [pc, #128]	@ (80037bc <Set_Direction+0xf8>)
 800373c:	f002 fdae 	bl	800629c <HAL_GPIO_WritePin>
					break;
 8003740:	bf00      	nop
			break;
 8003742:	e031      	b.n	80037a8 <Set_Direction+0xe4>
			switch(direction) {
 8003744:	79bb      	ldrb	r3, [r7, #6]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d020      	beq.n	800378c <Set_Direction+0xc8>
 800374a:	2b02      	cmp	r3, #2
 800374c:	dc2e      	bgt.n	80037ac <Set_Direction+0xe8>
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <Set_Direction+0x94>
 8003752:	2b01      	cmp	r3, #1
 8003754:	d00d      	beq.n	8003772 <Set_Direction+0xae>
			break;
 8003756:	e029      	b.n	80037ac <Set_Direction+0xe8>
					HAL_GPIO_WritePin(MR_FWD_GPIO_Port,  MR_FWD_Pin, 1);
 8003758:	2201      	movs	r2, #1
 800375a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800375e:	4816      	ldr	r0, [pc, #88]	@ (80037b8 <Set_Direction+0xf4>)
 8003760:	f002 fd9c 	bl	800629c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
 8003764:	2200      	movs	r2, #0
 8003766:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800376a:	4813      	ldr	r0, [pc, #76]	@ (80037b8 <Set_Direction+0xf4>)
 800376c:	f002 fd96 	bl	800629c <HAL_GPIO_WritePin>
					break;
 8003770:	e019      	b.n	80037a6 <Set_Direction+0xe2>
					HAL_GPIO_WritePin(MR_FWD_GPIO_Port,  MR_FWD_Pin, 0);
 8003772:	2200      	movs	r2, #0
 8003774:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003778:	480f      	ldr	r0, [pc, #60]	@ (80037b8 <Set_Direction+0xf4>)
 800377a:	f002 fd8f 	bl	800629c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 1);
 800377e:	2201      	movs	r2, #1
 8003780:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003784:	480c      	ldr	r0, [pc, #48]	@ (80037b8 <Set_Direction+0xf4>)
 8003786:	f002 fd89 	bl	800629c <HAL_GPIO_WritePin>
					break;
 800378a:	e00c      	b.n	80037a6 <Set_Direction+0xe2>
					HAL_GPIO_WritePin(MR_FWD_GPIO_Port,  MR_FWD_Pin, 0);
 800378c:	2200      	movs	r2, #0
 800378e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003792:	4809      	ldr	r0, [pc, #36]	@ (80037b8 <Set_Direction+0xf4>)
 8003794:	f002 fd82 	bl	800629c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
 8003798:	2200      	movs	r2, #0
 800379a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800379e:	4806      	ldr	r0, [pc, #24]	@ (80037b8 <Set_Direction+0xf4>)
 80037a0:	f002 fd7c 	bl	800629c <HAL_GPIO_WritePin>
					break;
 80037a4:	bf00      	nop
			break;
 80037a6:	e001      	b.n	80037ac <Set_Direction+0xe8>
			break;
 80037a8:	bf00      	nop
 80037aa:	e000      	b.n	80037ae <Set_Direction+0xea>
			break;
 80037ac:	bf00      	nop
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40010c00 	.word	0x40010c00
 80037bc:	40010800 	.word	0x40010800

080037c0 <Complete_Stop>:

void Complete_Stop() {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
	Set_Direction(MOTOR_LEFT, BRAKE);
 80037c4:	2102      	movs	r1, #2
 80037c6:	2000      	movs	r0, #0
 80037c8:	f7ff ff7c 	bl	80036c4 <Set_Direction>
	Set_Direction(MOTOR_RIGHT, BRAKE);
 80037cc:	2102      	movs	r1, #2
 80037ce:	2001      	movs	r0, #1
 80037d0:	f7ff ff78 	bl	80036c4 <Set_Direction>

	Set_PWM(MOTOR_LEFT, 0);
 80037d4:	2100      	movs	r1, #0
 80037d6:	2000      	movs	r0, #0
 80037d8:	f7ff ff50 	bl	800367c <Set_PWM>
	Set_PWM(MOTOR_RIGHT, 0);
 80037dc:	2100      	movs	r1, #0
 80037de:	2001      	movs	r0, #1
 80037e0:	f7ff ff4c 	bl	800367c <Set_PWM>
}
 80037e4:	bf00      	nop
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <Position_Controller>:

float Position_Controller(float velocity) {
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	float increment = velocity * SYSTICK_INTERVAL;
 80037f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003870 <Position_Controller+0x88>)
 80037f2:	4619      	mov	r1, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7fd f9fd 	bl	8000bf4 <__aeabi_fmul>
 80037fa:	4603      	mov	r3, r0
 80037fc:	60fb      	str	r3, [r7, #12]
	forward_error += increment - delta_position_forward;
 80037fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003874 <Position_Controller+0x8c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4619      	mov	r1, r3
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f7fd f8eb 	bl	80009e0 <__aeabi_fsub>
 800380a:	4603      	mov	r3, r0
 800380c:	461a      	mov	r2, r3
 800380e:	4b1a      	ldr	r3, [pc, #104]	@ (8003878 <Position_Controller+0x90>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4619      	mov	r1, r3
 8003814:	4610      	mov	r0, r2
 8003816:	f7fd f8e5 	bl	80009e4 <__addsf3>
 800381a:	4603      	mov	r3, r0
 800381c:	461a      	mov	r2, r3
 800381e:	4b16      	ldr	r3, [pc, #88]	@ (8003878 <Position_Controller+0x90>)
 8003820:	601a      	str	r2, [r3, #0]
	float forward_error_difference = forward_error - previous_forward_error;
 8003822:	4b15      	ldr	r3, [pc, #84]	@ (8003878 <Position_Controller+0x90>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a15      	ldr	r2, [pc, #84]	@ (800387c <Position_Controller+0x94>)
 8003828:	6812      	ldr	r2, [r2, #0]
 800382a:	4611      	mov	r1, r2
 800382c:	4618      	mov	r0, r3
 800382e:	f7fd f8d7 	bl	80009e0 <__aeabi_fsub>
 8003832:	4603      	mov	r3, r0
 8003834:	60bb      	str	r3, [r7, #8]
	previous_forward_error = forward_error;
 8003836:	4b10      	ldr	r3, [pc, #64]	@ (8003878 <Position_Controller+0x90>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a10      	ldr	r2, [pc, #64]	@ (800387c <Position_Controller+0x94>)
 800383c:	6013      	str	r3, [r2, #0]

	return FWD_KP * forward_error + FWD_KD * forward_error_difference;
 800383e:	4a10      	ldr	r2, [pc, #64]	@ (8003880 <Position_Controller+0x98>)
 8003840:	4b0d      	ldr	r3, [pc, #52]	@ (8003878 <Position_Controller+0x90>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f7fd f9d4 	bl	8000bf4 <__aeabi_fmul>
 800384c:	4603      	mov	r3, r0
 800384e:	461c      	mov	r4, r3
 8003850:	4b0c      	ldr	r3, [pc, #48]	@ (8003884 <Position_Controller+0x9c>)
 8003852:	68b9      	ldr	r1, [r7, #8]
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd f9cd 	bl	8000bf4 <__aeabi_fmul>
 800385a:	4603      	mov	r3, r0
 800385c:	4619      	mov	r1, r3
 800385e:	4620      	mov	r0, r4
 8003860:	f7fd f8c0 	bl	80009e4 <__addsf3>
 8003864:	4603      	mov	r3, r0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	bd90      	pop	{r4, r7, pc}
 800386e:	bf00      	nop
 8003870:	3b03126f 	.word	0x3b03126f
 8003874:	20000bfc 	.word	0x20000bfc
 8003878:	20000c5c 	.word	0x20000c5c
 800387c:	20000c60 	.word	0x20000c60
 8003880:	3f9f6cf2 	.word	0x3f9f6cf2
 8003884:	4159e619 	.word	0x4159e619

08003888 <Rotational_Controller>:

float Rotational_Controller(float steering_adjustment, float omega) {
 8003888:	b590      	push	{r4, r7, lr}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
	float increment = omega * SYSTICK_INTERVAL;
 8003892:	4b24      	ldr	r3, [pc, #144]	@ (8003924 <Rotational_Controller+0x9c>)
 8003894:	4619      	mov	r1, r3
 8003896:	6838      	ldr	r0, [r7, #0]
 8003898:	f7fd f9ac 	bl	8000bf4 <__aeabi_fmul>
 800389c:	4603      	mov	r3, r0
 800389e:	60fb      	str	r3, [r7, #12]
	rotational_error += increment - delta_position_rotational;
 80038a0:	4b21      	ldr	r3, [pc, #132]	@ (8003928 <Rotational_Controller+0xa0>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4619      	mov	r1, r3
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f7fd f89a 	bl	80009e0 <__aeabi_fsub>
 80038ac:	4603      	mov	r3, r0
 80038ae:	461a      	mov	r2, r3
 80038b0:	4b1e      	ldr	r3, [pc, #120]	@ (800392c <Rotational_Controller+0xa4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4619      	mov	r1, r3
 80038b6:	4610      	mov	r0, r2
 80038b8:	f7fd f894 	bl	80009e4 <__addsf3>
 80038bc:	4603      	mov	r3, r0
 80038be:	461a      	mov	r2, r3
 80038c0:	4b1a      	ldr	r3, [pc, #104]	@ (800392c <Rotational_Controller+0xa4>)
 80038c2:	601a      	str	r2, [r3, #0]
	rotational_error += steering_adjustment;
 80038c4:	4b19      	ldr	r3, [pc, #100]	@ (800392c <Rotational_Controller+0xa4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fd f88a 	bl	80009e4 <__addsf3>
 80038d0:	4603      	mov	r3, r0
 80038d2:	461a      	mov	r2, r3
 80038d4:	4b15      	ldr	r3, [pc, #84]	@ (800392c <Rotational_Controller+0xa4>)
 80038d6:	601a      	str	r2, [r3, #0]
	float rotational_error_difference = rotational_error - previous_rotational_error;
 80038d8:	4b14      	ldr	r3, [pc, #80]	@ (800392c <Rotational_Controller+0xa4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a14      	ldr	r2, [pc, #80]	@ (8003930 <Rotational_Controller+0xa8>)
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	4611      	mov	r1, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fd f87c 	bl	80009e0 <__aeabi_fsub>
 80038e8:	4603      	mov	r3, r0
 80038ea:	60bb      	str	r3, [r7, #8]
	previous_rotational_error = rotational_error;
 80038ec:	4b0f      	ldr	r3, [pc, #60]	@ (800392c <Rotational_Controller+0xa4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a0f      	ldr	r2, [pc, #60]	@ (8003930 <Rotational_Controller+0xa8>)
 80038f2:	6013      	str	r3, [r2, #0]

	return ROT_KP * rotational_error + ROT_KD * rotational_error_difference;
 80038f4:	4a0f      	ldr	r2, [pc, #60]	@ (8003934 <Rotational_Controller+0xac>)
 80038f6:	4b0d      	ldr	r3, [pc, #52]	@ (800392c <Rotational_Controller+0xa4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4619      	mov	r1, r3
 80038fc:	4610      	mov	r0, r2
 80038fe:	f7fd f979 	bl	8000bf4 <__aeabi_fmul>
 8003902:	4603      	mov	r3, r0
 8003904:	461c      	mov	r4, r3
 8003906:	4b0c      	ldr	r3, [pc, #48]	@ (8003938 <Rotational_Controller+0xb0>)
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	4618      	mov	r0, r3
 800390c:	f7fd f972 	bl	8000bf4 <__aeabi_fmul>
 8003910:	4603      	mov	r3, r0
 8003912:	4619      	mov	r1, r3
 8003914:	4620      	mov	r0, r4
 8003916:	f7fd f865 	bl	80009e4 <__addsf3>
 800391a:	4603      	mov	r3, r0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	bd90      	pop	{r4, r7, pc}
 8003924:	3b03126f 	.word	0x3b03126f
 8003928:	20000c00 	.word	0x20000c00
 800392c:	20000c64 	.word	0x20000c64
 8003930:	20000c68 	.word	0x20000c68
 8003934:	3f754525 	.word	0x3f754525
 8003938:	41279d4f 	.word	0x41279d4f

0800393c <Update_Motors>:
	feedforward += acceleration_feedforward;

	return feedforward;
}

void Update_Motors(float velocity, float omega, float steering_adjustment) {
 800393c:	b580      	push	{r7, lr}
 800393e:	b08c      	sub	sp, #48	@ 0x30
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
	steering_adjustment = rotational_profile.state == IDLE || rotational_profile.state == COMPLETE ? steering_adjustment : 0;
 8003948:	4b29      	ldr	r3, [pc, #164]	@ (80039f0 <Update_Motors+0xb4>)
 800394a:	7d1b      	ldrb	r3, [r3, #20]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <Update_Motors+0x1c>
 8003950:	4b27      	ldr	r3, [pc, #156]	@ (80039f0 <Update_Motors+0xb4>)
 8003952:	7d1b      	ldrb	r3, [r3, #20]
 8003954:	2b03      	cmp	r3, #3
 8003956:	d101      	bne.n	800395c <Update_Motors+0x20>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	e001      	b.n	8003960 <Update_Motors+0x24>
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	607b      	str	r3, [r7, #4]

	float position_output = Position_Controller(velocity);
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f7ff ff40 	bl	80037e8 <Position_Controller>
 8003968:	62f8      	str	r0, [r7, #44]	@ 0x2c
	float rotational_output = Rotational_Controller(steering_adjustment, omega);
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ff8b 	bl	8003888 <Rotational_Controller>
 8003972:	62b8      	str	r0, [r7, #40]	@ 0x28

	float motor_left_voltage = 0;
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	627b      	str	r3, [r7, #36]	@ 0x24
	float motor_right_voltage = 0;
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	623b      	str	r3, [r7, #32]
	motor_left_voltage = position_output - rotational_output;
 8003980:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003982:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003984:	f7fd f82c 	bl	80009e0 <__aeabi_fsub>
 8003988:	4603      	mov	r3, r0
 800398a:	627b      	str	r3, [r7, #36]	@ 0x24
	motor_right_voltage = position_output + rotational_output;
 800398c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800398e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003990:	f7fd f828 	bl	80009e4 <__addsf3>
 8003994:	4603      	mov	r3, r0
 8003996:	623b      	str	r3, [r7, #32]

	float tangent_speed = omega * MOUSE_RADIUS * RADIANS_PER_DEGREE;
 8003998:	4b16      	ldr	r3, [pc, #88]	@ (80039f4 <Update_Motors+0xb8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd f928 	bl	8000bf4 <__aeabi_fmul>
 80039a4:	4603      	mov	r3, r0
 80039a6:	461a      	mov	r2, r3
 80039a8:	4b13      	ldr	r3, [pc, #76]	@ (80039f8 <Update_Motors+0xbc>)
 80039aa:	4619      	mov	r1, r3
 80039ac:	4610      	mov	r0, r2
 80039ae:	f7fd f921 	bl	8000bf4 <__aeabi_fmul>
 80039b2:	4603      	mov	r3, r0
 80039b4:	61fb      	str	r3, [r7, #28]
	float motor_left_speed = velocity - tangent_speed;
 80039b6:	69f9      	ldr	r1, [r7, #28]
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f7fd f811 	bl	80009e0 <__aeabi_fsub>
 80039be:	4603      	mov	r3, r0
 80039c0:	61bb      	str	r3, [r7, #24]
	float motor_right_speed = velocity + tangent_speed;
 80039c2:	69f9      	ldr	r1, [r7, #28]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f7fd f80d 	bl	80009e4 <__addsf3>
 80039ca:	4603      	mov	r3, r0
 80039cc:	617b      	str	r3, [r7, #20]
	#ifdef FEEDFORWARD_ENABLE
		motor_left_voltage += Feed_Forward(MOTOR_LEFT, motor_left_speed);
		motor_right_voltage += Feed_Forward(MOTOR_RIGHT, motor_right_speed);
	#endif
	if (motor_controller_enabled) {
 80039ce:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <Update_Motors+0xc0>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d007      	beq.n	80039e6 <Update_Motors+0xaa>
		Set_Motor_Volts(MOTOR_LEFT, motor_left_voltage);
 80039d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039d8:	2000      	movs	r0, #0
 80039da:	f7ff fde5 	bl	80035a8 <Set_Motor_Volts>
		Set_Motor_Volts(MOTOR_RIGHT, motor_right_voltage);
 80039de:	6a39      	ldr	r1, [r7, #32]
 80039e0:	2001      	movs	r0, #1
 80039e2:	f7ff fde1 	bl	80035a8 <Set_Motor_Volts>
	}
}
 80039e6:	bf00      	nop
 80039e8:	3730      	adds	r7, #48	@ 0x30
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000bac 	.word	0x20000bac
 80039f4:	08008d40 	.word	0x08008d40
 80039f8:	3c8efa35 	.word	0x3c8efa35
 80039fc:	20000c6c 	.word	0x20000c6c

08003a00 <Clear_Profile>:

extern uint16_t wall_front_thresh;
extern uint16_t wall_left_thresh;
extern uint16_t wall_right_thresh;

void Clear_Profile(profile_t* profile) {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
	bzero(profile, sizeof(profile_t));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	2328      	movs	r3, #40	@ 0x28
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2100      	movs	r1, #0
 8003a12:	f005 f8db 	bl	8008bcc <memset>
	profile->state = IDLE; // Should be handled above, just make sure it's IDLE
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	751a      	strb	r2, [r3, #20]
	profile->direction = 1;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003a22:	bf00      	nop
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <Start_Profile>:

void Start_Profile(param_t parameters, profile_t* profile) {
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	f107 0c08 	add.w	ip, r7, #8
 8003a36:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (parameters.distance < 0) {
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f04f 0100 	mov.w	r1, #0
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fd fa75 	bl	8000f30 <__aeabi_fcmplt>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d007      	beq.n	8003a5c <Start_Profile+0x30>
		profile->direction = -1;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a52:	625a      	str	r2, [r3, #36]	@ 0x24
		parameters.distance *= -1;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003a5a:	60bb      	str	r3, [r7, #8]
	}
	if (parameters.distance < 1.0) {
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fd fa64 	bl	8000f30 <__aeabi_fcmplt>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <Start_Profile+0x4a>
		profile->state = COMPLETE;
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	2203      	movs	r2, #3
 8003a72:	751a      	strb	r2, [r3, #20]
		return;
 8003a74:	e063      	b.n	8003b3e <Start_Profile+0x112>
	}
	if (parameters.end_speed > parameters.max_speed) {
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fd fa75 	bl	8000f6c <__aeabi_fcmpgt>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <Start_Profile+0x60>
		parameters.end_speed = parameters.max_speed;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	613b      	str	r3, [r7, #16]
	}

	profile->position = 0;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	61da      	str	r2, [r3, #28]
	profile->parameters.distance += profile == &forward_profile ? on_completion_error_forward : 0;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	492b      	ldr	r1, [pc, #172]	@ (8003b48 <Start_Profile+0x11c>)
 8003a9c:	428b      	cmp	r3, r1
 8003a9e:	d102      	bne.n	8003aa6 <Start_Profile+0x7a>
 8003aa0:	4b2a      	ldr	r3, [pc, #168]	@ (8003b4c <Start_Profile+0x120>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	e001      	b.n	8003aaa <Start_Profile+0x7e>
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	4611      	mov	r1, r2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fc ff99 	bl	80009e4 <__addsf3>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	601a      	str	r2, [r3, #0]
	parameters.max_speed = profile->direction * fabsf(parameters.max_speed);
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fd f844 	bl	8000b4c <__aeabi_i2f>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003acc:	4619      	mov	r1, r3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	f7fd f890 	bl	8000bf4 <__aeabi_fmul>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	60fb      	str	r3, [r7, #12]
	parameters.end_speed = profile->direction * fabsf(parameters.end_speed);
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fd f835 	bl	8000b4c <__aeabi_i2f>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f7fd f881 	bl	8000bf4 <__aeabi_fmul>
 8003af2:	4603      	mov	r3, r0
 8003af4:	613b      	str	r3, [r7, #16]
	parameters.acceleration = fabsf(parameters.acceleration);
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003afc:	617b      	str	r3, [r7, #20]
	memcpy(&(profile->parameters), &parameters, sizeof(param_t));
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	2214      	movs	r2, #20
 8003b02:	f107 0108 	add.w	r1, r7, #8
 8003b06:	4618      	mov	r0, r3
 8003b08:	f005 f8a4 	bl	8008c54 <memcpy>
	profile->inverse_acceleration = parameters.acceleration >= 1 ? (1.0f / parameters.acceleration) : 1.0;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fd fa20 	bl	8000f58 <__aeabi_fcmpge>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <Start_Profile+0x104>
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	4619      	mov	r1, r3
 8003b22:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003b26:	f7fd f919 	bl	8000d5c <__aeabi_fdiv>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	e001      	b.n	8003b34 <Start_Profile+0x108>
 8003b30:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	621a      	str	r2, [r3, #32]

	profile->state = ACCELERATING;
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	751a      	strb	r2, [r3, #20]
}
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b44:	b004      	add	sp, #16
 8003b46:	4770      	bx	lr
 8003b48:	20000b84 	.word	0x20000b84
 8003b4c:	20000c70 	.word	0x20000c70

08003b50 <Profile_Container>:

void Profile_Container(param_t parameters, profile_t* profile) {
 8003b50:	b084      	sub	sp, #16
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b084      	sub	sp, #16
 8003b56:	af02      	add	r7, sp, #8
 8003b58:	f107 0c10 	add.w	ip, r7, #16
 8003b5c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float original_position = mouse_position;
 8003b60:	4b14      	ldr	r3, [pc, #80]	@ (8003bb4 <Profile_Container+0x64>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	607b      	str	r3, [r7, #4]
	Start_Profile(parameters, profile);
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	9301      	str	r3, [sp, #4]
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	f107 0310 	add.w	r3, r7, #16
 8003b72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b74:	f7ff ff5a 	bl	8003a2c <Start_Profile>
	while (profile->state != COMPLETE);
 8003b78:	bf00      	nop
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7c:	7d1b      	ldrb	r3, [r3, #20]
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d1fb      	bne.n	8003b7a <Profile_Container+0x2a>
	float delta_position = mouse_position - original_position;
 8003b82:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb4 <Profile_Container+0x64>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fc ff29 	bl	80009e0 <__aeabi_fsub>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	603b      	str	r3, [r7, #0]
	on_completion_error_forward = parameters.distance - delta_position;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	6839      	ldr	r1, [r7, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fc ff22 	bl	80009e0 <__aeabi_fsub>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	4b05      	ldr	r3, [pc, #20]	@ (8003bb8 <Profile_Container+0x68>)
 8003ba2:	601a      	str	r2, [r3, #0]
}
 8003ba4:	bf00      	nop
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bae:	b004      	add	sp, #16
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20000c08 	.word	0x20000c08
 8003bb8:	20000c70 	.word	0x20000c70

08003bbc <Smooth_Turn_Container>:
    adjust_steering = true;
    Profile_Container(fwd_parameters, fwd_profile);
    STEERING_ADJUSTMENT_LIMIT = 0.5;
}

void Smooth_Turn_Container(param_t fwd_parameters, param_t rot_parameters, profile_t* fwd_profile, profile_t* rot_profile) {
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af02      	add	r7, sp, #8
 8003bc4:	f107 0c08 	add.w	ip, r7, #8
 8003bc8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	adjust_steering = false;
 8003bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8003c44 <Smooth_Turn_Container+0x88>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	701a      	strb	r2, [r3, #0]
	rot_parameters.acceleration *= 2;
 8003bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fc ff04 	bl	80009e4 <__addsf3>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	62bb      	str	r3, [r7, #40]	@ 0x28
	Clear_Profile(rot_profile);
 8003be0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003be2:	f7ff ff0d 	bl	8003a00 <Clear_Profile>
	Start_Profile(fwd_parameters, fwd_profile);
 8003be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be8:	9301      	str	r3, [sp, #4]
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	f107 0308 	add.w	r3, r7, #8
 8003bf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bf4:	f7ff ff1a 	bl	8003a2c <Start_Profile>
	Start_Profile(rot_parameters, rot_profile);
 8003bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bfa:	9301      	str	r3, [sp, #4]
 8003bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	f107 031c 	add.w	r3, r7, #28
 8003c04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c06:	f7ff ff11 	bl	8003a2c <Start_Profile>
	while (rot_profile->state != COMPLETE);
 8003c0a:	bf00      	nop
 8003c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0e:	7d1b      	ldrb	r3, [r3, #20]
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d1fb      	bne.n	8003c0c <Smooth_Turn_Container+0x50>
	Clear_Profile(rot_profile);
 8003c14:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003c16:	f7ff fef3 	bl	8003a00 <Clear_Profile>
	adjust_steering = true;
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c44 <Smooth_Turn_Container+0x88>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	701a      	strb	r2, [r3, #0]
	fwd_parameters.distance = 15;
 8003c20:	4b09      	ldr	r3, [pc, #36]	@ (8003c48 <Smooth_Turn_Container+0x8c>)
 8003c22:	60bb      	str	r3, [r7, #8]
	Profile_Container(fwd_parameters, fwd_profile);
 8003c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	f107 0308 	add.w	r3, r7, #8
 8003c30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c32:	f7ff ff8d 	bl	8003b50 <Profile_Container>
}
 8003c36:	bf00      	nop
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c3e:	b004      	add	sp, #16
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000c84 	.word	0x20000c84
 8003c48:	41700000 	.word	0x41700000

08003c4c <About_Face_Container>:

void About_Face_Container(param_t fwd_parameters, param_t rev_parameters, param_t rot_parameters, profile_t* fwd_profile, profile_t* rot_profile, bool wall_realignment) {
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b082      	sub	sp, #8
 8003c52:	af02      	add	r7, sp, #8
 8003c54:	f107 0c08 	add.w	ip, r7, #8
 8003c58:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (wall_realignment) { // Back up into existing wall
 8003c5c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d031      	beq.n	8003cc8 <About_Face_Container+0x7c>
		Profile_Container(fwd_parameters, fwd_profile);
 8003c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c66:	9301      	str	r3, [sp, #4]
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	f107 0308 	add.w	r3, r7, #8
 8003c70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c72:	f7ff ff6d 	bl	8003b50 <Profile_Container>
		adjust_steering = false;
 8003c76:	4b22      	ldr	r3, [pc, #136]	@ (8003d00 <About_Face_Container+0xb4>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	701a      	strb	r2, [r3, #0]
		Profile_Container(rot_parameters, rot_profile);
 8003c7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003c88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c8a:	f7ff ff61 	bl	8003b50 <Profile_Container>
		Clear_Profile(rot_profile);
 8003c8e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003c90:	f7ff feb6 	bl	8003a00 <Clear_Profile>
		Profile_Container(rev_parameters, fwd_profile);
 8003c94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c96:	9301      	str	r3, [sp, #4]
 8003c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	f107 031c 	add.w	r3, r7, #28
 8003ca0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ca2:	f7ff ff55 	bl	8003b50 <Profile_Container>
		fwd_profile->direction *= -1;
 8003ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	425a      	negs	r2, r3
 8003cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cae:	625a      	str	r2, [r3, #36]	@ 0x24
		fwd_profile->position = 0;
 8003cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	61da      	str	r2, [r3, #28]
		HAL_Delay(500);
 8003cb8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003cbc:	f001 f92e 	bl	8004f1c <HAL_Delay>
		adjust_steering = true;
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8003d00 <About_Face_Container+0xb4>)
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	701a      	strb	r2, [r3, #0]
		Profile_Container(rot_parameters, rot_profile);
		Clear_Profile(rot_profile);
		HAL_Delay(500);
		adjust_steering = true;
	}
}
 8003cc6:	e015      	b.n	8003cf4 <About_Face_Container+0xa8>
		adjust_steering = false;
 8003cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8003d00 <About_Face_Container+0xb4>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	701a      	strb	r2, [r3, #0]
		Profile_Container(rot_parameters, rot_profile);
 8003cce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003cda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cdc:	f7ff ff38 	bl	8003b50 <Profile_Container>
		Clear_Profile(rot_profile);
 8003ce0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003ce2:	f7ff fe8d 	bl	8003a00 <Clear_Profile>
		HAL_Delay(500);
 8003ce6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003cea:	f001 f917 	bl	8004f1c <HAL_Delay>
		adjust_steering = true;
 8003cee:	4b04      	ldr	r3, [pc, #16]	@ (8003d00 <About_Face_Container+0xb4>)
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	701a      	strb	r2, [r3, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cfc:	b004      	add	sp, #16
 8003cfe:	4770      	bx	lr
 8003d00:	20000c84 	.word	0x20000c84

08003d04 <Parameter_Packer>:

param_t Parameter_Packer(float distance, float max_speed, float end_speed, float acceleration, bool forward) {
 8003d04:	b4b0      	push	{r4, r5, r7}
 8003d06:	b08b      	sub	sp, #44	@ 0x2c
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	603b      	str	r3, [r7, #0]
	param_t return_parameters = {
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d20:	623b      	str	r3, [r7, #32]
 8003d22:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8003d26:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			.end_speed = end_speed,
			.acceleration = acceleration,
			.forward = forward
	};

	return return_parameters;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	461d      	mov	r5, r3
 8003d2e:	f107 0414 	add.w	r4, r7, #20
 8003d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	602b      	str	r3, [r5, #0]
}
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	372c      	adds	r7, #44	@ 0x2c
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bcb0      	pop	{r4, r5, r7}
 8003d42:	4770      	bx	lr

08003d44 <Calculate_Braking_Distance>:

float Calculate_Braking_Distance(float current_speed, float end_speed, float inverse_acceleration) {
 8003d44:	b5b0      	push	{r4, r5, r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
	return fabsf(current_speed * current_speed - end_speed * end_speed) * 0.5 * inverse_acceleration;
 8003d50:	68f9      	ldr	r1, [r7, #12]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f7fc ff4e 	bl	8000bf4 <__aeabi_fmul>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	461c      	mov	r4, r3
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	68b8      	ldr	r0, [r7, #8]
 8003d60:	f7fc ff48 	bl	8000bf4 <__aeabi_fmul>
 8003d64:	4603      	mov	r3, r0
 8003d66:	4619      	mov	r1, r3
 8003d68:	4620      	mov	r0, r4
 8003d6a:	f7fc fe39 	bl	80009e0 <__aeabi_fsub>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fc fb4d 	bl	8000414 <__aeabi_f2d>
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003db4 <Calculate_Braking_Distance+0x70>)
 8003d80:	f7fc fba0 	bl	80004c4 <__aeabi_dmul>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4614      	mov	r4, r2
 8003d8a:	461d      	mov	r5, r3
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7fc fb41 	bl	8000414 <__aeabi_f2d>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4620      	mov	r0, r4
 8003d98:	4629      	mov	r1, r5
 8003d9a:	f7fc fb93 	bl	80004c4 <__aeabi_dmul>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4610      	mov	r0, r2
 8003da4:	4619      	mov	r1, r3
 8003da6:	f7fc fdc7 	bl	8000938 <__aeabi_d2f>
 8003daa:	4603      	mov	r3, r0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bdb0      	pop	{r4, r5, r7, pc}
 8003db4:	3fe00000 	.word	0x3fe00000

08003db8 <Update_Profile>:

void Update_Profile(profile_t* profile) {
 8003db8:	b590      	push	{r4, r7, lr}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	if (profile->state == IDLE || profile->state == COMPLETE) {
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	7d1b      	ldrb	r3, [r3, #20]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80c1 	beq.w	8003f4c <Update_Profile+0x194>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	7d1b      	ldrb	r3, [r3, #20]
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	f000 80bc 	beq.w	8003f4c <Update_Profile+0x194>
		return;
	}

	float delta_v = profile->parameters.acceleration * SYSTICK_INTERVAL;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4a5e      	ldr	r2, [pc, #376]	@ (8003f54 <Update_Profile+0x19c>)
 8003dda:	6812      	ldr	r2, [r2, #0]
 8003ddc:	4611      	mov	r1, r2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fc ff08 	bl	8000bf4 <__aeabi_fmul>
 8003de4:	4603      	mov	r3, r0
 8003de6:	617b      	str	r3, [r7, #20]
	float remaining_distance = fabsf(profile->parameters.distance) - fabsf(profile->position);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	f7fc fdf0 	bl	80009e0 <__aeabi_fsub>
 8003e00:	4603      	mov	r3, r0
 8003e02:	613b      	str	r3, [r7, #16]
	if (profile->state == ACCELERATING) {
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	7d1b      	ldrb	r3, [r3, #20]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d130      	bne.n	8003e6e <Update_Profile+0xb6>
		float braking_distance = Calculate_Braking_Distance(profile->speed, profile->parameters.end_speed, profile->inverse_acceleration);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6998      	ldr	r0, [r3, #24]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6899      	ldr	r1, [r3, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	f7ff ff93 	bl	8003d44 <Calculate_Braking_Distance>
 8003e1e:	60f8      	str	r0, [r7, #12]
		if (remaining_distance < braking_distance) {
 8003e20:	68f9      	ldr	r1, [r7, #12]
 8003e22:	6938      	ldr	r0, [r7, #16]
 8003e24:	f7fd f884 	bl	8000f30 <__aeabi_fcmplt>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d01f      	beq.n	8003e6e <Update_Profile+0xb6>
			profile->state = BRAKING;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2202      	movs	r2, #2
 8003e32:	751a      	strb	r2, [r3, #20]
			if (profile->parameters.end_speed == 0) {
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f04f 0100 	mov.w	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fd f86d 	bl	8000f1c <__aeabi_fcmpeq>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00e      	beq.n	8003e66 <Update_Profile+0xae>
				profile->parameters.max_speed = profile->direction * 5.0f;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fc fe7d 	bl	8000b4c <__aeabi_i2f>
 8003e52:	4603      	mov	r3, r0
 8003e54:	4940      	ldr	r1, [pc, #256]	@ (8003f58 <Update_Profile+0x1a0>)
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fc fecc 	bl	8000bf4 <__aeabi_fmul>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	461a      	mov	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	605a      	str	r2, [r3, #4]
 8003e64:	e003      	b.n	8003e6e <Update_Profile+0xb6>
			}
			else {
				profile->parameters.max_speed = profile->parameters.end_speed;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	605a      	str	r2, [r3, #4]
			}
		}
	}

	if (profile->speed < profile->parameters.max_speed) {
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	4619      	mov	r1, r3
 8003e78:	4610      	mov	r0, r2
 8003e7a:	f7fd f859 	bl	8000f30 <__aeabi_fcmplt>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d018      	beq.n	8003eb6 <Update_Profile+0xfe>
		profile->speed += delta_v;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	6979      	ldr	r1, [r7, #20]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fc fdaa 	bl	80009e4 <__addsf3>
 8003e90:	4603      	mov	r3, r0
 8003e92:	461a      	mov	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	619a      	str	r2, [r3, #24]
		if (profile->speed > profile->parameters.max_speed) {
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699a      	ldr	r2, [r3, #24]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f7fd f862 	bl	8000f6c <__aeabi_fcmpgt>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <Update_Profile+0xfe>
			profile->speed = profile->parameters.max_speed;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	619a      	str	r2, [r3, #24]
		}
	}
	if (profile->speed > profile->parameters.max_speed) {
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699a      	ldr	r2, [r3, #24]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	f7fd f853 	bl	8000f6c <__aeabi_fcmpgt>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d018      	beq.n	8003efe <Update_Profile+0x146>
		profile->speed -= delta_v;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	6979      	ldr	r1, [r7, #20]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fc fd84 	bl	80009e0 <__aeabi_fsub>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	461a      	mov	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	619a      	str	r2, [r3, #24]
		if (profile->speed < profile->parameters.max_speed) {
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699a      	ldr	r2, [r3, #24]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4610      	mov	r0, r2
 8003eec:	f7fd f820 	bl	8000f30 <__aeabi_fcmplt>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <Update_Profile+0x146>
			profile->speed = profile->parameters.max_speed;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	619a      	str	r2, [r3, #24]
		}
	}

	profile->position += profile->speed * SYSTICK_INTERVAL;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69dc      	ldr	r4, [r3, #28]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	4a13      	ldr	r2, [pc, #76]	@ (8003f54 <Update_Profile+0x19c>)
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fc fe71 	bl	8000bf4 <__aeabi_fmul>
 8003f12:	4603      	mov	r3, r0
 8003f14:	4619      	mov	r1, r3
 8003f16:	4620      	mov	r0, r4
 8003f18:	f7fc fd64 	bl	80009e4 <__addsf3>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	461a      	mov	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	61da      	str	r2, [r3, #28]
	if (profile->state != COMPLETE && remaining_distance < 0.125) {
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	7d1b      	ldrb	r3, [r3, #20]
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d010      	beq.n	8003f4e <Update_Profile+0x196>
 8003f2c:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8003f30:	6938      	ldr	r0, [r7, #16]
 8003f32:	f7fc fffd 	bl	8000f30 <__aeabi_fcmplt>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <Update_Profile+0x196>
		profile->state = COMPLETE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2203      	movs	r2, #3
 8003f40:	751a      	strb	r2, [r3, #20]
		profile->parameters.max_speed = profile->parameters.end_speed;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	605a      	str	r2, [r3, #4]
 8003f4a:	e000      	b.n	8003f4e <Update_Profile+0x196>
		return;
 8003f4c:	bf00      	nop
	}
}
 8003f4e:	371c      	adds	r7, #28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd90      	pop	{r4, r7, pc}
 8003f54:	08008d44 	.word	0x08008d44
 8003f58:	40a00000 	.word	0x40a00000

08003f5c <LED_Power_Init>:
const float ADC_MAX_READING = 4096.0;
const float ADC_REFERENCE_V = 3.3;

const float BATTERY_MULTIPLIER = (ADC_REFERENCE_V / ADC_MAX_READING / DIVIDER_RATIO);

void LED_Power_Init() {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Power_GPIO_Port, LED_Power_Pin);
 8003f60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003f64:	4802      	ldr	r0, [pc, #8]	@ (8003f70 <LED_Power_Init+0x14>)
 8003f66:	f002 f9b1 	bl	80062cc <HAL_GPIO_TogglePin>
}
 8003f6a:	bf00      	nop
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40011000 	.word	0x40011000

08003f74 <Pulse_Buzzer>:
void Reset_Buffers(uint8_t rxBuff, uint8_t txBuff) {
	rxBuff = 0;
	txBuff = 0;
}

void Pulse_Buzzer(uint16_t delay) {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f84:	4804      	ldr	r0, [pc, #16]	@ (8003f98 <Pulse_Buzzer+0x24>)
 8003f86:	f002 f989 	bl	800629c <HAL_GPIO_WritePin>
	buzzerDelay = delay;
 8003f8a:	4a04      	ldr	r2, [pc, #16]	@ (8003f9c <Pulse_Buzzer+0x28>)
 8003f8c:	88fb      	ldrh	r3, [r7, #6]
 8003f8e:	8013      	strh	r3, [r2, #0]
}
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40010c00 	.word	0x40010c00
 8003f9c:	20000c74 	.word	0x20000c74

08003fa0 <LED_Red_Toggle>:

void LED_Red_Toggle() {
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 8003fa4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003fa8:	4802      	ldr	r0, [pc, #8]	@ (8003fb4 <LED_Red_Toggle+0x14>)
 8003faa:	f002 f98f 	bl	80062cc <HAL_GPIO_TogglePin>
}
 8003fae:	bf00      	nop
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40010800 	.word	0x40010800

08003fb8 <LED_Blue_Set>:

void LED_Blue_Toggle() {
	HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
}

void LED_Blue_Set() {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003fc2:	4802      	ldr	r0, [pc, #8]	@ (8003fcc <LED_Blue_Set+0x14>)
 8003fc4:	f002 f96a 	bl	800629c <HAL_GPIO_WritePin>
}
 8003fc8:	bf00      	nop
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40010800 	.word	0x40010800

08003fd0 <Calculate_Battery_Bias>:

float Calculate_Battery_Bias(float commanded_voltage) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
	return (BATTERY_BIAS_SLOPE * commanded_voltage + BATTERY_BIAS_OFFSET) / BATTERY_RATIO;
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004008 <Calculate_Battery_Bias+0x38>)
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fc fe09 	bl	8000bf4 <__aeabi_fmul>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4b09      	ldr	r3, [pc, #36]	@ (800400c <Calculate_Battery_Bias+0x3c>)
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4610      	mov	r0, r2
 8003fec:	f7fc fcfa 	bl	80009e4 <__addsf3>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <Calculate_Battery_Bias+0x40>)
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	f7fc feaf 	bl	8000d5c <__aeabi_fdiv>
 8003ffe:	4603      	mov	r3, r0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	3d9b089a 	.word	0x3d9b089a
 800400c:	3cbb98c8 	.word	0x3cbb98c8
 8004010:	3f69ba5e 	.word	0x3f69ba5e

08004014 <Read_Battery>:

double Read_Battery() {
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 800401a:	4815      	ldr	r0, [pc, #84]	@ (8004070 <Read_Battery+0x5c>)
 800401c:	f001 f87a 	bl	8005114 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8004020:	f04f 31ff 	mov.w	r1, #4294967295
 8004024:	4812      	ldr	r0, [pc, #72]	@ (8004070 <Read_Battery+0x5c>)
 8004026:	f001 f94f 	bl	80052c8 <HAL_ADC_PollForConversion>
	uint16_t raw_adc = HAL_ADC_GetValue(&hadc2);
 800402a:	4811      	ldr	r0, [pc, #68]	@ (8004070 <Read_Battery+0x5c>)
 800402c:	f001 fa52 	bl	80054d4 <HAL_ADC_GetValue>
 8004030:	4603      	mov	r3, r0
 8004032:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc2);
 8004034:	480e      	ldr	r0, [pc, #56]	@ (8004070 <Read_Battery+0x5c>)
 8004036:	f001 f91b 	bl	8005270 <HAL_ADC_Stop>

	return raw_adc * BATTERY_MULTIPLIER + 1.0;
 800403a:	88fb      	ldrh	r3, [r7, #6]
 800403c:	4618      	mov	r0, r3
 800403e:	f7fc fd85 	bl	8000b4c <__aeabi_i2f>
 8004042:	4603      	mov	r3, r0
 8004044:	4a0b      	ldr	r2, [pc, #44]	@ (8004074 <Read_Battery+0x60>)
 8004046:	4611      	mov	r1, r2
 8004048:	4618      	mov	r0, r3
 800404a:	f7fc fdd3 	bl	8000bf4 <__aeabi_fmul>
 800404e:	4603      	mov	r3, r0
 8004050:	4618      	mov	r0, r3
 8004052:	f7fc f9df 	bl	8000414 <__aeabi_f2d>
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	4b07      	ldr	r3, [pc, #28]	@ (8004078 <Read_Battery+0x64>)
 800405c:	f7fc f87c 	bl	8000158 <__adddf3>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
}
 8004064:	4610      	mov	r0, r2
 8004066:	4619      	mov	r1, r3
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	200000cc 	.word	0x200000cc
 8004074:	3b1e6666 	.word	0x3b1e6666
 8004078:	3ff00000 	.word	0x3ff00000

0800407c <Save_Maze_To_Flash>:

void Save_Maze_To_Flash(struct Maze* maze) {
 800407c:	b5b0      	push	{r4, r5, r7, lr}
 800407e:	b08a      	sub	sp, #40	@ 0x28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8004084:	f001 fdf6 	bl	8005c74 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef erase_init;
	uint32_t page_error = 0;
 8004088:	2300      	movs	r3, #0
 800408a:	60bb      	str	r3, [r7, #8]

	erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]
	erase_init.PageAddress = MAZE_ADDRESS;
 8004090:	4b1e      	ldr	r3, [pc, #120]	@ (800410c <Save_Maze_To_Flash+0x90>)
 8004092:	617b      	str	r3, [r7, #20]
	erase_init.NbPages = NUM_PAGES;
 8004094:	2303      	movs	r3, #3
 8004096:	61bb      	str	r3, [r7, #24]

	if (HAL_FLASHEx_Erase(&erase_init, &page_error) != HAL_OK) {
 8004098:	f107 0208 	add.w	r2, r7, #8
 800409c:	f107 030c 	add.w	r3, r7, #12
 80040a0:	4611      	mov	r1, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f001 fece 	bl	8005e44 <HAL_FLASHEx_Erase>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <Save_Maze_To_Flash+0x38>
		HAL_FLASH_Lock();
 80040ae:	f001 fe07 	bl	8005cc0 <HAL_FLASH_Lock>
		return;
 80040b2:	e028      	b.n	8004106 <Save_Maze_To_Flash+0x8a>
	}

	uint16_t *data = (uint16_t*) maze;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	623b      	str	r3, [r7, #32]
	size_t num_half_words = sizeof(struct Maze) / 2;
 80040b8:	f240 4396 	movw	r3, #1174	@ 0x496
 80040bc:	61fb      	str	r3, [r7, #28]

	for (size_t i = 0; i < num_half_words; i++) {
 80040be:	2300      	movs	r3, #0
 80040c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040c2:	e01a      	b.n	80040fa <Save_Maze_To_Flash+0x7e>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, MAZE_ADDRESS + (i * 2), data[i]) != HAL_OK) {
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	4a10      	ldr	r2, [pc, #64]	@ (800410c <Save_Maze_To_Flash+0x90>)
 80040ca:	1899      	adds	r1, r3, r2
 80040cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	6a3a      	ldr	r2, [r7, #32]
 80040d2:	4413      	add	r3, r2
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2200      	movs	r2, #0
 80040da:	461c      	mov	r4, r3
 80040dc:	4615      	mov	r5, r2
 80040de:	4622      	mov	r2, r4
 80040e0:	462b      	mov	r3, r5
 80040e2:	2001      	movs	r0, #1
 80040e4:	f001 fd56 	bl	8005b94 <HAL_FLASH_Program>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <Save_Maze_To_Flash+0x78>
			HAL_FLASH_Lock();
 80040ee:	f001 fde7 	bl	8005cc0 <HAL_FLASH_Lock>
			return;
 80040f2:	e008      	b.n	8004106 <Save_Maze_To_Flash+0x8a>
	for (size_t i = 0; i < num_half_words; i++) {
 80040f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f6:	3301      	adds	r3, #1
 80040f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d3e0      	bcc.n	80040c4 <Save_Maze_To_Flash+0x48>
		}
	}

	HAL_FLASH_Lock();
 8004102:	f001 fddd 	bl	8005cc0 <HAL_FLASH_Lock>
}
 8004106:	3728      	adds	r7, #40	@ 0x28
 8004108:	46bd      	mov	sp, r7
 800410a:	bdb0      	pop	{r4, r5, r7, pc}
 800410c:	0800f800 	.word	0x0800f800

08004110 <Load_Maze_From_Flash>:

void Load_Maze_From_Flash(struct Maze* maze) {
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
	uint8_t* read_maze = (uint8_t*)MAZE_ADDRESS;
 8004118:	4b05      	ldr	r3, [pc, #20]	@ (8004130 <Load_Maze_From_Flash+0x20>)
 800411a:	60fb      	str	r3, [r7, #12]
	memcpy(maze, read_maze, sizeof(struct Maze));
 800411c:	f640 122c 	movw	r2, #2348	@ 0x92c
 8004120:	68f9      	ldr	r1, [r7, #12]
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f004 fd96 	bl	8008c54 <memcpy>
}
 8004128:	bf00      	nop
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	0800f800 	.word	0x0800f800

08004134 <ARM_Button>:

void ARM_Button() { // Top Button (closest to wheel)
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
	for (uint8_t i=0; i < 5; i++) {
 800413a:	2300      	movs	r3, #0
 800413c:	71fb      	strb	r3, [r7, #7]
 800413e:	e008      	b.n	8004152 <ARM_Button+0x1e>
		LED_Red_Toggle();
 8004140:	f7ff ff2e 	bl	8003fa0 <LED_Red_Toggle>
		HAL_Delay(500);
 8004144:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004148:	f000 fee8 	bl	8004f1c <HAL_Delay>
	for (uint8_t i=0; i < 5; i++) {
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	3301      	adds	r3, #1
 8004150:	71fb      	strb	r3, [r7, #7]
 8004152:	79fb      	ldrb	r3, [r7, #7]
 8004154:	2b04      	cmp	r3, #4
 8004156:	d9f3      	bls.n	8004140 <ARM_Button+0xc>
	}
	armed = true;
 8004158:	4b03      	ldr	r3, [pc, #12]	@ (8004168 <ARM_Button+0x34>)
 800415a:	2201      	movs	r2, #1
 800415c:	701a      	strb	r2, [r3, #0]
}
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20000248 	.word	0x20000248

0800416c <RACE_Button>:

void RACE_Button() { // Middle button
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
	switch (mouse_mode) {
 8004170:	4b0a      	ldr	r3, [pc, #40]	@ (800419c <RACE_Button+0x30>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <RACE_Button+0x12>
 8004178:	2b01      	cmp	r3, #1
 800417a:	d004      	beq.n	8004186 <RACE_Button+0x1a>
			break;
		case RACING:
			mouse_mode = SEARCHING;
			break;
		default:
			return;
 800417c:	e00d      	b.n	800419a <RACE_Button+0x2e>
			mouse_mode = RACING;
 800417e:	4b07      	ldr	r3, [pc, #28]	@ (800419c <RACE_Button+0x30>)
 8004180:	2201      	movs	r2, #1
 8004182:	701a      	strb	r2, [r3, #0]
			break;
 8004184:	e003      	b.n	800418e <RACE_Button+0x22>
			mouse_mode = SEARCHING;
 8004186:	4b05      	ldr	r3, [pc, #20]	@ (800419c <RACE_Button+0x30>)
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
			break;
 800418c:	bf00      	nop
	}

	LED_Blue_Set();
 800418e:	f7ff ff13 	bl	8003fb8 <LED_Blue_Set>
	HAL_Delay(1000);
 8004192:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004196:	f000 fec1 	bl	8004f1c <HAL_Delay>
}
 800419a:	bd80      	pop	{r7, pc}
 800419c:	20000b80 	.word	0x20000b80

080041a0 <LOADMAZE_Button>:

void LOADMAZE_Button() { // Bottom button
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
	Load_Maze_From_Flash(&maze);
 80041a4:	480a      	ldr	r0, [pc, #40]	@ (80041d0 <LOADMAZE_Button+0x30>)
 80041a6:	f7ff ffb3 	bl	8004110 <Load_Maze_From_Flash>

	Set_Goal_Cell(&maze, 4);
 80041aa:	2104      	movs	r1, #4
 80041ac:	4808      	ldr	r0, [pc, #32]	@ (80041d0 <LOADMAZE_Button+0x30>)
 80041ae:	f7fe f903 	bl	80023b8 <Set_Goal_Cell>
	maze.mouse_dir = NORTH;
 80041b2:	4b07      	ldr	r3, [pc, #28]	@ (80041d0 <LOADMAZE_Button+0x30>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	721a      	strb	r2, [r3, #8]
	maze.mouse_pos.x = 0;
 80041b8:	4b05      	ldr	r3, [pc, #20]	@ (80041d0 <LOADMAZE_Button+0x30>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
	maze.mouse_pos.y = 0;
 80041be:	4b04      	ldr	r3, [pc, #16]	@ (80041d0 <LOADMAZE_Button+0x30>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	605a      	str	r2, [r3, #4]
	HAL_Delay(1000);
 80041c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80041c8:	f000 fea8 	bl	8004f1c <HAL_Delay>
}
 80041cc:	bf00      	nop
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	20000254 	.word	0x20000254

080041d4 <Systick>:
extern float steering_adjustment;
extern bool disable_adc;

uint32_t time_last_updated_ms = 0;

void Systick() {
 80041d4:	b5b0      	push	{r4, r5, r7, lr}
 80041d6:	af00      	add	r7, sp, #0
	global_time = HAL_GetTick();
 80041d8:	f000 fe96 	bl	8004f08 <HAL_GetTick>
 80041dc:	4603      	mov	r3, r0
 80041de:	4a2b      	ldr	r2, [pc, #172]	@ (800428c <Systick+0xb8>)
 80041e0:	6013      	str	r3, [r2, #0]

	Debug_Mode();
 80041e2:	f000 f865 	bl	80042b0 <Debug_Mode>
	Buzzer_Check();
 80041e6:	f000 f8a1 	bl	800432c <Buzzer_Check>

	if (global_time > time_last_updated_ms + (SYSTICK_INTERVAL * 1000)) {
 80041ea:	4b28      	ldr	r3, [pc, #160]	@ (800428c <Systick+0xb8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fc fca8 	bl	8000b44 <__aeabi_ui2f>
 80041f4:	4604      	mov	r4, r0
 80041f6:	4b26      	ldr	r3, [pc, #152]	@ (8004290 <Systick+0xbc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fc fca2 	bl	8000b44 <__aeabi_ui2f>
 8004200:	4605      	mov	r5, r0
 8004202:	4b24      	ldr	r3, [pc, #144]	@ (8004294 <Systick+0xc0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4924      	ldr	r1, [pc, #144]	@ (8004298 <Systick+0xc4>)
 8004208:	4618      	mov	r0, r3
 800420a:	f7fc fcf3 	bl	8000bf4 <__aeabi_fmul>
 800420e:	4603      	mov	r3, r0
 8004210:	4619      	mov	r1, r3
 8004212:	4628      	mov	r0, r5
 8004214:	f7fc fbe6 	bl	80009e4 <__addsf3>
 8004218:	4603      	mov	r3, r0
 800421a:	4619      	mov	r1, r3
 800421c:	4620      	mov	r0, r4
 800421e:	f7fc fea5 	bl	8000f6c <__aeabi_fcmpgt>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d100      	bne.n	800422a <Systick+0x56>
		// Update motor voltages
		Update_Motors(forward_profile.speed, rotational_profile.speed, steering_adjustment);

		time_last_updated_ms = global_time;
	}
}
 8004228:	e02d      	b.n	8004286 <Systick+0xb2>
		Update_Encoders();
 800422a:	f7fd fbd1 	bl	80019d0 <Update_Encoders>
		Update_Profile(&forward_profile);
 800422e:	481b      	ldr	r0, [pc, #108]	@ (800429c <Systick+0xc8>)
 8004230:	f7ff fdc2 	bl	8003db8 <Update_Profile>
		Update_Profile(&rotational_profile);
 8004234:	481a      	ldr	r0, [pc, #104]	@ (80042a0 <Systick+0xcc>)
 8004236:	f7ff fdbf 	bl	8003db8 <Update_Profile>
		if (!disable_adc) {
 800423a:	4b1a      	ldr	r3, [pc, #104]	@ (80042a4 <Systick+0xd0>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	f083 0301 	eor.w	r3, r3, #1
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <Systick+0x86>
			Poll_Sensors(&mouse_state);
 8004248:	4817      	ldr	r0, [pc, #92]	@ (80042a8 <Systick+0xd4>)
 800424a:	f000 f9e5 	bl	8004618 <Poll_Sensors>
			Wall_Front();
 800424e:	f000 fa3f 	bl	80046d0 <Wall_Front>
			Wall_Left();
 8004252:	f000 fa71 	bl	8004738 <Wall_Left>
			Wall_Right();
 8004256:	f000 fa97 	bl	8004788 <Wall_Right>
		Calculate_Error();
 800425a:	f000 fb23 	bl	80048a4 <Calculate_Error>
		mouse_state.battery_voltage = Read_Battery();
 800425e:	f7ff fed9 	bl	8004014 <Read_Battery>
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4910      	ldr	r1, [pc, #64]	@ (80042a8 <Systick+0xd4>)
 8004268:	e9c1 2306 	strd	r2, r3, [r1, #24]
		Update_Motors(forward_profile.speed, rotational_profile.speed, steering_adjustment);
 800426c:	4b0b      	ldr	r3, [pc, #44]	@ (800429c <Systick+0xc8>)
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	4a0b      	ldr	r2, [pc, #44]	@ (80042a0 <Systick+0xcc>)
 8004272:	6991      	ldr	r1, [r2, #24]
 8004274:	4a0d      	ldr	r2, [pc, #52]	@ (80042ac <Systick+0xd8>)
 8004276:	6812      	ldr	r2, [r2, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fb5f 	bl	800393c <Update_Motors>
		time_last_updated_ms = global_time;
 800427e:	4b03      	ldr	r3, [pc, #12]	@ (800428c <Systick+0xb8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a03      	ldr	r2, [pc, #12]	@ (8004290 <Systick+0xbc>)
 8004284:	6013      	str	r3, [r2, #0]
}
 8004286:	bf00      	nop
 8004288:	bdb0      	pop	{r4, r5, r7, pc}
 800428a:	bf00      	nop
 800428c:	20000244 	.word	0x20000244
 8004290:	20000c78 	.word	0x20000c78
 8004294:	08008d44 	.word	0x08008d44
 8004298:	447a0000 	.word	0x447a0000
 800429c:	20000b84 	.word	0x20000b84
 80042a0:	20000bac 	.word	0x20000bac
 80042a4:	20000c1c 	.word	0x20000c1c
 80042a8:	20000220 	.word	0x20000220
 80042ac:	20000c88 	.word	0x20000c88

080042b0 <Debug_Mode>:

void Debug_Mode() {
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
	if (debugMode) {
 80042b4:	4b17      	ldr	r3, [pc, #92]	@ (8004314 <Debug_Mode+0x64>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d029      	beq.n	8004310 <Debug_Mode+0x60>
		debugCounter = (debugCounter + 1) % DEBUG_PERIOD;
 80042bc:	4b16      	ldr	r3, [pc, #88]	@ (8004318 <Debug_Mode+0x68>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	3301      	adds	r3, #1
 80042c2:	4a16      	ldr	r2, [pc, #88]	@ (800431c <Debug_Mode+0x6c>)
 80042c4:	fb82 1203 	smull	r1, r2, r2, r3
 80042c8:	1111      	asrs	r1, r2, #4
 80042ca:	17da      	asrs	r2, r3, #31
 80042cc:	1a8a      	subs	r2, r1, r2
 80042ce:	2132      	movs	r1, #50	@ 0x32
 80042d0:	fb01 f202 	mul.w	r2, r1, r2
 80042d4:	1a9a      	subs	r2, r3, r2
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004318 <Debug_Mode+0x68>)
 80042da:	701a      	strb	r2, [r3, #0]
		if (debugCounter == 0) {
 80042dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004318 <Debug_Mode+0x68>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d115      	bne.n	8004310 <Debug_Mode+0x60>
			mouse_state.rpm.left_rpm = Calculate_RPM(objective_L, MOTOR_LEFT);
 80042e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004320 <Debug_Mode+0x70>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2100      	movs	r1, #0
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fd fb20 	bl	8001930 <Calculate_RPM>
 80042f0:	4603      	mov	r3, r0
 80042f2:	461a      	mov	r2, r3
 80042f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004324 <Debug_Mode+0x74>)
 80042f6:	809a      	strh	r2, [r3, #4]
			mouse_state.rpm.right_rpm  = Calculate_RPM(objective_R, MOTOR_RIGHT);
 80042f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004328 <Debug_Mode+0x78>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2101      	movs	r1, #1
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fd fb16 	bl	8001930 <Calculate_RPM>
 8004304:	4603      	mov	r3, r0
 8004306:	461a      	mov	r2, r3
 8004308:	4b06      	ldr	r3, [pc, #24]	@ (8004324 <Debug_Mode+0x74>)
 800430a:	80da      	strh	r2, [r3, #6]

			Debug_Packet_Send();
 800430c:	f7fd fa9e 	bl	800184c <Debug_Packet_Send>
		}
	}
}
 8004310:	bf00      	nop
 8004312:	bd80      	pop	{r7, pc}
 8004314:	20000240 	.word	0x20000240
 8004318:	20000241 	.word	0x20000241
 800431c:	51eb851f 	.word	0x51eb851f
 8004320:	2000024c 	.word	0x2000024c
 8004324:	20000220 	.word	0x20000220
 8004328:	20000250 	.word	0x20000250

0800432c <Buzzer_Check>:

void Buzzer_Check() {
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
	if (buzzerDelay > 0) {
 8004330:	4b0a      	ldr	r3, [pc, #40]	@ (800435c <Buzzer_Check+0x30>)
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d007      	beq.n	800434a <Buzzer_Check+0x1e>
		buzzerDelay--;
 800433a:	4b08      	ldr	r3, [pc, #32]	@ (800435c <Buzzer_Check+0x30>)
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	4b05      	ldr	r3, [pc, #20]	@ (800435c <Buzzer_Check+0x30>)
 8004346:	801a      	strh	r2, [r3, #0]
	}
	else {
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
	}
}
 8004348:	e005      	b.n	8004356 <Buzzer_Check+0x2a>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800434a:	2200      	movs	r2, #0
 800434c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004350:	4803      	ldr	r0, [pc, #12]	@ (8004360 <Buzzer_Check+0x34>)
 8004352:	f001 ffa3 	bl	800629c <HAL_GPIO_WritePin>
}
 8004356:	bf00      	nop
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20000c74 	.word	0x20000c74
 8004360:	40010c00 	.word	0x40010c00

08004364 <ADC1_Select_CH9>:

float previous_error = 0;
bool adjust_steering = false;
float steering_adjustment = 0;

static void ADC1_Select_CH9(void) {
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800436a:	1d3b      	adds	r3, r7, #4
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_9;
 8004374:	2309      	movs	r3, #9
 8004376:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004378:	2301      	movs	r3, #1
 800437a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800437c:	2301      	movs	r3, #1
 800437e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel (&hadc1, &sConfig) != HAL_OK) {
 8004380:	1d3b      	adds	r3, r7, #4
 8004382:	4619      	mov	r1, r3
 8004384:	4805      	ldr	r0, [pc, #20]	@ (800439c <ADC1_Select_CH9+0x38>)
 8004386:	f001 f8b1 	bl	80054ec <HAL_ADC_ConfigChannel>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <ADC1_Select_CH9+0x30>
		Error_Handler();
 8004390:	f7fd f9a5 	bl	80016de <Error_Handler>
	}
}
 8004394:	bf00      	nop
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	2000009c 	.word	0x2000009c

080043a0 <ADC1_Select_CH8>:

static void ADC1_Select_CH8(void) {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80043a6:	1d3b      	adds	r3, r7, #4
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	605a      	str	r2, [r3, #4]
 80043ae:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_8;
 80043b0:	2308      	movs	r3, #8
 80043b2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80043b4:	2301      	movs	r3, #1
 80043b6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80043b8:	2301      	movs	r3, #1
 80043ba:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80043bc:	1d3b      	adds	r3, r7, #4
 80043be:	4619      	mov	r1, r3
 80043c0:	4805      	ldr	r0, [pc, #20]	@ (80043d8 <ADC1_Select_CH8+0x38>)
 80043c2:	f001 f893 	bl	80054ec <HAL_ADC_ConfigChannel>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <ADC1_Select_CH8+0x30>
		Error_Handler();
 80043cc:	f7fd f987 	bl	80016de <Error_Handler>
	}
}
 80043d0:	bf00      	nop
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	2000009c 	.word	0x2000009c

080043dc <ADC1_Select_CH5>:

static void ADC1_Select_CH5(void) {
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80043e2:	1d3b      	adds	r3, r7, #4
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	605a      	str	r2, [r3, #4]
 80043ea:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_5;
 80043ec:	2305      	movs	r3, #5
 80043ee:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80043f0:	2301      	movs	r3, #1
 80043f2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80043f4:	2301      	movs	r3, #1
 80043f6:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80043f8:	1d3b      	adds	r3, r7, #4
 80043fa:	4619      	mov	r1, r3
 80043fc:	4805      	ldr	r0, [pc, #20]	@ (8004414 <ADC1_Select_CH5+0x38>)
 80043fe:	f001 f875 	bl	80054ec <HAL_ADC_ConfigChannel>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <ADC1_Select_CH5+0x30>
		Error_Handler();
 8004408:	f7fd f969 	bl	80016de <Error_Handler>
	}
}
 800440c:	bf00      	nop
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	2000009c 	.word	0x2000009c

08004418 <ADC1_Select_CH4>:

static void ADC1_Select_CH4(void) {
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800441e:	1d3b      	adds	r3, r7, #4
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_4;
 8004428:	2304      	movs	r3, #4
 800442a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800442c:	2301      	movs	r3, #1
 800442e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8004430:	2301      	movs	r3, #1
 8004432:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel (&hadc1, &sConfig) != HAL_OK) {
 8004434:	1d3b      	adds	r3, r7, #4
 8004436:	4619      	mov	r1, r3
 8004438:	4805      	ldr	r0, [pc, #20]	@ (8004450 <ADC1_Select_CH4+0x38>)
 800443a:	f001 f857 	bl	80054ec <HAL_ADC_ConfigChannel>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <ADC1_Select_CH4+0x30>
		Error_Handler();
 8004444:	f7fd f94b 	bl	80016de <Error_Handler>
	}
}
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	2000009c 	.word	0x2000009c

08004454 <Measure_Dist>:

uint16_t Measure_Dist(dist_t dist) { // Poll raw IR sensors
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef* emitter_port;
	uint16_t emitter_pin;

	switch(dist) {
 800445e:	79fb      	ldrb	r3, [r7, #7]
 8004460:	2b03      	cmp	r3, #3
 8004462:	d82a      	bhi.n	80044ba <Measure_Dist+0x66>
 8004464:	a201      	add	r2, pc, #4	@ (adr r2, 800446c <Measure_Dist+0x18>)
 8004466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446a:	bf00      	nop
 800446c:	0800447d 	.word	0x0800447d
 8004470:	0800448b 	.word	0x0800448b
 8004474:	0800449b 	.word	0x0800449b
 8004478:	080044ab 	.word	0x080044ab
	case DIST_FL:
		emitter_port = EMIT_FL_GPIO_Port;
 800447c:	4b20      	ldr	r3, [pc, #128]	@ (8004500 <Measure_Dist+0xac>)
 800447e:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_FL_Pin;
 8004480:	2320      	movs	r3, #32
 8004482:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH4();
 8004484:	f7ff ffc8 	bl	8004418 <ADC1_Select_CH4>
		break;
 8004488:	e018      	b.n	80044bc <Measure_Dist+0x68>
	case DIST_L:
		emitter_port = EMIT_L_GPIO_Port;
 800448a:	4b1d      	ldr	r3, [pc, #116]	@ (8004500 <Measure_Dist+0xac>)
 800448c:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_L_Pin;
 800448e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004492:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH5();
 8004494:	f7ff ffa2 	bl	80043dc <ADC1_Select_CH5>
		break;
 8004498:	e010      	b.n	80044bc <Measure_Dist+0x68>
	case DIST_R:
		emitter_port = EMIT_R_GPIO_Port;
 800449a:	4b19      	ldr	r3, [pc, #100]	@ (8004500 <Measure_Dist+0xac>)
 800449c:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_R_Pin;
 800449e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80044a2:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH8();
 80044a4:	f7ff ff7c 	bl	80043a0 <ADC1_Select_CH8>
		break;
 80044a8:	e008      	b.n	80044bc <Measure_Dist+0x68>
	case DIST_FR:
		emitter_port = EMIT_FR_GPIO_Port;
 80044aa:	4b15      	ldr	r3, [pc, #84]	@ (8004500 <Measure_Dist+0xac>)
 80044ac:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_FR_Pin;
 80044ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044b2:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH9();
 80044b4:	f7ff ff56 	bl	8004364 <ADC1_Select_CH9>
		break;
 80044b8:	e000      	b.n	80044bc <Measure_Dist+0x68>
	default:
		break;
 80044ba:	bf00      	nop
	}
	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_SET);
 80044bc:	897b      	ldrh	r3, [r7, #10]
 80044be:	2201      	movs	r2, #1
 80044c0:	4619      	mov	r1, r3
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f001 feea 	bl	800629c <HAL_GPIO_WritePin>

	HAL_ADC_Start(&hadc1);
 80044c8:	480e      	ldr	r0, [pc, #56]	@ (8004504 <Measure_Dist+0xb0>)
 80044ca:	f000 fe23 	bl	8005114 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80044ce:	f04f 31ff 	mov.w	r1, #4294967295
 80044d2:	480c      	ldr	r0, [pc, #48]	@ (8004504 <Measure_Dist+0xb0>)
 80044d4:	f000 fef8 	bl	80052c8 <HAL_ADC_PollForConversion>
	uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 80044d8:	480a      	ldr	r0, [pc, #40]	@ (8004504 <Measure_Dist+0xb0>)
 80044da:	f000 fffb 	bl	80054d4 <HAL_ADC_GetValue>
 80044de:	4603      	mov	r3, r0
 80044e0:	813b      	strh	r3, [r7, #8]
	HAL_ADC_Stop(&hadc1);
 80044e2:	4808      	ldr	r0, [pc, #32]	@ (8004504 <Measure_Dist+0xb0>)
 80044e4:	f000 fec4 	bl	8005270 <HAL_ADC_Stop>

	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_RESET);
 80044e8:	897b      	ldrh	r3, [r7, #10]
 80044ea:	2200      	movs	r2, #0
 80044ec:	4619      	mov	r1, r3
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f001 fed4 	bl	800629c <HAL_GPIO_WritePin>

	return adc_val;
 80044f4:	893b      	ldrh	r3, [r7, #8]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40010c00 	.word	0x40010c00
 8004504:	2000009c 	.word	0x2000009c

08004508 <Calibrate_Readings>:

void Calibrate_Readings(mouse_state_t* mouse_state) { // Normalize raw IR values
 8004508:	b590      	push	{r4, r7, lr}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
	mouse_state->cal.front_left  = 200 * ((float)mouse_state->raw.front_left / (float)translation_FL);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	891b      	ldrh	r3, [r3, #8]
 8004514:	4618      	mov	r0, r3
 8004516:	f7fc fb15 	bl	8000b44 <__aeabi_ui2f>
 800451a:	4604      	mov	r4, r0
 800451c:	4b38      	ldr	r3, [pc, #224]	@ (8004600 <Calibrate_Readings+0xf8>)
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f7fc fb0f 	bl	8000b44 <__aeabi_ui2f>
 8004526:	4603      	mov	r3, r0
 8004528:	4619      	mov	r1, r3
 800452a:	4620      	mov	r0, r4
 800452c:	f7fc fc16 	bl	8000d5c <__aeabi_fdiv>
 8004530:	4603      	mov	r3, r0
 8004532:	4934      	ldr	r1, [pc, #208]	@ (8004604 <Calibrate_Readings+0xfc>)
 8004534:	4618      	mov	r0, r3
 8004536:	f7fc fb5d 	bl	8000bf4 <__aeabi_fmul>
 800453a:	4603      	mov	r3, r0
 800453c:	4618      	mov	r0, r3
 800453e:	f7fc fd1f 	bl	8000f80 <__aeabi_f2uiz>
 8004542:	4603      	mov	r3, r0
 8004544:	b29a      	uxth	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	821a      	strh	r2, [r3, #16]
	mouse_state->cal.left        = 100 * ((float)mouse_state->raw.left / (float)translation_L);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	895b      	ldrh	r3, [r3, #10]
 800454e:	4618      	mov	r0, r3
 8004550:	f7fc faf8 	bl	8000b44 <__aeabi_ui2f>
 8004554:	4604      	mov	r4, r0
 8004556:	4b2c      	ldr	r3, [pc, #176]	@ (8004608 <Calibrate_Readings+0x100>)
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7fc faf2 	bl	8000b44 <__aeabi_ui2f>
 8004560:	4603      	mov	r3, r0
 8004562:	4619      	mov	r1, r3
 8004564:	4620      	mov	r0, r4
 8004566:	f7fc fbf9 	bl	8000d5c <__aeabi_fdiv>
 800456a:	4603      	mov	r3, r0
 800456c:	4927      	ldr	r1, [pc, #156]	@ (800460c <Calibrate_Readings+0x104>)
 800456e:	4618      	mov	r0, r3
 8004570:	f7fc fb40 	bl	8000bf4 <__aeabi_fmul>
 8004574:	4603      	mov	r3, r0
 8004576:	4618      	mov	r0, r3
 8004578:	f7fc fd02 	bl	8000f80 <__aeabi_f2uiz>
 800457c:	4603      	mov	r3, r0
 800457e:	b29a      	uxth	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	825a      	strh	r2, [r3, #18]
	mouse_state->cal.right       = 100 * ((float)mouse_state->raw.right / (float)translation_R);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	899b      	ldrh	r3, [r3, #12]
 8004588:	4618      	mov	r0, r3
 800458a:	f7fc fadb 	bl	8000b44 <__aeabi_ui2f>
 800458e:	4604      	mov	r4, r0
 8004590:	4b1f      	ldr	r3, [pc, #124]	@ (8004610 <Calibrate_Readings+0x108>)
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7fc fad5 	bl	8000b44 <__aeabi_ui2f>
 800459a:	4603      	mov	r3, r0
 800459c:	4619      	mov	r1, r3
 800459e:	4620      	mov	r0, r4
 80045a0:	f7fc fbdc 	bl	8000d5c <__aeabi_fdiv>
 80045a4:	4603      	mov	r3, r0
 80045a6:	4919      	ldr	r1, [pc, #100]	@ (800460c <Calibrate_Readings+0x104>)
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fc fb23 	bl	8000bf4 <__aeabi_fmul>
 80045ae:	4603      	mov	r3, r0
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fc fce5 	bl	8000f80 <__aeabi_f2uiz>
 80045b6:	4603      	mov	r3, r0
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	829a      	strh	r2, [r3, #20]
	mouse_state->cal.front_right = 200 * ((float)mouse_state->raw.front_right / (float)translation_FR);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	89db      	ldrh	r3, [r3, #14]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fc fabe 	bl	8000b44 <__aeabi_ui2f>
 80045c8:	4604      	mov	r4, r0
 80045ca:	4b12      	ldr	r3, [pc, #72]	@ (8004614 <Calibrate_Readings+0x10c>)
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fc fab8 	bl	8000b44 <__aeabi_ui2f>
 80045d4:	4603      	mov	r3, r0
 80045d6:	4619      	mov	r1, r3
 80045d8:	4620      	mov	r0, r4
 80045da:	f7fc fbbf 	bl	8000d5c <__aeabi_fdiv>
 80045de:	4603      	mov	r3, r0
 80045e0:	4908      	ldr	r1, [pc, #32]	@ (8004604 <Calibrate_Readings+0xfc>)
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fc fb06 	bl	8000bf4 <__aeabi_fmul>
 80045e8:	4603      	mov	r3, r0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fc fcc8 	bl	8000f80 <__aeabi_f2uiz>
 80045f0:	4603      	mov	r3, r0
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	82da      	strh	r2, [r3, #22]
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd90      	pop	{r4, r7, pc}
 8004600:	20000010 	.word	0x20000010
 8004604:	43480000 	.word	0x43480000
 8004608:	20000012 	.word	0x20000012
 800460c:	42c80000 	.word	0x42c80000
 8004610:	20000014 	.word	0x20000014
 8004614:	20000016 	.word	0x20000016

08004618 <Poll_Sensors>:

void Poll_Sensors(mouse_state_t* mouse_state){ // Gather all raw IR values
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
	const uint8_t NUM_POLLS = 5;
 8004620:	2305      	movs	r3, #5
 8004622:	73bb      	strb	r3, [r7, #14]
	uint16_t front_left_total = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	82fb      	strh	r3, [r7, #22]
	uint16_t left_total = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	82bb      	strh	r3, [r7, #20]
	uint16_t right_total = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	827b      	strh	r3, [r7, #18]
	uint16_t front_right_total = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	823b      	strh	r3, [r7, #16]
	for (uint8_t i = 0; i < NUM_POLLS; ++i) {
 8004634:	2300      	movs	r3, #0
 8004636:	73fb      	strb	r3, [r7, #15]
 8004638:	e022      	b.n	8004680 <Poll_Sensors+0x68>
		front_left_total += Measure_Dist(DIST_FL);
 800463a:	2000      	movs	r0, #0
 800463c:	f7ff ff0a 	bl	8004454 <Measure_Dist>
 8004640:	4603      	mov	r3, r0
 8004642:	461a      	mov	r2, r3
 8004644:	8afb      	ldrh	r3, [r7, #22]
 8004646:	4413      	add	r3, r2
 8004648:	82fb      	strh	r3, [r7, #22]
		left_total += Measure_Dist(DIST_L);
 800464a:	2001      	movs	r0, #1
 800464c:	f7ff ff02 	bl	8004454 <Measure_Dist>
 8004650:	4603      	mov	r3, r0
 8004652:	461a      	mov	r2, r3
 8004654:	8abb      	ldrh	r3, [r7, #20]
 8004656:	4413      	add	r3, r2
 8004658:	82bb      	strh	r3, [r7, #20]
		right_total += Measure_Dist(DIST_R);
 800465a:	2002      	movs	r0, #2
 800465c:	f7ff fefa 	bl	8004454 <Measure_Dist>
 8004660:	4603      	mov	r3, r0
 8004662:	461a      	mov	r2, r3
 8004664:	8a7b      	ldrh	r3, [r7, #18]
 8004666:	4413      	add	r3, r2
 8004668:	827b      	strh	r3, [r7, #18]
		front_right_total += Measure_Dist(DIST_FR);
 800466a:	2003      	movs	r0, #3
 800466c:	f7ff fef2 	bl	8004454 <Measure_Dist>
 8004670:	4603      	mov	r3, r0
 8004672:	461a      	mov	r2, r3
 8004674:	8a3b      	ldrh	r3, [r7, #16]
 8004676:	4413      	add	r3, r2
 8004678:	823b      	strh	r3, [r7, #16]
	for (uint8_t i = 0; i < NUM_POLLS; ++i) {
 800467a:	7bfb      	ldrb	r3, [r7, #15]
 800467c:	3301      	adds	r3, #1
 800467e:	73fb      	strb	r3, [r7, #15]
 8004680:	7bfa      	ldrb	r2, [r7, #15]
 8004682:	7bbb      	ldrb	r3, [r7, #14]
 8004684:	429a      	cmp	r2, r3
 8004686:	d3d8      	bcc.n	800463a <Poll_Sensors+0x22>
	}

	mouse_state->raw.front_left =  front_left_total / NUM_POLLS;
 8004688:	8afa      	ldrh	r2, [r7, #22]
 800468a:	7bbb      	ldrb	r3, [r7, #14]
 800468c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004690:	b29a      	uxth	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	811a      	strh	r2, [r3, #8]
	mouse_state->raw.left = left_total / NUM_POLLS;
 8004696:	8aba      	ldrh	r2, [r7, #20]
 8004698:	7bbb      	ldrb	r3, [r7, #14]
 800469a:	fb92 f3f3 	sdiv	r3, r2, r3
 800469e:	b29a      	uxth	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	815a      	strh	r2, [r3, #10]
	mouse_state->raw.right = right_total / NUM_POLLS;
 80046a4:	8a7a      	ldrh	r2, [r7, #18]
 80046a6:	7bbb      	ldrb	r3, [r7, #14]
 80046a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	819a      	strh	r2, [r3, #12]
	mouse_state->raw.front_right =  front_right_total / NUM_POLLS;
 80046b2:	8a3a      	ldrh	r2, [r7, #16]
 80046b4:	7bbb      	ldrb	r3, [r7, #14]
 80046b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	81da      	strh	r2, [r3, #14]

	Calibrate_Readings(mouse_state);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff ff21 	bl	8004508 <Calibrate_Readings>
}
 80046c6:	bf00      	nop
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <Wall_Front>:

bool Wall_Front() {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
	uint16_t front_avg = (mouse_state.cal.front_left + mouse_state.cal.front_right) / 2;
 80046d6:	4b14      	ldr	r3, [pc, #80]	@ (8004728 <Wall_Front+0x58>)
 80046d8:	8a1b      	ldrh	r3, [r3, #16]
 80046da:	461a      	mov	r2, r3
 80046dc:	4b12      	ldr	r3, [pc, #72]	@ (8004728 <Wall_Front+0x58>)
 80046de:	8adb      	ldrh	r3, [r3, #22]
 80046e0:	4413      	add	r3, r2
 80046e2:	0fda      	lsrs	r2, r3, #31
 80046e4:	4413      	add	r3, r2
 80046e6:	105b      	asrs	r3, r3, #1
 80046e8:	80fb      	strh	r3, [r7, #6]
	if (front_avg > wall_front_thresh) {
 80046ea:	4b10      	ldr	r3, [pc, #64]	@ (800472c <Wall_Front+0x5c>)
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	88fa      	ldrh	r2, [r7, #6]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d909      	bls.n	8004708 <Wall_Front+0x38>
		wall_front = true;
 80046f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004730 <Wall_Front+0x60>)
 80046f6:	2201      	movs	r2, #1
 80046f8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 80046fa:	2200      	movs	r2, #0
 80046fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004700:	480c      	ldr	r0, [pc, #48]	@ (8004734 <Wall_Front+0x64>)
 8004702:	f001 fdcb 	bl	800629c <HAL_GPIO_WritePin>
 8004706:	e008      	b.n	800471a <Wall_Front+0x4a>

	}
	else {
		wall_front = false;
 8004708:	4b09      	ldr	r3, [pc, #36]	@ (8004730 <Wall_Front+0x60>)
 800470a:	2200      	movs	r2, #0
 800470c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 800470e:	2201      	movs	r2, #1
 8004710:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004714:	4807      	ldr	r0, [pc, #28]	@ (8004734 <Wall_Front+0x64>)
 8004716:	f001 fdc1 	bl	800629c <HAL_GPIO_WritePin>
	}
	return wall_front;
 800471a:	4b05      	ldr	r3, [pc, #20]	@ (8004730 <Wall_Front+0x60>)
 800471c:	781b      	ldrb	r3, [r3, #0]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20000220 	.word	0x20000220
 800472c:	20000018 	.word	0x20000018
 8004730:	20000c7c 	.word	0x20000c7c
 8004734:	40010800 	.word	0x40010800

08004738 <Wall_Left>:

bool Wall_Left() {
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
	if (mouse_state.cal.left > wall_left_thresh) {
 800473c:	4b0e      	ldr	r3, [pc, #56]	@ (8004778 <Wall_Left+0x40>)
 800473e:	8a5a      	ldrh	r2, [r3, #18]
 8004740:	4b0e      	ldr	r3, [pc, #56]	@ (800477c <Wall_Left+0x44>)
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d909      	bls.n	800475c <Wall_Left+0x24>
		wall_left = true;
 8004748:	4b0d      	ldr	r3, [pc, #52]	@ (8004780 <Wall_Left+0x48>)
 800474a:	2201      	movs	r2, #1
 800474c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 800474e:	2200      	movs	r2, #0
 8004750:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004754:	480b      	ldr	r0, [pc, #44]	@ (8004784 <Wall_Left+0x4c>)
 8004756:	f001 fda1 	bl	800629c <HAL_GPIO_WritePin>
 800475a:	e008      	b.n	800476e <Wall_Left+0x36>
	}
	else {
		wall_left = false;
 800475c:	4b08      	ldr	r3, [pc, #32]	@ (8004780 <Wall_Left+0x48>)
 800475e:	2200      	movs	r2, #0
 8004760:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 8004762:	2201      	movs	r2, #1
 8004764:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004768:	4806      	ldr	r0, [pc, #24]	@ (8004784 <Wall_Left+0x4c>)
 800476a:	f001 fd97 	bl	800629c <HAL_GPIO_WritePin>
	}
	return wall_left;
 800476e:	4b04      	ldr	r3, [pc, #16]	@ (8004780 <Wall_Left+0x48>)
 8004770:	781b      	ldrb	r3, [r3, #0]
}
 8004772:	4618      	mov	r0, r3
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000220 	.word	0x20000220
 800477c:	2000001a 	.word	0x2000001a
 8004780:	20000c7d 	.word	0x20000c7d
 8004784:	40010800 	.word	0x40010800

08004788 <Wall_Right>:

bool Wall_Right() {
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
	if (mouse_state.cal.right > wall_right_thresh) {
 800478c:	4b0e      	ldr	r3, [pc, #56]	@ (80047c8 <Wall_Right+0x40>)
 800478e:	8a9a      	ldrh	r2, [r3, #20]
 8004790:	4b0e      	ldr	r3, [pc, #56]	@ (80047cc <Wall_Right+0x44>)
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d909      	bls.n	80047ac <Wall_Right+0x24>
		wall_right = true;
 8004798:	4b0d      	ldr	r3, [pc, #52]	@ (80047d0 <Wall_Right+0x48>)
 800479a:	2201      	movs	r2, #1
 800479c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 800479e:	2200      	movs	r2, #0
 80047a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80047a4:	480b      	ldr	r0, [pc, #44]	@ (80047d4 <Wall_Right+0x4c>)
 80047a6:	f001 fd79 	bl	800629c <HAL_GPIO_WritePin>
 80047aa:	e008      	b.n	80047be <Wall_Right+0x36>

	}
	else {
		wall_right = false;
 80047ac:	4b08      	ldr	r3, [pc, #32]	@ (80047d0 <Wall_Right+0x48>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 80047b2:	2201      	movs	r2, #1
 80047b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80047b8:	4806      	ldr	r0, [pc, #24]	@ (80047d4 <Wall_Right+0x4c>)
 80047ba:	f001 fd6f 	bl	800629c <HAL_GPIO_WritePin>
	}
	return wall_right;
 80047be:	4b04      	ldr	r3, [pc, #16]	@ (80047d0 <Wall_Right+0x48>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	20000220 	.word	0x20000220
 80047cc:	2000001c 	.word	0x2000001c
 80047d0:	20000c7e 	.word	0x20000c7e
 80047d4:	40010800 	.word	0x40010800

080047d8 <Calculate_Steering_Adjustment>:

void Calculate_Steering_Adjustment(int error) {
 80047d8:	b590      	push	{r4, r7, lr}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
	float adjustment = IR_KP * error + IR_KD * (error - previous_error);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7fc f9b3 	bl	8000b4c <__aeabi_i2f>
 80047e6:	4603      	mov	r3, r0
 80047e8:	4a28      	ldr	r2, [pc, #160]	@ (800488c <Calculate_Steering_Adjustment+0xb4>)
 80047ea:	4611      	mov	r1, r2
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fc fa01 	bl	8000bf4 <__aeabi_fmul>
 80047f2:	4603      	mov	r3, r0
 80047f4:	461c      	mov	r4, r3
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fc f9a8 	bl	8000b4c <__aeabi_i2f>
 80047fc:	4602      	mov	r2, r0
 80047fe:	4b24      	ldr	r3, [pc, #144]	@ (8004890 <Calculate_Steering_Adjustment+0xb8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f7fc f8eb 	bl	80009e0 <__aeabi_fsub>
 800480a:	4603      	mov	r3, r0
 800480c:	461a      	mov	r2, r3
 800480e:	4b21      	ldr	r3, [pc, #132]	@ (8004894 <Calculate_Steering_Adjustment+0xbc>)
 8004810:	4619      	mov	r1, r3
 8004812:	4610      	mov	r0, r2
 8004814:	f7fc f9ee 	bl	8000bf4 <__aeabi_fmul>
 8004818:	4603      	mov	r3, r0
 800481a:	4619      	mov	r1, r3
 800481c:	4620      	mov	r0, r4
 800481e:	f7fc f8e1 	bl	80009e4 <__addsf3>
 8004822:	4603      	mov	r3, r0
 8004824:	60fb      	str	r3, [r7, #12]

	adjustment = adjustment > STEERING_ADJUSTMENT_LIMIT ? STEERING_ADJUSTMENT_LIMIT: adjustment;
 8004826:	4b1c      	ldr	r3, [pc, #112]	@ (8004898 <Calculate_Steering_Adjustment+0xc0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4619      	mov	r1, r3
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f7fc fb9d 	bl	8000f6c <__aeabi_fcmpgt>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <Calculate_Steering_Adjustment+0x66>
 8004838:	4b17      	ldr	r3, [pc, #92]	@ (8004898 <Calculate_Steering_Adjustment+0xc0>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	e000      	b.n	8004840 <Calculate_Steering_Adjustment+0x68>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	60fb      	str	r3, [r7, #12]
	adjustment = adjustment < -STEERING_ADJUSTMENT_LIMIT ? -STEERING_ADJUSTMENT_LIMIT: adjustment;
 8004842:	4b15      	ldr	r3, [pc, #84]	@ (8004898 <Calculate_Steering_Adjustment+0xc0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800484a:	4619      	mov	r1, r3
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f7fc fb6f 	bl	8000f30 <__aeabi_fcmplt>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d004      	beq.n	8004862 <Calculate_Steering_Adjustment+0x8a>
 8004858:	4b0f      	ldr	r3, [pc, #60]	@ (8004898 <Calculate_Steering_Adjustment+0xc0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004860:	e000      	b.n	8004864 <Calculate_Steering_Adjustment+0x8c>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	60fb      	str	r3, [r7, #12]

	steering_adjustment = rotational_profile.state == COMPLETE || rotational_profile.state == IDLE ? adjustment : 0;
 8004866:	4b0d      	ldr	r3, [pc, #52]	@ (800489c <Calculate_Steering_Adjustment+0xc4>)
 8004868:	7d1b      	ldrb	r3, [r3, #20]
 800486a:	2b03      	cmp	r3, #3
 800486c:	d003      	beq.n	8004876 <Calculate_Steering_Adjustment+0x9e>
 800486e:	4b0b      	ldr	r3, [pc, #44]	@ (800489c <Calculate_Steering_Adjustment+0xc4>)
 8004870:	7d1b      	ldrb	r3, [r3, #20]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <Calculate_Steering_Adjustment+0xa2>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	e001      	b.n	800487e <Calculate_Steering_Adjustment+0xa6>
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	4a08      	ldr	r2, [pc, #32]	@ (80048a0 <Calculate_Steering_Adjustment+0xc8>)
 8004880:	6013      	str	r3, [r2, #0]
}
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	bd90      	pop	{r4, r7, pc}
 800488a:	bf00      	nop
 800488c:	3c03126f 	.word	0x3c03126f
 8004890:	20000c80 	.word	0x20000c80
 8004894:	38d1b717 	.word	0x38d1b717
 8004898:	2000000c 	.word	0x2000000c
 800489c:	20000bac 	.word	0x20000bac
 80048a0:	20000c88 	.word	0x20000c88

080048a4 <Calculate_Error>:

void Calculate_Error() {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
	int error = 0;
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]
	int right_error = 100 - mouse_state.cal.right;
 80048ae:	4b20      	ldr	r3, [pc, #128]	@ (8004930 <Calculate_Error+0x8c>)
 80048b0:	8a9b      	ldrh	r3, [r3, #20]
 80048b2:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80048b6:	60bb      	str	r3, [r7, #8]
	int left_error = 100 - mouse_state.cal.left;
 80048b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004930 <Calculate_Error+0x8c>)
 80048ba:	8a5b      	ldrh	r3, [r3, #18]
 80048bc:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80048c0:	607b      	str	r3, [r7, #4]

	if (adjust_steering && ((mouse_state.cal.front_left + mouse_state.cal.front_left) / 2) < FRONT_WALL_LIMIT) {
 80048c2:	4b1c      	ldr	r3, [pc, #112]	@ (8004934 <Calculate_Error+0x90>)
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d024      	beq.n	8004914 <Calculate_Error+0x70>
 80048ca:	4b19      	ldr	r3, [pc, #100]	@ (8004930 <Calculate_Error+0x8c>)
 80048cc:	8a1b      	ldrh	r3, [r3, #16]
 80048ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d21e      	bcs.n	8004914 <Calculate_Error+0x70>
		if (wall_left && wall_right) {
 80048d6:	4b18      	ldr	r3, [pc, #96]	@ (8004938 <Calculate_Error+0x94>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d008      	beq.n	80048f0 <Calculate_Error+0x4c>
 80048de:	4b17      	ldr	r3, [pc, #92]	@ (800493c <Calculate_Error+0x98>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d004      	beq.n	80048f0 <Calculate_Error+0x4c>
			error = right_error - left_error;
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	e011      	b.n	8004914 <Calculate_Error+0x70>
		}
		else if (wall_left) {
 80048f0:	4b11      	ldr	r3, [pc, #68]	@ (8004938 <Calculate_Error+0x94>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d006      	beq.n	8004906 <Calculate_Error+0x62>
			error = -2 * left_error;
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	07db      	lsls	r3, r3, #31
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	e006      	b.n	8004914 <Calculate_Error+0x70>
		}
		else if (wall_right) {
 8004906:	4b0d      	ldr	r3, [pc, #52]	@ (800493c <Calculate_Error+0x98>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <Calculate_Error+0x70>
			error = 2 * right_error;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	60fb      	str	r3, [r7, #12]
		}
	}

	Calculate_Steering_Adjustment(error);
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f7ff ff5f 	bl	80047d8 <Calculate_Steering_Adjustment>

	previous_error = error;
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f7fc f916 	bl	8000b4c <__aeabi_i2f>
 8004920:	4603      	mov	r3, r0
 8004922:	4a07      	ldr	r2, [pc, #28]	@ (8004940 <Calculate_Error+0x9c>)
 8004924:	6013      	str	r3, [r2, #0]
}
 8004926:	bf00      	nop
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20000220 	.word	0x20000220
 8004934:	20000c84 	.word	0x20000c84
 8004938:	20000c7d 	.word	0x20000c7d
 800493c:	20000c7e 	.word	0x20000c7e
 8004940:	20000c80 	.word	0x20000c80

08004944 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800494a:	4b15      	ldr	r3, [pc, #84]	@ (80049a0 <HAL_MspInit+0x5c>)
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	4a14      	ldr	r2, [pc, #80]	@ (80049a0 <HAL_MspInit+0x5c>)
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	6193      	str	r3, [r2, #24]
 8004956:	4b12      	ldr	r3, [pc, #72]	@ (80049a0 <HAL_MspInit+0x5c>)
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	60bb      	str	r3, [r7, #8]
 8004960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004962:	4b0f      	ldr	r3, [pc, #60]	@ (80049a0 <HAL_MspInit+0x5c>)
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	4a0e      	ldr	r2, [pc, #56]	@ (80049a0 <HAL_MspInit+0x5c>)
 8004968:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800496c:	61d3      	str	r3, [r2, #28]
 800496e:	4b0c      	ldr	r3, [pc, #48]	@ (80049a0 <HAL_MspInit+0x5c>)
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004976:	607b      	str	r3, [r7, #4]
 8004978:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800497a:	4b0a      	ldr	r3, [pc, #40]	@ (80049a4 <HAL_MspInit+0x60>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	4a04      	ldr	r2, [pc, #16]	@ (80049a4 <HAL_MspInit+0x60>)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004996:	bf00      	nop
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr
 80049a0:	40021000 	.word	0x40021000
 80049a4:	40010000 	.word	0x40010000

080049a8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08c      	sub	sp, #48	@ 0x30
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049b0:	f107 0320 	add.w	r3, r7, #32
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	605a      	str	r2, [r3, #4]
 80049ba:	609a      	str	r2, [r3, #8]
 80049bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a33      	ldr	r2, [pc, #204]	@ (8004a90 <HAL_ADC_MspInit+0xe8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d138      	bne.n	8004a3a <HAL_ADC_MspInit+0x92>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80049c8:	4b32      	ldr	r3, [pc, #200]	@ (8004a94 <HAL_ADC_MspInit+0xec>)
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	4a31      	ldr	r2, [pc, #196]	@ (8004a94 <HAL_ADC_MspInit+0xec>)
 80049ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049d2:	6193      	str	r3, [r2, #24]
 80049d4:	4b2f      	ldr	r3, [pc, #188]	@ (8004a94 <HAL_ADC_MspInit+0xec>)
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049dc:	61fb      	str	r3, [r7, #28]
 80049de:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049e0:	4b2c      	ldr	r3, [pc, #176]	@ (8004a94 <HAL_ADC_MspInit+0xec>)
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004a94 <HAL_ADC_MspInit+0xec>)
 80049e6:	f043 0304 	orr.w	r3, r3, #4
 80049ea:	6193      	str	r3, [r2, #24]
 80049ec:	4b29      	ldr	r3, [pc, #164]	@ (8004a94 <HAL_ADC_MspInit+0xec>)
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049f8:	4b26      	ldr	r3, [pc, #152]	@ (8004a94 <HAL_ADC_MspInit+0xec>)
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	4a25      	ldr	r2, [pc, #148]	@ (8004a94 <HAL_ADC_MspInit+0xec>)
 80049fe:	f043 0308 	orr.w	r3, r3, #8
 8004a02:	6193      	str	r3, [r2, #24]
 8004a04:	4b23      	ldr	r3, [pc, #140]	@ (8004a94 <HAL_ADC_MspInit+0xec>)
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	617b      	str	r3, [r7, #20]
 8004a0e:	697b      	ldr	r3, [r7, #20]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RECIV_FL_Pin|RECIV_L_Pin;
 8004a10:	2330      	movs	r3, #48	@ 0x30
 8004a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a14:	2303      	movs	r3, #3
 8004a16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a18:	f107 0320 	add.w	r3, r7, #32
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	481e      	ldr	r0, [pc, #120]	@ (8004a98 <HAL_ADC_MspInit+0xf0>)
 8004a20:	f001 fab8 	bl	8005f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RECIV_R_Pin|RECIV_FR_Pin;
 8004a24:	2303      	movs	r3, #3
 8004a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a2c:	f107 0320 	add.w	r3, r7, #32
 8004a30:	4619      	mov	r1, r3
 8004a32:	481a      	ldr	r0, [pc, #104]	@ (8004a9c <HAL_ADC_MspInit+0xf4>)
 8004a34:	f001 faae 	bl	8005f94 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004a38:	e026      	b.n	8004a88 <HAL_ADC_MspInit+0xe0>
  else if(hadc->Instance==ADC2)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a18      	ldr	r2, [pc, #96]	@ (8004aa0 <HAL_ADC_MspInit+0xf8>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d121      	bne.n	8004a88 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004a44:	4b13      	ldr	r3, [pc, #76]	@ (8004a94 <HAL_ADC_MspInit+0xec>)
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	4a12      	ldr	r2, [pc, #72]	@ (8004a94 <HAL_ADC_MspInit+0xec>)
 8004a4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a4e:	6193      	str	r3, [r2, #24]
 8004a50:	4b10      	ldr	r3, [pc, #64]	@ (8004a94 <HAL_ADC_MspInit+0xec>)
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a94 <HAL_ADC_MspInit+0xec>)
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	4a0c      	ldr	r2, [pc, #48]	@ (8004a94 <HAL_ADC_MspInit+0xec>)
 8004a62:	f043 0304 	orr.w	r3, r3, #4
 8004a66:	6193      	str	r3, [r2, #24]
 8004a68:	4b0a      	ldr	r3, [pc, #40]	@ (8004a94 <HAL_ADC_MspInit+0xec>)
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_METER_Pin;
 8004a74:	2302      	movs	r3, #2
 8004a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(V_METER_GPIO_Port, &GPIO_InitStruct);
 8004a7c:	f107 0320 	add.w	r3, r7, #32
 8004a80:	4619      	mov	r1, r3
 8004a82:	4805      	ldr	r0, [pc, #20]	@ (8004a98 <HAL_ADC_MspInit+0xf0>)
 8004a84:	f001 fa86 	bl	8005f94 <HAL_GPIO_Init>
}
 8004a88:	bf00      	nop
 8004a8a:	3730      	adds	r7, #48	@ 0x30
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40012400 	.word	0x40012400
 8004a94:	40021000 	.word	0x40021000
 8004a98:	40010800 	.word	0x40010800
 8004a9c:	40010c00 	.word	0x40010c00
 8004aa0:	40012800 	.word	0x40012800

08004aa4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ab4:	d10b      	bne.n	8004ace <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ab6:	4b08      	ldr	r3, [pc, #32]	@ (8004ad8 <HAL_TIM_Base_MspInit+0x34>)
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	4a07      	ldr	r2, [pc, #28]	@ (8004ad8 <HAL_TIM_Base_MspInit+0x34>)
 8004abc:	f043 0301 	orr.w	r3, r3, #1
 8004ac0:	61d3      	str	r3, [r2, #28]
 8004ac2:	4b05      	ldr	r3, [pc, #20]	@ (8004ad8 <HAL_TIM_Base_MspInit+0x34>)
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8004ace:	bf00      	nop
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bc80      	pop	{r7}
 8004ad6:	4770      	bx	lr
 8004ad8:	40021000 	.word	0x40021000

08004adc <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08a      	sub	sp, #40	@ 0x28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae4:	f107 0318 	add.w	r3, r7, #24
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	609a      	str	r2, [r3, #8]
 8004af0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a32      	ldr	r2, [pc, #200]	@ (8004bc0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d12c      	bne.n	8004b56 <HAL_TIM_Encoder_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004afc:	4b31      	ldr	r3, [pc, #196]	@ (8004bc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	4a30      	ldr	r2, [pc, #192]	@ (8004bc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b02:	f043 0302 	orr.w	r3, r3, #2
 8004b06:	61d3      	str	r3, [r2, #28]
 8004b08:	4b2e      	ldr	r3, [pc, #184]	@ (8004bc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b14:	4b2b      	ldr	r3, [pc, #172]	@ (8004bc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	4a2a      	ldr	r2, [pc, #168]	@ (8004bc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b1a:	f043 0304 	orr.w	r3, r3, #4
 8004b1e:	6193      	str	r3, [r2, #24]
 8004b20:	4b28      	ldr	r3, [pc, #160]	@ (8004bc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	613b      	str	r3, [r7, #16]
 8004b2a:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ML_ENC_A_Pin|ML_ENC_B_Pin;
 8004b2c:	23c0      	movs	r3, #192	@ 0xc0
 8004b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b30:	2300      	movs	r3, #0
 8004b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b34:	2300      	movs	r3, #0
 8004b36:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b38:	f107 0318 	add.w	r3, r7, #24
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4822      	ldr	r0, [pc, #136]	@ (8004bc8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004b40:	f001 fa28 	bl	8005f94 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004b44:	2200      	movs	r2, #0
 8004b46:	2100      	movs	r1, #0
 8004b48:	201d      	movs	r0, #29
 8004b4a:	f000 ff3a 	bl	80059c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004b4e:	201d      	movs	r0, #29
 8004b50:	f000 ff53 	bl	80059fa <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004b54:	e030      	b.n	8004bb8 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004bcc <HAL_TIM_Encoder_MspInit+0xf0>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d12b      	bne.n	8004bb8 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004b60:	4b18      	ldr	r3, [pc, #96]	@ (8004bc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	4a17      	ldr	r2, [pc, #92]	@ (8004bc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b66:	f043 0304 	orr.w	r3, r3, #4
 8004b6a:	61d3      	str	r3, [r2, #28]
 8004b6c:	4b15      	ldr	r3, [pc, #84]	@ (8004bc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b78:	4b12      	ldr	r3, [pc, #72]	@ (8004bc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	4a11      	ldr	r2, [pc, #68]	@ (8004bc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b7e:	f043 0308 	orr.w	r3, r3, #8
 8004b82:	6193      	str	r3, [r2, #24]
 8004b84:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MR_ENC_B_Pin|MR_ENC_A_Pin;
 8004b90:	23c0      	movs	r3, #192	@ 0xc0
 8004b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b9c:	f107 0318 	add.w	r3, r7, #24
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	480b      	ldr	r0, [pc, #44]	@ (8004bd0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004ba4:	f001 f9f6 	bl	8005f94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2100      	movs	r1, #0
 8004bac:	201e      	movs	r0, #30
 8004bae:	f000 ff08 	bl	80059c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004bb2:	201e      	movs	r0, #30
 8004bb4:	f000 ff21 	bl	80059fa <HAL_NVIC_EnableIRQ>
}
 8004bb8:	bf00      	nop
 8004bba:	3728      	adds	r7, #40	@ 0x28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40000400 	.word	0x40000400
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	40010800 	.word	0x40010800
 8004bcc:	40000800 	.word	0x40000800
 8004bd0:	40010c00 	.word	0x40010c00

08004bd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bdc:	f107 0310 	add.w	r3, r7, #16
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	605a      	str	r2, [r3, #4]
 8004be6:	609a      	str	r2, [r3, #8]
 8004be8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bf2:	d117      	bne.n	8004c24 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8004c2c <HAL_TIM_MspPostInit+0x58>)
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	4a0c      	ldr	r2, [pc, #48]	@ (8004c2c <HAL_TIM_MspPostInit+0x58>)
 8004bfa:	f043 0304 	orr.w	r3, r3, #4
 8004bfe:	6193      	str	r3, [r2, #24]
 8004c00:	4b0a      	ldr	r3, [pc, #40]	@ (8004c2c <HAL_TIM_MspPostInit+0x58>)
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ML_PWM_Pin|MR_PWM_Pin;
 8004c0c:	230c      	movs	r3, #12
 8004c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c10:	2302      	movs	r3, #2
 8004c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c14:	2302      	movs	r3, #2
 8004c16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c18:	f107 0310 	add.w	r3, r7, #16
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4804      	ldr	r0, [pc, #16]	@ (8004c30 <HAL_TIM_MspPostInit+0x5c>)
 8004c20:	f001 f9b8 	bl	8005f94 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004c24:	bf00      	nop
 8004c26:	3720      	adds	r7, #32
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	40010800 	.word	0x40010800

08004c34 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c3c:	f107 0310 	add.w	r3, r7, #16
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	605a      	str	r2, [r3, #4]
 8004c46:	609a      	str	r2, [r3, #8]
 8004c48:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a20      	ldr	r2, [pc, #128]	@ (8004cd0 <HAL_UART_MspInit+0x9c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d139      	bne.n	8004cc8 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c54:	4b1f      	ldr	r3, [pc, #124]	@ (8004cd4 <HAL_UART_MspInit+0xa0>)
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	4a1e      	ldr	r2, [pc, #120]	@ (8004cd4 <HAL_UART_MspInit+0xa0>)
 8004c5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c5e:	6193      	str	r3, [r2, #24]
 8004c60:	4b1c      	ldr	r3, [pc, #112]	@ (8004cd4 <HAL_UART_MspInit+0xa0>)
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c6c:	4b19      	ldr	r3, [pc, #100]	@ (8004cd4 <HAL_UART_MspInit+0xa0>)
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	4a18      	ldr	r2, [pc, #96]	@ (8004cd4 <HAL_UART_MspInit+0xa0>)
 8004c72:	f043 0304 	orr.w	r3, r3, #4
 8004c76:	6193      	str	r3, [r2, #24]
 8004c78:	4b16      	ldr	r3, [pc, #88]	@ (8004cd4 <HAL_UART_MspInit+0xa0>)
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	60bb      	str	r3, [r7, #8]
 8004c82:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004c84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c92:	f107 0310 	add.w	r3, r7, #16
 8004c96:	4619      	mov	r1, r3
 8004c98:	480f      	ldr	r0, [pc, #60]	@ (8004cd8 <HAL_UART_MspInit+0xa4>)
 8004c9a:	f001 f97b 	bl	8005f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004c9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cac:	f107 0310 	add.w	r3, r7, #16
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4809      	ldr	r0, [pc, #36]	@ (8004cd8 <HAL_UART_MspInit+0xa4>)
 8004cb4:	f001 f96e 	bl	8005f94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004cb8:	2200      	movs	r2, #0
 8004cba:	2100      	movs	r1, #0
 8004cbc:	2025      	movs	r0, #37	@ 0x25
 8004cbe:	f000 fe80 	bl	80059c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004cc2:	2025      	movs	r0, #37	@ 0x25
 8004cc4:	f000 fe99 	bl	80059fa <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8004cc8:	bf00      	nop
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40013800 	.word	0x40013800
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	40010800 	.word	0x40010800

08004cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004ce0:	bf00      	nop
 8004ce2:	e7fd      	b.n	8004ce0 <NMI_Handler+0x4>

08004ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ce8:	bf00      	nop
 8004cea:	e7fd      	b.n	8004ce8 <HardFault_Handler+0x4>

08004cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004cf0:	bf00      	nop
 8004cf2:	e7fd      	b.n	8004cf0 <MemManage_Handler+0x4>

08004cf4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cf8:	bf00      	nop
 8004cfa:	e7fd      	b.n	8004cf8 <BusFault_Handler+0x4>

08004cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d00:	bf00      	nop
 8004d02:	e7fd      	b.n	8004d00 <UsageFault_Handler+0x4>

08004d04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d08:	bf00      	nop
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr

08004d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d14:	bf00      	nop
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bc80      	pop	{r7}
 8004d1a:	4770      	bx	lr

08004d1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d20:	bf00      	nop
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr

08004d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d2c:	f000 f8da 	bl	8004ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Systick();
 8004d30:	f7ff fa50 	bl	80041d4 <Systick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004d34:	bf00      	nop
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ARM_SW1_Pin);
 8004d3c:	2010      	movs	r0, #16
 8004d3e:	f001 fadf 	bl	8006300 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004d42:	bf00      	nop
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004d4c:	4802      	ldr	r0, [pc, #8]	@ (8004d58 <TIM3_IRQHandler+0x10>)
 8004d4e:	f002 fb05 	bl	800735c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004d52:	bf00      	nop
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20000144 	.word	0x20000144

08004d5c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004d60:	4802      	ldr	r0, [pc, #8]	@ (8004d6c <TIM4_IRQHandler+0x10>)
 8004d62:	f002 fafb 	bl	800735c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004d66:	bf00      	nop
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	2000018c 	.word	0x2000018c

08004d70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004d74:	4802      	ldr	r0, [pc, #8]	@ (8004d80 <USART1_IRQHandler+0x10>)
 8004d76:	f003 f959 	bl	800802c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004d7a:	bf00      	nop
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	200001d4 	.word	0x200001d4

08004d84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RACE_SW2_Pin);
 8004d88:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004d8c:	f001 fab8 	bl	8006300 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004d90:	bf00      	nop
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d9c:	4a14      	ldr	r2, [pc, #80]	@ (8004df0 <_sbrk+0x5c>)
 8004d9e:	4b15      	ldr	r3, [pc, #84]	@ (8004df4 <_sbrk+0x60>)
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004da8:	4b13      	ldr	r3, [pc, #76]	@ (8004df8 <_sbrk+0x64>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004db0:	4b11      	ldr	r3, [pc, #68]	@ (8004df8 <_sbrk+0x64>)
 8004db2:	4a12      	ldr	r2, [pc, #72]	@ (8004dfc <_sbrk+0x68>)
 8004db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004db6:	4b10      	ldr	r3, [pc, #64]	@ (8004df8 <_sbrk+0x64>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d207      	bcs.n	8004dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004dc4:	f003 ff1a 	bl	8008bfc <__errno>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	220c      	movs	r2, #12
 8004dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004dce:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd2:	e009      	b.n	8004de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004dd4:	4b08      	ldr	r3, [pc, #32]	@ (8004df8 <_sbrk+0x64>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004dda:	4b07      	ldr	r3, [pc, #28]	@ (8004df8 <_sbrk+0x64>)
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4413      	add	r3, r2
 8004de2:	4a05      	ldr	r2, [pc, #20]	@ (8004df8 <_sbrk+0x64>)
 8004de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004de6:	68fb      	ldr	r3, [r7, #12]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20005000 	.word	0x20005000
 8004df4:	00000400 	.word	0x00000400
 8004df8:	20000c8c 	.word	0x20000c8c
 8004dfc:	20000e00 	.word	0x20000e00

08004e00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e04:	bf00      	nop
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bc80      	pop	{r7}
 8004e0a:	4770      	bx	lr

08004e0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004e0c:	f7ff fff8 	bl	8004e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004e10:	480b      	ldr	r0, [pc, #44]	@ (8004e40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004e12:	490c      	ldr	r1, [pc, #48]	@ (8004e44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004e14:	4a0c      	ldr	r2, [pc, #48]	@ (8004e48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e18:	e002      	b.n	8004e20 <LoopCopyDataInit>

08004e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e1e:	3304      	adds	r3, #4

08004e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e24:	d3f9      	bcc.n	8004e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e26:	4a09      	ldr	r2, [pc, #36]	@ (8004e4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004e28:	4c09      	ldr	r4, [pc, #36]	@ (8004e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e2c:	e001      	b.n	8004e32 <LoopFillZerobss>

08004e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e30:	3204      	adds	r2, #4

08004e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e34:	d3fb      	bcc.n	8004e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e36:	f003 fee7 	bl	8008c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004e3a:	f7fc f8c1 	bl	8000fc0 <main>
  bx lr
 8004e3e:	4770      	bx	lr
  ldr r0, =_sdata
 8004e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e44:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8004e48:	08008d90 	.word	0x08008d90
  ldr r2, =_sbss
 8004e4c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8004e50:	20000e00 	.word	0x20000e00

08004e54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004e54:	e7fe      	b.n	8004e54 <ADC1_2_IRQHandler>
	...

08004e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e5c:	4b08      	ldr	r3, [pc, #32]	@ (8004e80 <HAL_Init+0x28>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a07      	ldr	r2, [pc, #28]	@ (8004e80 <HAL_Init+0x28>)
 8004e62:	f043 0310 	orr.w	r3, r3, #16
 8004e66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e68:	2003      	movs	r0, #3
 8004e6a:	f000 fd9f 	bl	80059ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e6e:	200e      	movs	r0, #14
 8004e70:	f000 f808 	bl	8004e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e74:	f7ff fd66 	bl	8004944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40022000 	.word	0x40022000

08004e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e8c:	4b12      	ldr	r3, [pc, #72]	@ (8004ed8 <HAL_InitTick+0x54>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	4b12      	ldr	r3, [pc, #72]	@ (8004edc <HAL_InitTick+0x58>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	4619      	mov	r1, r3
 8004e96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fdb7 	bl	8005a16 <HAL_SYSTICK_Config>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e00e      	b.n	8004ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b0f      	cmp	r3, #15
 8004eb6:	d80a      	bhi.n	8004ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004eb8:	2200      	movs	r2, #0
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec0:	f000 fd7f 	bl	80059c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ec4:	4a06      	ldr	r2, [pc, #24]	@ (8004ee0 <HAL_InitTick+0x5c>)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e000      	b.n	8004ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	20000020 	.word	0x20000020
 8004edc:	20000028 	.word	0x20000028
 8004ee0:	20000024 	.word	0x20000024

08004ee4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ee8:	4b05      	ldr	r3, [pc, #20]	@ (8004f00 <HAL_IncTick+0x1c>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	461a      	mov	r2, r3
 8004eee:	4b05      	ldr	r3, [pc, #20]	@ (8004f04 <HAL_IncTick+0x20>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	4a03      	ldr	r2, [pc, #12]	@ (8004f04 <HAL_IncTick+0x20>)
 8004ef6:	6013      	str	r3, [r2, #0]
}
 8004ef8:	bf00      	nop
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr
 8004f00:	20000028 	.word	0x20000028
 8004f04:	20000c90 	.word	0x20000c90

08004f08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8004f0c:	4b02      	ldr	r3, [pc, #8]	@ (8004f18 <HAL_GetTick+0x10>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bc80      	pop	{r7}
 8004f16:	4770      	bx	lr
 8004f18:	20000c90 	.word	0x20000c90

08004f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f24:	f7ff fff0 	bl	8004f08 <HAL_GetTick>
 8004f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f34:	d005      	beq.n	8004f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f36:	4b0a      	ldr	r3, [pc, #40]	@ (8004f60 <HAL_Delay+0x44>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f42:	bf00      	nop
 8004f44:	f7ff ffe0 	bl	8004f08 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d8f7      	bhi.n	8004f44 <HAL_Delay+0x28>
  {
  }
}
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	20000028 	.word	0x20000028

08004f64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e0be      	b.n	8005104 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d109      	bne.n	8004fa8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7ff fd00 	bl	80049a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 fbf1 	bl	8005790 <ADC_ConversionStop_Disable>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f040 8099 	bne.w	80050f2 <HAL_ADC_Init+0x18e>
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f040 8095 	bne.w	80050f2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fcc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004fd0:	f023 0302 	bic.w	r3, r3, #2
 8004fd4:	f043 0202 	orr.w	r2, r3, #2
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004fe4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	7b1b      	ldrb	r3, [r3, #12]
 8004fea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004fec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ffc:	d003      	beq.n	8005006 <HAL_ADC_Init+0xa2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d102      	bne.n	800500c <HAL_ADC_Init+0xa8>
 8005006:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800500a:	e000      	b.n	800500e <HAL_ADC_Init+0xaa>
 800500c:	2300      	movs	r3, #0
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	7d1b      	ldrb	r3, [r3, #20]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d119      	bne.n	8005050 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	7b1b      	ldrb	r3, [r3, #12]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d109      	bne.n	8005038 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	3b01      	subs	r3, #1
 800502a:	035a      	lsls	r2, r3, #13
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	e00b      	b.n	8005050 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503c:	f043 0220 	orr.w	r2, r3, #32
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005048:	f043 0201 	orr.w	r2, r3, #1
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	430a      	orrs	r2, r1
 8005062:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	4b28      	ldr	r3, [pc, #160]	@ (800510c <HAL_ADC_Init+0x1a8>)
 800506c:	4013      	ands	r3, r2
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6812      	ldr	r2, [r2, #0]
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	430b      	orrs	r3, r1
 8005076:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005080:	d003      	beq.n	800508a <HAL_ADC_Init+0x126>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d104      	bne.n	8005094 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	3b01      	subs	r3, #1
 8005090:	051b      	lsls	r3, r3, #20
 8005092:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689a      	ldr	r2, [r3, #8]
 80050ae:	4b18      	ldr	r3, [pc, #96]	@ (8005110 <HAL_ADC_Init+0x1ac>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d10b      	bne.n	80050d0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c2:	f023 0303 	bic.w	r3, r3, #3
 80050c6:	f043 0201 	orr.w	r2, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80050ce:	e018      	b.n	8005102 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d4:	f023 0312 	bic.w	r3, r3, #18
 80050d8:	f043 0210 	orr.w	r2, r3, #16
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e4:	f043 0201 	orr.w	r2, r3, #1
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80050f0:	e007      	b.n	8005102 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f6:	f043 0210 	orr.w	r2, r3, #16
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005102:	7dfb      	ldrb	r3, [r7, #23]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	ffe1f7fd 	.word	0xffe1f7fd
 8005110:	ff1f0efe 	.word	0xff1f0efe

08005114 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <HAL_ADC_Start+0x1a>
 800512a:	2302      	movs	r3, #2
 800512c:	e098      	b.n	8005260 <HAL_ADC_Start+0x14c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 fad0 	bl	80056dc <ADC_Enable>
 800513c:	4603      	mov	r3, r0
 800513e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	2b00      	cmp	r3, #0
 8005144:	f040 8087 	bne.w	8005256 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005150:	f023 0301 	bic.w	r3, r3, #1
 8005154:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a41      	ldr	r2, [pc, #260]	@ (8005268 <HAL_ADC_Start+0x154>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d105      	bne.n	8005172 <HAL_ADC_Start+0x5e>
 8005166:	4b41      	ldr	r3, [pc, #260]	@ (800526c <HAL_ADC_Start+0x158>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d115      	bne.n	800519e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005176:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005188:	2b00      	cmp	r3, #0
 800518a:	d026      	beq.n	80051da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005190:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005194:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800519c:	e01d      	b.n	80051da <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a2f      	ldr	r2, [pc, #188]	@ (800526c <HAL_ADC_Start+0x158>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d004      	beq.n	80051be <HAL_ADC_Start+0xaa>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a2b      	ldr	r2, [pc, #172]	@ (8005268 <HAL_ADC_Start+0x154>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d10d      	bne.n	80051da <HAL_ADC_Start+0xc6>
 80051be:	4b2b      	ldr	r3, [pc, #172]	@ (800526c <HAL_ADC_Start+0x158>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d007      	beq.n	80051da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80051d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d006      	beq.n	80051f4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ea:	f023 0206 	bic.w	r2, r3, #6
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051f2:	e002      	b.n	80051fa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f06f 0202 	mvn.w	r2, #2
 800520a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005216:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800521a:	d113      	bne.n	8005244 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005220:	4a11      	ldr	r2, [pc, #68]	@ (8005268 <HAL_ADC_Start+0x154>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d105      	bne.n	8005232 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005226:	4b11      	ldr	r3, [pc, #68]	@ (800526c <HAL_ADC_Start+0x158>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800522e:	2b00      	cmp	r3, #0
 8005230:	d108      	bne.n	8005244 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8005240:	609a      	str	r2, [r3, #8]
 8005242:	e00c      	b.n	800525e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005252:	609a      	str	r2, [r3, #8]
 8005254:	e003      	b.n	800525e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800525e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40012800 	.word	0x40012800
 800526c:	40012400 	.word	0x40012400

08005270 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005282:	2b01      	cmp	r3, #1
 8005284:	d101      	bne.n	800528a <HAL_ADC_Stop+0x1a>
 8005286:	2302      	movs	r3, #2
 8005288:	e01a      	b.n	80052c0 <HAL_ADC_Stop+0x50>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fa7c 	bl	8005790 <ADC_ConversionStop_Disable>
 8005298:	4603      	mov	r3, r0
 800529a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800529c:	7bfb      	ldrb	r3, [r7, #15]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d109      	bne.n	80052b6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80052aa:	f023 0301 	bic.w	r3, r3, #1
 80052ae:	f043 0201 	orr.w	r2, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80052be:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80052c8:	b590      	push	{r4, r7, lr}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80052de:	f7ff fe13 	bl	8004f08 <HAL_GetTick>
 80052e2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00b      	beq.n	800530a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f6:	f043 0220 	orr.w	r2, r3, #32
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e0d3      	b.n	80054b2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005314:	2b00      	cmp	r3, #0
 8005316:	d131      	bne.n	800537c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005322:	2b00      	cmp	r3, #0
 8005324:	d12a      	bne.n	800537c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005326:	e021      	b.n	800536c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532e:	d01d      	beq.n	800536c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d007      	beq.n	8005346 <HAL_ADC_PollForConversion+0x7e>
 8005336:	f7ff fde7 	bl	8004f08 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	429a      	cmp	r2, r3
 8005344:	d212      	bcs.n	800536c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10b      	bne.n	800536c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005358:	f043 0204 	orr.w	r2, r3, #4
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e0a2      	b.n	80054b2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0d6      	beq.n	8005328 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800537a:	e070      	b.n	800545e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800537c:	4b4f      	ldr	r3, [pc, #316]	@ (80054bc <HAL_ADC_PollForConversion+0x1f4>)
 800537e:	681c      	ldr	r4, [r3, #0]
 8005380:	2002      	movs	r0, #2
 8005382:	f001 fc9b 	bl	8006cbc <HAL_RCCEx_GetPeriphCLKFreq>
 8005386:	4603      	mov	r3, r0
 8005388:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6919      	ldr	r1, [r3, #16]
 8005392:	4b4b      	ldr	r3, [pc, #300]	@ (80054c0 <HAL_ADC_PollForConversion+0x1f8>)
 8005394:	400b      	ands	r3, r1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d118      	bne.n	80053cc <HAL_ADC_PollForConversion+0x104>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68d9      	ldr	r1, [r3, #12]
 80053a0:	4b48      	ldr	r3, [pc, #288]	@ (80054c4 <HAL_ADC_PollForConversion+0x1fc>)
 80053a2:	400b      	ands	r3, r1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d111      	bne.n	80053cc <HAL_ADC_PollForConversion+0x104>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6919      	ldr	r1, [r3, #16]
 80053ae:	4b46      	ldr	r3, [pc, #280]	@ (80054c8 <HAL_ADC_PollForConversion+0x200>)
 80053b0:	400b      	ands	r3, r1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d108      	bne.n	80053c8 <HAL_ADC_PollForConversion+0x100>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68d9      	ldr	r1, [r3, #12]
 80053bc:	4b43      	ldr	r3, [pc, #268]	@ (80054cc <HAL_ADC_PollForConversion+0x204>)
 80053be:	400b      	ands	r3, r1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_ADC_PollForConversion+0x100>
 80053c4:	2314      	movs	r3, #20
 80053c6:	e020      	b.n	800540a <HAL_ADC_PollForConversion+0x142>
 80053c8:	2329      	movs	r3, #41	@ 0x29
 80053ca:	e01e      	b.n	800540a <HAL_ADC_PollForConversion+0x142>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6919      	ldr	r1, [r3, #16]
 80053d2:	4b3d      	ldr	r3, [pc, #244]	@ (80054c8 <HAL_ADC_PollForConversion+0x200>)
 80053d4:	400b      	ands	r3, r1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <HAL_ADC_PollForConversion+0x120>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68d9      	ldr	r1, [r3, #12]
 80053e0:	4b3a      	ldr	r3, [pc, #232]	@ (80054cc <HAL_ADC_PollForConversion+0x204>)
 80053e2:	400b      	ands	r3, r1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00d      	beq.n	8005404 <HAL_ADC_PollForConversion+0x13c>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6919      	ldr	r1, [r3, #16]
 80053ee:	4b38      	ldr	r3, [pc, #224]	@ (80054d0 <HAL_ADC_PollForConversion+0x208>)
 80053f0:	400b      	ands	r3, r1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d108      	bne.n	8005408 <HAL_ADC_PollForConversion+0x140>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68d9      	ldr	r1, [r3, #12]
 80053fc:	4b34      	ldr	r3, [pc, #208]	@ (80054d0 <HAL_ADC_PollForConversion+0x208>)
 80053fe:	400b      	ands	r3, r1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <HAL_ADC_PollForConversion+0x140>
 8005404:	2354      	movs	r3, #84	@ 0x54
 8005406:	e000      	b.n	800540a <HAL_ADC_PollForConversion+0x142>
 8005408:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800540a:	fb02 f303 	mul.w	r3, r2, r3
 800540e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005410:	e021      	b.n	8005456 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005418:	d01a      	beq.n	8005450 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d007      	beq.n	8005430 <HAL_ADC_PollForConversion+0x168>
 8005420:	f7ff fd72 	bl	8004f08 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d20f      	bcs.n	8005450 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	429a      	cmp	r2, r3
 8005436:	d90b      	bls.n	8005450 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543c:	f043 0204 	orr.w	r2, r3, #4
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e030      	b.n	80054b2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3301      	adds	r3, #1
 8005454:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	429a      	cmp	r2, r3
 800545c:	d8d9      	bhi.n	8005412 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f06f 0212 	mvn.w	r2, #18
 8005466:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800547e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8005482:	d115      	bne.n	80054b0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005488:	2b00      	cmp	r3, #0
 800548a:	d111      	bne.n	80054b0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005490:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d105      	bne.n	80054b0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a8:	f043 0201 	orr.w	r2, r3, #1
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	371c      	adds	r7, #28
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd90      	pop	{r4, r7, pc}
 80054ba:	bf00      	nop
 80054bc:	20000020 	.word	0x20000020
 80054c0:	24924924 	.word	0x24924924
 80054c4:	00924924 	.word	0x00924924
 80054c8:	12492492 	.word	0x12492492
 80054cc:	00492492 	.word	0x00492492
 80054d0:	00249249 	.word	0x00249249

080054d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bc80      	pop	{r7}
 80054ea:	4770      	bx	lr

080054ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_ADC_ConfigChannel+0x20>
 8005508:	2302      	movs	r3, #2
 800550a:	e0dc      	b.n	80056c6 <HAL_ADC_ConfigChannel+0x1da>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2b06      	cmp	r3, #6
 800551a:	d81c      	bhi.n	8005556 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	3b05      	subs	r3, #5
 800552e:	221f      	movs	r2, #31
 8005530:	fa02 f303 	lsl.w	r3, r2, r3
 8005534:	43db      	mvns	r3, r3
 8005536:	4019      	ands	r1, r3
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	6818      	ldr	r0, [r3, #0]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	3b05      	subs	r3, #5
 8005548:	fa00 f203 	lsl.w	r2, r0, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	635a      	str	r2, [r3, #52]	@ 0x34
 8005554:	e03c      	b.n	80055d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b0c      	cmp	r3, #12
 800555c:	d81c      	bhi.n	8005598 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	3b23      	subs	r3, #35	@ 0x23
 8005570:	221f      	movs	r2, #31
 8005572:	fa02 f303 	lsl.w	r3, r2, r3
 8005576:	43db      	mvns	r3, r3
 8005578:	4019      	ands	r1, r3
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	3b23      	subs	r3, #35	@ 0x23
 800558a:	fa00 f203 	lsl.w	r2, r0, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	631a      	str	r2, [r3, #48]	@ 0x30
 8005596:	e01b      	b.n	80055d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	4613      	mov	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	3b41      	subs	r3, #65	@ 0x41
 80055aa:	221f      	movs	r2, #31
 80055ac:	fa02 f303 	lsl.w	r3, r2, r3
 80055b0:	43db      	mvns	r3, r3
 80055b2:	4019      	ands	r1, r3
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	6818      	ldr	r0, [r3, #0]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	4613      	mov	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	3b41      	subs	r3, #65	@ 0x41
 80055c4:	fa00 f203 	lsl.w	r2, r0, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b09      	cmp	r3, #9
 80055d6:	d91c      	bls.n	8005612 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68d9      	ldr	r1, [r3, #12]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	4613      	mov	r3, r2
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	4413      	add	r3, r2
 80055e8:	3b1e      	subs	r3, #30
 80055ea:	2207      	movs	r2, #7
 80055ec:	fa02 f303 	lsl.w	r3, r2, r3
 80055f0:	43db      	mvns	r3, r3
 80055f2:	4019      	ands	r1, r3
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	6898      	ldr	r0, [r3, #8]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	4613      	mov	r3, r2
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	4413      	add	r3, r2
 8005602:	3b1e      	subs	r3, #30
 8005604:	fa00 f203 	lsl.w	r2, r0, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	60da      	str	r2, [r3, #12]
 8005610:	e019      	b.n	8005646 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6919      	ldr	r1, [r3, #16]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	4613      	mov	r3, r2
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	4413      	add	r3, r2
 8005622:	2207      	movs	r2, #7
 8005624:	fa02 f303 	lsl.w	r3, r2, r3
 8005628:	43db      	mvns	r3, r3
 800562a:	4019      	ands	r1, r3
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	6898      	ldr	r0, [r3, #8]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	4613      	mov	r3, r2
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	4413      	add	r3, r2
 800563a:	fa00 f203 	lsl.w	r2, r0, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b10      	cmp	r3, #16
 800564c:	d003      	beq.n	8005656 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005652:	2b11      	cmp	r3, #17
 8005654:	d132      	bne.n	80056bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a1d      	ldr	r2, [pc, #116]	@ (80056d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d125      	bne.n	80056ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d126      	bne.n	80056bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800567c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b10      	cmp	r3, #16
 8005684:	d11a      	bne.n	80056bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005686:	4b13      	ldr	r3, [pc, #76]	@ (80056d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a13      	ldr	r2, [pc, #76]	@ (80056d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800568c:	fba2 2303 	umull	r2, r3, r2, r3
 8005690:	0c9a      	lsrs	r2, r3, #18
 8005692:	4613      	mov	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800569c:	e002      	b.n	80056a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1f9      	bne.n	800569e <HAL_ADC_ConfigChannel+0x1b2>
 80056aa:	e007      	b.n	80056bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b0:	f043 0220 	orr.w	r2, r3, #32
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bc80      	pop	{r7}
 80056ce:	4770      	bx	lr
 80056d0:	40012400 	.word	0x40012400
 80056d4:	20000020 	.word	0x20000020
 80056d8:	431bde83 	.word	0x431bde83

080056dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d040      	beq.n	800577c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f042 0201 	orr.w	r2, r2, #1
 8005708:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800570a:	4b1f      	ldr	r3, [pc, #124]	@ (8005788 <ADC_Enable+0xac>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a1f      	ldr	r2, [pc, #124]	@ (800578c <ADC_Enable+0xb0>)
 8005710:	fba2 2303 	umull	r2, r3, r2, r3
 8005714:	0c9b      	lsrs	r3, r3, #18
 8005716:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005718:	e002      	b.n	8005720 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	3b01      	subs	r3, #1
 800571e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1f9      	bne.n	800571a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005726:	f7ff fbef 	bl	8004f08 <HAL_GetTick>
 800572a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800572c:	e01f      	b.n	800576e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800572e:	f7ff fbeb 	bl	8004f08 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d918      	bls.n	800576e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b01      	cmp	r3, #1
 8005748:	d011      	beq.n	800576e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574e:	f043 0210 	orr.w	r2, r3, #16
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575a:	f043 0201 	orr.w	r2, r3, #1
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e007      	b.n	800577e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b01      	cmp	r3, #1
 800577a:	d1d8      	bne.n	800572e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20000020 	.word	0x20000020
 800578c:	431bde83 	.word	0x431bde83

08005790 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d12e      	bne.n	8005808 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0201 	bic.w	r2, r2, #1
 80057b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80057ba:	f7ff fba5 	bl	8004f08 <HAL_GetTick>
 80057be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80057c0:	e01b      	b.n	80057fa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80057c2:	f7ff fba1 	bl	8004f08 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d914      	bls.n	80057fa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d10d      	bne.n	80057fa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e2:	f043 0210 	orr.w	r2, r3, #16
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ee:	f043 0201 	orr.w	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e007      	b.n	800580a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b01      	cmp	r3, #1
 8005806:	d0dc      	beq.n	80057c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
	...

08005814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005824:	4b0c      	ldr	r3, [pc, #48]	@ (8005858 <__NVIC_SetPriorityGrouping+0x44>)
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005830:	4013      	ands	r3, r2
 8005832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800583c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005846:	4a04      	ldr	r2, [pc, #16]	@ (8005858 <__NVIC_SetPriorityGrouping+0x44>)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	60d3      	str	r3, [r2, #12]
}
 800584c:	bf00      	nop
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	bc80      	pop	{r7}
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	e000ed00 	.word	0xe000ed00

0800585c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005860:	4b04      	ldr	r3, [pc, #16]	@ (8005874 <__NVIC_GetPriorityGrouping+0x18>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	0a1b      	lsrs	r3, r3, #8
 8005866:	f003 0307 	and.w	r3, r3, #7
}
 800586a:	4618      	mov	r0, r3
 800586c:	46bd      	mov	sp, r7
 800586e:	bc80      	pop	{r7}
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	e000ed00 	.word	0xe000ed00

08005878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	4603      	mov	r3, r0
 8005880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005886:	2b00      	cmp	r3, #0
 8005888:	db0b      	blt.n	80058a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	f003 021f 	and.w	r2, r3, #31
 8005890:	4906      	ldr	r1, [pc, #24]	@ (80058ac <__NVIC_EnableIRQ+0x34>)
 8005892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	2001      	movs	r0, #1
 800589a:	fa00 f202 	lsl.w	r2, r0, r2
 800589e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bc80      	pop	{r7}
 80058aa:	4770      	bx	lr
 80058ac:	e000e100 	.word	0xe000e100

080058b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	6039      	str	r1, [r7, #0]
 80058ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	db0a      	blt.n	80058da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	490c      	ldr	r1, [pc, #48]	@ (80058fc <__NVIC_SetPriority+0x4c>)
 80058ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ce:	0112      	lsls	r2, r2, #4
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	440b      	add	r3, r1
 80058d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058d8:	e00a      	b.n	80058f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	4908      	ldr	r1, [pc, #32]	@ (8005900 <__NVIC_SetPriority+0x50>)
 80058e0:	79fb      	ldrb	r3, [r7, #7]
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	3b04      	subs	r3, #4
 80058e8:	0112      	lsls	r2, r2, #4
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	440b      	add	r3, r1
 80058ee:	761a      	strb	r2, [r3, #24]
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	e000e100 	.word	0xe000e100
 8005900:	e000ed00 	.word	0xe000ed00

08005904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005904:	b480      	push	{r7}
 8005906:	b089      	sub	sp, #36	@ 0x24
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	f1c3 0307 	rsb	r3, r3, #7
 800591e:	2b04      	cmp	r3, #4
 8005920:	bf28      	it	cs
 8005922:	2304      	movcs	r3, #4
 8005924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	3304      	adds	r3, #4
 800592a:	2b06      	cmp	r3, #6
 800592c:	d902      	bls.n	8005934 <NVIC_EncodePriority+0x30>
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	3b03      	subs	r3, #3
 8005932:	e000      	b.n	8005936 <NVIC_EncodePriority+0x32>
 8005934:	2300      	movs	r3, #0
 8005936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005938:	f04f 32ff 	mov.w	r2, #4294967295
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	fa02 f303 	lsl.w	r3, r2, r3
 8005942:	43da      	mvns	r2, r3
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	401a      	ands	r2, r3
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800594c:	f04f 31ff 	mov.w	r1, #4294967295
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	fa01 f303 	lsl.w	r3, r1, r3
 8005956:	43d9      	mvns	r1, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800595c:	4313      	orrs	r3, r2
         );
}
 800595e:	4618      	mov	r0, r3
 8005960:	3724      	adds	r7, #36	@ 0x24
 8005962:	46bd      	mov	sp, r7
 8005964:	bc80      	pop	{r7}
 8005966:	4770      	bx	lr

08005968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3b01      	subs	r3, #1
 8005974:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005978:	d301      	bcc.n	800597e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800597a:	2301      	movs	r3, #1
 800597c:	e00f      	b.n	800599e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800597e:	4a0a      	ldr	r2, [pc, #40]	@ (80059a8 <SysTick_Config+0x40>)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3b01      	subs	r3, #1
 8005984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005986:	210f      	movs	r1, #15
 8005988:	f04f 30ff 	mov.w	r0, #4294967295
 800598c:	f7ff ff90 	bl	80058b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005990:	4b05      	ldr	r3, [pc, #20]	@ (80059a8 <SysTick_Config+0x40>)
 8005992:	2200      	movs	r2, #0
 8005994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005996:	4b04      	ldr	r3, [pc, #16]	@ (80059a8 <SysTick_Config+0x40>)
 8005998:	2207      	movs	r2, #7
 800599a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	e000e010 	.word	0xe000e010

080059ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7ff ff2d 	bl	8005814 <__NVIC_SetPriorityGrouping>
}
 80059ba:	bf00      	nop
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b086      	sub	sp, #24
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	4603      	mov	r3, r0
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	607a      	str	r2, [r7, #4]
 80059ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059d4:	f7ff ff42 	bl	800585c <__NVIC_GetPriorityGrouping>
 80059d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	68b9      	ldr	r1, [r7, #8]
 80059de:	6978      	ldr	r0, [r7, #20]
 80059e0:	f7ff ff90 	bl	8005904 <NVIC_EncodePriority>
 80059e4:	4602      	mov	r2, r0
 80059e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059ea:	4611      	mov	r1, r2
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff ff5f 	bl	80058b0 <__NVIC_SetPriority>
}
 80059f2:	bf00      	nop
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b082      	sub	sp, #8
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	4603      	mov	r3, r0
 8005a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7ff ff35 	bl	8005878 <__NVIC_EnableIRQ>
}
 8005a0e:	bf00      	nop
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b082      	sub	sp, #8
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff ffa2 	bl	8005968 <SysTick_Config>
 8005a24:	4603      	mov	r3, r0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b085      	sub	sp, #20
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d008      	beq.n	8005a58 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2204      	movs	r2, #4
 8005a4a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e020      	b.n	8005a9a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 020e 	bic.w	r2, r2, #14
 8005a66:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0201 	bic.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a80:	2101      	movs	r1, #1
 8005a82:	fa01 f202 	lsl.w	r2, r1, r2
 8005a86:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bc80      	pop	{r7}
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d005      	beq.n	8005ac8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2204      	movs	r2, #4
 8005ac0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	73fb      	strb	r3, [r7, #15]
 8005ac6:	e051      	b.n	8005b6c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 020e 	bic.w	r2, r2, #14
 8005ad6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0201 	bic.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a22      	ldr	r2, [pc, #136]	@ (8005b78 <HAL_DMA_Abort_IT+0xd4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d029      	beq.n	8005b46 <HAL_DMA_Abort_IT+0xa2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a21      	ldr	r2, [pc, #132]	@ (8005b7c <HAL_DMA_Abort_IT+0xd8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d022      	beq.n	8005b42 <HAL_DMA_Abort_IT+0x9e>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a1f      	ldr	r2, [pc, #124]	@ (8005b80 <HAL_DMA_Abort_IT+0xdc>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d01a      	beq.n	8005b3c <HAL_DMA_Abort_IT+0x98>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8005b84 <HAL_DMA_Abort_IT+0xe0>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d012      	beq.n	8005b36 <HAL_DMA_Abort_IT+0x92>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a1c      	ldr	r2, [pc, #112]	@ (8005b88 <HAL_DMA_Abort_IT+0xe4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00a      	beq.n	8005b30 <HAL_DMA_Abort_IT+0x8c>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8005b8c <HAL_DMA_Abort_IT+0xe8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d102      	bne.n	8005b2a <HAL_DMA_Abort_IT+0x86>
 8005b24:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005b28:	e00e      	b.n	8005b48 <HAL_DMA_Abort_IT+0xa4>
 8005b2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b2e:	e00b      	b.n	8005b48 <HAL_DMA_Abort_IT+0xa4>
 8005b30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005b34:	e008      	b.n	8005b48 <HAL_DMA_Abort_IT+0xa4>
 8005b36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b3a:	e005      	b.n	8005b48 <HAL_DMA_Abort_IT+0xa4>
 8005b3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b40:	e002      	b.n	8005b48 <HAL_DMA_Abort_IT+0xa4>
 8005b42:	2310      	movs	r3, #16
 8005b44:	e000      	b.n	8005b48 <HAL_DMA_Abort_IT+0xa4>
 8005b46:	2301      	movs	r3, #1
 8005b48:	4a11      	ldr	r2, [pc, #68]	@ (8005b90 <HAL_DMA_Abort_IT+0xec>)
 8005b4a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	4798      	blx	r3
    } 
  }
  return status;
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	40020008 	.word	0x40020008
 8005b7c:	4002001c 	.word	0x4002001c
 8005b80:	40020030 	.word	0x40020030
 8005b84:	40020044 	.word	0x40020044
 8005b88:	40020058 	.word	0x40020058
 8005b8c:	4002006c 	.word	0x4002006c
 8005b90:	40020000 	.word	0x40020000

08005b94 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8005baa:	2300      	movs	r3, #0
 8005bac:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005bae:	4b2f      	ldr	r3, [pc, #188]	@ (8005c6c <HAL_FLASH_Program+0xd8>)
 8005bb0:	7e1b      	ldrb	r3, [r3, #24]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d101      	bne.n	8005bba <HAL_FLASH_Program+0x26>
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	e054      	b.n	8005c64 <HAL_FLASH_Program+0xd0>
 8005bba:	4b2c      	ldr	r3, [pc, #176]	@ (8005c6c <HAL_FLASH_Program+0xd8>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005bc0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005bc4:	f000 f8a8 	bl	8005d18 <FLASH_WaitForLastOperation>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d144      	bne.n	8005c5c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d102      	bne.n	8005bde <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	757b      	strb	r3, [r7, #21]
 8005bdc:	e007      	b.n	8005bee <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d102      	bne.n	8005bea <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005be4:	2302      	movs	r3, #2
 8005be6:	757b      	strb	r3, [r7, #21]
 8005be8:	e001      	b.n	8005bee <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8005bea:	2304      	movs	r3, #4
 8005bec:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8005bee:	2300      	movs	r3, #0
 8005bf0:	75bb      	strb	r3, [r7, #22]
 8005bf2:	e02d      	b.n	8005c50 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005bf4:	7dbb      	ldrb	r3, [r7, #22]
 8005bf6:	005a      	lsls	r2, r3, #1
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	eb02 0c03 	add.w	ip, r2, r3
 8005bfe:	7dbb      	ldrb	r3, [r7, #22]
 8005c00:	0119      	lsls	r1, r3, #4
 8005c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c06:	f1c1 0620 	rsb	r6, r1, #32
 8005c0a:	f1a1 0020 	sub.w	r0, r1, #32
 8005c0e:	fa22 f401 	lsr.w	r4, r2, r1
 8005c12:	fa03 f606 	lsl.w	r6, r3, r6
 8005c16:	4334      	orrs	r4, r6
 8005c18:	fa23 f000 	lsr.w	r0, r3, r0
 8005c1c:	4304      	orrs	r4, r0
 8005c1e:	fa23 f501 	lsr.w	r5, r3, r1
 8005c22:	b2a3      	uxth	r3, r4
 8005c24:	4619      	mov	r1, r3
 8005c26:	4660      	mov	r0, ip
 8005c28:	f000 f85a 	bl	8005ce0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005c2c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005c30:	f000 f872 	bl	8005d18 <FLASH_WaitForLastOperation>
 8005c34:	4603      	mov	r3, r0
 8005c36:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005c38:	4b0d      	ldr	r3, [pc, #52]	@ (8005c70 <HAL_FLASH_Program+0xdc>)
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8005c70 <HAL_FLASH_Program+0xdc>)
 8005c3e:	f023 0301 	bic.w	r3, r3, #1
 8005c42:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d107      	bne.n	8005c5a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8005c4a:	7dbb      	ldrb	r3, [r7, #22]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	75bb      	strb	r3, [r7, #22]
 8005c50:	7dba      	ldrb	r2, [r7, #22]
 8005c52:	7d7b      	ldrb	r3, [r7, #21]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d3cd      	bcc.n	8005bf4 <HAL_FLASH_Program+0x60>
 8005c58:	e000      	b.n	8005c5c <HAL_FLASH_Program+0xc8>
      {
        break;
 8005c5a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005c5c:	4b03      	ldr	r3, [pc, #12]	@ (8005c6c <HAL_FLASH_Program+0xd8>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	761a      	strb	r2, [r3, #24]

  return status;
 8005c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	371c      	adds	r7, #28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c6c:	20000c98 	.word	0x20000c98
 8005c70:	40022000 	.word	0x40022000

08005c74 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005cb4 <HAL_FLASH_Unlock+0x40>)
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00d      	beq.n	8005ca6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb4 <HAL_FLASH_Unlock+0x40>)
 8005c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8005cb8 <HAL_FLASH_Unlock+0x44>)
 8005c8e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005c90:	4b08      	ldr	r3, [pc, #32]	@ (8005cb4 <HAL_FLASH_Unlock+0x40>)
 8005c92:	4a0a      	ldr	r2, [pc, #40]	@ (8005cbc <HAL_FLASH_Unlock+0x48>)
 8005c94:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005c96:	4b07      	ldr	r3, [pc, #28]	@ (8005cb4 <HAL_FLASH_Unlock+0x40>)
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8005ca6:	79fb      	ldrb	r3, [r7, #7]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bc80      	pop	{r7}
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	40022000 	.word	0x40022000
 8005cb8:	45670123 	.word	0x45670123
 8005cbc:	cdef89ab 	.word	0xcdef89ab

08005cc0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005cc4:	4b05      	ldr	r3, [pc, #20]	@ (8005cdc <HAL_FLASH_Lock+0x1c>)
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	4a04      	ldr	r2, [pc, #16]	@ (8005cdc <HAL_FLASH_Lock+0x1c>)
 8005cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cce:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bc80      	pop	{r7}
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40022000 	.word	0x40022000

08005ce0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	460b      	mov	r3, r1
 8005cea:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005cec:	4b08      	ldr	r3, [pc, #32]	@ (8005d10 <FLASH_Program_HalfWord+0x30>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005cf2:	4b08      	ldr	r3, [pc, #32]	@ (8005d14 <FLASH_Program_HalfWord+0x34>)
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	4a07      	ldr	r2, [pc, #28]	@ (8005d14 <FLASH_Program_HalfWord+0x34>)
 8005cf8:	f043 0301 	orr.w	r3, r3, #1
 8005cfc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	887a      	ldrh	r2, [r7, #2]
 8005d02:	801a      	strh	r2, [r3, #0]
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bc80      	pop	{r7}
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	20000c98 	.word	0x20000c98
 8005d14:	40022000 	.word	0x40022000

08005d18 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005d20:	f7ff f8f2 	bl	8004f08 <HAL_GetTick>
 8005d24:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005d26:	e010      	b.n	8005d4a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2e:	d00c      	beq.n	8005d4a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d007      	beq.n	8005d46 <FLASH_WaitForLastOperation+0x2e>
 8005d36:	f7ff f8e7 	bl	8004f08 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d201      	bcs.n	8005d4a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e025      	b.n	8005d96 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005d4a:	4b15      	ldr	r3, [pc, #84]	@ (8005da0 <FLASH_WaitForLastOperation+0x88>)
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e8      	bne.n	8005d28 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005d56:	4b12      	ldr	r3, [pc, #72]	@ (8005da0 <FLASH_WaitForLastOperation+0x88>)
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f003 0320 	and.w	r3, r3, #32
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005d62:	4b0f      	ldr	r3, [pc, #60]	@ (8005da0 <FLASH_WaitForLastOperation+0x88>)
 8005d64:	2220      	movs	r2, #32
 8005d66:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005d68:	4b0d      	ldr	r3, [pc, #52]	@ (8005da0 <FLASH_WaitForLastOperation+0x88>)
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f003 0310 	and.w	r3, r3, #16
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10b      	bne.n	8005d8c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005d74:	4b0a      	ldr	r3, [pc, #40]	@ (8005da0 <FLASH_WaitForLastOperation+0x88>)
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d105      	bne.n	8005d8c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005d80:	4b07      	ldr	r3, [pc, #28]	@ (8005da0 <FLASH_WaitForLastOperation+0x88>)
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005d8c:	f000 f80a 	bl	8005da4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e000      	b.n	8005d96 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	40022000 	.word	0x40022000

08005da4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005dae:	4b23      	ldr	r3, [pc, #140]	@ (8005e3c <FLASH_SetErrorCode+0x98>)
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	f003 0310 	and.w	r3, r3, #16
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d009      	beq.n	8005dce <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005dba:	4b21      	ldr	r3, [pc, #132]	@ (8005e40 <FLASH_SetErrorCode+0x9c>)
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	f043 0302 	orr.w	r3, r3, #2
 8005dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8005e40 <FLASH_SetErrorCode+0x9c>)
 8005dc4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f043 0310 	orr.w	r3, r3, #16
 8005dcc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005dce:	4b1b      	ldr	r3, [pc, #108]	@ (8005e3c <FLASH_SetErrorCode+0x98>)
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f003 0304 	and.w	r3, r3, #4
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d009      	beq.n	8005dee <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005dda:	4b19      	ldr	r3, [pc, #100]	@ (8005e40 <FLASH_SetErrorCode+0x9c>)
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	f043 0301 	orr.w	r3, r3, #1
 8005de2:	4a17      	ldr	r2, [pc, #92]	@ (8005e40 <FLASH_SetErrorCode+0x9c>)
 8005de4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f043 0304 	orr.w	r3, r3, #4
 8005dec:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005dee:	4b13      	ldr	r3, [pc, #76]	@ (8005e3c <FLASH_SetErrorCode+0x98>)
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00b      	beq.n	8005e12 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8005dfa:	4b11      	ldr	r3, [pc, #68]	@ (8005e40 <FLASH_SetErrorCode+0x9c>)
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	f043 0304 	orr.w	r3, r3, #4
 8005e02:	4a0f      	ldr	r2, [pc, #60]	@ (8005e40 <FLASH_SetErrorCode+0x9c>)
 8005e04:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005e06:	4b0d      	ldr	r3, [pc, #52]	@ (8005e3c <FLASH_SetErrorCode+0x98>)
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8005e3c <FLASH_SetErrorCode+0x98>)
 8005e0c:	f023 0301 	bic.w	r3, r3, #1
 8005e10:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f240 1201 	movw	r2, #257	@ 0x101
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d106      	bne.n	8005e2a <FLASH_SetErrorCode+0x86>
 8005e1c:	4b07      	ldr	r3, [pc, #28]	@ (8005e3c <FLASH_SetErrorCode+0x98>)
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	4a06      	ldr	r2, [pc, #24]	@ (8005e3c <FLASH_SetErrorCode+0x98>)
 8005e22:	f023 0301 	bic.w	r3, r3, #1
 8005e26:	61d3      	str	r3, [r2, #28]
}  
 8005e28:	e002      	b.n	8005e30 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005e2a:	4a04      	ldr	r2, [pc, #16]	@ (8005e3c <FLASH_SetErrorCode+0x98>)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	60d3      	str	r3, [r2, #12]
}  
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc80      	pop	{r7}
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40022000 	.word	0x40022000
 8005e40:	20000c98 	.word	0x20000c98

08005e44 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005e56:	4b2f      	ldr	r3, [pc, #188]	@ (8005f14 <HAL_FLASHEx_Erase+0xd0>)
 8005e58:	7e1b      	ldrb	r3, [r3, #24]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d101      	bne.n	8005e62 <HAL_FLASHEx_Erase+0x1e>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	e053      	b.n	8005f0a <HAL_FLASHEx_Erase+0xc6>
 8005e62:	4b2c      	ldr	r3, [pc, #176]	@ (8005f14 <HAL_FLASHEx_Erase+0xd0>)
 8005e64:	2201      	movs	r2, #1
 8005e66:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d116      	bne.n	8005e9e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005e70:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005e74:	f7ff ff50 	bl	8005d18 <FLASH_WaitForLastOperation>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d141      	bne.n	8005f02 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8005e7e:	2001      	movs	r0, #1
 8005e80:	f000 f84c 	bl	8005f1c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e84:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005e88:	f7ff ff46 	bl	8005d18 <FLASH_WaitForLastOperation>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005e90:	4b21      	ldr	r3, [pc, #132]	@ (8005f18 <HAL_FLASHEx_Erase+0xd4>)
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	4a20      	ldr	r2, [pc, #128]	@ (8005f18 <HAL_FLASHEx_Erase+0xd4>)
 8005e96:	f023 0304 	bic.w	r3, r3, #4
 8005e9a:	6113      	str	r3, [r2, #16]
 8005e9c:	e031      	b.n	8005f02 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005e9e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005ea2:	f7ff ff39 	bl	8005d18 <FLASH_WaitForLastOperation>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d12a      	bne.n	8005f02 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	60bb      	str	r3, [r7, #8]
 8005eba:	e019      	b.n	8005ef0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8005ebc:	68b8      	ldr	r0, [r7, #8]
 8005ebe:	f000 f849 	bl	8005f54 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ec2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005ec6:	f7ff ff27 	bl	8005d18 <FLASH_WaitForLastOperation>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005ece:	4b12      	ldr	r3, [pc, #72]	@ (8005f18 <HAL_FLASHEx_Erase+0xd4>)
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	4a11      	ldr	r2, [pc, #68]	@ (8005f18 <HAL_FLASHEx_Erase+0xd4>)
 8005ed4:	f023 0302 	bic.w	r3, r3, #2
 8005ed8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	601a      	str	r2, [r3, #0]
            break;
 8005ee6:	e00c      	b.n	8005f02 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005eee:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	029a      	lsls	r2, r3, #10
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	4413      	add	r3, r2
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d3dc      	bcc.n	8005ebc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005f02:	4b04      	ldr	r3, [pc, #16]	@ (8005f14 <HAL_FLASHEx_Erase+0xd0>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	761a      	strb	r2, [r3, #24]

  return status;
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20000c98 	.word	0x20000c98
 8005f18:	40022000 	.word	0x40022000

08005f1c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005f24:	4b09      	ldr	r3, [pc, #36]	@ (8005f4c <FLASH_MassErase+0x30>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005f2a:	4b09      	ldr	r3, [pc, #36]	@ (8005f50 <FLASH_MassErase+0x34>)
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	4a08      	ldr	r2, [pc, #32]	@ (8005f50 <FLASH_MassErase+0x34>)
 8005f30:	f043 0304 	orr.w	r3, r3, #4
 8005f34:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005f36:	4b06      	ldr	r3, [pc, #24]	@ (8005f50 <FLASH_MassErase+0x34>)
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	4a05      	ldr	r2, [pc, #20]	@ (8005f50 <FLASH_MassErase+0x34>)
 8005f3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f40:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005f42:	bf00      	nop
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bc80      	pop	{r7}
 8005f4a:	4770      	bx	lr
 8005f4c:	20000c98 	.word	0x20000c98
 8005f50:	40022000 	.word	0x40022000

08005f54 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f8c <FLASH_PageErase+0x38>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005f62:	4b0b      	ldr	r3, [pc, #44]	@ (8005f90 <FLASH_PageErase+0x3c>)
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	4a0a      	ldr	r2, [pc, #40]	@ (8005f90 <FLASH_PageErase+0x3c>)
 8005f68:	f043 0302 	orr.w	r3, r3, #2
 8005f6c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005f6e:	4a08      	ldr	r2, [pc, #32]	@ (8005f90 <FLASH_PageErase+0x3c>)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005f74:	4b06      	ldr	r3, [pc, #24]	@ (8005f90 <FLASH_PageErase+0x3c>)
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	4a05      	ldr	r2, [pc, #20]	@ (8005f90 <FLASH_PageErase+0x3c>)
 8005f7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f7e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bc80      	pop	{r7}
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	20000c98 	.word	0x20000c98
 8005f90:	40022000 	.word	0x40022000

08005f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b08b      	sub	sp, #44	@ 0x2c
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fa6:	e169      	b.n	800627c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005fa8:	2201      	movs	r2, #1
 8005faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fac:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69fa      	ldr	r2, [r7, #28]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	f040 8158 	bne.w	8006276 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	4a9a      	ldr	r2, [pc, #616]	@ (8006234 <HAL_GPIO_Init+0x2a0>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d05e      	beq.n	800608e <HAL_GPIO_Init+0xfa>
 8005fd0:	4a98      	ldr	r2, [pc, #608]	@ (8006234 <HAL_GPIO_Init+0x2a0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d875      	bhi.n	80060c2 <HAL_GPIO_Init+0x12e>
 8005fd6:	4a98      	ldr	r2, [pc, #608]	@ (8006238 <HAL_GPIO_Init+0x2a4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d058      	beq.n	800608e <HAL_GPIO_Init+0xfa>
 8005fdc:	4a96      	ldr	r2, [pc, #600]	@ (8006238 <HAL_GPIO_Init+0x2a4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d86f      	bhi.n	80060c2 <HAL_GPIO_Init+0x12e>
 8005fe2:	4a96      	ldr	r2, [pc, #600]	@ (800623c <HAL_GPIO_Init+0x2a8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d052      	beq.n	800608e <HAL_GPIO_Init+0xfa>
 8005fe8:	4a94      	ldr	r2, [pc, #592]	@ (800623c <HAL_GPIO_Init+0x2a8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d869      	bhi.n	80060c2 <HAL_GPIO_Init+0x12e>
 8005fee:	4a94      	ldr	r2, [pc, #592]	@ (8006240 <HAL_GPIO_Init+0x2ac>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d04c      	beq.n	800608e <HAL_GPIO_Init+0xfa>
 8005ff4:	4a92      	ldr	r2, [pc, #584]	@ (8006240 <HAL_GPIO_Init+0x2ac>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d863      	bhi.n	80060c2 <HAL_GPIO_Init+0x12e>
 8005ffa:	4a92      	ldr	r2, [pc, #584]	@ (8006244 <HAL_GPIO_Init+0x2b0>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d046      	beq.n	800608e <HAL_GPIO_Init+0xfa>
 8006000:	4a90      	ldr	r2, [pc, #576]	@ (8006244 <HAL_GPIO_Init+0x2b0>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d85d      	bhi.n	80060c2 <HAL_GPIO_Init+0x12e>
 8006006:	2b12      	cmp	r3, #18
 8006008:	d82a      	bhi.n	8006060 <HAL_GPIO_Init+0xcc>
 800600a:	2b12      	cmp	r3, #18
 800600c:	d859      	bhi.n	80060c2 <HAL_GPIO_Init+0x12e>
 800600e:	a201      	add	r2, pc, #4	@ (adr r2, 8006014 <HAL_GPIO_Init+0x80>)
 8006010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006014:	0800608f 	.word	0x0800608f
 8006018:	08006069 	.word	0x08006069
 800601c:	0800607b 	.word	0x0800607b
 8006020:	080060bd 	.word	0x080060bd
 8006024:	080060c3 	.word	0x080060c3
 8006028:	080060c3 	.word	0x080060c3
 800602c:	080060c3 	.word	0x080060c3
 8006030:	080060c3 	.word	0x080060c3
 8006034:	080060c3 	.word	0x080060c3
 8006038:	080060c3 	.word	0x080060c3
 800603c:	080060c3 	.word	0x080060c3
 8006040:	080060c3 	.word	0x080060c3
 8006044:	080060c3 	.word	0x080060c3
 8006048:	080060c3 	.word	0x080060c3
 800604c:	080060c3 	.word	0x080060c3
 8006050:	080060c3 	.word	0x080060c3
 8006054:	080060c3 	.word	0x080060c3
 8006058:	08006071 	.word	0x08006071
 800605c:	08006085 	.word	0x08006085
 8006060:	4a79      	ldr	r2, [pc, #484]	@ (8006248 <HAL_GPIO_Init+0x2b4>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d013      	beq.n	800608e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006066:	e02c      	b.n	80060c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	623b      	str	r3, [r7, #32]
          break;
 800606e:	e029      	b.n	80060c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	3304      	adds	r3, #4
 8006076:	623b      	str	r3, [r7, #32]
          break;
 8006078:	e024      	b.n	80060c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	3308      	adds	r3, #8
 8006080:	623b      	str	r3, [r7, #32]
          break;
 8006082:	e01f      	b.n	80060c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	330c      	adds	r3, #12
 800608a:	623b      	str	r3, [r7, #32]
          break;
 800608c:	e01a      	b.n	80060c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d102      	bne.n	800609c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006096:	2304      	movs	r3, #4
 8006098:	623b      	str	r3, [r7, #32]
          break;
 800609a:	e013      	b.n	80060c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d105      	bne.n	80060b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80060a4:	2308      	movs	r3, #8
 80060a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	69fa      	ldr	r2, [r7, #28]
 80060ac:	611a      	str	r2, [r3, #16]
          break;
 80060ae:	e009      	b.n	80060c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80060b0:	2308      	movs	r3, #8
 80060b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	615a      	str	r2, [r3, #20]
          break;
 80060ba:	e003      	b.n	80060c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80060bc:	2300      	movs	r3, #0
 80060be:	623b      	str	r3, [r7, #32]
          break;
 80060c0:	e000      	b.n	80060c4 <HAL_GPIO_Init+0x130>
          break;
 80060c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	2bff      	cmp	r3, #255	@ 0xff
 80060c8:	d801      	bhi.n	80060ce <HAL_GPIO_Init+0x13a>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	e001      	b.n	80060d2 <HAL_GPIO_Init+0x13e>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3304      	adds	r3, #4
 80060d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	2bff      	cmp	r3, #255	@ 0xff
 80060d8:	d802      	bhi.n	80060e0 <HAL_GPIO_Init+0x14c>
 80060da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	e002      	b.n	80060e6 <HAL_GPIO_Init+0x152>
 80060e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e2:	3b08      	subs	r3, #8
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	210f      	movs	r1, #15
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	fa01 f303 	lsl.w	r3, r1, r3
 80060f4:	43db      	mvns	r3, r3
 80060f6:	401a      	ands	r2, r3
 80060f8:	6a39      	ldr	r1, [r7, #32]
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006100:	431a      	orrs	r2, r3
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 80b1 	beq.w	8006276 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006114:	4b4d      	ldr	r3, [pc, #308]	@ (800624c <HAL_GPIO_Init+0x2b8>)
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	4a4c      	ldr	r2, [pc, #304]	@ (800624c <HAL_GPIO_Init+0x2b8>)
 800611a:	f043 0301 	orr.w	r3, r3, #1
 800611e:	6193      	str	r3, [r2, #24]
 8006120:	4b4a      	ldr	r3, [pc, #296]	@ (800624c <HAL_GPIO_Init+0x2b8>)
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	60bb      	str	r3, [r7, #8]
 800612a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800612c:	4a48      	ldr	r2, [pc, #288]	@ (8006250 <HAL_GPIO_Init+0x2bc>)
 800612e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006130:	089b      	lsrs	r3, r3, #2
 8006132:	3302      	adds	r3, #2
 8006134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006138:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	f003 0303 	and.w	r3, r3, #3
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	220f      	movs	r2, #15
 8006144:	fa02 f303 	lsl.w	r3, r2, r3
 8006148:	43db      	mvns	r3, r3
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4013      	ands	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a40      	ldr	r2, [pc, #256]	@ (8006254 <HAL_GPIO_Init+0x2c0>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d013      	beq.n	8006180 <HAL_GPIO_Init+0x1ec>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a3f      	ldr	r2, [pc, #252]	@ (8006258 <HAL_GPIO_Init+0x2c4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d00d      	beq.n	800617c <HAL_GPIO_Init+0x1e8>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a3e      	ldr	r2, [pc, #248]	@ (800625c <HAL_GPIO_Init+0x2c8>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d007      	beq.n	8006178 <HAL_GPIO_Init+0x1e4>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a3d      	ldr	r2, [pc, #244]	@ (8006260 <HAL_GPIO_Init+0x2cc>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d101      	bne.n	8006174 <HAL_GPIO_Init+0x1e0>
 8006170:	2303      	movs	r3, #3
 8006172:	e006      	b.n	8006182 <HAL_GPIO_Init+0x1ee>
 8006174:	2304      	movs	r3, #4
 8006176:	e004      	b.n	8006182 <HAL_GPIO_Init+0x1ee>
 8006178:	2302      	movs	r3, #2
 800617a:	e002      	b.n	8006182 <HAL_GPIO_Init+0x1ee>
 800617c:	2301      	movs	r3, #1
 800617e:	e000      	b.n	8006182 <HAL_GPIO_Init+0x1ee>
 8006180:	2300      	movs	r3, #0
 8006182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006184:	f002 0203 	and.w	r2, r2, #3
 8006188:	0092      	lsls	r2, r2, #2
 800618a:	4093      	lsls	r3, r2
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006192:	492f      	ldr	r1, [pc, #188]	@ (8006250 <HAL_GPIO_Init+0x2bc>)
 8006194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006196:	089b      	lsrs	r3, r3, #2
 8006198:	3302      	adds	r3, #2
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d006      	beq.n	80061ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80061ac:	4b2d      	ldr	r3, [pc, #180]	@ (8006264 <HAL_GPIO_Init+0x2d0>)
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	492c      	ldr	r1, [pc, #176]	@ (8006264 <HAL_GPIO_Init+0x2d0>)
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	608b      	str	r3, [r1, #8]
 80061b8:	e006      	b.n	80061c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80061ba:	4b2a      	ldr	r3, [pc, #168]	@ (8006264 <HAL_GPIO_Init+0x2d0>)
 80061bc:	689a      	ldr	r2, [r3, #8]
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	43db      	mvns	r3, r3
 80061c2:	4928      	ldr	r1, [pc, #160]	@ (8006264 <HAL_GPIO_Init+0x2d0>)
 80061c4:	4013      	ands	r3, r2
 80061c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d006      	beq.n	80061e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80061d4:	4b23      	ldr	r3, [pc, #140]	@ (8006264 <HAL_GPIO_Init+0x2d0>)
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	4922      	ldr	r1, [pc, #136]	@ (8006264 <HAL_GPIO_Init+0x2d0>)
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	4313      	orrs	r3, r2
 80061de:	60cb      	str	r3, [r1, #12]
 80061e0:	e006      	b.n	80061f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80061e2:	4b20      	ldr	r3, [pc, #128]	@ (8006264 <HAL_GPIO_Init+0x2d0>)
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	43db      	mvns	r3, r3
 80061ea:	491e      	ldr	r1, [pc, #120]	@ (8006264 <HAL_GPIO_Init+0x2d0>)
 80061ec:	4013      	ands	r3, r2
 80061ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d006      	beq.n	800620a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80061fc:	4b19      	ldr	r3, [pc, #100]	@ (8006264 <HAL_GPIO_Init+0x2d0>)
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	4918      	ldr	r1, [pc, #96]	@ (8006264 <HAL_GPIO_Init+0x2d0>)
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	4313      	orrs	r3, r2
 8006206:	604b      	str	r3, [r1, #4]
 8006208:	e006      	b.n	8006218 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800620a:	4b16      	ldr	r3, [pc, #88]	@ (8006264 <HAL_GPIO_Init+0x2d0>)
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	43db      	mvns	r3, r3
 8006212:	4914      	ldr	r1, [pc, #80]	@ (8006264 <HAL_GPIO_Init+0x2d0>)
 8006214:	4013      	ands	r3, r2
 8006216:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d021      	beq.n	8006268 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006224:	4b0f      	ldr	r3, [pc, #60]	@ (8006264 <HAL_GPIO_Init+0x2d0>)
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	490e      	ldr	r1, [pc, #56]	@ (8006264 <HAL_GPIO_Init+0x2d0>)
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	4313      	orrs	r3, r2
 800622e:	600b      	str	r3, [r1, #0]
 8006230:	e021      	b.n	8006276 <HAL_GPIO_Init+0x2e2>
 8006232:	bf00      	nop
 8006234:	10320000 	.word	0x10320000
 8006238:	10310000 	.word	0x10310000
 800623c:	10220000 	.word	0x10220000
 8006240:	10210000 	.word	0x10210000
 8006244:	10120000 	.word	0x10120000
 8006248:	10110000 	.word	0x10110000
 800624c:	40021000 	.word	0x40021000
 8006250:	40010000 	.word	0x40010000
 8006254:	40010800 	.word	0x40010800
 8006258:	40010c00 	.word	0x40010c00
 800625c:	40011000 	.word	0x40011000
 8006260:	40011400 	.word	0x40011400
 8006264:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006268:	4b0b      	ldr	r3, [pc, #44]	@ (8006298 <HAL_GPIO_Init+0x304>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	43db      	mvns	r3, r3
 8006270:	4909      	ldr	r1, [pc, #36]	@ (8006298 <HAL_GPIO_Init+0x304>)
 8006272:	4013      	ands	r3, r2
 8006274:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006278:	3301      	adds	r3, #1
 800627a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	fa22 f303 	lsr.w	r3, r2, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	f47f ae8e 	bne.w	8005fa8 <HAL_GPIO_Init+0x14>
  }
}
 800628c:	bf00      	nop
 800628e:	bf00      	nop
 8006290:	372c      	adds	r7, #44	@ 0x2c
 8006292:	46bd      	mov	sp, r7
 8006294:	bc80      	pop	{r7}
 8006296:	4770      	bx	lr
 8006298:	40010400 	.word	0x40010400

0800629c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	460b      	mov	r3, r1
 80062a6:	807b      	strh	r3, [r7, #2]
 80062a8:	4613      	mov	r3, r2
 80062aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80062ac:	787b      	ldrb	r3, [r7, #1]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062b2:	887a      	ldrh	r2, [r7, #2]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80062b8:	e003      	b.n	80062c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80062ba:	887b      	ldrh	r3, [r7, #2]
 80062bc:	041a      	lsls	r2, r3, #16
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	611a      	str	r2, [r3, #16]
}
 80062c2:	bf00      	nop
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bc80      	pop	{r7}
 80062ca:	4770      	bx	lr

080062cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	460b      	mov	r3, r1
 80062d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80062de:	887a      	ldrh	r2, [r7, #2]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4013      	ands	r3, r2
 80062e4:	041a      	lsls	r2, r3, #16
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	43d9      	mvns	r1, r3
 80062ea:	887b      	ldrh	r3, [r7, #2]
 80062ec:	400b      	ands	r3, r1
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	611a      	str	r2, [r3, #16]
}
 80062f4:	bf00      	nop
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bc80      	pop	{r7}
 80062fc:	4770      	bx	lr
	...

08006300 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	4603      	mov	r3, r0
 8006308:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800630a:	4b08      	ldr	r3, [pc, #32]	@ (800632c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800630c:	695a      	ldr	r2, [r3, #20]
 800630e:	88fb      	ldrh	r3, [r7, #6]
 8006310:	4013      	ands	r3, r2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d006      	beq.n	8006324 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006316:	4a05      	ldr	r2, [pc, #20]	@ (800632c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006318:	88fb      	ldrh	r3, [r7, #6]
 800631a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800631c:	88fb      	ldrh	r3, [r7, #6]
 800631e:	4618      	mov	r0, r3
 8006320:	f7fb f9b6 	bl	8001690 <HAL_GPIO_EXTI_Callback>
  }
}
 8006324:	bf00      	nop
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	40010400 	.word	0x40010400

08006330 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e272      	b.n	8006828 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 8087 	beq.w	800645e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006350:	4b92      	ldr	r3, [pc, #584]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f003 030c 	and.w	r3, r3, #12
 8006358:	2b04      	cmp	r3, #4
 800635a:	d00c      	beq.n	8006376 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800635c:	4b8f      	ldr	r3, [pc, #572]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f003 030c 	and.w	r3, r3, #12
 8006364:	2b08      	cmp	r3, #8
 8006366:	d112      	bne.n	800638e <HAL_RCC_OscConfig+0x5e>
 8006368:	4b8c      	ldr	r3, [pc, #560]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006374:	d10b      	bne.n	800638e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006376:	4b89      	ldr	r3, [pc, #548]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d06c      	beq.n	800645c <HAL_RCC_OscConfig+0x12c>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d168      	bne.n	800645c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e24c      	b.n	8006828 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006396:	d106      	bne.n	80063a6 <HAL_RCC_OscConfig+0x76>
 8006398:	4b80      	ldr	r3, [pc, #512]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a7f      	ldr	r2, [pc, #508]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 800639e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	e02e      	b.n	8006404 <HAL_RCC_OscConfig+0xd4>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10c      	bne.n	80063c8 <HAL_RCC_OscConfig+0x98>
 80063ae:	4b7b      	ldr	r3, [pc, #492]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a7a      	ldr	r2, [pc, #488]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 80063b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	4b78      	ldr	r3, [pc, #480]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a77      	ldr	r2, [pc, #476]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 80063c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	e01d      	b.n	8006404 <HAL_RCC_OscConfig+0xd4>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063d0:	d10c      	bne.n	80063ec <HAL_RCC_OscConfig+0xbc>
 80063d2:	4b72      	ldr	r3, [pc, #456]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a71      	ldr	r2, [pc, #452]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 80063d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	4b6f      	ldr	r3, [pc, #444]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a6e      	ldr	r2, [pc, #440]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 80063e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063e8:	6013      	str	r3, [r2, #0]
 80063ea:	e00b      	b.n	8006404 <HAL_RCC_OscConfig+0xd4>
 80063ec:	4b6b      	ldr	r3, [pc, #428]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a6a      	ldr	r2, [pc, #424]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 80063f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063f6:	6013      	str	r3, [r2, #0]
 80063f8:	4b68      	ldr	r3, [pc, #416]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a67      	ldr	r2, [pc, #412]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 80063fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006402:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d013      	beq.n	8006434 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800640c:	f7fe fd7c 	bl	8004f08 <HAL_GetTick>
 8006410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006412:	e008      	b.n	8006426 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006414:	f7fe fd78 	bl	8004f08 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b64      	cmp	r3, #100	@ 0x64
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e200      	b.n	8006828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006426:	4b5d      	ldr	r3, [pc, #372]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0f0      	beq.n	8006414 <HAL_RCC_OscConfig+0xe4>
 8006432:	e014      	b.n	800645e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006434:	f7fe fd68 	bl	8004f08 <HAL_GetTick>
 8006438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800643a:	e008      	b.n	800644e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800643c:	f7fe fd64 	bl	8004f08 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b64      	cmp	r3, #100	@ 0x64
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e1ec      	b.n	8006828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800644e:	4b53      	ldr	r3, [pc, #332]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1f0      	bne.n	800643c <HAL_RCC_OscConfig+0x10c>
 800645a:	e000      	b.n	800645e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800645c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d063      	beq.n	8006532 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800646a:	4b4c      	ldr	r3, [pc, #304]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f003 030c 	and.w	r3, r3, #12
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00b      	beq.n	800648e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006476:	4b49      	ldr	r3, [pc, #292]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f003 030c 	and.w	r3, r3, #12
 800647e:	2b08      	cmp	r3, #8
 8006480:	d11c      	bne.n	80064bc <HAL_RCC_OscConfig+0x18c>
 8006482:	4b46      	ldr	r3, [pc, #280]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d116      	bne.n	80064bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800648e:	4b43      	ldr	r3, [pc, #268]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d005      	beq.n	80064a6 <HAL_RCC_OscConfig+0x176>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d001      	beq.n	80064a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e1c0      	b.n	8006828 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064a6:	4b3d      	ldr	r3, [pc, #244]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	4939      	ldr	r1, [pc, #228]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ba:	e03a      	b.n	8006532 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d020      	beq.n	8006506 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064c4:	4b36      	ldr	r3, [pc, #216]	@ (80065a0 <HAL_RCC_OscConfig+0x270>)
 80064c6:	2201      	movs	r2, #1
 80064c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ca:	f7fe fd1d 	bl	8004f08 <HAL_GetTick>
 80064ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064d0:	e008      	b.n	80064e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064d2:	f7fe fd19 	bl	8004f08 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d901      	bls.n	80064e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e1a1      	b.n	8006828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064e4:	4b2d      	ldr	r3, [pc, #180]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0f0      	beq.n	80064d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f0:	4b2a      	ldr	r3, [pc, #168]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	00db      	lsls	r3, r3, #3
 80064fe:	4927      	ldr	r1, [pc, #156]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 8006500:	4313      	orrs	r3, r2
 8006502:	600b      	str	r3, [r1, #0]
 8006504:	e015      	b.n	8006532 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006506:	4b26      	ldr	r3, [pc, #152]	@ (80065a0 <HAL_RCC_OscConfig+0x270>)
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800650c:	f7fe fcfc 	bl	8004f08 <HAL_GetTick>
 8006510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006512:	e008      	b.n	8006526 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006514:	f7fe fcf8 	bl	8004f08 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b02      	cmp	r3, #2
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e180      	b.n	8006828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006526:	4b1d      	ldr	r3, [pc, #116]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1f0      	bne.n	8006514 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b00      	cmp	r3, #0
 800653c:	d03a      	beq.n	80065b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d019      	beq.n	800657a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006546:	4b17      	ldr	r3, [pc, #92]	@ (80065a4 <HAL_RCC_OscConfig+0x274>)
 8006548:	2201      	movs	r2, #1
 800654a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800654c:	f7fe fcdc 	bl	8004f08 <HAL_GetTick>
 8006550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006552:	e008      	b.n	8006566 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006554:	f7fe fcd8 	bl	8004f08 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	2b02      	cmp	r3, #2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e160      	b.n	8006828 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006566:	4b0d      	ldr	r3, [pc, #52]	@ (800659c <HAL_RCC_OscConfig+0x26c>)
 8006568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0f0      	beq.n	8006554 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006572:	2001      	movs	r0, #1
 8006574:	f000 face 	bl	8006b14 <RCC_Delay>
 8006578:	e01c      	b.n	80065b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800657a:	4b0a      	ldr	r3, [pc, #40]	@ (80065a4 <HAL_RCC_OscConfig+0x274>)
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006580:	f7fe fcc2 	bl	8004f08 <HAL_GetTick>
 8006584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006586:	e00f      	b.n	80065a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006588:	f7fe fcbe 	bl	8004f08 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	2b02      	cmp	r3, #2
 8006594:	d908      	bls.n	80065a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e146      	b.n	8006828 <HAL_RCC_OscConfig+0x4f8>
 800659a:	bf00      	nop
 800659c:	40021000 	.word	0x40021000
 80065a0:	42420000 	.word	0x42420000
 80065a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065a8:	4b92      	ldr	r3, [pc, #584]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 80065aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1e9      	bne.n	8006588 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 80a6 	beq.w	800670e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065c2:	2300      	movs	r3, #0
 80065c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065c6:	4b8b      	ldr	r3, [pc, #556]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10d      	bne.n	80065ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065d2:	4b88      	ldr	r3, [pc, #544]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	4a87      	ldr	r2, [pc, #540]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 80065d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065dc:	61d3      	str	r3, [r2, #28]
 80065de:	4b85      	ldr	r3, [pc, #532]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065e6:	60bb      	str	r3, [r7, #8]
 80065e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065ea:	2301      	movs	r3, #1
 80065ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ee:	4b82      	ldr	r3, [pc, #520]	@ (80067f8 <HAL_RCC_OscConfig+0x4c8>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d118      	bne.n	800662c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065fa:	4b7f      	ldr	r3, [pc, #508]	@ (80067f8 <HAL_RCC_OscConfig+0x4c8>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a7e      	ldr	r2, [pc, #504]	@ (80067f8 <HAL_RCC_OscConfig+0x4c8>)
 8006600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006606:	f7fe fc7f 	bl	8004f08 <HAL_GetTick>
 800660a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800660c:	e008      	b.n	8006620 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800660e:	f7fe fc7b 	bl	8004f08 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b64      	cmp	r3, #100	@ 0x64
 800661a:	d901      	bls.n	8006620 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e103      	b.n	8006828 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006620:	4b75      	ldr	r3, [pc, #468]	@ (80067f8 <HAL_RCC_OscConfig+0x4c8>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006628:	2b00      	cmp	r3, #0
 800662a:	d0f0      	beq.n	800660e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d106      	bne.n	8006642 <HAL_RCC_OscConfig+0x312>
 8006634:	4b6f      	ldr	r3, [pc, #444]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	4a6e      	ldr	r2, [pc, #440]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	6213      	str	r3, [r2, #32]
 8006640:	e02d      	b.n	800669e <HAL_RCC_OscConfig+0x36e>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10c      	bne.n	8006664 <HAL_RCC_OscConfig+0x334>
 800664a:	4b6a      	ldr	r3, [pc, #424]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	4a69      	ldr	r2, [pc, #420]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 8006650:	f023 0301 	bic.w	r3, r3, #1
 8006654:	6213      	str	r3, [r2, #32]
 8006656:	4b67      	ldr	r3, [pc, #412]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	4a66      	ldr	r2, [pc, #408]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 800665c:	f023 0304 	bic.w	r3, r3, #4
 8006660:	6213      	str	r3, [r2, #32]
 8006662:	e01c      	b.n	800669e <HAL_RCC_OscConfig+0x36e>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	2b05      	cmp	r3, #5
 800666a:	d10c      	bne.n	8006686 <HAL_RCC_OscConfig+0x356>
 800666c:	4b61      	ldr	r3, [pc, #388]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	4a60      	ldr	r2, [pc, #384]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 8006672:	f043 0304 	orr.w	r3, r3, #4
 8006676:	6213      	str	r3, [r2, #32]
 8006678:	4b5e      	ldr	r3, [pc, #376]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	4a5d      	ldr	r2, [pc, #372]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 800667e:	f043 0301 	orr.w	r3, r3, #1
 8006682:	6213      	str	r3, [r2, #32]
 8006684:	e00b      	b.n	800669e <HAL_RCC_OscConfig+0x36e>
 8006686:	4b5b      	ldr	r3, [pc, #364]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	4a5a      	ldr	r2, [pc, #360]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 800668c:	f023 0301 	bic.w	r3, r3, #1
 8006690:	6213      	str	r3, [r2, #32]
 8006692:	4b58      	ldr	r3, [pc, #352]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	4a57      	ldr	r2, [pc, #348]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 8006698:	f023 0304 	bic.w	r3, r3, #4
 800669c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d015      	beq.n	80066d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066a6:	f7fe fc2f 	bl	8004f08 <HAL_GetTick>
 80066aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ac:	e00a      	b.n	80066c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ae:	f7fe fc2b 	bl	8004f08 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066bc:	4293      	cmp	r3, r2
 80066be:	d901      	bls.n	80066c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e0b1      	b.n	8006828 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066c4:	4b4b      	ldr	r3, [pc, #300]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d0ee      	beq.n	80066ae <HAL_RCC_OscConfig+0x37e>
 80066d0:	e014      	b.n	80066fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066d2:	f7fe fc19 	bl	8004f08 <HAL_GetTick>
 80066d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066d8:	e00a      	b.n	80066f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066da:	f7fe fc15 	bl	8004f08 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d901      	bls.n	80066f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e09b      	b.n	8006828 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066f0:	4b40      	ldr	r3, [pc, #256]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1ee      	bne.n	80066da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80066fc:	7dfb      	ldrb	r3, [r7, #23]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d105      	bne.n	800670e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006702:	4b3c      	ldr	r3, [pc, #240]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	4a3b      	ldr	r2, [pc, #236]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 8006708:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800670c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 8087 	beq.w	8006826 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006718:	4b36      	ldr	r3, [pc, #216]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f003 030c 	and.w	r3, r3, #12
 8006720:	2b08      	cmp	r3, #8
 8006722:	d061      	beq.n	80067e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	2b02      	cmp	r3, #2
 800672a:	d146      	bne.n	80067ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800672c:	4b33      	ldr	r3, [pc, #204]	@ (80067fc <HAL_RCC_OscConfig+0x4cc>)
 800672e:	2200      	movs	r2, #0
 8006730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006732:	f7fe fbe9 	bl	8004f08 <HAL_GetTick>
 8006736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006738:	e008      	b.n	800674c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800673a:	f7fe fbe5 	bl	8004f08 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	2b02      	cmp	r3, #2
 8006746:	d901      	bls.n	800674c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e06d      	b.n	8006828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800674c:	4b29      	ldr	r3, [pc, #164]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1f0      	bne.n	800673a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006760:	d108      	bne.n	8006774 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006762:	4b24      	ldr	r3, [pc, #144]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	4921      	ldr	r1, [pc, #132]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 8006770:	4313      	orrs	r3, r2
 8006772:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006774:	4b1f      	ldr	r3, [pc, #124]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a19      	ldr	r1, [r3, #32]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006784:	430b      	orrs	r3, r1
 8006786:	491b      	ldr	r1, [pc, #108]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 8006788:	4313      	orrs	r3, r2
 800678a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800678c:	4b1b      	ldr	r3, [pc, #108]	@ (80067fc <HAL_RCC_OscConfig+0x4cc>)
 800678e:	2201      	movs	r2, #1
 8006790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006792:	f7fe fbb9 	bl	8004f08 <HAL_GetTick>
 8006796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006798:	e008      	b.n	80067ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800679a:	f7fe fbb5 	bl	8004f08 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d901      	bls.n	80067ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e03d      	b.n	8006828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067ac:	4b11      	ldr	r3, [pc, #68]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d0f0      	beq.n	800679a <HAL_RCC_OscConfig+0x46a>
 80067b8:	e035      	b.n	8006826 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ba:	4b10      	ldr	r3, [pc, #64]	@ (80067fc <HAL_RCC_OscConfig+0x4cc>)
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c0:	f7fe fba2 	bl	8004f08 <HAL_GetTick>
 80067c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067c6:	e008      	b.n	80067da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067c8:	f7fe fb9e 	bl	8004f08 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e026      	b.n	8006828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067da:	4b06      	ldr	r3, [pc, #24]	@ (80067f4 <HAL_RCC_OscConfig+0x4c4>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1f0      	bne.n	80067c8 <HAL_RCC_OscConfig+0x498>
 80067e6:	e01e      	b.n	8006826 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d107      	bne.n	8006800 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e019      	b.n	8006828 <HAL_RCC_OscConfig+0x4f8>
 80067f4:	40021000 	.word	0x40021000
 80067f8:	40007000 	.word	0x40007000
 80067fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006800:	4b0b      	ldr	r3, [pc, #44]	@ (8006830 <HAL_RCC_OscConfig+0x500>)
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	429a      	cmp	r2, r3
 8006812:	d106      	bne.n	8006822 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800681e:	429a      	cmp	r2, r3
 8006820:	d001      	beq.n	8006826 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	40021000 	.word	0x40021000

08006834 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e0d0      	b.n	80069ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006848:	4b6a      	ldr	r3, [pc, #424]	@ (80069f4 <HAL_RCC_ClockConfig+0x1c0>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d910      	bls.n	8006878 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006856:	4b67      	ldr	r3, [pc, #412]	@ (80069f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f023 0207 	bic.w	r2, r3, #7
 800685e:	4965      	ldr	r1, [pc, #404]	@ (80069f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	4313      	orrs	r3, r2
 8006864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006866:	4b63      	ldr	r3, [pc, #396]	@ (80069f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	429a      	cmp	r2, r3
 8006872:	d001      	beq.n	8006878 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e0b8      	b.n	80069ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d020      	beq.n	80068c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0304 	and.w	r3, r3, #4
 800688c:	2b00      	cmp	r3, #0
 800688e:	d005      	beq.n	800689c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006890:	4b59      	ldr	r3, [pc, #356]	@ (80069f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	4a58      	ldr	r2, [pc, #352]	@ (80069f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006896:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800689a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0308 	and.w	r3, r3, #8
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d005      	beq.n	80068b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068a8:	4b53      	ldr	r3, [pc, #332]	@ (80069f8 <HAL_RCC_ClockConfig+0x1c4>)
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	4a52      	ldr	r2, [pc, #328]	@ (80069f8 <HAL_RCC_ClockConfig+0x1c4>)
 80068ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80068b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068b4:	4b50      	ldr	r3, [pc, #320]	@ (80069f8 <HAL_RCC_ClockConfig+0x1c4>)
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	494d      	ldr	r1, [pc, #308]	@ (80069f8 <HAL_RCC_ClockConfig+0x1c4>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d040      	beq.n	8006954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d107      	bne.n	80068ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068da:	4b47      	ldr	r3, [pc, #284]	@ (80069f8 <HAL_RCC_ClockConfig+0x1c4>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d115      	bne.n	8006912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e07f      	b.n	80069ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d107      	bne.n	8006902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068f2:	4b41      	ldr	r3, [pc, #260]	@ (80069f8 <HAL_RCC_ClockConfig+0x1c4>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d109      	bne.n	8006912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e073      	b.n	80069ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006902:	4b3d      	ldr	r3, [pc, #244]	@ (80069f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e06b      	b.n	80069ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006912:	4b39      	ldr	r3, [pc, #228]	@ (80069f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f023 0203 	bic.w	r2, r3, #3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	4936      	ldr	r1, [pc, #216]	@ (80069f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006920:	4313      	orrs	r3, r2
 8006922:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006924:	f7fe faf0 	bl	8004f08 <HAL_GetTick>
 8006928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800692a:	e00a      	b.n	8006942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800692c:	f7fe faec 	bl	8004f08 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800693a:	4293      	cmp	r3, r2
 800693c:	d901      	bls.n	8006942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e053      	b.n	80069ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006942:	4b2d      	ldr	r3, [pc, #180]	@ (80069f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f003 020c 	and.w	r2, r3, #12
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	429a      	cmp	r2, r3
 8006952:	d1eb      	bne.n	800692c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006954:	4b27      	ldr	r3, [pc, #156]	@ (80069f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0307 	and.w	r3, r3, #7
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d210      	bcs.n	8006984 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006962:	4b24      	ldr	r3, [pc, #144]	@ (80069f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f023 0207 	bic.w	r2, r3, #7
 800696a:	4922      	ldr	r1, [pc, #136]	@ (80069f4 <HAL_RCC_ClockConfig+0x1c0>)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	4313      	orrs	r3, r2
 8006970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006972:	4b20      	ldr	r3, [pc, #128]	@ (80069f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0307 	and.w	r3, r3, #7
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	d001      	beq.n	8006984 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e032      	b.n	80069ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0304 	and.w	r3, r3, #4
 800698c:	2b00      	cmp	r3, #0
 800698e:	d008      	beq.n	80069a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006990:	4b19      	ldr	r3, [pc, #100]	@ (80069f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	4916      	ldr	r1, [pc, #88]	@ (80069f8 <HAL_RCC_ClockConfig+0x1c4>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d009      	beq.n	80069c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80069ae:	4b12      	ldr	r3, [pc, #72]	@ (80069f8 <HAL_RCC_ClockConfig+0x1c4>)
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	00db      	lsls	r3, r3, #3
 80069bc:	490e      	ldr	r1, [pc, #56]	@ (80069f8 <HAL_RCC_ClockConfig+0x1c4>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069c2:	f000 f821 	bl	8006a08 <HAL_RCC_GetSysClockFreq>
 80069c6:	4602      	mov	r2, r0
 80069c8:	4b0b      	ldr	r3, [pc, #44]	@ (80069f8 <HAL_RCC_ClockConfig+0x1c4>)
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	091b      	lsrs	r3, r3, #4
 80069ce:	f003 030f 	and.w	r3, r3, #15
 80069d2:	490a      	ldr	r1, [pc, #40]	@ (80069fc <HAL_RCC_ClockConfig+0x1c8>)
 80069d4:	5ccb      	ldrb	r3, [r1, r3]
 80069d6:	fa22 f303 	lsr.w	r3, r2, r3
 80069da:	4a09      	ldr	r2, [pc, #36]	@ (8006a00 <HAL_RCC_ClockConfig+0x1cc>)
 80069dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80069de:	4b09      	ldr	r3, [pc, #36]	@ (8006a04 <HAL_RCC_ClockConfig+0x1d0>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fe fa4e 	bl	8004e84 <HAL_InitTick>

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	40022000 	.word	0x40022000
 80069f8:	40021000 	.word	0x40021000
 80069fc:	08008d48 	.word	0x08008d48
 8006a00:	20000020 	.word	0x20000020
 8006a04:	20000024 	.word	0x20000024

08006a08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	2300      	movs	r3, #0
 8006a14:	60bb      	str	r3, [r7, #8]
 8006a16:	2300      	movs	r3, #0
 8006a18:	617b      	str	r3, [r7, #20]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a22:	4b1e      	ldr	r3, [pc, #120]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0x94>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f003 030c 	and.w	r3, r3, #12
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d002      	beq.n	8006a38 <HAL_RCC_GetSysClockFreq+0x30>
 8006a32:	2b08      	cmp	r3, #8
 8006a34:	d003      	beq.n	8006a3e <HAL_RCC_GetSysClockFreq+0x36>
 8006a36:	e027      	b.n	8006a88 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a38:	4b19      	ldr	r3, [pc, #100]	@ (8006aa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8006a3a:	613b      	str	r3, [r7, #16]
      break;
 8006a3c:	e027      	b.n	8006a8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	0c9b      	lsrs	r3, r3, #18
 8006a42:	f003 030f 	and.w	r3, r3, #15
 8006a46:	4a17      	ldr	r2, [pc, #92]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006a48:	5cd3      	ldrb	r3, [r2, r3]
 8006a4a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d010      	beq.n	8006a78 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006a56:	4b11      	ldr	r3, [pc, #68]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0x94>)
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	0c5b      	lsrs	r3, r3, #17
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	4a11      	ldr	r2, [pc, #68]	@ (8006aa8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006a62:	5cd3      	ldrb	r3, [r2, r3]
 8006a64:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a0d      	ldr	r2, [pc, #52]	@ (8006aa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8006a6a:	fb03 f202 	mul.w	r2, r3, r2
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a74:	617b      	str	r3, [r7, #20]
 8006a76:	e004      	b.n	8006a82 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8006aac <HAL_RCC_GetSysClockFreq+0xa4>)
 8006a7c:	fb02 f303 	mul.w	r3, r2, r3
 8006a80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	613b      	str	r3, [r7, #16]
      break;
 8006a86:	e002      	b.n	8006a8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006a88:	4b05      	ldr	r3, [pc, #20]	@ (8006aa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8006a8a:	613b      	str	r3, [r7, #16]
      break;
 8006a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a8e:	693b      	ldr	r3, [r7, #16]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	371c      	adds	r7, #28
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bc80      	pop	{r7}
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	40021000 	.word	0x40021000
 8006aa0:	007a1200 	.word	0x007a1200
 8006aa4:	08008d60 	.word	0x08008d60
 8006aa8:	08008d70 	.word	0x08008d70
 8006aac:	003d0900 	.word	0x003d0900

08006ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ab4:	4b02      	ldr	r3, [pc, #8]	@ (8006ac0 <HAL_RCC_GetHCLKFreq+0x10>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bc80      	pop	{r7}
 8006abe:	4770      	bx	lr
 8006ac0:	20000020 	.word	0x20000020

08006ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ac8:	f7ff fff2 	bl	8006ab0 <HAL_RCC_GetHCLKFreq>
 8006acc:	4602      	mov	r2, r0
 8006ace:	4b05      	ldr	r3, [pc, #20]	@ (8006ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	0a1b      	lsrs	r3, r3, #8
 8006ad4:	f003 0307 	and.w	r3, r3, #7
 8006ad8:	4903      	ldr	r1, [pc, #12]	@ (8006ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ada:	5ccb      	ldrb	r3, [r1, r3]
 8006adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	40021000 	.word	0x40021000
 8006ae8:	08008d58 	.word	0x08008d58

08006aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006af0:	f7ff ffde 	bl	8006ab0 <HAL_RCC_GetHCLKFreq>
 8006af4:	4602      	mov	r2, r0
 8006af6:	4b05      	ldr	r3, [pc, #20]	@ (8006b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	0adb      	lsrs	r3, r3, #11
 8006afc:	f003 0307 	and.w	r3, r3, #7
 8006b00:	4903      	ldr	r1, [pc, #12]	@ (8006b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b02:	5ccb      	ldrb	r3, [r1, r3]
 8006b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	40021000 	.word	0x40021000
 8006b10:	08008d58 	.word	0x08008d58

08006b14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b48 <RCC_Delay+0x34>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a0a      	ldr	r2, [pc, #40]	@ (8006b4c <RCC_Delay+0x38>)
 8006b22:	fba2 2303 	umull	r2, r3, r2, r3
 8006b26:	0a5b      	lsrs	r3, r3, #9
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	fb02 f303 	mul.w	r3, r2, r3
 8006b2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006b30:	bf00      	nop
  }
  while (Delay --);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	1e5a      	subs	r2, r3, #1
 8006b36:	60fa      	str	r2, [r7, #12]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1f9      	bne.n	8006b30 <RCC_Delay+0x1c>
}
 8006b3c:	bf00      	nop
 8006b3e:	bf00      	nop
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bc80      	pop	{r7}
 8006b46:	4770      	bx	lr
 8006b48:	20000020 	.word	0x20000020
 8006b4c:	10624dd3 	.word	0x10624dd3

08006b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	613b      	str	r3, [r7, #16]
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d07d      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b70:	4b4f      	ldr	r3, [pc, #316]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10d      	bne.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b7c:	4b4c      	ldr	r3, [pc, #304]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	4a4b      	ldr	r2, [pc, #300]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b86:	61d3      	str	r3, [r2, #28]
 8006b88:	4b49      	ldr	r3, [pc, #292]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b8a:	69db      	ldr	r3, [r3, #28]
 8006b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b90:	60bb      	str	r3, [r7, #8]
 8006b92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b94:	2301      	movs	r3, #1
 8006b96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b98:	4b46      	ldr	r3, [pc, #280]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d118      	bne.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ba4:	4b43      	ldr	r3, [pc, #268]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a42      	ldr	r2, [pc, #264]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bb0:	f7fe f9aa 	bl	8004f08 <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bb6:	e008      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bb8:	f7fe f9a6 	bl	8004f08 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b64      	cmp	r3, #100	@ 0x64
 8006bc4:	d901      	bls.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e06d      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bca:	4b3a      	ldr	r3, [pc, #232]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0f0      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bd6:	4b36      	ldr	r3, [pc, #216]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bde:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d02e      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d027      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bf4:	4b2e      	ldr	r3, [pc, #184]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bfc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bfe:	4b2e      	ldr	r3, [pc, #184]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c00:	2201      	movs	r2, #1
 8006c02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c04:	4b2c      	ldr	r3, [pc, #176]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006c0a:	4a29      	ldr	r2, [pc, #164]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d014      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c1a:	f7fe f975 	bl	8004f08 <HAL_GetTick>
 8006c1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c20:	e00a      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c22:	f7fe f971 	bl	8004f08 <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d901      	bls.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e036      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c38:	4b1d      	ldr	r3, [pc, #116]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0ee      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c44:	4b1a      	ldr	r3, [pc, #104]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	4917      	ldr	r1, [pc, #92]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c56:	7dfb      	ldrb	r3, [r7, #23]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d105      	bne.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c5c:	4b14      	ldr	r3, [pc, #80]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c5e:	69db      	ldr	r3, [r3, #28]
 8006c60:	4a13      	ldr	r2, [pc, #76]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0302 	and.w	r3, r3, #2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d008      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c74:	4b0e      	ldr	r3, [pc, #56]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	490b      	ldr	r1, [pc, #44]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0310 	and.w	r3, r3, #16
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d008      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c92:	4b07      	ldr	r3, [pc, #28]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	4904      	ldr	r1, [pc, #16]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	40021000 	.word	0x40021000
 8006cb4:	40007000 	.word	0x40007000
 8006cb8:	42420440 	.word	0x42420440

08006cbc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	2300      	movs	r3, #0
 8006cca:	61fb      	str	r3, [r7, #28]
 8006ccc:	2300      	movs	r3, #0
 8006cce:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b10      	cmp	r3, #16
 8006cdc:	d00a      	beq.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b10      	cmp	r3, #16
 8006ce2:	f200 808a 	bhi.w	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d045      	beq.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d075      	beq.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006cf2:	e082      	b.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8006cf4:	4b46      	ldr	r3, [pc, #280]	@ (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006cfa:	4b45      	ldr	r3, [pc, #276]	@ (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d07b      	beq.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	0c9b      	lsrs	r3, r3, #18
 8006d0a:	f003 030f 	and.w	r3, r3, #15
 8006d0e:	4a41      	ldr	r2, [pc, #260]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8006d10:	5cd3      	ldrb	r3, [r2, r3]
 8006d12:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d015      	beq.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d1e:	4b3c      	ldr	r3, [pc, #240]	@ (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	0c5b      	lsrs	r3, r3, #17
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	4a3b      	ldr	r2, [pc, #236]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8006d2a:	5cd3      	ldrb	r3, [r2, r3]
 8006d2c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00d      	beq.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006d38:	4a38      	ldr	r2, [pc, #224]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	fb02 f303 	mul.w	r3, r2, r3
 8006d46:	61fb      	str	r3, [r7, #28]
 8006d48:	e004      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	4a34      	ldr	r2, [pc, #208]	@ (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8006d4e:	fb02 f303 	mul.w	r3, r2, r3
 8006d52:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006d54:	4b2e      	ldr	r3, [pc, #184]	@ (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d60:	d102      	bne.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	61bb      	str	r3, [r7, #24]
      break;
 8006d66:	e04a      	b.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	005b      	lsls	r3, r3, #1
 8006d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d72:	085b      	lsrs	r3, r3, #1
 8006d74:	61bb      	str	r3, [r7, #24]
      break;
 8006d76:	e042      	b.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8006d78:	4b25      	ldr	r3, [pc, #148]	@ (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d88:	d108      	bne.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d003      	beq.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8006d94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d98:	61bb      	str	r3, [r7, #24]
 8006d9a:	e01f      	b.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006da2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006da6:	d109      	bne.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006da8:	4b19      	ldr	r3, [pc, #100]	@ (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dac:	f003 0302 	and.w	r3, r3, #2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8006db4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8006db8:	61bb      	str	r3, [r7, #24]
 8006dba:	e00f      	b.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dc6:	d11c      	bne.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006dc8:	4b11      	ldr	r3, [pc, #68]	@ (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d016      	beq.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8006dd4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8006dd8:	61bb      	str	r3, [r7, #24]
      break;
 8006dda:	e012      	b.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006ddc:	e011      	b.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006dde:	f7ff fe85 	bl	8006aec <HAL_RCC_GetPCLK2Freq>
 8006de2:	4602      	mov	r2, r0
 8006de4:	4b0a      	ldr	r3, [pc, #40]	@ (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	0b9b      	lsrs	r3, r3, #14
 8006dea:	f003 0303 	and.w	r3, r3, #3
 8006dee:	3301      	adds	r3, #1
 8006df0:	005b      	lsls	r3, r3, #1
 8006df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df6:	61bb      	str	r3, [r7, #24]
      break;
 8006df8:	e004      	b.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006dfa:	bf00      	nop
 8006dfc:	e002      	b.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006dfe:	bf00      	nop
 8006e00:	e000      	b.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006e02:	bf00      	nop
    }
  }
  return (frequency);
 8006e04:	69bb      	ldr	r3, [r7, #24]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3720      	adds	r7, #32
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	40021000 	.word	0x40021000
 8006e14:	08008d74 	.word	0x08008d74
 8006e18:	08008d84 	.word	0x08008d84
 8006e1c:	007a1200 	.word	0x007a1200
 8006e20:	003d0900 	.word	0x003d0900
 8006e24:	aaaaaaab 	.word	0xaaaaaaab

08006e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e041      	b.n	8006ebe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d106      	bne.n	8006e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7fd fe28 	bl	8004aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3304      	adds	r3, #4
 8006e64:	4619      	mov	r1, r3
 8006e66:	4610      	mov	r0, r2
 8006e68:	f000 fd16 	bl	8007898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b082      	sub	sp, #8
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e041      	b.n	8006f5c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d106      	bne.n	8006ef2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f839 	bl	8006f64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	3304      	adds	r3, #4
 8006f02:	4619      	mov	r1, r3
 8006f04:	4610      	mov	r0, r2
 8006f06:	f000 fcc7 	bl	8007898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bc80      	pop	{r7}
 8006f74:	4770      	bx	lr
	...

08006f78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d109      	bne.n	8006f9c <HAL_TIM_PWM_Start+0x24>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	bf14      	ite	ne
 8006f94:	2301      	movne	r3, #1
 8006f96:	2300      	moveq	r3, #0
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	e022      	b.n	8006fe2 <HAL_TIM_PWM_Start+0x6a>
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	2b04      	cmp	r3, #4
 8006fa0:	d109      	bne.n	8006fb6 <HAL_TIM_PWM_Start+0x3e>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	bf14      	ite	ne
 8006fae:	2301      	movne	r3, #1
 8006fb0:	2300      	moveq	r3, #0
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	e015      	b.n	8006fe2 <HAL_TIM_PWM_Start+0x6a>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d109      	bne.n	8006fd0 <HAL_TIM_PWM_Start+0x58>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	bf14      	ite	ne
 8006fc8:	2301      	movne	r3, #1
 8006fca:	2300      	moveq	r3, #0
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	e008      	b.n	8006fe2 <HAL_TIM_PWM_Start+0x6a>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	bf14      	ite	ne
 8006fdc:	2301      	movne	r3, #1
 8006fde:	2300      	moveq	r3, #0
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e05e      	b.n	80070a8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d104      	bne.n	8006ffa <HAL_TIM_PWM_Start+0x82>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ff8:	e013      	b.n	8007022 <HAL_TIM_PWM_Start+0xaa>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d104      	bne.n	800700a <HAL_TIM_PWM_Start+0x92>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007008:	e00b      	b.n	8007022 <HAL_TIM_PWM_Start+0xaa>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b08      	cmp	r3, #8
 800700e:	d104      	bne.n	800701a <HAL_TIM_PWM_Start+0xa2>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007018:	e003      	b.n	8007022 <HAL_TIM_PWM_Start+0xaa>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2202      	movs	r2, #2
 800701e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2201      	movs	r2, #1
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	4618      	mov	r0, r3
 800702c:	f000 fec0 	bl	8007db0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a1e      	ldr	r2, [pc, #120]	@ (80070b0 <HAL_TIM_PWM_Start+0x138>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d107      	bne.n	800704a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007048:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a18      	ldr	r2, [pc, #96]	@ (80070b0 <HAL_TIM_PWM_Start+0x138>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d00e      	beq.n	8007072 <HAL_TIM_PWM_Start+0xfa>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800705c:	d009      	beq.n	8007072 <HAL_TIM_PWM_Start+0xfa>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a14      	ldr	r2, [pc, #80]	@ (80070b4 <HAL_TIM_PWM_Start+0x13c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d004      	beq.n	8007072 <HAL_TIM_PWM_Start+0xfa>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a12      	ldr	r2, [pc, #72]	@ (80070b8 <HAL_TIM_PWM_Start+0x140>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d111      	bne.n	8007096 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f003 0307 	and.w	r3, r3, #7
 800707c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b06      	cmp	r3, #6
 8007082:	d010      	beq.n	80070a6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f042 0201 	orr.w	r2, r2, #1
 8007092:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007094:	e007      	b.n	80070a6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f042 0201 	orr.w	r2, r2, #1
 80070a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	40012c00 	.word	0x40012c00
 80070b4:	40000400 	.word	0x40000400
 80070b8:	40000800 	.word	0x40000800

080070bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e093      	b.n	80071f8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d106      	bne.n	80070ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7fd fcf9 	bl	8004adc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2202      	movs	r2, #2
 80070ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	6812      	ldr	r2, [r2, #0]
 80070fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007100:	f023 0307 	bic.w	r3, r3, #7
 8007104:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	3304      	adds	r3, #4
 800710e:	4619      	mov	r1, r3
 8007110:	4610      	mov	r0, r2
 8007112:	f000 fbc1 	bl	8007898 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	4313      	orrs	r3, r2
 8007136:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800713e:	f023 0303 	bic.w	r3, r3, #3
 8007142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	021b      	lsls	r3, r3, #8
 800714e:	4313      	orrs	r3, r2
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	4313      	orrs	r3, r2
 8007154:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800715c:	f023 030c 	bic.w	r3, r3, #12
 8007160:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007168:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800716c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68da      	ldr	r2, [r3, #12]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	021b      	lsls	r3, r3, #8
 8007178:	4313      	orrs	r3, r2
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	4313      	orrs	r3, r2
 800717e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	011a      	lsls	r2, r3, #4
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	031b      	lsls	r3, r3, #12
 800718c:	4313      	orrs	r3, r2
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	4313      	orrs	r3, r2
 8007192:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800719a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	011b      	lsls	r3, r3, #4
 80071a6:	4313      	orrs	r3, r2
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3718      	adds	r7, #24
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007210:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007218:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007220:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007228:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d110      	bne.n	8007252 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007230:	7bfb      	ldrb	r3, [r7, #15]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d102      	bne.n	800723c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007236:	7b7b      	ldrb	r3, [r7, #13]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d001      	beq.n	8007240 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e089      	b.n	8007354 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2202      	movs	r2, #2
 800724c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007250:	e031      	b.n	80072b6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	2b04      	cmp	r3, #4
 8007256:	d110      	bne.n	800727a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007258:	7bbb      	ldrb	r3, [r7, #14]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d102      	bne.n	8007264 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800725e:	7b3b      	ldrb	r3, [r7, #12]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d001      	beq.n	8007268 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e075      	b.n	8007354 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007278:	e01d      	b.n	80072b6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800727a:	7bfb      	ldrb	r3, [r7, #15]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d108      	bne.n	8007292 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007280:	7bbb      	ldrb	r3, [r7, #14]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d105      	bne.n	8007292 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007286:	7b7b      	ldrb	r3, [r7, #13]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d102      	bne.n	8007292 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800728c:	7b3b      	ldrb	r3, [r7, #12]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d001      	beq.n	8007296 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e05e      	b.n	8007354 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2202      	movs	r2, #2
 800729a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2202      	movs	r2, #2
 80072a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2202      	movs	r2, #2
 80072aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2202      	movs	r2, #2
 80072b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d003      	beq.n	80072c4 <HAL_TIM_Encoder_Start_IT+0xc4>
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2b04      	cmp	r3, #4
 80072c0:	d010      	beq.n	80072e4 <HAL_TIM_Encoder_Start_IT+0xe4>
 80072c2:	e01f      	b.n	8007304 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2201      	movs	r2, #1
 80072ca:	2100      	movs	r1, #0
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fd6f 	bl	8007db0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68da      	ldr	r2, [r3, #12]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f042 0202 	orr.w	r2, r2, #2
 80072e0:	60da      	str	r2, [r3, #12]
      break;
 80072e2:	e02e      	b.n	8007342 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2201      	movs	r2, #1
 80072ea:	2104      	movs	r1, #4
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 fd5f 	bl	8007db0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f042 0204 	orr.w	r2, r2, #4
 8007300:	60da      	str	r2, [r3, #12]
      break;
 8007302:	e01e      	b.n	8007342 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2201      	movs	r2, #1
 800730a:	2100      	movs	r1, #0
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fd4f 	bl	8007db0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2201      	movs	r2, #1
 8007318:	2104      	movs	r1, #4
 800731a:	4618      	mov	r0, r3
 800731c:	f000 fd48 	bl	8007db0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0202 	orr.w	r2, r2, #2
 800732e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68da      	ldr	r2, [r3, #12]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 0204 	orr.w	r2, r2, #4
 800733e:	60da      	str	r2, [r3, #12]
      break;
 8007340:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f042 0201 	orr.w	r2, r2, #1
 8007350:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d020      	beq.n	80073c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f003 0302 	and.w	r3, r3, #2
 8007384:	2b00      	cmp	r3, #0
 8007386:	d01b      	beq.n	80073c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f06f 0202 	mvn.w	r2, #2
 8007390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	f003 0303 	and.w	r3, r3, #3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7fa fa84 	bl	80018b4 <HAL_TIM_IC_CaptureCallback>
 80073ac:	e005      	b.n	80073ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fa56 	bl	8007860 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fa5c 	bl	8007872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f003 0304 	and.w	r3, r3, #4
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d020      	beq.n	800740c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d01b      	beq.n	800740c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f06f 0204 	mvn.w	r2, #4
 80073dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2202      	movs	r2, #2
 80073e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7fa fa5e 	bl	80018b4 <HAL_TIM_IC_CaptureCallback>
 80073f8:	e005      	b.n	8007406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fa30 	bl	8007860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fa36 	bl	8007872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f003 0308 	and.w	r3, r3, #8
 8007412:	2b00      	cmp	r3, #0
 8007414:	d020      	beq.n	8007458 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f003 0308 	and.w	r3, r3, #8
 800741c:	2b00      	cmp	r3, #0
 800741e:	d01b      	beq.n	8007458 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f06f 0208 	mvn.w	r2, #8
 8007428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2204      	movs	r2, #4
 800742e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	69db      	ldr	r3, [r3, #28]
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d003      	beq.n	8007446 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7fa fa38 	bl	80018b4 <HAL_TIM_IC_CaptureCallback>
 8007444:	e005      	b.n	8007452 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fa0a 	bl	8007860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fa10 	bl	8007872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f003 0310 	and.w	r3, r3, #16
 800745e:	2b00      	cmp	r3, #0
 8007460:	d020      	beq.n	80074a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f003 0310 	and.w	r3, r3, #16
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01b      	beq.n	80074a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f06f 0210 	mvn.w	r2, #16
 8007474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2208      	movs	r2, #8
 800747a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7fa fa12 	bl	80018b4 <HAL_TIM_IC_CaptureCallback>
 8007490:	e005      	b.n	800749e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f9e4 	bl	8007860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f9ea 	bl	8007872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00c      	beq.n	80074c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d007      	beq.n	80074c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f06f 0201 	mvn.w	r2, #1
 80074c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f9c3 	bl	800784e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00c      	beq.n	80074ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d007      	beq.n	80074ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80074e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fced 	bl	8007ec6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00c      	beq.n	8007510 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d007      	beq.n	8007510 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f9ba 	bl	8007884 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f003 0320 	and.w	r3, r3, #32
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00c      	beq.n	8007534 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f003 0320 	and.w	r3, r3, #32
 8007520:	2b00      	cmp	r3, #0
 8007522:	d007      	beq.n	8007534 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f06f 0220 	mvn.w	r2, #32
 800752c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fcc0 	bl	8007eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007534:	bf00      	nop
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007552:	2b01      	cmp	r3, #1
 8007554:	d101      	bne.n	800755a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007556:	2302      	movs	r3, #2
 8007558:	e0ae      	b.n	80076b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b0c      	cmp	r3, #12
 8007566:	f200 809f 	bhi.w	80076a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800756a:	a201      	add	r2, pc, #4	@ (adr r2, 8007570 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800756c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007570:	080075a5 	.word	0x080075a5
 8007574:	080076a9 	.word	0x080076a9
 8007578:	080076a9 	.word	0x080076a9
 800757c:	080076a9 	.word	0x080076a9
 8007580:	080075e5 	.word	0x080075e5
 8007584:	080076a9 	.word	0x080076a9
 8007588:	080076a9 	.word	0x080076a9
 800758c:	080076a9 	.word	0x080076a9
 8007590:	08007627 	.word	0x08007627
 8007594:	080076a9 	.word	0x080076a9
 8007598:	080076a9 	.word	0x080076a9
 800759c:	080076a9 	.word	0x080076a9
 80075a0:	08007667 	.word	0x08007667
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68b9      	ldr	r1, [r7, #8]
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 f9e2 	bl	8007974 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	699a      	ldr	r2, [r3, #24]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f042 0208 	orr.w	r2, r2, #8
 80075be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	699a      	ldr	r2, [r3, #24]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 0204 	bic.w	r2, r2, #4
 80075ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6999      	ldr	r1, [r3, #24]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	691a      	ldr	r2, [r3, #16]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	430a      	orrs	r2, r1
 80075e0:	619a      	str	r2, [r3, #24]
      break;
 80075e2:	e064      	b.n	80076ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68b9      	ldr	r1, [r7, #8]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fa28 	bl	8007a40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	699a      	ldr	r2, [r3, #24]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800760e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6999      	ldr	r1, [r3, #24]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	021a      	lsls	r2, r3, #8
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	430a      	orrs	r2, r1
 8007622:	619a      	str	r2, [r3, #24]
      break;
 8007624:	e043      	b.n	80076ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68b9      	ldr	r1, [r7, #8]
 800762c:	4618      	mov	r0, r3
 800762e:	f000 fa71 	bl	8007b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	69da      	ldr	r2, [r3, #28]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f042 0208 	orr.w	r2, r2, #8
 8007640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	69da      	ldr	r2, [r3, #28]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f022 0204 	bic.w	r2, r2, #4
 8007650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	69d9      	ldr	r1, [r3, #28]
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	691a      	ldr	r2, [r3, #16]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	61da      	str	r2, [r3, #28]
      break;
 8007664:	e023      	b.n	80076ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68b9      	ldr	r1, [r7, #8]
 800766c:	4618      	mov	r0, r3
 800766e:	f000 fabb 	bl	8007be8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	69da      	ldr	r2, [r3, #28]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	69da      	ldr	r2, [r3, #28]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69d9      	ldr	r1, [r3, #28]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	021a      	lsls	r2, r3, #8
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	61da      	str	r2, [r3, #28]
      break;
 80076a6:	e002      	b.n	80076ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	75fb      	strb	r3, [r7, #23]
      break;
 80076ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80076b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3718      	adds	r7, #24
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d101      	bne.n	80076dc <HAL_TIM_ConfigClockSource+0x1c>
 80076d8:	2302      	movs	r3, #2
 80076da:	e0b4      	b.n	8007846 <HAL_TIM_ConfigClockSource+0x186>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80076fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007702:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007714:	d03e      	beq.n	8007794 <HAL_TIM_ConfigClockSource+0xd4>
 8007716:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800771a:	f200 8087 	bhi.w	800782c <HAL_TIM_ConfigClockSource+0x16c>
 800771e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007722:	f000 8086 	beq.w	8007832 <HAL_TIM_ConfigClockSource+0x172>
 8007726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800772a:	d87f      	bhi.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
 800772c:	2b70      	cmp	r3, #112	@ 0x70
 800772e:	d01a      	beq.n	8007766 <HAL_TIM_ConfigClockSource+0xa6>
 8007730:	2b70      	cmp	r3, #112	@ 0x70
 8007732:	d87b      	bhi.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
 8007734:	2b60      	cmp	r3, #96	@ 0x60
 8007736:	d050      	beq.n	80077da <HAL_TIM_ConfigClockSource+0x11a>
 8007738:	2b60      	cmp	r3, #96	@ 0x60
 800773a:	d877      	bhi.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
 800773c:	2b50      	cmp	r3, #80	@ 0x50
 800773e:	d03c      	beq.n	80077ba <HAL_TIM_ConfigClockSource+0xfa>
 8007740:	2b50      	cmp	r3, #80	@ 0x50
 8007742:	d873      	bhi.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
 8007744:	2b40      	cmp	r3, #64	@ 0x40
 8007746:	d058      	beq.n	80077fa <HAL_TIM_ConfigClockSource+0x13a>
 8007748:	2b40      	cmp	r3, #64	@ 0x40
 800774a:	d86f      	bhi.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
 800774c:	2b30      	cmp	r3, #48	@ 0x30
 800774e:	d064      	beq.n	800781a <HAL_TIM_ConfigClockSource+0x15a>
 8007750:	2b30      	cmp	r3, #48	@ 0x30
 8007752:	d86b      	bhi.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
 8007754:	2b20      	cmp	r3, #32
 8007756:	d060      	beq.n	800781a <HAL_TIM_ConfigClockSource+0x15a>
 8007758:	2b20      	cmp	r3, #32
 800775a:	d867      	bhi.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
 800775c:	2b00      	cmp	r3, #0
 800775e:	d05c      	beq.n	800781a <HAL_TIM_ConfigClockSource+0x15a>
 8007760:	2b10      	cmp	r3, #16
 8007762:	d05a      	beq.n	800781a <HAL_TIM_ConfigClockSource+0x15a>
 8007764:	e062      	b.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007776:	f000 fafc 	bl	8007d72 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007788:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	609a      	str	r2, [r3, #8]
      break;
 8007792:	e04f      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80077a4:	f000 fae5 	bl	8007d72 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689a      	ldr	r2, [r3, #8]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077b6:	609a      	str	r2, [r3, #8]
      break;
 80077b8:	e03c      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077c6:	461a      	mov	r2, r3
 80077c8:	f000 fa5c 	bl	8007c84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2150      	movs	r1, #80	@ 0x50
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 fab3 	bl	8007d3e <TIM_ITRx_SetConfig>
      break;
 80077d8:	e02c      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077e6:	461a      	mov	r2, r3
 80077e8:	f000 fa7a 	bl	8007ce0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2160      	movs	r1, #96	@ 0x60
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 faa3 	bl	8007d3e <TIM_ITRx_SetConfig>
      break;
 80077f8:	e01c      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007806:	461a      	mov	r2, r3
 8007808:	f000 fa3c 	bl	8007c84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2140      	movs	r1, #64	@ 0x40
 8007812:	4618      	mov	r0, r3
 8007814:	f000 fa93 	bl	8007d3e <TIM_ITRx_SetConfig>
      break;
 8007818:	e00c      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4619      	mov	r1, r3
 8007824:	4610      	mov	r0, r2
 8007826:	f000 fa8a 	bl	8007d3e <TIM_ITRx_SetConfig>
      break;
 800782a:	e003      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	73fb      	strb	r3, [r7, #15]
      break;
 8007830:	e000      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007844:	7bfb      	ldrb	r3, [r7, #15]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007856:	bf00      	nop
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	bc80      	pop	{r7}
 800785e:	4770      	bx	lr

08007860 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	bc80      	pop	{r7}
 8007870:	4770      	bx	lr

08007872 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	bc80      	pop	{r7}
 8007882:	4770      	bx	lr

08007884 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	bc80      	pop	{r7}
 8007894:	4770      	bx	lr
	...

08007898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a2f      	ldr	r2, [pc, #188]	@ (8007968 <TIM_Base_SetConfig+0xd0>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d00b      	beq.n	80078c8 <TIM_Base_SetConfig+0x30>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078b6:	d007      	beq.n	80078c8 <TIM_Base_SetConfig+0x30>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a2c      	ldr	r2, [pc, #176]	@ (800796c <TIM_Base_SetConfig+0xd4>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d003      	beq.n	80078c8 <TIM_Base_SetConfig+0x30>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a2b      	ldr	r2, [pc, #172]	@ (8007970 <TIM_Base_SetConfig+0xd8>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d108      	bne.n	80078da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a22      	ldr	r2, [pc, #136]	@ (8007968 <TIM_Base_SetConfig+0xd0>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00b      	beq.n	80078fa <TIM_Base_SetConfig+0x62>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078e8:	d007      	beq.n	80078fa <TIM_Base_SetConfig+0x62>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a1f      	ldr	r2, [pc, #124]	@ (800796c <TIM_Base_SetConfig+0xd4>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d003      	beq.n	80078fa <TIM_Base_SetConfig+0x62>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a1e      	ldr	r2, [pc, #120]	@ (8007970 <TIM_Base_SetConfig+0xd8>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d108      	bne.n	800790c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	4313      	orrs	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a0d      	ldr	r2, [pc, #52]	@ (8007968 <TIM_Base_SetConfig+0xd0>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d103      	bne.n	8007940 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	691a      	ldr	r2, [r3, #16]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	2b00      	cmp	r3, #0
 8007950:	d005      	beq.n	800795e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	f023 0201 	bic.w	r2, r3, #1
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	611a      	str	r2, [r3, #16]
  }
}
 800795e:	bf00      	nop
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	bc80      	pop	{r7}
 8007966:	4770      	bx	lr
 8007968:	40012c00 	.word	0x40012c00
 800796c:	40000400 	.word	0x40000400
 8007970:	40000800 	.word	0x40000800

08007974 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007974:	b480      	push	{r7}
 8007976:	b087      	sub	sp, #28
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a1b      	ldr	r3, [r3, #32]
 8007988:	f023 0201 	bic.w	r2, r3, #1
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f023 0303 	bic.w	r3, r3, #3
 80079aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f023 0302 	bic.w	r3, r3, #2
 80079bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a1c      	ldr	r2, [pc, #112]	@ (8007a3c <TIM_OC1_SetConfig+0xc8>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d10c      	bne.n	80079ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f023 0308 	bic.w	r3, r3, #8
 80079d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	4313      	orrs	r3, r2
 80079e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	f023 0304 	bic.w	r3, r3, #4
 80079e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a13      	ldr	r2, [pc, #76]	@ (8007a3c <TIM_OC1_SetConfig+0xc8>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d111      	bne.n	8007a16 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	621a      	str	r2, [r3, #32]
}
 8007a30:	bf00      	nop
 8007a32:	371c      	adds	r7, #28
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bc80      	pop	{r7}
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	40012c00 	.word	0x40012c00

08007a40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	f023 0210 	bic.w	r2, r3, #16
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	021b      	lsls	r3, r3, #8
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	f023 0320 	bic.w	r3, r3, #32
 8007a8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	011b      	lsls	r3, r3, #4
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8007b10 <TIM_OC2_SetConfig+0xd0>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d10d      	bne.n	8007abc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	011b      	lsls	r3, r3, #4
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007aba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a14      	ldr	r2, [pc, #80]	@ (8007b10 <TIM_OC2_SetConfig+0xd0>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d113      	bne.n	8007aec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007aca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	621a      	str	r2, [r3, #32]
}
 8007b06:	bf00      	nop
 8007b08:	371c      	adds	r7, #28
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bc80      	pop	{r7}
 8007b0e:	4770      	bx	lr
 8007b10:	40012c00 	.word	0x40012c00

08007b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b087      	sub	sp, #28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a1b      	ldr	r3, [r3, #32]
 8007b28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f023 0303 	bic.w	r3, r3, #3
 8007b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	021b      	lsls	r3, r3, #8
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007be4 <TIM_OC3_SetConfig+0xd0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d10d      	bne.n	8007b8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	021b      	lsls	r3, r3, #8
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a14      	ldr	r2, [pc, #80]	@ (8007be4 <TIM_OC3_SetConfig+0xd0>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d113      	bne.n	8007bbe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	011b      	lsls	r3, r3, #4
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	011b      	lsls	r3, r3, #4
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	621a      	str	r2, [r3, #32]
}
 8007bd8:	bf00      	nop
 8007bda:	371c      	adds	r7, #28
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bc80      	pop	{r7}
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	40012c00 	.word	0x40012c00

08007be8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b087      	sub	sp, #28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a1b      	ldr	r3, [r3, #32]
 8007bfc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	021b      	lsls	r3, r3, #8
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	031b      	lsls	r3, r3, #12
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a0f      	ldr	r2, [pc, #60]	@ (8007c80 <TIM_OC4_SetConfig+0x98>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d109      	bne.n	8007c5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	019b      	lsls	r3, r3, #6
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	621a      	str	r2, [r3, #32]
}
 8007c76:	bf00      	nop
 8007c78:	371c      	adds	r7, #28
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bc80      	pop	{r7}
 8007c7e:	4770      	bx	lr
 8007c80:	40012c00 	.word	0x40012c00

08007c84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6a1b      	ldr	r3, [r3, #32]
 8007c94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	f023 0201 	bic.w	r2, r3, #1
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007cae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	011b      	lsls	r3, r3, #4
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f023 030a 	bic.w	r3, r3, #10
 8007cc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	621a      	str	r2, [r3, #32]
}
 8007cd6:	bf00      	nop
 8007cd8:	371c      	adds	r7, #28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bc80      	pop	{r7}
 8007cde:	4770      	bx	lr

08007ce0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6a1b      	ldr	r3, [r3, #32]
 8007cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	f023 0210 	bic.w	r2, r3, #16
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	031b      	lsls	r3, r3, #12
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	011b      	lsls	r3, r3, #4
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	621a      	str	r2, [r3, #32]
}
 8007d34:	bf00      	nop
 8007d36:	371c      	adds	r7, #28
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bc80      	pop	{r7}
 8007d3c:	4770      	bx	lr

08007d3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b085      	sub	sp, #20
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	f043 0307 	orr.w	r3, r3, #7
 8007d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	609a      	str	r2, [r3, #8]
}
 8007d68:	bf00      	nop
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bc80      	pop	{r7}
 8007d70:	4770      	bx	lr

08007d72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b087      	sub	sp, #28
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	60f8      	str	r0, [r7, #12]
 8007d7a:	60b9      	str	r1, [r7, #8]
 8007d7c:	607a      	str	r2, [r7, #4]
 8007d7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	021a      	lsls	r2, r3, #8
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	431a      	orrs	r2, r3
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	609a      	str	r2, [r3, #8]
}
 8007da6:	bf00      	nop
 8007da8:	371c      	adds	r7, #28
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bc80      	pop	{r7}
 8007dae:	4770      	bx	lr

08007db0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b087      	sub	sp, #28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	f003 031f 	and.w	r3, r3, #31
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6a1a      	ldr	r2, [r3, #32]
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	43db      	mvns	r3, r3
 8007dd2:	401a      	ands	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6a1a      	ldr	r2, [r3, #32]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f003 031f 	and.w	r3, r3, #31
 8007de2:	6879      	ldr	r1, [r7, #4]
 8007de4:	fa01 f303 	lsl.w	r3, r1, r3
 8007de8:	431a      	orrs	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	621a      	str	r2, [r3, #32]
}
 8007dee:	bf00      	nop
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bc80      	pop	{r7}
 8007df6:	4770      	bx	lr

08007df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d101      	bne.n	8007e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	e046      	b.n	8007e9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a16      	ldr	r2, [pc, #88]	@ (8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d00e      	beq.n	8007e72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e5c:	d009      	beq.n	8007e72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a12      	ldr	r2, [pc, #72]	@ (8007eac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d004      	beq.n	8007e72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a10      	ldr	r2, [pc, #64]	@ (8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d10c      	bne.n	8007e8c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bc80      	pop	{r7}
 8007ea6:	4770      	bx	lr
 8007ea8:	40012c00 	.word	0x40012c00
 8007eac:	40000400 	.word	0x40000400
 8007eb0:	40000800 	.word	0x40000800

08007eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bc80      	pop	{r7}
 8007ec4:	4770      	bx	lr

08007ec6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b083      	sub	sp, #12
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ece:	bf00      	nop
 8007ed0:	370c      	adds	r7, #12
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bc80      	pop	{r7}
 8007ed6:	4770      	bx	lr

08007ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e042      	b.n	8007f70 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d106      	bne.n	8007f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7fc fe98 	bl	8004c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2224      	movs	r2, #36	@ 0x24
 8007f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68da      	ldr	r2, [r3, #12]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fd09 	bl	8008934 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	691a      	ldr	r2, [r3, #16]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	695a      	ldr	r2, [r3, #20]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68da      	ldr	r2, [r3, #12]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2220      	movs	r2, #32
 8007f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2220      	movs	r2, #32
 8007f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	4613      	mov	r3, r2
 8007f84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b20      	cmp	r3, #32
 8007f90:	d121      	bne.n	8007fd6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <HAL_UART_Transmit_IT+0x26>
 8007f98:	88fb      	ldrh	r3, [r7, #6]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d101      	bne.n	8007fa2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e01a      	b.n	8007fd8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	88fa      	ldrh	r2, [r7, #6]
 8007fac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	88fa      	ldrh	r2, [r7, #6]
 8007fb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2221      	movs	r2, #33	@ 0x21
 8007fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68da      	ldr	r2, [r3, #12]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007fd0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	e000      	b.n	8007fd8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8007fd6:	2302      	movs	r3, #2
  }
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bc80      	pop	{r7}
 8007fe0:	4770      	bx	lr

08007fe2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b084      	sub	sp, #16
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	60f8      	str	r0, [r7, #12]
 8007fea:	60b9      	str	r1, [r7, #8]
 8007fec:	4613      	mov	r3, r2
 8007fee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b20      	cmp	r3, #32
 8007ffa:	d112      	bne.n	8008022 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <HAL_UART_Receive_IT+0x26>
 8008002:	88fb      	ldrh	r3, [r7, #6]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d101      	bne.n	800800c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e00b      	b.n	8008024 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008012:	88fb      	ldrh	r3, [r7, #6]
 8008014:	461a      	mov	r2, r3
 8008016:	68b9      	ldr	r1, [r7, #8]
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f000 fab6 	bl	800858a <UART_Start_Receive_IT>
 800801e:	4603      	mov	r3, r0
 8008020:	e000      	b.n	8008024 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008022:	2302      	movs	r3, #2
  }
}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b0ba      	sub	sp, #232	@ 0xe8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008052:	2300      	movs	r3, #0
 8008054:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008058:	2300      	movs	r3, #0
 800805a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800805e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008062:	f003 030f 	and.w	r3, r3, #15
 8008066:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800806a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10f      	bne.n	8008092 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	2b00      	cmp	r3, #0
 800807c:	d009      	beq.n	8008092 <HAL_UART_IRQHandler+0x66>
 800807e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008082:	f003 0320 	and.w	r3, r3, #32
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fb93 	bl	80087b6 <UART_Receive_IT>
      return;
 8008090:	e25b      	b.n	800854a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008092:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008096:	2b00      	cmp	r3, #0
 8008098:	f000 80de 	beq.w	8008258 <HAL_UART_IRQHandler+0x22c>
 800809c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080a0:	f003 0301 	and.w	r3, r3, #1
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d106      	bne.n	80080b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80080a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 80d1 	beq.w	8008258 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80080b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00b      	beq.n	80080da <HAL_UART_IRQHandler+0xae>
 80080c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d005      	beq.n	80080da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080d2:	f043 0201 	orr.w	r2, r3, #1
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080de:	f003 0304 	and.w	r3, r3, #4
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00b      	beq.n	80080fe <HAL_UART_IRQHandler+0xd2>
 80080e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d005      	beq.n	80080fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080f6:	f043 0202 	orr.w	r2, r3, #2
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008102:	f003 0302 	and.w	r3, r3, #2
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00b      	beq.n	8008122 <HAL_UART_IRQHandler+0xf6>
 800810a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	2b00      	cmp	r3, #0
 8008114:	d005      	beq.n	8008122 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800811a:	f043 0204 	orr.w	r2, r3, #4
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008126:	f003 0308 	and.w	r3, r3, #8
 800812a:	2b00      	cmp	r3, #0
 800812c:	d011      	beq.n	8008152 <HAL_UART_IRQHandler+0x126>
 800812e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008132:	f003 0320 	and.w	r3, r3, #32
 8008136:	2b00      	cmp	r3, #0
 8008138:	d105      	bne.n	8008146 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800813a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b00      	cmp	r3, #0
 8008144:	d005      	beq.n	8008152 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800814a:	f043 0208 	orr.w	r2, r3, #8
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 81f2 	beq.w	8008540 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800815c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008160:	f003 0320 	and.w	r3, r3, #32
 8008164:	2b00      	cmp	r3, #0
 8008166:	d008      	beq.n	800817a <HAL_UART_IRQHandler+0x14e>
 8008168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800816c:	f003 0320 	and.w	r3, r3, #32
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fb1e 	bl	80087b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	695b      	ldr	r3, [r3, #20]
 8008180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008184:	2b00      	cmp	r3, #0
 8008186:	bf14      	ite	ne
 8008188:	2301      	movne	r3, #1
 800818a:	2300      	moveq	r3, #0
 800818c:	b2db      	uxtb	r3, r3
 800818e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008196:	f003 0308 	and.w	r3, r3, #8
 800819a:	2b00      	cmp	r3, #0
 800819c:	d103      	bne.n	80081a6 <HAL_UART_IRQHandler+0x17a>
 800819e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d04f      	beq.n	8008246 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fa28 	bl	80085fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d041      	beq.n	800823e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	3314      	adds	r3, #20
 80081c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081c8:	e853 3f00 	ldrex	r3, [r3]
 80081cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80081d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	3314      	adds	r3, #20
 80081e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80081e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80081ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80081f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80081f6:	e841 2300 	strex	r3, r2, [r1]
 80081fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80081fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1d9      	bne.n	80081ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800820a:	2b00      	cmp	r3, #0
 800820c:	d013      	beq.n	8008236 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008212:	4a7e      	ldr	r2, [pc, #504]	@ (800840c <HAL_UART_IRQHandler+0x3e0>)
 8008214:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800821a:	4618      	mov	r0, r3
 800821c:	f7fd fc42 	bl	8005aa4 <HAL_DMA_Abort_IT>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d016      	beq.n	8008254 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800822a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008230:	4610      	mov	r0, r2
 8008232:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008234:	e00e      	b.n	8008254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f993 	bl	8008562 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800823c:	e00a      	b.n	8008254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f98f 	bl	8008562 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008244:	e006      	b.n	8008254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f98b 	bl	8008562 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008252:	e175      	b.n	8008540 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008254:	bf00      	nop
    return;
 8008256:	e173      	b.n	8008540 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800825c:	2b01      	cmp	r3, #1
 800825e:	f040 814f 	bne.w	8008500 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008266:	f003 0310 	and.w	r3, r3, #16
 800826a:	2b00      	cmp	r3, #0
 800826c:	f000 8148 	beq.w	8008500 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008274:	f003 0310 	and.w	r3, r3, #16
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 8141 	beq.w	8008500 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800827e:	2300      	movs	r3, #0
 8008280:	60bb      	str	r3, [r7, #8]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	60bb      	str	r3, [r7, #8]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	60bb      	str	r3, [r7, #8]
 8008292:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f000 80b6 	beq.w	8008410 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 8145 	beq.w	8008544 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082c2:	429a      	cmp	r2, r3
 80082c4:	f080 813e 	bcs.w	8008544 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	2b20      	cmp	r3, #32
 80082d8:	f000 8088 	beq.w	80083ec <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	330c      	adds	r3, #12
 80082e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80082ea:	e853 3f00 	ldrex	r3, [r3]
 80082ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80082f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	330c      	adds	r3, #12
 8008304:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008308:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800830c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008310:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008314:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008318:	e841 2300 	strex	r3, r2, [r1]
 800831c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008320:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1d9      	bne.n	80082dc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	3314      	adds	r3, #20
 800832e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008330:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008332:	e853 3f00 	ldrex	r3, [r3]
 8008336:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008338:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800833a:	f023 0301 	bic.w	r3, r3, #1
 800833e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3314      	adds	r3, #20
 8008348:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800834c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008350:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008352:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008354:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008358:	e841 2300 	strex	r3, r2, [r1]
 800835c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800835e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1e1      	bne.n	8008328 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3314      	adds	r3, #20
 800836a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800836e:	e853 3f00 	ldrex	r3, [r3]
 8008372:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008374:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008376:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800837a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3314      	adds	r3, #20
 8008384:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008388:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800838a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800838e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008390:	e841 2300 	strex	r3, r2, [r1]
 8008394:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008396:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1e3      	bne.n	8008364 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2220      	movs	r2, #32
 80083a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	330c      	adds	r3, #12
 80083b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083b4:	e853 3f00 	ldrex	r3, [r3]
 80083b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80083ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083bc:	f023 0310 	bic.w	r3, r3, #16
 80083c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	330c      	adds	r3, #12
 80083ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80083ce:	65ba      	str	r2, [r7, #88]	@ 0x58
 80083d0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80083d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083d6:	e841 2300 	strex	r3, r2, [r1]
 80083da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80083dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1e3      	bne.n	80083aa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fd fb21 	bl	8005a2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2202      	movs	r2, #2
 80083f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	b29b      	uxth	r3, r3
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f8b6 	bl	8008574 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008408:	e09c      	b.n	8008544 <HAL_UART_IRQHandler+0x518>
 800840a:	bf00      	nop
 800840c:	080086c1 	.word	0x080086c1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008418:	b29b      	uxth	r3, r3
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008424:	b29b      	uxth	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	f000 808e 	beq.w	8008548 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800842c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008430:	2b00      	cmp	r3, #0
 8008432:	f000 8089 	beq.w	8008548 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	330c      	adds	r3, #12
 800843c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008440:	e853 3f00 	ldrex	r3, [r3]
 8008444:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008448:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800844c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	330c      	adds	r3, #12
 8008456:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800845a:	647a      	str	r2, [r7, #68]	@ 0x44
 800845c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008460:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008462:	e841 2300 	strex	r3, r2, [r1]
 8008466:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1e3      	bne.n	8008436 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3314      	adds	r3, #20
 8008474:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008478:	e853 3f00 	ldrex	r3, [r3]
 800847c:	623b      	str	r3, [r7, #32]
   return(result);
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	f023 0301 	bic.w	r3, r3, #1
 8008484:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3314      	adds	r3, #20
 800848e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008492:	633a      	str	r2, [r7, #48]	@ 0x30
 8008494:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800849a:	e841 2300 	strex	r3, r2, [r1]
 800849e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1e3      	bne.n	800846e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2220      	movs	r2, #32
 80084aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	330c      	adds	r3, #12
 80084ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	e853 3f00 	ldrex	r3, [r3]
 80084c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f023 0310 	bic.w	r3, r3, #16
 80084ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	330c      	adds	r3, #12
 80084d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80084d8:	61fa      	str	r2, [r7, #28]
 80084da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084dc:	69b9      	ldr	r1, [r7, #24]
 80084de:	69fa      	ldr	r2, [r7, #28]
 80084e0:	e841 2300 	strex	r3, r2, [r1]
 80084e4:	617b      	str	r3, [r7, #20]
   return(result);
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1e3      	bne.n	80084b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2202      	movs	r2, #2
 80084f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80084f6:	4619      	mov	r1, r3
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 f83b 	bl	8008574 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80084fe:	e023      	b.n	8008548 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008508:	2b00      	cmp	r3, #0
 800850a:	d009      	beq.n	8008520 <HAL_UART_IRQHandler+0x4f4>
 800850c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008514:	2b00      	cmp	r3, #0
 8008516:	d003      	beq.n	8008520 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f8e5 	bl	80086e8 <UART_Transmit_IT>
    return;
 800851e:	e014      	b.n	800854a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00e      	beq.n	800854a <HAL_UART_IRQHandler+0x51e>
 800852c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008534:	2b00      	cmp	r3, #0
 8008536:	d008      	beq.n	800854a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f924 	bl	8008786 <UART_EndTransmit_IT>
    return;
 800853e:	e004      	b.n	800854a <HAL_UART_IRQHandler+0x51e>
    return;
 8008540:	bf00      	nop
 8008542:	e002      	b.n	800854a <HAL_UART_IRQHandler+0x51e>
      return;
 8008544:	bf00      	nop
 8008546:	e000      	b.n	800854a <HAL_UART_IRQHandler+0x51e>
      return;
 8008548:	bf00      	nop
  }
}
 800854a:	37e8      	adds	r7, #232	@ 0xe8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	bc80      	pop	{r7}
 8008560:	4770      	bx	lr

08008562 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008562:	b480      	push	{r7}
 8008564:	b083      	sub	sp, #12
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800856a:	bf00      	nop
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	bc80      	pop	{r7}
 8008572:	4770      	bx	lr

08008574 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	460b      	mov	r3, r1
 800857e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	bc80      	pop	{r7}
 8008588:	4770      	bx	lr

0800858a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800858a:	b480      	push	{r7}
 800858c:	b085      	sub	sp, #20
 800858e:	af00      	add	r7, sp, #0
 8008590:	60f8      	str	r0, [r7, #12]
 8008592:	60b9      	str	r1, [r7, #8]
 8008594:	4613      	mov	r3, r2
 8008596:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	88fa      	ldrh	r2, [r7, #6]
 80085a2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	88fa      	ldrh	r2, [r7, #6]
 80085a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2222      	movs	r2, #34	@ 0x22
 80085b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d007      	beq.n	80085d0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68da      	ldr	r2, [r3, #12]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085ce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	695a      	ldr	r2, [r3, #20]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f042 0201 	orr.w	r2, r2, #1
 80085de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68da      	ldr	r2, [r3, #12]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f042 0220 	orr.w	r2, r2, #32
 80085ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bc80      	pop	{r7}
 80085fa:	4770      	bx	lr

080085fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b095      	sub	sp, #84	@ 0x54
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	330c      	adds	r3, #12
 800860a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800860e:	e853 3f00 	ldrex	r3, [r3]
 8008612:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008616:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800861a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	330c      	adds	r3, #12
 8008622:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008624:	643a      	str	r2, [r7, #64]	@ 0x40
 8008626:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008628:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800862a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800862c:	e841 2300 	strex	r3, r2, [r1]
 8008630:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1e5      	bne.n	8008604 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3314      	adds	r3, #20
 800863e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	e853 3f00 	ldrex	r3, [r3]
 8008646:	61fb      	str	r3, [r7, #28]
   return(result);
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	f023 0301 	bic.w	r3, r3, #1
 800864e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	3314      	adds	r3, #20
 8008656:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008658:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800865a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800865e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008660:	e841 2300 	strex	r3, r2, [r1]
 8008664:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1e5      	bne.n	8008638 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008670:	2b01      	cmp	r3, #1
 8008672:	d119      	bne.n	80086a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	330c      	adds	r3, #12
 800867a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	e853 3f00 	ldrex	r3, [r3]
 8008682:	60bb      	str	r3, [r7, #8]
   return(result);
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	f023 0310 	bic.w	r3, r3, #16
 800868a:	647b      	str	r3, [r7, #68]	@ 0x44
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	330c      	adds	r3, #12
 8008692:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008694:	61ba      	str	r2, [r7, #24]
 8008696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008698:	6979      	ldr	r1, [r7, #20]
 800869a:	69ba      	ldr	r2, [r7, #24]
 800869c:	e841 2300 	strex	r3, r2, [r1]
 80086a0:	613b      	str	r3, [r7, #16]
   return(result);
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1e5      	bne.n	8008674 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2220      	movs	r2, #32
 80086ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80086b6:	bf00      	nop
 80086b8:	3754      	adds	r7, #84	@ 0x54
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bc80      	pop	{r7}
 80086be:	4770      	bx	lr

080086c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f7ff ff41 	bl	8008562 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086e0:	bf00      	nop
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b21      	cmp	r3, #33	@ 0x21
 80086fa:	d13e      	bne.n	800877a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008704:	d114      	bne.n	8008730 <UART_Transmit_IT+0x48>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d110      	bne.n	8008730 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	881b      	ldrh	r3, [r3, #0]
 8008718:	461a      	mov	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008722:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	1c9a      	adds	r2, r3, #2
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	621a      	str	r2, [r3, #32]
 800872e:	e008      	b.n	8008742 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a1b      	ldr	r3, [r3, #32]
 8008734:	1c59      	adds	r1, r3, #1
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	6211      	str	r1, [r2, #32]
 800873a:	781a      	ldrb	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008746:	b29b      	uxth	r3, r3
 8008748:	3b01      	subs	r3, #1
 800874a:	b29b      	uxth	r3, r3
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	4619      	mov	r1, r3
 8008750:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10f      	bne.n	8008776 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68da      	ldr	r2, [r3, #12]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008764:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68da      	ldr	r2, [r3, #12]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008774:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	e000      	b.n	800877c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800877a:	2302      	movs	r3, #2
  }
}
 800877c:	4618      	mov	r0, r3
 800877e:	3714      	adds	r7, #20
 8008780:	46bd      	mov	sp, r7
 8008782:	bc80      	pop	{r7}
 8008784:	4770      	bx	lr

08008786 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b082      	sub	sp, #8
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68da      	ldr	r2, [r3, #12]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800879c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2220      	movs	r2, #32
 80087a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7ff fed2 	bl	8008550 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b08c      	sub	sp, #48	@ 0x30
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b22      	cmp	r3, #34	@ 0x22
 80087c8:	f040 80ae 	bne.w	8008928 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087d4:	d117      	bne.n	8008806 <UART_Receive_IT+0x50>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d113      	bne.n	8008806 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80087de:	2300      	movs	r3, #0
 80087e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087fe:	1c9a      	adds	r2, r3, #2
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	629a      	str	r2, [r3, #40]	@ 0x28
 8008804:	e026      	b.n	8008854 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800880a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800880c:	2300      	movs	r3, #0
 800880e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008818:	d007      	beq.n	800882a <UART_Receive_IT+0x74>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10a      	bne.n	8008838 <UART_Receive_IT+0x82>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d106      	bne.n	8008838 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	b2da      	uxtb	r2, r3
 8008832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008834:	701a      	strb	r2, [r3, #0]
 8008836:	e008      	b.n	800884a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	b2db      	uxtb	r3, r3
 8008840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008844:	b2da      	uxtb	r2, r3
 8008846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008848:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800884e:	1c5a      	adds	r2, r3, #1
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008858:	b29b      	uxth	r3, r3
 800885a:	3b01      	subs	r3, #1
 800885c:	b29b      	uxth	r3, r3
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	4619      	mov	r1, r3
 8008862:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008864:	2b00      	cmp	r3, #0
 8008866:	d15d      	bne.n	8008924 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68da      	ldr	r2, [r3, #12]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f022 0220 	bic.w	r2, r2, #32
 8008876:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68da      	ldr	r2, [r3, #12]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008886:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	695a      	ldr	r2, [r3, #20]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 0201 	bic.w	r2, r2, #1
 8008896:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2220      	movs	r2, #32
 800889c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d135      	bne.n	800891a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	330c      	adds	r3, #12
 80088ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	e853 3f00 	ldrex	r3, [r3]
 80088c2:	613b      	str	r3, [r7, #16]
   return(result);
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f023 0310 	bic.w	r3, r3, #16
 80088ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	330c      	adds	r3, #12
 80088d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088d4:	623a      	str	r2, [r7, #32]
 80088d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d8:	69f9      	ldr	r1, [r7, #28]
 80088da:	6a3a      	ldr	r2, [r7, #32]
 80088dc:	e841 2300 	strex	r3, r2, [r1]
 80088e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1e5      	bne.n	80088b4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0310 	and.w	r3, r3, #16
 80088f2:	2b10      	cmp	r3, #16
 80088f4:	d10a      	bne.n	800890c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088f6:	2300      	movs	r3, #0
 80088f8:	60fb      	str	r3, [r7, #12]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	60fb      	str	r3, [r7, #12]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	60fb      	str	r3, [r7, #12]
 800890a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008910:	4619      	mov	r1, r3
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f7ff fe2e 	bl	8008574 <HAL_UARTEx_RxEventCallback>
 8008918:	e002      	b.n	8008920 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7f8 fed4 	bl	80016c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008920:	2300      	movs	r3, #0
 8008922:	e002      	b.n	800892a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008924:	2300      	movs	r3, #0
 8008926:	e000      	b.n	800892a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008928:	2302      	movs	r3, #2
  }
}
 800892a:	4618      	mov	r0, r3
 800892c:	3730      	adds	r7, #48	@ 0x30
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
	...

08008934 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	68da      	ldr	r2, [r3, #12]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	430a      	orrs	r2, r1
 8008950:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	689a      	ldr	r2, [r3, #8]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	431a      	orrs	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	4313      	orrs	r3, r2
 8008962:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800896e:	f023 030c 	bic.w	r3, r3, #12
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	6812      	ldr	r2, [r2, #0]
 8008976:	68b9      	ldr	r1, [r7, #8]
 8008978:	430b      	orrs	r3, r1
 800897a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	699a      	ldr	r2, [r3, #24]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a2c      	ldr	r2, [pc, #176]	@ (8008a48 <UART_SetConfig+0x114>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d103      	bne.n	80089a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800899c:	f7fe f8a6 	bl	8006aec <HAL_RCC_GetPCLK2Freq>
 80089a0:	60f8      	str	r0, [r7, #12]
 80089a2:	e002      	b.n	80089aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80089a4:	f7fe f88e 	bl	8006ac4 <HAL_RCC_GetPCLK1Freq>
 80089a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	4613      	mov	r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4413      	add	r3, r2
 80089b2:	009a      	lsls	r2, r3, #2
 80089b4:	441a      	add	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c0:	4a22      	ldr	r2, [pc, #136]	@ (8008a4c <UART_SetConfig+0x118>)
 80089c2:	fba2 2303 	umull	r2, r3, r2, r3
 80089c6:	095b      	lsrs	r3, r3, #5
 80089c8:	0119      	lsls	r1, r3, #4
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	4613      	mov	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	009a      	lsls	r2, r3, #2
 80089d4:	441a      	add	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80089e0:	4b1a      	ldr	r3, [pc, #104]	@ (8008a4c <UART_SetConfig+0x118>)
 80089e2:	fba3 0302 	umull	r0, r3, r3, r2
 80089e6:	095b      	lsrs	r3, r3, #5
 80089e8:	2064      	movs	r0, #100	@ 0x64
 80089ea:	fb00 f303 	mul.w	r3, r0, r3
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	011b      	lsls	r3, r3, #4
 80089f2:	3332      	adds	r3, #50	@ 0x32
 80089f4:	4a15      	ldr	r2, [pc, #84]	@ (8008a4c <UART_SetConfig+0x118>)
 80089f6:	fba2 2303 	umull	r2, r3, r2, r3
 80089fa:	095b      	lsrs	r3, r3, #5
 80089fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008a00:	4419      	add	r1, r3
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	4613      	mov	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	4413      	add	r3, r2
 8008a0a:	009a      	lsls	r2, r3, #2
 8008a0c:	441a      	add	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a18:	4b0c      	ldr	r3, [pc, #48]	@ (8008a4c <UART_SetConfig+0x118>)
 8008a1a:	fba3 0302 	umull	r0, r3, r3, r2
 8008a1e:	095b      	lsrs	r3, r3, #5
 8008a20:	2064      	movs	r0, #100	@ 0x64
 8008a22:	fb00 f303 	mul.w	r3, r0, r3
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	011b      	lsls	r3, r3, #4
 8008a2a:	3332      	adds	r3, #50	@ 0x32
 8008a2c:	4a07      	ldr	r2, [pc, #28]	@ (8008a4c <UART_SetConfig+0x118>)
 8008a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a32:	095b      	lsrs	r3, r3, #5
 8008a34:	f003 020f 	and.w	r2, r3, #15
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	440a      	add	r2, r1
 8008a3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008a40:	bf00      	nop
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	40013800 	.word	0x40013800
 8008a4c:	51eb851f 	.word	0x51eb851f

08008a50 <malloc>:
 8008a50:	4b02      	ldr	r3, [pc, #8]	@ (8008a5c <malloc+0xc>)
 8008a52:	4601      	mov	r1, r0
 8008a54:	6818      	ldr	r0, [r3, #0]
 8008a56:	f000 b82d 	b.w	8008ab4 <_malloc_r>
 8008a5a:	bf00      	nop
 8008a5c:	2000002c 	.word	0x2000002c

08008a60 <free>:
 8008a60:	4b02      	ldr	r3, [pc, #8]	@ (8008a6c <free+0xc>)
 8008a62:	4601      	mov	r1, r0
 8008a64:	6818      	ldr	r0, [r3, #0]
 8008a66:	f000 b903 	b.w	8008c70 <_free_r>
 8008a6a:	bf00      	nop
 8008a6c:	2000002c 	.word	0x2000002c

08008a70 <sbrk_aligned>:
 8008a70:	b570      	push	{r4, r5, r6, lr}
 8008a72:	4e0f      	ldr	r6, [pc, #60]	@ (8008ab0 <sbrk_aligned+0x40>)
 8008a74:	460c      	mov	r4, r1
 8008a76:	6831      	ldr	r1, [r6, #0]
 8008a78:	4605      	mov	r5, r0
 8008a7a:	b911      	cbnz	r1, 8008a82 <sbrk_aligned+0x12>
 8008a7c:	f000 f8ae 	bl	8008bdc <_sbrk_r>
 8008a80:	6030      	str	r0, [r6, #0]
 8008a82:	4621      	mov	r1, r4
 8008a84:	4628      	mov	r0, r5
 8008a86:	f000 f8a9 	bl	8008bdc <_sbrk_r>
 8008a8a:	1c43      	adds	r3, r0, #1
 8008a8c:	d103      	bne.n	8008a96 <sbrk_aligned+0x26>
 8008a8e:	f04f 34ff 	mov.w	r4, #4294967295
 8008a92:	4620      	mov	r0, r4
 8008a94:	bd70      	pop	{r4, r5, r6, pc}
 8008a96:	1cc4      	adds	r4, r0, #3
 8008a98:	f024 0403 	bic.w	r4, r4, #3
 8008a9c:	42a0      	cmp	r0, r4
 8008a9e:	d0f8      	beq.n	8008a92 <sbrk_aligned+0x22>
 8008aa0:	1a21      	subs	r1, r4, r0
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	f000 f89a 	bl	8008bdc <_sbrk_r>
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	d1f2      	bne.n	8008a92 <sbrk_aligned+0x22>
 8008aac:	e7ef      	b.n	8008a8e <sbrk_aligned+0x1e>
 8008aae:	bf00      	nop
 8008ab0:	20000cb8 	.word	0x20000cb8

08008ab4 <_malloc_r>:
 8008ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ab8:	1ccd      	adds	r5, r1, #3
 8008aba:	f025 0503 	bic.w	r5, r5, #3
 8008abe:	3508      	adds	r5, #8
 8008ac0:	2d0c      	cmp	r5, #12
 8008ac2:	bf38      	it	cc
 8008ac4:	250c      	movcc	r5, #12
 8008ac6:	2d00      	cmp	r5, #0
 8008ac8:	4606      	mov	r6, r0
 8008aca:	db01      	blt.n	8008ad0 <_malloc_r+0x1c>
 8008acc:	42a9      	cmp	r1, r5
 8008ace:	d904      	bls.n	8008ada <_malloc_r+0x26>
 8008ad0:	230c      	movs	r3, #12
 8008ad2:	6033      	str	r3, [r6, #0]
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ada:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008bb0 <_malloc_r+0xfc>
 8008ade:	f000 f869 	bl	8008bb4 <__malloc_lock>
 8008ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ae6:	461c      	mov	r4, r3
 8008ae8:	bb44      	cbnz	r4, 8008b3c <_malloc_r+0x88>
 8008aea:	4629      	mov	r1, r5
 8008aec:	4630      	mov	r0, r6
 8008aee:	f7ff ffbf 	bl	8008a70 <sbrk_aligned>
 8008af2:	1c43      	adds	r3, r0, #1
 8008af4:	4604      	mov	r4, r0
 8008af6:	d158      	bne.n	8008baa <_malloc_r+0xf6>
 8008af8:	f8d8 4000 	ldr.w	r4, [r8]
 8008afc:	4627      	mov	r7, r4
 8008afe:	2f00      	cmp	r7, #0
 8008b00:	d143      	bne.n	8008b8a <_malloc_r+0xd6>
 8008b02:	2c00      	cmp	r4, #0
 8008b04:	d04b      	beq.n	8008b9e <_malloc_r+0xea>
 8008b06:	6823      	ldr	r3, [r4, #0]
 8008b08:	4639      	mov	r1, r7
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	eb04 0903 	add.w	r9, r4, r3
 8008b10:	f000 f864 	bl	8008bdc <_sbrk_r>
 8008b14:	4581      	cmp	r9, r0
 8008b16:	d142      	bne.n	8008b9e <_malloc_r+0xea>
 8008b18:	6821      	ldr	r1, [r4, #0]
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	1a6d      	subs	r5, r5, r1
 8008b1e:	4629      	mov	r1, r5
 8008b20:	f7ff ffa6 	bl	8008a70 <sbrk_aligned>
 8008b24:	3001      	adds	r0, #1
 8008b26:	d03a      	beq.n	8008b9e <_malloc_r+0xea>
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	442b      	add	r3, r5
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	f8d8 3000 	ldr.w	r3, [r8]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	bb62      	cbnz	r2, 8008b90 <_malloc_r+0xdc>
 8008b36:	f8c8 7000 	str.w	r7, [r8]
 8008b3a:	e00f      	b.n	8008b5c <_malloc_r+0xa8>
 8008b3c:	6822      	ldr	r2, [r4, #0]
 8008b3e:	1b52      	subs	r2, r2, r5
 8008b40:	d420      	bmi.n	8008b84 <_malloc_r+0xd0>
 8008b42:	2a0b      	cmp	r2, #11
 8008b44:	d917      	bls.n	8008b76 <_malloc_r+0xc2>
 8008b46:	1961      	adds	r1, r4, r5
 8008b48:	42a3      	cmp	r3, r4
 8008b4a:	6025      	str	r5, [r4, #0]
 8008b4c:	bf18      	it	ne
 8008b4e:	6059      	strne	r1, [r3, #4]
 8008b50:	6863      	ldr	r3, [r4, #4]
 8008b52:	bf08      	it	eq
 8008b54:	f8c8 1000 	streq.w	r1, [r8]
 8008b58:	5162      	str	r2, [r4, r5]
 8008b5a:	604b      	str	r3, [r1, #4]
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f000 f82f 	bl	8008bc0 <__malloc_unlock>
 8008b62:	f104 000b 	add.w	r0, r4, #11
 8008b66:	1d23      	adds	r3, r4, #4
 8008b68:	f020 0007 	bic.w	r0, r0, #7
 8008b6c:	1ac2      	subs	r2, r0, r3
 8008b6e:	bf1c      	itt	ne
 8008b70:	1a1b      	subne	r3, r3, r0
 8008b72:	50a3      	strne	r3, [r4, r2]
 8008b74:	e7af      	b.n	8008ad6 <_malloc_r+0x22>
 8008b76:	6862      	ldr	r2, [r4, #4]
 8008b78:	42a3      	cmp	r3, r4
 8008b7a:	bf0c      	ite	eq
 8008b7c:	f8c8 2000 	streq.w	r2, [r8]
 8008b80:	605a      	strne	r2, [r3, #4]
 8008b82:	e7eb      	b.n	8008b5c <_malloc_r+0xa8>
 8008b84:	4623      	mov	r3, r4
 8008b86:	6864      	ldr	r4, [r4, #4]
 8008b88:	e7ae      	b.n	8008ae8 <_malloc_r+0x34>
 8008b8a:	463c      	mov	r4, r7
 8008b8c:	687f      	ldr	r7, [r7, #4]
 8008b8e:	e7b6      	b.n	8008afe <_malloc_r+0x4a>
 8008b90:	461a      	mov	r2, r3
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	42a3      	cmp	r3, r4
 8008b96:	d1fb      	bne.n	8008b90 <_malloc_r+0xdc>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	6053      	str	r3, [r2, #4]
 8008b9c:	e7de      	b.n	8008b5c <_malloc_r+0xa8>
 8008b9e:	230c      	movs	r3, #12
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	6033      	str	r3, [r6, #0]
 8008ba4:	f000 f80c 	bl	8008bc0 <__malloc_unlock>
 8008ba8:	e794      	b.n	8008ad4 <_malloc_r+0x20>
 8008baa:	6005      	str	r5, [r0, #0]
 8008bac:	e7d6      	b.n	8008b5c <_malloc_r+0xa8>
 8008bae:	bf00      	nop
 8008bb0:	20000cbc 	.word	0x20000cbc

08008bb4 <__malloc_lock>:
 8008bb4:	4801      	ldr	r0, [pc, #4]	@ (8008bbc <__malloc_lock+0x8>)
 8008bb6:	f000 b84b 	b.w	8008c50 <__retarget_lock_acquire_recursive>
 8008bba:	bf00      	nop
 8008bbc:	20000dfc 	.word	0x20000dfc

08008bc0 <__malloc_unlock>:
 8008bc0:	4801      	ldr	r0, [pc, #4]	@ (8008bc8 <__malloc_unlock+0x8>)
 8008bc2:	f000 b846 	b.w	8008c52 <__retarget_lock_release_recursive>
 8008bc6:	bf00      	nop
 8008bc8:	20000dfc 	.word	0x20000dfc

08008bcc <memset>:
 8008bcc:	4603      	mov	r3, r0
 8008bce:	4402      	add	r2, r0
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d100      	bne.n	8008bd6 <memset+0xa>
 8008bd4:	4770      	bx	lr
 8008bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8008bda:	e7f9      	b.n	8008bd0 <memset+0x4>

08008bdc <_sbrk_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	2300      	movs	r3, #0
 8008be0:	4d05      	ldr	r5, [pc, #20]	@ (8008bf8 <_sbrk_r+0x1c>)
 8008be2:	4604      	mov	r4, r0
 8008be4:	4608      	mov	r0, r1
 8008be6:	602b      	str	r3, [r5, #0]
 8008be8:	f7fc f8d4 	bl	8004d94 <_sbrk>
 8008bec:	1c43      	adds	r3, r0, #1
 8008bee:	d102      	bne.n	8008bf6 <_sbrk_r+0x1a>
 8008bf0:	682b      	ldr	r3, [r5, #0]
 8008bf2:	b103      	cbz	r3, 8008bf6 <_sbrk_r+0x1a>
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	bd38      	pop	{r3, r4, r5, pc}
 8008bf8:	20000df8 	.word	0x20000df8

08008bfc <__errno>:
 8008bfc:	4b01      	ldr	r3, [pc, #4]	@ (8008c04 <__errno+0x8>)
 8008bfe:	6818      	ldr	r0, [r3, #0]
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	2000002c 	.word	0x2000002c

08008c08 <__libc_init_array>:
 8008c08:	b570      	push	{r4, r5, r6, lr}
 8008c0a:	2600      	movs	r6, #0
 8008c0c:	4d0c      	ldr	r5, [pc, #48]	@ (8008c40 <__libc_init_array+0x38>)
 8008c0e:	4c0d      	ldr	r4, [pc, #52]	@ (8008c44 <__libc_init_array+0x3c>)
 8008c10:	1b64      	subs	r4, r4, r5
 8008c12:	10a4      	asrs	r4, r4, #2
 8008c14:	42a6      	cmp	r6, r4
 8008c16:	d109      	bne.n	8008c2c <__libc_init_array+0x24>
 8008c18:	f000 f872 	bl	8008d00 <_init>
 8008c1c:	2600      	movs	r6, #0
 8008c1e:	4d0a      	ldr	r5, [pc, #40]	@ (8008c48 <__libc_init_array+0x40>)
 8008c20:	4c0a      	ldr	r4, [pc, #40]	@ (8008c4c <__libc_init_array+0x44>)
 8008c22:	1b64      	subs	r4, r4, r5
 8008c24:	10a4      	asrs	r4, r4, #2
 8008c26:	42a6      	cmp	r6, r4
 8008c28:	d105      	bne.n	8008c36 <__libc_init_array+0x2e>
 8008c2a:	bd70      	pop	{r4, r5, r6, pc}
 8008c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c30:	4798      	blx	r3
 8008c32:	3601      	adds	r6, #1
 8008c34:	e7ee      	b.n	8008c14 <__libc_init_array+0xc>
 8008c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c3a:	4798      	blx	r3
 8008c3c:	3601      	adds	r6, #1
 8008c3e:	e7f2      	b.n	8008c26 <__libc_init_array+0x1e>
 8008c40:	08008d88 	.word	0x08008d88
 8008c44:	08008d88 	.word	0x08008d88
 8008c48:	08008d88 	.word	0x08008d88
 8008c4c:	08008d8c 	.word	0x08008d8c

08008c50 <__retarget_lock_acquire_recursive>:
 8008c50:	4770      	bx	lr

08008c52 <__retarget_lock_release_recursive>:
 8008c52:	4770      	bx	lr

08008c54 <memcpy>:
 8008c54:	440a      	add	r2, r1
 8008c56:	4291      	cmp	r1, r2
 8008c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c5c:	d100      	bne.n	8008c60 <memcpy+0xc>
 8008c5e:	4770      	bx	lr
 8008c60:	b510      	push	{r4, lr}
 8008c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c66:	4291      	cmp	r1, r2
 8008c68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c6c:	d1f9      	bne.n	8008c62 <memcpy+0xe>
 8008c6e:	bd10      	pop	{r4, pc}

08008c70 <_free_r>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	4605      	mov	r5, r0
 8008c74:	2900      	cmp	r1, #0
 8008c76:	d040      	beq.n	8008cfa <_free_r+0x8a>
 8008c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c7c:	1f0c      	subs	r4, r1, #4
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	bfb8      	it	lt
 8008c82:	18e4      	addlt	r4, r4, r3
 8008c84:	f7ff ff96 	bl	8008bb4 <__malloc_lock>
 8008c88:	4a1c      	ldr	r2, [pc, #112]	@ (8008cfc <_free_r+0x8c>)
 8008c8a:	6813      	ldr	r3, [r2, #0]
 8008c8c:	b933      	cbnz	r3, 8008c9c <_free_r+0x2c>
 8008c8e:	6063      	str	r3, [r4, #4]
 8008c90:	6014      	str	r4, [r2, #0]
 8008c92:	4628      	mov	r0, r5
 8008c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c98:	f7ff bf92 	b.w	8008bc0 <__malloc_unlock>
 8008c9c:	42a3      	cmp	r3, r4
 8008c9e:	d908      	bls.n	8008cb2 <_free_r+0x42>
 8008ca0:	6820      	ldr	r0, [r4, #0]
 8008ca2:	1821      	adds	r1, r4, r0
 8008ca4:	428b      	cmp	r3, r1
 8008ca6:	bf01      	itttt	eq
 8008ca8:	6819      	ldreq	r1, [r3, #0]
 8008caa:	685b      	ldreq	r3, [r3, #4]
 8008cac:	1809      	addeq	r1, r1, r0
 8008cae:	6021      	streq	r1, [r4, #0]
 8008cb0:	e7ed      	b.n	8008c8e <_free_r+0x1e>
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	b10b      	cbz	r3, 8008cbc <_free_r+0x4c>
 8008cb8:	42a3      	cmp	r3, r4
 8008cba:	d9fa      	bls.n	8008cb2 <_free_r+0x42>
 8008cbc:	6811      	ldr	r1, [r2, #0]
 8008cbe:	1850      	adds	r0, r2, r1
 8008cc0:	42a0      	cmp	r0, r4
 8008cc2:	d10b      	bne.n	8008cdc <_free_r+0x6c>
 8008cc4:	6820      	ldr	r0, [r4, #0]
 8008cc6:	4401      	add	r1, r0
 8008cc8:	1850      	adds	r0, r2, r1
 8008cca:	4283      	cmp	r3, r0
 8008ccc:	6011      	str	r1, [r2, #0]
 8008cce:	d1e0      	bne.n	8008c92 <_free_r+0x22>
 8008cd0:	6818      	ldr	r0, [r3, #0]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	4408      	add	r0, r1
 8008cd6:	6010      	str	r0, [r2, #0]
 8008cd8:	6053      	str	r3, [r2, #4]
 8008cda:	e7da      	b.n	8008c92 <_free_r+0x22>
 8008cdc:	d902      	bls.n	8008ce4 <_free_r+0x74>
 8008cde:	230c      	movs	r3, #12
 8008ce0:	602b      	str	r3, [r5, #0]
 8008ce2:	e7d6      	b.n	8008c92 <_free_r+0x22>
 8008ce4:	6820      	ldr	r0, [r4, #0]
 8008ce6:	1821      	adds	r1, r4, r0
 8008ce8:	428b      	cmp	r3, r1
 8008cea:	bf01      	itttt	eq
 8008cec:	6819      	ldreq	r1, [r3, #0]
 8008cee:	685b      	ldreq	r3, [r3, #4]
 8008cf0:	1809      	addeq	r1, r1, r0
 8008cf2:	6021      	streq	r1, [r4, #0]
 8008cf4:	6063      	str	r3, [r4, #4]
 8008cf6:	6054      	str	r4, [r2, #4]
 8008cf8:	e7cb      	b.n	8008c92 <_free_r+0x22>
 8008cfa:	bd38      	pop	{r3, r4, r5, pc}
 8008cfc:	20000cbc 	.word	0x20000cbc

08008d00 <_init>:
 8008d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d02:	bf00      	nop
 8008d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d06:	bc08      	pop	{r3}
 8008d08:	469e      	mov	lr, r3
 8008d0a:	4770      	bx	lr

08008d0c <_fini>:
 8008d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0e:	bf00      	nop
 8008d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d12:	bc08      	pop	{r3}
 8008d14:	469e      	mov	lr, r3
 8008d16:	4770      	bx	lr
