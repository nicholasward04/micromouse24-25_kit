
TheHammer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005370  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005480  08005480  00006480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054c8  080054c8  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  080054c8  080054c8  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054c8  080054c8  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054c8  080054c8  000064c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054cc  080054cc  000064cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080054d0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000010  080054e0  00007010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  080054e0  00007234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd29  00000000  00000000  00007039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029fb  00000000  00000000  00016d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00019760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b60  00000000  00000000  0001a608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195b2  00000000  00000000  0001b168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ef7  00000000  00000000  0003471a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f5f2  00000000  00000000  00047611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6c03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c80  00000000  00000000  000d6c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000da8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005468 	.word	0x08005468

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005468 	.word	0x08005468

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f2:	f001 f979 	bl	8001be8 <HAL_Init>

  /* USER CODE BEGIN Init */
  LED_Power_Init();
 80008f6:	f000 fd53 	bl	80013a0 <LED_Power_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fa:	f000 f851 	bl	80009a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fe:	f000 fa73 	bl	8000de8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000902:	f000 f8a3 	bl	8000a4c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000906:	f000 f91d 	bl	8000b44 <MX_TIM2_Init>
  MX_TIM3_Init();
 800090a:	f000 f99b 	bl	8000c44 <MX_TIM3_Init>
  MX_TIM4_Init();
 800090e:	f000 f9ed 	bl	8000cec <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000912:	f000 fa3f 	bl	8000d94 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8000916:	f000 f8d7 	bl	8000ac8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t startBuff;
  HAL_UART_Receive_IT(&huart1, &startBuff, 1);
 800091a:	1cfb      	adds	r3, r7, #3
 800091c:	2201      	movs	r2, #1
 800091e:	4619      	mov	r1, r3
 8000920:	481b      	ldr	r0, [pc, #108]	@ (8000990 <main+0xa4>)
 8000922:	f004 f830 	bl	8004986 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000926:	2108      	movs	r1, #8
 8000928:	481a      	ldr	r0, [pc, #104]	@ (8000994 <main+0xa8>)
 800092a:	f002 fff7 	bl	800391c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800092e:	210c      	movs	r1, #12
 8000930:	4818      	ldr	r0, [pc, #96]	@ (8000994 <main+0xa8>)
 8000932:	f002 fff3 	bl	800391c <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000936:	213c      	movs	r1, #60	@ 0x3c
 8000938:	4817      	ldr	r0, [pc, #92]	@ (8000998 <main+0xac>)
 800093a:	f003 f933 	bl	8003ba4 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800093e:	213c      	movs	r1, #60	@ 0x3c
 8000940:	4816      	ldr	r0, [pc, #88]	@ (800099c <main+0xb0>)
 8000942:	f003 f92f 	bl	8003ba4 <HAL_TIM_Encoder_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Set_Direction(MOTOR_LEFT, FORWARD);
 8000946:	2100      	movs	r1, #0
 8000948:	2000      	movs	r0, #0
 800094a:	f000 fcab 	bl	80012a4 <Set_Direction>
	  Set_Direction(MOTOR_RIGHT, FORWARD);
 800094e:	2100      	movs	r1, #0
 8000950:	2001      	movs	r0, #1
 8000952:	f000 fca7 	bl	80012a4 <Set_Direction>
    /* USER CODE END WHILE */
	  for (int i=300; i < 2048; ++i) {
 8000956:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	e012      	b.n	8000984 <main+0x98>
		  Set_PWM(MOTOR_LEFT, i);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	b29b      	uxth	r3, r3
 8000962:	4619      	mov	r1, r3
 8000964:	2000      	movs	r0, #0
 8000966:	f000 fc79 	bl	800125c <Set_PWM>
		  Set_PWM(MOTOR_RIGHT, i);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	b29b      	uxth	r3, r3
 800096e:	4619      	mov	r1, r3
 8000970:	2001      	movs	r0, #1
 8000972:	f000 fc73 	bl	800125c <Set_PWM>
		  HAL_Delay(500);
 8000976:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800097a:	f001 f997 	bl	8001cac <HAL_Delay>
	  for (int i=300; i < 2048; ++i) {
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3301      	adds	r3, #1
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800098a:	dbe8      	blt.n	800095e <main+0x72>
	  Set_Direction(MOTOR_LEFT, FORWARD);
 800098c:	e7db      	b.n	8000946 <main+0x5a>
 800098e:	bf00      	nop
 8000990:	20000164 	.word	0x20000164
 8000994:	2000008c 	.word	0x2000008c
 8000998:	2000011c 	.word	0x2000011c
 800099c:	200000d4 	.word	0x200000d4

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b094      	sub	sp, #80	@ 0x50
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009aa:	2228      	movs	r2, #40	@ 0x28
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f004 fd20 	bl	80053f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d0:	2302      	movs	r3, #2
 80009d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d4:	2301      	movs	r3, #1
 80009d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d8:	2310      	movs	r3, #16
 80009da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009dc:	2302      	movs	r3, #2
 80009de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80009e0:	2300      	movs	r3, #0
 80009e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009e4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80009e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009ee:	4618      	mov	r0, r3
 80009f0:	f002 f970 	bl	8002cd4 <HAL_RCC_OscConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80009fa:	f000 fab8 	bl	8000f6e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fe:	230f      	movs	r3, #15
 8000a00:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a02:	2302      	movs	r3, #2
 8000a04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	2101      	movs	r1, #1
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f002 fbdd 	bl	80031d8 <HAL_RCC_ClockConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000a24:	f000 faa3 	bl	8000f6e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000a2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a30:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	4618      	mov	r0, r3
 8000a36:	f002 fd5d 	bl	80034f4 <HAL_RCCEx_PeriphCLKConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a40:	f000 fa95 	bl	8000f6e <Error_Handler>
  }
}
 8000a44:	bf00      	nop
 8000a46:	3750      	adds	r7, #80	@ 0x50
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a5c:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <MX_ADC1_Init+0x74>)
 8000a5e:	4a19      	ldr	r2, [pc, #100]	@ (8000ac4 <MX_ADC1_Init+0x78>)
 8000a60:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a62:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <MX_ADC1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a68:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <MX_ADC1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <MX_ADC1_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <MX_ADC1_Init+0x74>)
 8000a76:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a7c:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <MX_ADC1_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <MX_ADC1_Init+0x74>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a88:	480d      	ldr	r0, [pc, #52]	@ (8000ac0 <MX_ADC1_Init+0x74>)
 8000a8a:	f001 f933 	bl	8001cf4 <HAL_ADC_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a94:	f000 fa6b 	bl	8000f6e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a98:	2305      	movs	r3, #5
 8000a9a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <MX_ADC1_Init+0x74>)
 8000aaa:	f001 fbe7 	bl	800227c <HAL_ADC_ConfigChannel>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ab4:	f000 fa5b 	bl	8000f6e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	2000002c 	.word	0x2000002c
 8000ac4:	40012400 	.word	0x40012400

08000ac8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ad8:	4b18      	ldr	r3, [pc, #96]	@ (8000b3c <MX_ADC2_Init+0x74>)
 8000ada:	4a19      	ldr	r2, [pc, #100]	@ (8000b40 <MX_ADC2_Init+0x78>)
 8000adc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ade:	4b17      	ldr	r3, [pc, #92]	@ (8000b3c <MX_ADC2_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ae4:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <MX_ADC2_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000aea:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <MX_ADC2_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000af0:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <MX_ADC2_Init+0x74>)
 8000af2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000af6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000af8:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <MX_ADC2_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <MX_ADC2_Init+0x74>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b04:	480d      	ldr	r0, [pc, #52]	@ (8000b3c <MX_ADC2_Init+0x74>)
 8000b06:	f001 f8f5 	bl	8001cf4 <HAL_ADC_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000b10:	f000 fa2d 	bl	8000f6e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	@ (8000b3c <MX_ADC2_Init+0x74>)
 8000b26:	f001 fba9 	bl	800227c <HAL_ADC_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000b30:	f000 fa1d 	bl	8000f6e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2000005c 	.word	0x2000005c
 8000b40:	40012800 	.word	0x40012800

08000b44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08e      	sub	sp, #56	@ 0x38
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b58:	f107 0320 	add.w	r3, r7, #32
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
 8000b70:	615a      	str	r2, [r3, #20]
 8000b72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b74:	4b32      	ldr	r3, [pc, #200]	@ (8000c40 <MX_TIM2_Init+0xfc>)
 8000b76:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b7c:	4b30      	ldr	r3, [pc, #192]	@ (8000c40 <MX_TIM2_Init+0xfc>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b82:	4b2f      	ldr	r3, [pc, #188]	@ (8000c40 <MX_TIM2_Init+0xfc>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2047;
 8000b88:	4b2d      	ldr	r3, [pc, #180]	@ (8000c40 <MX_TIM2_Init+0xfc>)
 8000b8a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000b8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b90:	4b2b      	ldr	r3, [pc, #172]	@ (8000c40 <MX_TIM2_Init+0xfc>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b96:	4b2a      	ldr	r3, [pc, #168]	@ (8000c40 <MX_TIM2_Init+0xfc>)
 8000b98:	2280      	movs	r2, #128	@ 0x80
 8000b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b9c:	4828      	ldr	r0, [pc, #160]	@ (8000c40 <MX_TIM2_Init+0xfc>)
 8000b9e:	f002 fe15 	bl	80037cc <HAL_TIM_Base_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ba8:	f000 f9e1 	bl	8000f6e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4821      	ldr	r0, [pc, #132]	@ (8000c40 <MX_TIM2_Init+0xfc>)
 8000bba:	f003 fa53 	bl	8004064 <HAL_TIM_ConfigClockSource>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000bc4:	f000 f9d3 	bl	8000f6e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bc8:	481d      	ldr	r0, [pc, #116]	@ (8000c40 <MX_TIM2_Init+0xfc>)
 8000bca:	f002 fe4e 	bl	800386a <HAL_TIM_PWM_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000bd4:	f000 f9cb 	bl	8000f6e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000be0:	f107 0320 	add.w	r3, r7, #32
 8000be4:	4619      	mov	r1, r3
 8000be6:	4816      	ldr	r0, [pc, #88]	@ (8000c40 <MX_TIM2_Init+0xfc>)
 8000be8:	f003 fdd8 	bl	800479c <HAL_TIMEx_MasterConfigSynchronization>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000bf2:	f000 f9bc 	bl	8000f6e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bf6:	2360      	movs	r3, #96	@ 0x60
 8000bf8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2208      	movs	r2, #8
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480c      	ldr	r0, [pc, #48]	@ (8000c40 <MX_TIM2_Init+0xfc>)
 8000c0e:	f003 f967 	bl	8003ee0 <HAL_TIM_PWM_ConfigChannel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c18:	f000 f9a9 	bl	8000f6e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	220c      	movs	r2, #12
 8000c20:	4619      	mov	r1, r3
 8000c22:	4807      	ldr	r0, [pc, #28]	@ (8000c40 <MX_TIM2_Init+0xfc>)
 8000c24:	f003 f95c 	bl	8003ee0 <HAL_TIM_PWM_ConfigChannel>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000c2e:	f000 f99e 	bl	8000f6e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c32:	4803      	ldr	r0, [pc, #12]	@ (8000c40 <MX_TIM2_Init+0xfc>)
 8000c34:	f000 fecc 	bl	80019d0 <HAL_TIM_MspPostInit>

}
 8000c38:	bf00      	nop
 8000c3a:	3738      	adds	r7, #56	@ 0x38
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000008c 	.word	0x2000008c

08000c44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	@ 0x30
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	2224      	movs	r2, #36	@ 0x24
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f004 fbce 	bl	80053f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c60:	4b20      	ldr	r3, [pc, #128]	@ (8000ce4 <MX_TIM3_Init+0xa0>)
 8000c62:	4a21      	ldr	r2, [pc, #132]	@ (8000ce8 <MX_TIM3_Init+0xa4>)
 8000c64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c66:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce4 <MX_TIM3_Init+0xa0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <MX_TIM3_Init+0xa0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce4 <MX_TIM3_Init+0xa0>)
 8000c74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce4 <MX_TIM3_Init+0xa0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c80:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <MX_TIM3_Init+0xa0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c86:	2303      	movs	r3, #3
 8000c88:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <MX_TIM3_Init+0xa0>)
 8000cb2:	f002 fed5 	bl	8003a60 <HAL_TIM_Encoder_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000cbc:	f000 f957 	bl	8000f6e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <MX_TIM3_Init+0xa0>)
 8000cce:	f003 fd65 	bl	800479c <HAL_TIMEx_MasterConfigSynchronization>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000cd8:	f000 f949 	bl	8000f6e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	3730      	adds	r7, #48	@ 0x30
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200000d4 	.word	0x200000d4
 8000ce8:	40000400 	.word	0x40000400

08000cec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08c      	sub	sp, #48	@ 0x30
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	2224      	movs	r2, #36	@ 0x24
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f004 fb7a 	bl	80053f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d08:	4b20      	ldr	r3, [pc, #128]	@ (8000d8c <MX_TIM4_Init+0xa0>)
 8000d0a:	4a21      	ldr	r2, [pc, #132]	@ (8000d90 <MX_TIM4_Init+0xa4>)
 8000d0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d8c <MX_TIM4_Init+0xa0>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d14:	4b1d      	ldr	r3, [pc, #116]	@ (8000d8c <MX_TIM4_Init+0xa0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d8c <MX_TIM4_Init+0xa0>)
 8000d1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <MX_TIM4_Init+0xa0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d28:	4b18      	ldr	r3, [pc, #96]	@ (8000d8c <MX_TIM4_Init+0xa0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000d32:	2302      	movs	r3, #2
 8000d34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d36:	2301      	movs	r3, #1
 8000d38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000d42:	2302      	movs	r3, #2
 8000d44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d46:	2301      	movs	r3, #1
 8000d48:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d52:	f107 030c 	add.w	r3, r7, #12
 8000d56:	4619      	mov	r1, r3
 8000d58:	480c      	ldr	r0, [pc, #48]	@ (8000d8c <MX_TIM4_Init+0xa0>)
 8000d5a:	f002 fe81 	bl	8003a60 <HAL_TIM_Encoder_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000d64:	f000 f903 	bl	8000f6e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_TIM4_Init+0xa0>)
 8000d76:	f003 fd11 	bl	800479c <HAL_TIMEx_MasterConfigSynchronization>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000d80:	f000 f8f5 	bl	8000f6e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	3730      	adds	r7, #48	@ 0x30
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2000011c 	.word	0x2000011c
 8000d90:	40000800 	.word	0x40000800

08000d94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d98:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	@ (8000de4 <MX_USART1_UART_Init+0x50>)
 8000d9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d9e:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000da0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000da4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000db8:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000dba:	220c      	movs	r2, #12
 8000dbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000dcc:	f003 fd56 	bl	800487c <HAL_UART_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dd6:	f000 f8ca 	bl	8000f6e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000164 	.word	0x20000164
 8000de4:	40013800 	.word	0x40013800

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 0310 	add.w	r3, r7, #16
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfc:	4b51      	ldr	r3, [pc, #324]	@ (8000f44 <MX_GPIO_Init+0x15c>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a50      	ldr	r2, [pc, #320]	@ (8000f44 <MX_GPIO_Init+0x15c>)
 8000e02:	f043 0310 	orr.w	r3, r3, #16
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b4e      	ldr	r3, [pc, #312]	@ (8000f44 <MX_GPIO_Init+0x15c>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0310 	and.w	r3, r3, #16
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b4b      	ldr	r3, [pc, #300]	@ (8000f44 <MX_GPIO_Init+0x15c>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a4a      	ldr	r2, [pc, #296]	@ (8000f44 <MX_GPIO_Init+0x15c>)
 8000e1a:	f043 0304 	orr.w	r3, r3, #4
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b48      	ldr	r3, [pc, #288]	@ (8000f44 <MX_GPIO_Init+0x15c>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0304 	and.w	r3, r3, #4
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2c:	4b45      	ldr	r3, [pc, #276]	@ (8000f44 <MX_GPIO_Init+0x15c>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a44      	ldr	r2, [pc, #272]	@ (8000f44 <MX_GPIO_Init+0x15c>)
 8000e32:	f043 0308 	orr.w	r3, r3, #8
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b42      	ldr	r3, [pc, #264]	@ (8000f44 <MX_GPIO_Init+0x15c>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0308 	and.w	r3, r3, #8
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Power_GPIO_Port, LED_Power_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e4a:	483f      	ldr	r0, [pc, #252]	@ (8000f48 <MX_GPIO_Init+0x160>)
 8000e4c:	f001 feee 	bl	8002c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMIT_R_Pin|EMIT_L_Pin|EMIT_FL_Pin|MR_FWD_Pin
 8000e50:	2200      	movs	r2, #0
 8000e52:	f64f 5120 	movw	r1, #64800	@ 0xfd20
 8000e56:	483d      	ldr	r0, [pc, #244]	@ (8000f4c <MX_GPIO_Init+0x164>)
 8000e58:	f001 fee8 	bl	8002c2c <HAL_GPIO_WritePin>
                          |ML_FWD_Pin|MR_BWD_Pin|EMIT_FR_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e62:	483b      	ldr	r0, [pc, #236]	@ (8000f50 <MX_GPIO_Init+0x168>)
 8000e64:	f001 fee2 	bl	8002c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Blue_Pin|LED_Green_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 8000e6e:	4838      	ldr	r0, [pc, #224]	@ (8000f50 <MX_GPIO_Init+0x168>)
 8000e70:	f001 fedc 	bl	8002c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Power_Pin */
  GPIO_InitStruct.Pin = LED_Power_Pin;
 8000e74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2302      	movs	r3, #2
 8000e84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_Power_GPIO_Port, &GPIO_InitStruct);
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	482e      	ldr	r0, [pc, #184]	@ (8000f48 <MX_GPIO_Init+0x160>)
 8000e8e:	f001 fd49 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPEED_SW2_Pin */
  GPIO_InitStruct.Pin = SPEED_SW2_Pin;
 8000e92:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e98:	4b2e      	ldr	r3, [pc, #184]	@ (8000f54 <MX_GPIO_Init+0x16c>)
 8000e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPEED_SW2_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4828      	ldr	r0, [pc, #160]	@ (8000f48 <MX_GPIO_Init+0x160>)
 8000ea8:	f001 fd3c 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_R_Pin EMIT_L_Pin EMIT_FL_Pin MR_FWD_Pin
                           ML_FWD_Pin MR_BWD_Pin EMIT_FR_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = EMIT_R_Pin|EMIT_L_Pin|EMIT_FL_Pin|MR_FWD_Pin
 8000eac:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8000eb0:	613b      	str	r3, [r7, #16]
                          |ML_FWD_Pin|MR_BWD_Pin|EMIT_FR_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebe:	f107 0310 	add.w	r3, r7, #16
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4821      	ldr	r0, [pc, #132]	@ (8000f4c <MX_GPIO_Init+0x164>)
 8000ec6:	f001 fd2d 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : ML_BWD_Pin LED_Red_Pin LED_Blue_Pin LED_Green_Pin */
  GPIO_InitStruct.Pin = ML_BWD_Pin|LED_Red_Pin|LED_Blue_Pin|LED_Green_Pin;
 8000eca:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8000ece:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	481b      	ldr	r0, [pc, #108]	@ (8000f50 <MX_GPIO_Init+0x168>)
 8000ee4:	f001 fd1e 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARM_SW1_Pin */
  GPIO_InitStruct.Pin = ARM_SW1_Pin;
 8000ee8:	2310      	movs	r3, #16
 8000eea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eec:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <MX_GPIO_Init+0x16c>)
 8000eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ARM_SW1_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4814      	ldr	r0, [pc, #80]	@ (8000f4c <MX_GPIO_Init+0x164>)
 8000efc:	f001 fd12 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOADMAZE_SW3_Pin */
  GPIO_InitStruct.Pin = LOADMAZE_SW3_Pin;
 8000f00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LOADMAZE_SW3_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	4619      	mov	r1, r3
 8000f14:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <MX_GPIO_Init+0x164>)
 8000f16:	f001 fd05 	bl	8002924 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	210f      	movs	r1, #15
 8000f1e:	200a      	movs	r0, #10
 8000f20:	f001 fc17 	bl	8002752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f24:	200a      	movs	r0, #10
 8000f26:	f001 fc30 	bl	800278a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	210f      	movs	r1, #15
 8000f2e:	2028      	movs	r0, #40	@ 0x28
 8000f30:	f001 fc0f 	bl	8002752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f34:	2028      	movs	r0, #40	@ 0x28
 8000f36:	f001 fc28 	bl	800278a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f3a:	bf00      	nop
 8000f3c:	3720      	adds	r7, #32
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40011000 	.word	0x40011000
 8000f4c:	40010c00 	.word	0x40010c00
 8000f50:	40010800 	.word	0x40010800
 8000f54:	10210000 	.word	0x10210000

08000f58 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	UART_Receive_Callback(huart);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 f8cb 	bl	80010fc <UART_Receive_Callback>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f72:	b672      	cpsid	i
}
 8000f74:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f76:	bf00      	nop
 8000f78:	e7fd      	b.n	8000f76 <Error_Handler+0x8>
	...

08000f7c <Parse_Receive_Data>:
#define READ_BATT   0b0010  // READ BATTERY: Read battery voltage.
#define PULSE_BUZZ  0b0011  // PULSE BUZZER: Play a short noise from the buzzer.
#define START_RUN   0b0100  // START RUN: Start a maze run. For testing purposes only.
#define PAIRED      0b0101  // PAIRED: Send OK response to verify received.

void Parse_Receive_Data(uint8_t rxBuff) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
	uint8_t command = (rxBuff & 0xF0) >> 4;   // Isolate command code
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	091b      	lsrs	r3, r3, #4
 8000f8a:	73fb      	strb	r3, [r7, #15]
	uint8_t data    = (rxBuff & 0x0F);        // Isolate other data (not used currently)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	73bb      	strb	r3, [r7, #14]
	(void) data;                              // Temporary to remove warning for unused variable

	switch(command) {
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	2b07      	cmp	r3, #7
 8000f98:	d838      	bhi.n	800100c <Parse_Receive_Data+0x90>
 8000f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8000fa0 <Parse_Receive_Data+0x24>)
 8000f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa0:	08000fc1 	.word	0x08000fc1
 8000fa4:	08000fdf 	.word	0x08000fdf
 8000fa8:	08000ff9 	.word	0x08000ff9
 8000fac:	08001005 	.word	0x08001005
 8000fb0:	0800100d 	.word	0x0800100d
 8000fb4:	0800100d 	.word	0x0800100d
 8000fb8:	0800100d 	.word	0x0800100d
 8000fbc:	08000ff1 	.word	0x08000ff1
		case SET_MODE:
			debugMode = (debugMode + 1) % 2;
 8000fc0:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <Parse_Receive_Data+0x9c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	bfb8      	it	lt
 8000fce:	425b      	neglt	r3, r3
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <Parse_Receive_Data+0x9c>)
 8000fd4:	701a      	strb	r2, [r3, #0]
			debugCounter = 0;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	@ (800101c <Parse_Receive_Data+0xa0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
			break;
 8000fdc:	e017      	b.n	800100e <Parse_Receive_Data+0x92>
		case HALT_RUN:
			HALTED = 1;
 8000fde:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <Parse_Receive_Data+0xa4>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]
			while (HALTED);
 8000fe4:	bf00      	nop
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <Parse_Receive_Data+0xa4>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1fb      	bne.n	8000fe6 <Parse_Receive_Data+0x6a>
			break;
 8000fee:	e00e      	b.n	800100e <Parse_Receive_Data+0x92>
		case RESUME_RUN:
			HALTED = 0;
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8001020 <Parse_Receive_Data+0xa4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
			break;
 8000ff6:	e00a      	b.n	800100e <Parse_Receive_Data+0x92>
		case READ_BATT:
			HAL_UART_Transmit_IT(&huart1, (uint8_t*)&(mouse_state.battery_voltage), sizeof(double));
 8000ff8:	2208      	movs	r2, #8
 8000ffa:	490a      	ldr	r1, [pc, #40]	@ (8001024 <Parse_Receive_Data+0xa8>)
 8000ffc:	480a      	ldr	r0, [pc, #40]	@ (8001028 <Parse_Receive_Data+0xac>)
 8000ffe:	f003 fc8d 	bl	800491c <HAL_UART_Transmit_IT>
			break;
 8001002:	e004      	b.n	800100e <Parse_Receive_Data+0x92>
		case PULSE_BUZZ:
			Pulse_Buzzer(100);
 8001004:	2064      	movs	r0, #100	@ 0x64
 8001006:	f000 f9d7 	bl	80013b8 <Pulse_Buzzer>
			break;
 800100a:	e000      	b.n	800100e <Parse_Receive_Data+0x92>
			// SET RUN START VAR TO TRUE
			break;
		case PAIRED:
			break;
		default:
			break;
 800100c:	bf00      	nop
	}
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200001d8 	.word	0x200001d8
 800101c:	200001d9 	.word	0x200001d9
 8001020:	20000210 	.word	0x20000210
 8001024:	200001d0 	.word	0x200001d0
 8001028:	20000164 	.word	0x20000164

0800102c <Create_Byte_Stream>:

void Create_Byte_Stream(uint8_t txData[PACKET_SIZE]) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	bzero(txData, PACKET_SIZE);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	461a      	mov	r2, r3
 8001038:	2300      	movs	r3, #0
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	6053      	str	r3, [r2, #4]
 800103e:	6093      	str	r3, [r2, #8]
 8001040:	60d3      	str	r3, [r2, #12]
 8001042:	6113      	str	r3, [r2, #16]
 8001044:	6153      	str	r3, [r2, #20]
 8001046:	6193      	str	r3, [r2, #24]

	memcpy(txData, "Debug", 5);
 8001048:	2205      	movs	r2, #5
 800104a:	4922      	ldr	r1, [pc, #136]	@ (80010d4 <Create_Byte_Stream+0xa8>)
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f004 f9fd 	bl	800544c <memcpy>
	memcpy(txData + 5, &mouse_state.current_cell, sizeof(uint8_t));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3305      	adds	r3, #5
 8001056:	4a20      	ldr	r2, [pc, #128]	@ (80010d8 <Create_Byte_Stream+0xac>)
 8001058:	7812      	ldrb	r2, [r2, #0]
 800105a:	701a      	strb	r2, [r3, #0]
	memcpy(txData + 6, &mouse_state.motor_L_RPM, sizeof(uint16_t));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3306      	adds	r3, #6
 8001060:	4a1d      	ldr	r2, [pc, #116]	@ (80010d8 <Create_Byte_Stream+0xac>)
 8001062:	8892      	ldrh	r2, [r2, #4]
 8001064:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 8, &mouse_state.motor_R_RPM, sizeof(uint16_t));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3308      	adds	r3, #8
 800106a:	4a1b      	ldr	r2, [pc, #108]	@ (80010d8 <Create_Byte_Stream+0xac>)
 800106c:	88d2      	ldrh	r2, [r2, #6]
 800106e:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 10, &mouse_state.mouse_direction, sizeof(uint8_t));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	330a      	adds	r3, #10
 8001074:	4a18      	ldr	r2, [pc, #96]	@ (80010d8 <Create_Byte_Stream+0xac>)
 8001076:	78d2      	ldrb	r2, [r2, #3]
 8001078:	701a      	strb	r2, [r3, #0]
	memset(txData + 11, ((mouse_state.mouse_position[0] << 4) | mouse_state.mouse_position[1]), sizeof(uint8_t));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f103 000b 	add.w	r0, r3, #11
 8001080:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <Create_Byte_Stream+0xac>)
 8001082:	785b      	ldrb	r3, [r3, #1]
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <Create_Byte_Stream+0xac>)
 8001088:	7892      	ldrb	r2, [r2, #2]
 800108a:	4313      	orrs	r3, r2
 800108c:	2201      	movs	r2, #1
 800108e:	4619      	mov	r1, r3
 8001090:	f004 f9b0 	bl	80053f4 <memset>
	memcpy(txData + 12, &mouse_state.battery_voltage, sizeof(double));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f103 010c 	add.w	r1, r3, #12
 800109a:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <Create_Byte_Stream+0xac>)
 800109c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80010a0:	600a      	str	r2, [r1, #0]
 80010a2:	604b      	str	r3, [r1, #4]
	memcpy(txData + 20, &mouse_state.raw_FL, sizeof(uint16_t));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3314      	adds	r3, #20
 80010a8:	4a0b      	ldr	r2, [pc, #44]	@ (80010d8 <Create_Byte_Stream+0xac>)
 80010aa:	8912      	ldrh	r2, [r2, #8]
 80010ac:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 22, &mouse_state.raw_L, sizeof(uint16_t));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3316      	adds	r3, #22
 80010b2:	4a09      	ldr	r2, [pc, #36]	@ (80010d8 <Create_Byte_Stream+0xac>)
 80010b4:	8952      	ldrh	r2, [r2, #10]
 80010b6:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 24, &mouse_state.raw_R, sizeof(uint16_t));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3318      	adds	r3, #24
 80010bc:	4a06      	ldr	r2, [pc, #24]	@ (80010d8 <Create_Byte_Stream+0xac>)
 80010be:	8992      	ldrh	r2, [r2, #12]
 80010c0:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 26, &mouse_state.raw_FR, sizeof(uint16_t));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	331a      	adds	r3, #26
 80010c6:	4a04      	ldr	r2, [pc, #16]	@ (80010d8 <Create_Byte_Stream+0xac>)
 80010c8:	89d2      	ldrh	r2, [r2, #14]
 80010ca:	801a      	strh	r2, [r3, #0]
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	08005480 	.word	0x08005480
 80010d8:	200001b0 	.word	0x200001b0

080010dc <Debug_Packet_Send>:

// When mouse in debug mode transmit above data.
//  Also transmit start identifier "Debug". This totals to 28 bytes of data transmitted every 50 ms.
void Debug_Packet_Send() {
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	Create_Byte_Stream(txDebug);                                  // Create byte stream
 80010e0:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <Debug_Packet_Send+0x18>)
 80010e2:	f7ff ffa3 	bl	800102c <Create_Byte_Stream>
	HAL_UART_Transmit_IT(&huart1, txDebug, sizeof(txDebug));      // Transmit data
 80010e6:	221c      	movs	r2, #28
 80010e8:	4902      	ldr	r1, [pc, #8]	@ (80010f4 <Debug_Packet_Send+0x18>)
 80010ea:	4803      	ldr	r0, [pc, #12]	@ (80010f8 <Debug_Packet_Send+0x1c>)
 80010ec:	f003 fc16 	bl	800491c <HAL_UART_Transmit_IT>
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200001f4 	.word	0x200001f4
 80010f8:	20000164 	.word	0x20000164

080010fc <UART_Receive_Callback>:

void UART_Receive_Callback(UART_HandleTypeDef *huart) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a0a      	ldr	r2, [pc, #40]	@ (8001134 <UART_Receive_Callback+0x38>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d10e      	bne.n	800112c <UART_Receive_Callback+0x30>
		Parse_Receive_Data(rxData);
 800110e:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <UART_Receive_Callback+0x3c>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff32 	bl	8000f7c <Parse_Receive_Data>
		HAL_UART_Transmit_IT(&huart1, &txData, sizeof(txData));      // Transmit response ACK (0xFF)                          // Parse incoming command
 8001118:	2201      	movs	r2, #1
 800111a:	4908      	ldr	r1, [pc, #32]	@ (800113c <UART_Receive_Callback+0x40>)
 800111c:	4808      	ldr	r0, [pc, #32]	@ (8001140 <UART_Receive_Callback+0x44>)
 800111e:	f003 fbfd 	bl	800491c <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart1, &rxData, sizeof(rxData));       // Receive incoming command
 8001122:	2201      	movs	r2, #1
 8001124:	4904      	ldr	r1, [pc, #16]	@ (8001138 <UART_Receive_Callback+0x3c>)
 8001126:	4806      	ldr	r0, [pc, #24]	@ (8001140 <UART_Receive_Callback+0x44>)
 8001128:	f003 fc2d 	bl	8004986 <HAL_UART_Receive_IT>
	}
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40013800 	.word	0x40013800
 8001138:	200001f0 	.word	0x200001f0
 800113c:	20000000 	.word	0x20000000
 8001140:	20000164 	.word	0x20000164

08001144 <HAL_TIM_IC_CaptureCallback>:
uint16_t counter_R = 0;

uint32_t last_calculated_time[2] = { 0, 0 }; // { last calculated time left, last calculated time right }
uint32_t last_tick_count[2] = { 0, 0 };

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	uint16_t current_count = __HAL_TIM_GET_COUNTER(htim);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001152:	81fb      	strh	r3, [r7, #14]
	if (htim == &htim4) { // Motor right
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a19      	ldr	r2, [pc, #100]	@ (80011bc <HAL_TIM_IC_CaptureCallback+0x78>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d112      	bne.n	8001182 <HAL_TIM_IC_CaptureCallback+0x3e>
		prev_obj_R = objective_R;
 800115c:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a18      	ldr	r2, [pc, #96]	@ (80011c4 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001162:	6013      	str	r3, [r2, #0]
		objective_R += (int16_t)(current_count - counter_R);
 8001164:	4b18      	ldr	r3, [pc, #96]	@ (80011c8 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	89fa      	ldrh	r2, [r7, #14]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	b29b      	uxth	r3, r3
 800116e:	b21b      	sxth	r3, r3
 8001170:	461a      	mov	r2, r3
 8001172:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	4a11      	ldr	r2, [pc, #68]	@ (80011c0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800117a:	6013      	str	r3, [r2, #0]
		counter_R = current_count;
 800117c:	4a12      	ldr	r2, [pc, #72]	@ (80011c8 <HAL_TIM_IC_CaptureCallback+0x84>)
 800117e:	89fb      	ldrh	r3, [r7, #14]
 8001180:	8013      	strh	r3, [r2, #0]
	}
	if (htim == &htim3) { // Motor left
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a11      	ldr	r2, [pc, #68]	@ (80011cc <HAL_TIM_IC_CaptureCallback+0x88>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d112      	bne.n	80011b0 <HAL_TIM_IC_CaptureCallback+0x6c>
		prev_obj_L = objective_L;
 800118a:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a11      	ldr	r2, [pc, #68]	@ (80011d4 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001190:	6013      	str	r3, [r2, #0]
		objective_L += (int16_t)(current_count - counter_L);
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <HAL_TIM_IC_CaptureCallback+0x94>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	89fa      	ldrh	r2, [r7, #14]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	b29b      	uxth	r3, r3
 800119c:	b21b      	sxth	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80011a8:	6013      	str	r3, [r2, #0]
		counter_L = current_count;
 80011aa:	4a0b      	ldr	r2, [pc, #44]	@ (80011d8 <HAL_TIM_IC_CaptureCallback+0x94>)
 80011ac:	89fb      	ldrh	r3, [r7, #14]
 80011ae:	8013      	strh	r3, [r2, #0]
	}
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	2000011c 	.word	0x2000011c
 80011c0:	200001e4 	.word	0x200001e4
 80011c4:	200001ec 	.word	0x200001ec
 80011c8:	20000214 	.word	0x20000214
 80011cc:	200000d4 	.word	0x200000d4
 80011d0:	200001e0 	.word	0x200001e0
 80011d4:	200001e8 	.word	0x200001e8
 80011d8:	20000212 	.word	0x20000212

080011dc <Calculate_RPM>:

uint16_t Calculate_RPM(int32_t current_ticks, uint8_t motor) {
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	70fb      	strb	r3, [r7, #3]
	uint32_t time_difference = global_time - last_calculated_time[motor];
 80011e8:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <Calculate_RPM+0x74>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	4919      	ldr	r1, [pc, #100]	@ (8001254 <Calculate_RPM+0x78>)
 80011f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	60fb      	str	r3, [r7, #12]
	last_calculated_time[motor] = global_time;
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	4a15      	ldr	r2, [pc, #84]	@ (8001250 <Calculate_RPM+0x74>)
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	4915      	ldr	r1, [pc, #84]	@ (8001254 <Calculate_RPM+0x78>)
 8001200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	int32_t tick_difference = abs(current_ticks - last_tick_count[motor]);
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	4913      	ldr	r1, [pc, #76]	@ (8001258 <Calculate_RPM+0x7c>)
 800120a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	bfb8      	it	lt
 8001214:	425b      	neglt	r3, r3
 8001216:	60bb      	str	r3, [r7, #8]
	last_tick_count[motor] = current_ticks;
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	490e      	ldr	r1, [pc, #56]	@ (8001258 <Calculate_RPM+0x7c>)
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return ((MS_PER_SEC * SEC_PER_MIN * tick_difference) / (TICKS_PER_ROTATION * time_difference));
 8001222:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001226:	223c      	movs	r2, #60	@ 0x3c
 8001228:	fb02 f303 	mul.w	r3, r2, r3
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	fb02 f303 	mul.w	r3, r2, r3
 8001232:	461a      	mov	r2, r3
 8001234:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8001238:	4619      	mov	r1, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	fb01 f303 	mul.w	r3, r1, r3
 8001240:	fbb2 f3f3 	udiv	r3, r2, r3
 8001244:	b29b      	uxth	r3, r3
}
 8001246:	4618      	mov	r0, r3
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	200001dc 	.word	0x200001dc
 8001254:	20000218 	.word	0x20000218
 8001258:	20000220 	.word	0x20000220

0800125c <Set_PWM>:
 * File for the implementation of motor control
 */

#include "mm_motors.h"

void Set_PWM(motor_t motor, uint16_t counter_period) {
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	460a      	mov	r2, r1
 8001266:	71fb      	strb	r3, [r7, #7]
 8001268:	4613      	mov	r3, r2
 800126a:	80bb      	strh	r3, [r7, #4]
	// Software limit for motor voltage ~6V
	counter_period = counter_period > 1450 ? 1450: counter_period;
 800126c:	88bb      	ldrh	r3, [r7, #4]
 800126e:	f240 52aa 	movw	r2, #1450	@ 0x5aa
 8001272:	4293      	cmp	r3, r2
 8001274:	bf28      	it	cs
 8001276:	4613      	movcs	r3, r2
 8001278:	80bb      	strh	r3, [r7, #4]
	switch(motor) {
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <Set_PWM+0x2a>
 8001280:	2b01      	cmp	r3, #1
 8001282:	d005      	beq.n	8001290 <Set_PWM+0x34>
			break;
		case MOTOR_RIGHT:
			TIM2->CCR3 = counter_period;
			break;
	}
}
 8001284:	e009      	b.n	800129a <Set_PWM+0x3e>
			TIM2->CCR4 = counter_period;
 8001286:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800128a:	88bb      	ldrh	r3, [r7, #4]
 800128c:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 800128e:	e004      	b.n	800129a <Set_PWM+0x3e>
			TIM2->CCR3 = counter_period;
 8001290:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001294:	88bb      	ldrh	r3, [r7, #4]
 8001296:	63d3      	str	r3, [r2, #60]	@ 0x3c
			break;
 8001298:	bf00      	nop
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <Set_Direction>:

void Set_Direction(motor_t motor, motor_direction_t direction) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	460a      	mov	r2, r1
 80012ae:	71fb      	strb	r3, [r7, #7]
 80012b0:	4613      	mov	r3, r2
 80012b2:	71bb      	strb	r3, [r7, #6]
	switch(motor) {
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <Set_Direction+0x1c>
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d032      	beq.n	8001324 <Set_Direction+0x80>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
					break;
			}
			break;
	}
}
 80012be:	e066      	b.n	800138e <Set_Direction+0xea>
			switch(direction) {
 80012c0:	79bb      	ldrb	r3, [r7, #6]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d020      	beq.n	8001308 <Set_Direction+0x64>
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	dc5e      	bgt.n	8001388 <Set_Direction+0xe4>
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <Set_Direction+0x30>
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d00d      	beq.n	80012ee <Set_Direction+0x4a>
			break;
 80012d2:	e059      	b.n	8001388 <Set_Direction+0xe4>
					HAL_GPIO_WritePin(ML_FWD_GPIO_Port,  ML_FWD_Pin, 1);
 80012d4:	2201      	movs	r2, #1
 80012d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012da:	482f      	ldr	r0, [pc, #188]	@ (8001398 <Set_Direction+0xf4>)
 80012dc:	f001 fca6 	bl	8002c2c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012e6:	482d      	ldr	r0, [pc, #180]	@ (800139c <Set_Direction+0xf8>)
 80012e8:	f001 fca0 	bl	8002c2c <HAL_GPIO_WritePin>
					break;
 80012ec:	e019      	b.n	8001322 <Set_Direction+0x7e>
					HAL_GPIO_WritePin(ML_FWD_GPIO_Port,  ML_FWD_Pin, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012f4:	4828      	ldr	r0, [pc, #160]	@ (8001398 <Set_Direction+0xf4>)
 80012f6:	f001 fc99 	bl	8002c2c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 1);
 80012fa:	2201      	movs	r2, #1
 80012fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001300:	4826      	ldr	r0, [pc, #152]	@ (800139c <Set_Direction+0xf8>)
 8001302:	f001 fc93 	bl	8002c2c <HAL_GPIO_WritePin>
					break;
 8001306:	e00c      	b.n	8001322 <Set_Direction+0x7e>
					HAL_GPIO_WritePin(ML_FWD_GPIO_Port,  ML_FWD_Pin, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800130e:	4822      	ldr	r0, [pc, #136]	@ (8001398 <Set_Direction+0xf4>)
 8001310:	f001 fc8c 	bl	8002c2c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800131a:	4820      	ldr	r0, [pc, #128]	@ (800139c <Set_Direction+0xf8>)
 800131c:	f001 fc86 	bl	8002c2c <HAL_GPIO_WritePin>
					break;
 8001320:	bf00      	nop
			break;
 8001322:	e031      	b.n	8001388 <Set_Direction+0xe4>
			switch(direction) {
 8001324:	79bb      	ldrb	r3, [r7, #6]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d020      	beq.n	800136c <Set_Direction+0xc8>
 800132a:	2b02      	cmp	r3, #2
 800132c:	dc2e      	bgt.n	800138c <Set_Direction+0xe8>
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <Set_Direction+0x94>
 8001332:	2b01      	cmp	r3, #1
 8001334:	d00d      	beq.n	8001352 <Set_Direction+0xae>
			break;
 8001336:	e029      	b.n	800138c <Set_Direction+0xe8>
					HAL_GPIO_WritePin(MR_FWD_GPIO_Port,  MR_FWD_Pin, 1);
 8001338:	2201      	movs	r2, #1
 800133a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800133e:	4816      	ldr	r0, [pc, #88]	@ (8001398 <Set_Direction+0xf4>)
 8001340:	f001 fc74 	bl	8002c2c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800134a:	4813      	ldr	r0, [pc, #76]	@ (8001398 <Set_Direction+0xf4>)
 800134c:	f001 fc6e 	bl	8002c2c <HAL_GPIO_WritePin>
					break;
 8001350:	e019      	b.n	8001386 <Set_Direction+0xe2>
					HAL_GPIO_WritePin(MR_FWD_GPIO_Port,  MR_FWD_Pin, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001358:	480f      	ldr	r0, [pc, #60]	@ (8001398 <Set_Direction+0xf4>)
 800135a:	f001 fc67 	bl	8002c2c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 1);
 800135e:	2201      	movs	r2, #1
 8001360:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001364:	480c      	ldr	r0, [pc, #48]	@ (8001398 <Set_Direction+0xf4>)
 8001366:	f001 fc61 	bl	8002c2c <HAL_GPIO_WritePin>
					break;
 800136a:	e00c      	b.n	8001386 <Set_Direction+0xe2>
					HAL_GPIO_WritePin(MR_FWD_GPIO_Port,  MR_FWD_Pin, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001372:	4809      	ldr	r0, [pc, #36]	@ (8001398 <Set_Direction+0xf4>)
 8001374:	f001 fc5a 	bl	8002c2c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800137e:	4806      	ldr	r0, [pc, #24]	@ (8001398 <Set_Direction+0xf4>)
 8001380:	f001 fc54 	bl	8002c2c <HAL_GPIO_WritePin>
					break;
 8001384:	bf00      	nop
			break;
 8001386:	e001      	b.n	800138c <Set_Direction+0xe8>
			break;
 8001388:	bf00      	nop
 800138a:	e000      	b.n	800138e <Set_Direction+0xea>
			break;
 800138c:	bf00      	nop
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40010c00 	.word	0x40010c00
 800139c:	40010800 	.word	0x40010800

080013a0 <LED_Power_Init>:

volatile uint16_t buzzerDelay = 0;

extern ADC_HandleTypeDef hadc2;

void LED_Power_Init() {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Power_GPIO_Port, LED_Power_Pin);
 80013a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013a8:	4802      	ldr	r0, [pc, #8]	@ (80013b4 <LED_Power_Init+0x14>)
 80013aa:	f001 fc57 	bl	8002c5c <HAL_GPIO_TogglePin>
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40011000 	.word	0x40011000

080013b8 <Pulse_Buzzer>:
void Reset_Buffers(uint8_t rxBuff, uint8_t txBuff) {
	rxBuff = 0;
	txBuff = 0;
}

void Pulse_Buzzer(uint16_t delay) {
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	80fb      	strh	r3, [r7, #6]
	//HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
	buzzerDelay = delay;
 80013c2:	4a04      	ldr	r2, [pc, #16]	@ (80013d4 <Pulse_Buzzer+0x1c>)
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	8013      	strh	r3, [r2, #0]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000228 	.word	0x20000228

080013d8 <Read_Battery>:

void LED_Blue_Toggle() {
	HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
}

double Read_Battery() {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 80013de:	481e      	ldr	r0, [pc, #120]	@ (8001458 <Read_Battery+0x80>)
 80013e0:	f000 fd60 	bl	8001ea4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80013e4:	f04f 31ff 	mov.w	r1, #4294967295
 80013e8:	481b      	ldr	r0, [pc, #108]	@ (8001458 <Read_Battery+0x80>)
 80013ea:	f000 fe35 	bl	8002058 <HAL_ADC_PollForConversion>
	uint16_t raw_adc = HAL_ADC_GetValue(&hadc2);
 80013ee:	481a      	ldr	r0, [pc, #104]	@ (8001458 <Read_Battery+0x80>)
 80013f0:	f000 ff38 	bl	8002264 <HAL_ADC_GetValue>
 80013f4:	4603      	mov	r3, r0
 80013f6:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc2);
 80013f8:	4817      	ldr	r0, [pc, #92]	@ (8001458 <Read_Battery+0x80>)
 80013fa:	f000 fe01 	bl	8002000 <HAL_ADC_Stop>

	return ((raw_adc / 4095.0) * 3.3) * 3.5;
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	4618      	mov	r0, r3
 8001402:	f7fe fff7 	bl	80003f4 <__aeabi_i2d>
 8001406:	a310      	add	r3, pc, #64	@ (adr r3, 8001448 <Read_Battery+0x70>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f7ff f986 	bl	800071c <__aeabi_ddiv>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	a30d      	add	r3, pc, #52	@ (adr r3, 8001450 <Read_Battery+0x78>)
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	f7ff f853 	bl	80004c8 <__aeabi_dmul>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4610      	mov	r0, r2
 8001428:	4619      	mov	r1, r3
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <Read_Battery+0x84>)
 8001430:	f7ff f84a 	bl	80004c8 <__aeabi_dmul>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
}
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	f3af 8000 	nop.w
 8001448:	00000000 	.word	0x00000000
 800144c:	40affe00 	.word	0x40affe00
 8001450:	66666666 	.word	0x66666666
 8001454:	400a6666 	.word	0x400a6666
 8001458:	2000005c 	.word	0x2000005c
 800145c:	400c0000 	.word	0x400c0000

08001460 <Systick>:
extern volatile uint16_t buzzerDelay;

const uint8_t UPDATE_DELAY_MS = 100;
uint32_t prev_time = 0;

void Systick() {
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	global_time = HAL_GetTick();
 8001464:	f000 fc18 	bl	8001c98 <HAL_GetTick>
 8001468:	4603      	mov	r3, r0
 800146a:	4a19      	ldr	r2, [pc, #100]	@ (80014d0 <Systick+0x70>)
 800146c:	6013      	str	r3, [r2, #0]

	if (global_time == prev_time + UPDATE_DELAY_MS) {
 800146e:	2364      	movs	r3, #100	@ 0x64
 8001470:	461a      	mov	r2, r3
 8001472:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <Systick+0x74>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	441a      	add	r2, r3
 8001478:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <Systick+0x70>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	d121      	bne.n	80014c4 <Systick+0x64>
		Poll_Sensors(&mouse_state);
 8001480:	4815      	ldr	r0, [pc, #84]	@ (80014d8 <Systick+0x78>)
 8001482:	f000 f939 	bl	80016f8 <Poll_Sensors>
		mouse_state.battery_voltage = Read_Battery();
 8001486:	f7ff ffa7 	bl	80013d8 <Read_Battery>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4912      	ldr	r1, [pc, #72]	@ (80014d8 <Systick+0x78>)
 8001490:	e9c1 2308 	strd	r2, r3, [r1, #32]
		mouse_state.motor_L_RPM = Calculate_RPM(objective_L, MOTOR_LEFT);
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <Systick+0x7c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fe9e 	bl	80011dc <Calculate_RPM>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <Systick+0x78>)
 80014a6:	809a      	strh	r2, [r3, #4]
		mouse_state.motor_R_RPM = Calculate_RPM(objective_R, MOTOR_RIGHT);
 80014a8:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <Systick+0x80>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2101      	movs	r1, #1
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fe94 	bl	80011dc <Calculate_RPM>
 80014b4:	4603      	mov	r3, r0
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <Systick+0x78>)
 80014ba:	80da      	strh	r2, [r3, #6]

		prev_time = global_time;
 80014bc:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <Systick+0x70>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a04      	ldr	r2, [pc, #16]	@ (80014d4 <Systick+0x74>)
 80014c2:	6013      	str	r3, [r2, #0]
	}

	Debug_Mode();
 80014c4:	f000 f80e 	bl	80014e4 <Debug_Mode>
	Buzzer_Check();
 80014c8:	f000 f830 	bl	800152c <Buzzer_Check>
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200001dc 	.word	0x200001dc
 80014d4:	2000022c 	.word	0x2000022c
 80014d8:	200001b0 	.word	0x200001b0
 80014dc:	200001e0 	.word	0x200001e0
 80014e0:	200001e4 	.word	0x200001e4

080014e4 <Debug_Mode>:

void Debug_Mode() {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	if (debugMode) {
 80014e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001520 <Debug_Mode+0x3c>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d015      	beq.n	800151c <Debug_Mode+0x38>
		debugCounter = (debugCounter + 1) % DEBUG_PERIOD;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001524 <Debug_Mode+0x40>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	3301      	adds	r3, #1
 80014f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001528 <Debug_Mode+0x44>)
 80014f8:	fb82 1203 	smull	r1, r2, r2, r3
 80014fc:	1111      	asrs	r1, r2, #4
 80014fe:	17da      	asrs	r2, r3, #31
 8001500:	1a8a      	subs	r2, r1, r2
 8001502:	2132      	movs	r1, #50	@ 0x32
 8001504:	fb01 f202 	mul.w	r2, r1, r2
 8001508:	1a9a      	subs	r2, r3, r2
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <Debug_Mode+0x40>)
 800150e:	701a      	strb	r2, [r3, #0]
		if (debugCounter == 0) {
 8001510:	4b04      	ldr	r3, [pc, #16]	@ (8001524 <Debug_Mode+0x40>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <Debug_Mode+0x38>
			Debug_Packet_Send();
 8001518:	f7ff fde0 	bl	80010dc <Debug_Packet_Send>
		}
	}
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200001d8 	.word	0x200001d8
 8001524:	200001d9 	.word	0x200001d9
 8001528:	51eb851f 	.word	0x51eb851f

0800152c <Buzzer_Check>:

void Buzzer_Check() {
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
	if (buzzerDelay > 0) {
 8001530:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <Buzzer_Check+0x24>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	b29b      	uxth	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d006      	beq.n	8001548 <Buzzer_Check+0x1c>
		buzzerDelay--;
 800153a:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <Buzzer_Check+0x24>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	3b01      	subs	r3, #1
 8001542:	b29a      	uxth	r2, r3
 8001544:	4b02      	ldr	r3, [pc, #8]	@ (8001550 <Buzzer_Check+0x24>)
 8001546:	801a      	strh	r2, [r3, #0]
	}
	else {
		//HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
	}
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	20000228 	.word	0x20000228

08001554 <ADC1_Select_CH9>:
extern uint16_t raw_FL;
extern uint16_t raw_L;
extern uint16_t raw_R;
extern uint16_t raw_FR;

static void ADC1_Select_CH9(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_9;
 8001564:	2309      	movs	r3, #9
 8001566:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001568:	2301      	movs	r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800156c:	2301      	movs	r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel (&hadc1, &sConfig) != HAL_OK) {
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	@ (800158c <ADC1_Select_CH9+0x38>)
 8001576:	f000 fe81 	bl	800227c <HAL_ADC_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <ADC1_Select_CH9+0x30>
		Error_Handler();
 8001580:	f7ff fcf5 	bl	8000f6e <Error_Handler>
	}
}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	2000002c 	.word	0x2000002c

08001590 <ADC1_Select_CH8>:

static void ADC1_Select_CH8(void) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_8;
 80015a0:	2308      	movs	r3, #8
 80015a2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80015a4:	2301      	movs	r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80015a8:	2301      	movs	r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <ADC1_Select_CH8+0x38>)
 80015b2:	f000 fe63 	bl	800227c <HAL_ADC_ConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <ADC1_Select_CH8+0x30>
		Error_Handler();
 80015bc:	f7ff fcd7 	bl	8000f6e <Error_Handler>
	}
}
 80015c0:	bf00      	nop
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	2000002c 	.word	0x2000002c

080015cc <ADC1_Select_CH5>:

static void ADC1_Select_CH5(void) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_5;
 80015dc:	2305      	movs	r3, #5
 80015de:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80015e0:	2301      	movs	r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80015e4:	2301      	movs	r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	@ (8001604 <ADC1_Select_CH5+0x38>)
 80015ee:	f000 fe45 	bl	800227c <HAL_ADC_ConfigChannel>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <ADC1_Select_CH5+0x30>
		Error_Handler();
 80015f8:	f7ff fcb9 	bl	8000f6e <Error_Handler>
	}
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2000002c 	.word	0x2000002c

08001608 <ADC1_Select_CH4>:

static void ADC1_Select_CH4(void) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_4;
 8001618:	2304      	movs	r3, #4
 800161a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800161c:	2301      	movs	r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001620:	2301      	movs	r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel (&hadc1, &sConfig) != HAL_OK) {
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	4619      	mov	r1, r3
 8001628:	4805      	ldr	r0, [pc, #20]	@ (8001640 <ADC1_Select_CH4+0x38>)
 800162a:	f000 fe27 	bl	800227c <HAL_ADC_ConfigChannel>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <ADC1_Select_CH4+0x30>
		Error_Handler();
 8001634:	f7ff fc9b 	bl	8000f6e <Error_Handler>
	}
}
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	2000002c 	.word	0x2000002c

08001644 <Measure_Dist>:

uint16_t Measure_Dist(dist_t dist) { // Poll raw IR sensors
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef* emitter_port;
	uint16_t emitter_pin;

	switch(dist) {
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2b03      	cmp	r3, #3
 8001652:	d82a      	bhi.n	80016aa <Measure_Dist+0x66>
 8001654:	a201      	add	r2, pc, #4	@ (adr r2, 800165c <Measure_Dist+0x18>)
 8001656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165a:	bf00      	nop
 800165c:	0800166d 	.word	0x0800166d
 8001660:	0800167d 	.word	0x0800167d
 8001664:	0800168d 	.word	0x0800168d
 8001668:	0800169d 	.word	0x0800169d
	case DIST_FL:
		emitter_port = EMIT_FL_GPIO_Port;
 800166c:	4b20      	ldr	r3, [pc, #128]	@ (80016f0 <Measure_Dist+0xac>)
 800166e:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_FL_Pin;
 8001670:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001674:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH9();
 8001676:	f7ff ff6d 	bl	8001554 <ADC1_Select_CH9>
		break;
 800167a:	e017      	b.n	80016ac <Measure_Dist+0x68>
	case DIST_L:
		emitter_port = EMIT_L_GPIO_Port;
 800167c:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <Measure_Dist+0xac>)
 800167e:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_L_Pin;
 8001680:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001684:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH8();
 8001686:	f7ff ff83 	bl	8001590 <ADC1_Select_CH8>
		break;
 800168a:	e00f      	b.n	80016ac <Measure_Dist+0x68>
	case DIST_R:
		emitter_port = EMIT_R_GPIO_Port;
 800168c:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <Measure_Dist+0xac>)
 800168e:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_R_Pin;
 8001690:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001694:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH5();
 8001696:	f7ff ff99 	bl	80015cc <ADC1_Select_CH5>
		break;
 800169a:	e007      	b.n	80016ac <Measure_Dist+0x68>
	case DIST_FR:
		emitter_port = EMIT_FR_GPIO_Port;
 800169c:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <Measure_Dist+0xac>)
 800169e:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_FR_Pin;
 80016a0:	2320      	movs	r3, #32
 80016a2:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH4();
 80016a4:	f7ff ffb0 	bl	8001608 <ADC1_Select_CH4>
		break;
 80016a8:	e000      	b.n	80016ac <Measure_Dist+0x68>
	default:
		break;
 80016aa:	bf00      	nop
	}
	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_SET);
 80016ac:	897b      	ldrh	r3, [r7, #10]
 80016ae:	2201      	movs	r2, #1
 80016b0:	4619      	mov	r1, r3
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f001 faba 	bl	8002c2c <HAL_GPIO_WritePin>

	HAL_ADC_Start(&hadc1);
 80016b8:	480e      	ldr	r0, [pc, #56]	@ (80016f4 <Measure_Dist+0xb0>)
 80016ba:	f000 fbf3 	bl	8001ea4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80016be:	f04f 31ff 	mov.w	r1, #4294967295
 80016c2:	480c      	ldr	r0, [pc, #48]	@ (80016f4 <Measure_Dist+0xb0>)
 80016c4:	f000 fcc8 	bl	8002058 <HAL_ADC_PollForConversion>
	uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 80016c8:	480a      	ldr	r0, [pc, #40]	@ (80016f4 <Measure_Dist+0xb0>)
 80016ca:	f000 fdcb 	bl	8002264 <HAL_ADC_GetValue>
 80016ce:	4603      	mov	r3, r0
 80016d0:	813b      	strh	r3, [r7, #8]
	HAL_ADC_Stop(&hadc1);
 80016d2:	4808      	ldr	r0, [pc, #32]	@ (80016f4 <Measure_Dist+0xb0>)
 80016d4:	f000 fc94 	bl	8002000 <HAL_ADC_Stop>

	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_RESET);
 80016d8:	897b      	ldrh	r3, [r7, #10]
 80016da:	2200      	movs	r2, #0
 80016dc:	4619      	mov	r1, r3
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f001 faa4 	bl	8002c2c <HAL_GPIO_WritePin>

	return adc_val;
 80016e4:	893b      	ldrh	r3, [r7, #8]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40010c00 	.word	0x40010c00
 80016f4:	2000002c 	.word	0x2000002c

080016f8 <Poll_Sensors>:

void Poll_Sensors(mouse_state_t* mouse_state){ // Gather all raw IR values
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	mouse_state->raw_FL = Measure_Dist(DIST_FL);
 8001700:	2000      	movs	r0, #0
 8001702:	f7ff ff9f 	bl	8001644 <Measure_Dist>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	811a      	strh	r2, [r3, #8]
	mouse_state->raw_L = Measure_Dist(DIST_L);
 800170e:	2001      	movs	r0, #1
 8001710:	f7ff ff98 	bl	8001644 <Measure_Dist>
 8001714:	4603      	mov	r3, r0
 8001716:	461a      	mov	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	815a      	strh	r2, [r3, #10]
	mouse_state->raw_R = Measure_Dist(DIST_R);
 800171c:	2002      	movs	r0, #2
 800171e:	f7ff ff91 	bl	8001644 <Measure_Dist>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	819a      	strh	r2, [r3, #12]
	mouse_state->raw_FR = Measure_Dist(DIST_FR);
 800172a:	2003      	movs	r0, #3
 800172c:	f7ff ff8a 	bl	8001644 <Measure_Dist>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	81da      	strh	r2, [r3, #14]
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <HAL_MspInit+0x5c>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	4a14      	ldr	r2, [pc, #80]	@ (800179c <HAL_MspInit+0x5c>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6193      	str	r3, [r2, #24]
 8001752:	4b12      	ldr	r3, [pc, #72]	@ (800179c <HAL_MspInit+0x5c>)
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4b0f      	ldr	r3, [pc, #60]	@ (800179c <HAL_MspInit+0x5c>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a0e      	ldr	r2, [pc, #56]	@ (800179c <HAL_MspInit+0x5c>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001768:	61d3      	str	r3, [r2, #28]
 800176a:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <HAL_MspInit+0x5c>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001776:	4b0a      	ldr	r3, [pc, #40]	@ (80017a0 <HAL_MspInit+0x60>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <HAL_MspInit+0x60>)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010000 	.word	0x40010000

080017a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08c      	sub	sp, #48	@ 0x30
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0320 	add.w	r3, r7, #32
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a33      	ldr	r2, [pc, #204]	@ (800188c <HAL_ADC_MspInit+0xe8>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d138      	bne.n	8001836 <HAL_ADC_MspInit+0x92>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017c4:	4b32      	ldr	r3, [pc, #200]	@ (8001890 <HAL_ADC_MspInit+0xec>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a31      	ldr	r2, [pc, #196]	@ (8001890 <HAL_ADC_MspInit+0xec>)
 80017ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001890 <HAL_ADC_MspInit+0xec>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017d8:	61fb      	str	r3, [r7, #28]
 80017da:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001890 <HAL_ADC_MspInit+0xec>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001890 <HAL_ADC_MspInit+0xec>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b29      	ldr	r3, [pc, #164]	@ (8001890 <HAL_ADC_MspInit+0xec>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f4:	4b26      	ldr	r3, [pc, #152]	@ (8001890 <HAL_ADC_MspInit+0xec>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a25      	ldr	r2, [pc, #148]	@ (8001890 <HAL_ADC_MspInit+0xec>)
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b23      	ldr	r3, [pc, #140]	@ (8001890 <HAL_ADC_MspInit+0xec>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	697b      	ldr	r3, [r7, #20]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RECIV_FR_Pin|RECIV_R_Pin;
 800180c:	2330      	movs	r3, #48	@ 0x30
 800180e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001810:	2303      	movs	r3, #3
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 0320 	add.w	r3, r7, #32
 8001818:	4619      	mov	r1, r3
 800181a:	481e      	ldr	r0, [pc, #120]	@ (8001894 <HAL_ADC_MspInit+0xf0>)
 800181c:	f001 f882 	bl	8002924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RECIV_L_Pin|RECIV_FL_Pin;
 8001820:	2303      	movs	r3, #3
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001824:	2303      	movs	r3, #3
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001828:	f107 0320 	add.w	r3, r7, #32
 800182c:	4619      	mov	r1, r3
 800182e:	481a      	ldr	r0, [pc, #104]	@ (8001898 <HAL_ADC_MspInit+0xf4>)
 8001830:	f001 f878 	bl	8002924 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001834:	e026      	b.n	8001884 <HAL_ADC_MspInit+0xe0>
  else if(hadc->Instance==ADC2)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a18      	ldr	r2, [pc, #96]	@ (800189c <HAL_ADC_MspInit+0xf8>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d121      	bne.n	8001884 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001840:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <HAL_ADC_MspInit+0xec>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a12      	ldr	r2, [pc, #72]	@ (8001890 <HAL_ADC_MspInit+0xec>)
 8001846:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <HAL_ADC_MspInit+0xec>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001858:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <HAL_ADC_MspInit+0xec>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	4a0c      	ldr	r2, [pc, #48]	@ (8001890 <HAL_ADC_MspInit+0xec>)
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	6193      	str	r3, [r2, #24]
 8001864:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <HAL_ADC_MspInit+0xec>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_METER_Pin;
 8001870:	2302      	movs	r3, #2
 8001872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001874:	2303      	movs	r3, #3
 8001876:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(V_METER_GPIO_Port, &GPIO_InitStruct);
 8001878:	f107 0320 	add.w	r3, r7, #32
 800187c:	4619      	mov	r1, r3
 800187e:	4805      	ldr	r0, [pc, #20]	@ (8001894 <HAL_ADC_MspInit+0xf0>)
 8001880:	f001 f850 	bl	8002924 <HAL_GPIO_Init>
}
 8001884:	bf00      	nop
 8001886:	3730      	adds	r7, #48	@ 0x30
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40012400 	.word	0x40012400
 8001890:	40021000 	.word	0x40021000
 8001894:	40010800 	.word	0x40010800
 8001898:	40010c00 	.word	0x40010c00
 800189c:	40012800 	.word	0x40012800

080018a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018b0:	d10b      	bne.n	80018ca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018b2:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <HAL_TIM_Base_MspInit+0x34>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	4a07      	ldr	r2, [pc, #28]	@ (80018d4 <HAL_TIM_Base_MspInit+0x34>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	61d3      	str	r3, [r2, #28]
 80018be:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <HAL_TIM_Base_MspInit+0x34>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	40021000 	.word	0x40021000

080018d8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	@ 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0318 	add.w	r3, r7, #24
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a32      	ldr	r2, [pc, #200]	@ (80019bc <HAL_TIM_Encoder_MspInit+0xe4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d12c      	bne.n	8001952 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018f8:	4b31      	ldr	r3, [pc, #196]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	4a30      	ldr	r2, [pc, #192]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018fe:	f043 0302 	orr.w	r3, r3, #2
 8001902:	61d3      	str	r3, [r2, #28]
 8001904:	4b2e      	ldr	r3, [pc, #184]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001910:	4b2b      	ldr	r3, [pc, #172]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	4a2a      	ldr	r2, [pc, #168]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	6193      	str	r3, [r2, #24]
 800191c:	4b28      	ldr	r3, [pc, #160]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ML_ENC_B_Pin|ML_ENC_A_Pin;
 8001928:	23c0      	movs	r3, #192	@ 0xc0
 800192a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 0318 	add.w	r3, r7, #24
 8001938:	4619      	mov	r1, r3
 800193a:	4822      	ldr	r0, [pc, #136]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0xec>)
 800193c:	f000 fff2 	bl	8002924 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2100      	movs	r1, #0
 8001944:	201d      	movs	r0, #29
 8001946:	f000 ff04 	bl	8002752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800194a:	201d      	movs	r0, #29
 800194c:	f000 ff1d 	bl	800278a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001950:	e030      	b.n	80019b4 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a1c      	ldr	r2, [pc, #112]	@ (80019c8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d12b      	bne.n	80019b4 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800195c:	4b18      	ldr	r3, [pc, #96]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	4a17      	ldr	r2, [pc, #92]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	61d3      	str	r3, [r2, #28]
 8001968:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001974:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a11      	ldr	r2, [pc, #68]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800197a:	f043 0308 	orr.w	r3, r3, #8
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MR_ENC_A_Pin|MR_ENC_B_Pin;
 800198c:	23c0      	movs	r3, #192	@ 0xc0
 800198e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	f107 0318 	add.w	r3, r7, #24
 800199c:	4619      	mov	r1, r3
 800199e:	480b      	ldr	r0, [pc, #44]	@ (80019cc <HAL_TIM_Encoder_MspInit+0xf4>)
 80019a0:	f000 ffc0 	bl	8002924 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2100      	movs	r1, #0
 80019a8:	201e      	movs	r0, #30
 80019aa:	f000 fed2 	bl	8002752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019ae:	201e      	movs	r0, #30
 80019b0:	f000 feeb 	bl	800278a <HAL_NVIC_EnableIRQ>
}
 80019b4:	bf00      	nop
 80019b6:	3728      	adds	r7, #40	@ 0x28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40000400 	.word	0x40000400
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010800 	.word	0x40010800
 80019c8:	40000800 	.word	0x40000800
 80019cc:	40010c00 	.word	0x40010c00

080019d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019ee:	d117      	bne.n	8001a20 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a28 <HAL_TIM_MspPostInit+0x58>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001a28 <HAL_TIM_MspPostInit+0x58>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <HAL_TIM_MspPostInit+0x58>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ML_PWM_Pin|MR_PWM_Pin;
 8001a08:	230c      	movs	r3, #12
 8001a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2302      	movs	r3, #2
 8001a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4804      	ldr	r0, [pc, #16]	@ (8001a2c <HAL_TIM_MspPostInit+0x5c>)
 8001a1c:	f000 ff82 	bl	8002924 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a20:	bf00      	nop
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40010800 	.word	0x40010800

08001a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a20      	ldr	r2, [pc, #128]	@ (8001acc <HAL_UART_MspInit+0x9c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d139      	bne.n	8001ac4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a50:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad0 <HAL_UART_MspInit+0xa0>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad0 <HAL_UART_MspInit+0xa0>)
 8001a56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a5a:	6193      	str	r3, [r2, #24]
 8001a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad0 <HAL_UART_MspInit+0xa0>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a68:	4b19      	ldr	r3, [pc, #100]	@ (8001ad0 <HAL_UART_MspInit+0xa0>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	4a18      	ldr	r2, [pc, #96]	@ (8001ad0 <HAL_UART_MspInit+0xa0>)
 8001a6e:	f043 0304 	orr.w	r3, r3, #4
 8001a72:	6193      	str	r3, [r2, #24]
 8001a74:	4b16      	ldr	r3, [pc, #88]	@ (8001ad0 <HAL_UART_MspInit+0xa0>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8e:	f107 0310 	add.w	r3, r7, #16
 8001a92:	4619      	mov	r1, r3
 8001a94:	480f      	ldr	r0, [pc, #60]	@ (8001ad4 <HAL_UART_MspInit+0xa4>)
 8001a96:	f000 ff45 	bl	8002924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	f107 0310 	add.w	r3, r7, #16
 8001aac:	4619      	mov	r1, r3
 8001aae:	4809      	ldr	r0, [pc, #36]	@ (8001ad4 <HAL_UART_MspInit+0xa4>)
 8001ab0:	f000 ff38 	bl	8002924 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2025      	movs	r0, #37	@ 0x25
 8001aba:	f000 fe4a 	bl	8002752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001abe:	2025      	movs	r0, #37	@ 0x25
 8001ac0:	f000 fe63 	bl	800278a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ac4:	bf00      	nop
 8001ac6:	3720      	adds	r7, #32
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40013800 	.word	0x40013800
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40010800 	.word	0x40010800

08001ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <NMI_Handler+0x4>

08001ae0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <HardFault_Handler+0x4>

08001ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <MemManage_Handler+0x4>

08001af0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <BusFault_Handler+0x4>

08001af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <UsageFault_Handler+0x4>

08001b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b28:	f000 f8a4 	bl	8001c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Systick();
 8001b2c:	f7ff fc98 	bl	8001460 <Systick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ARM_SW1_Pin);
 8001b38:	2010      	movs	r0, #16
 8001b3a:	f001 f8a9 	bl	8002c90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b48:	4802      	ldr	r0, [pc, #8]	@ (8001b54 <TIM3_IRQHandler+0x10>)
 8001b4a:	f002 f8d9 	bl	8003d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200000d4 	.word	0x200000d4

08001b58 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b5c:	4802      	ldr	r0, [pc, #8]	@ (8001b68 <TIM4_IRQHandler+0x10>)
 8001b5e:	f002 f8cf 	bl	8003d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	2000011c 	.word	0x2000011c

08001b6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b70:	4802      	ldr	r0, [pc, #8]	@ (8001b7c <USART1_IRQHandler+0x10>)
 8001b72:	f002 ff2d 	bl	80049d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000164 	.word	0x20000164

08001b80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPEED_SW2_Pin);
 8001b84:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001b88:	f001 f882 	bl	8002c90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b9c:	f7ff fff8 	bl	8001b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba0:	480b      	ldr	r0, [pc, #44]	@ (8001bd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ba2:	490c      	ldr	r1, [pc, #48]	@ (8001bd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ba4:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba8:	e002      	b.n	8001bb0 <LoopCopyDataInit>

08001baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bae:	3304      	adds	r3, #4

08001bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb4:	d3f9      	bcc.n	8001baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb6:	4a09      	ldr	r2, [pc, #36]	@ (8001bdc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bb8:	4c09      	ldr	r4, [pc, #36]	@ (8001be0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bbc:	e001      	b.n	8001bc2 <LoopFillZerobss>

08001bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc0:	3204      	adds	r2, #4

08001bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc4:	d3fb      	bcc.n	8001bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bc6:	f003 fc1d 	bl	8005404 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bca:	f7fe fe8f 	bl	80008ec <main>
  bx lr
 8001bce:	4770      	bx	lr
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001bd8:	080054d0 	.word	0x080054d0
  ldr r2, =_sbss
 8001bdc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001be0:	20000234 	.word	0x20000234

08001be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC1_2_IRQHandler>
	...

08001be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bec:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <HAL_Init+0x28>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a07      	ldr	r2, [pc, #28]	@ (8001c10 <HAL_Init+0x28>)
 8001bf2:	f043 0310 	orr.w	r3, r3, #16
 8001bf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f000 fd9f 	bl	800273c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfe:	200e      	movs	r0, #14
 8001c00:	f000 f808 	bl	8001c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c04:	f7ff fd9c 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40022000 	.word	0x40022000

08001c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c1c:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <HAL_InitTick+0x54>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <HAL_InitTick+0x58>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4619      	mov	r1, r3
 8001c26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 fdb7 	bl	80027a6 <HAL_SYSTICK_Config>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00e      	b.n	8001c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b0f      	cmp	r3, #15
 8001c46:	d80a      	bhi.n	8001c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f000 fd7f 	bl	8002752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c54:	4a06      	ldr	r2, [pc, #24]	@ (8001c70 <HAL_InitTick+0x5c>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e000      	b.n	8001c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000004 	.word	0x20000004
 8001c6c:	2000000c 	.word	0x2000000c
 8001c70:	20000008 	.word	0x20000008

08001c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <HAL_IncTick+0x1c>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <HAL_IncTick+0x20>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	4a03      	ldr	r2, [pc, #12]	@ (8001c94 <HAL_IncTick+0x20>)
 8001c86:	6013      	str	r3, [r2, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	2000000c 	.word	0x2000000c
 8001c94:	20000230 	.word	0x20000230

08001c98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c9c:	4b02      	ldr	r3, [pc, #8]	@ (8001ca8 <HAL_GetTick+0x10>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	20000230 	.word	0x20000230

08001cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb4:	f7ff fff0 	bl	8001c98 <HAL_GetTick>
 8001cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc4:	d005      	beq.n	8001cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <HAL_Delay+0x44>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cd2:	bf00      	nop
 8001cd4:	f7ff ffe0 	bl	8001c98 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d8f7      	bhi.n	8001cd4 <HAL_Delay+0x28>
  {
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	2000000c 	.word	0x2000000c

08001cf4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e0be      	b.n	8001e94 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d109      	bne.n	8001d38 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff fd36 	bl	80017a4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 fbf1 	bl	8002520 <ADC_ConversionStop_Disable>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 8099 	bne.w	8001e82 <HAL_ADC_Init+0x18e>
 8001d50:	7dfb      	ldrb	r3, [r7, #23]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f040 8095 	bne.w	8001e82 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d60:	f023 0302 	bic.w	r3, r3, #2
 8001d64:	f043 0202 	orr.w	r2, r3, #2
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d74:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7b1b      	ldrb	r3, [r3, #12]
 8001d7a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d7c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d8c:	d003      	beq.n	8001d96 <HAL_ADC_Init+0xa2>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d102      	bne.n	8001d9c <HAL_ADC_Init+0xa8>
 8001d96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d9a:	e000      	b.n	8001d9e <HAL_ADC_Init+0xaa>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7d1b      	ldrb	r3, [r3, #20]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d119      	bne.n	8001de0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	7b1b      	ldrb	r3, [r3, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d109      	bne.n	8001dc8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	035a      	lsls	r2, r3, #13
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	e00b      	b.n	8001de0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dcc:	f043 0220 	orr.w	r2, r3, #32
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd8:	f043 0201 	orr.w	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	4b28      	ldr	r3, [pc, #160]	@ (8001e9c <HAL_ADC_Init+0x1a8>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	430b      	orrs	r3, r1
 8001e06:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e10:	d003      	beq.n	8001e1a <HAL_ADC_Init+0x126>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d104      	bne.n	8001e24 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	051b      	lsls	r3, r3, #20
 8001e22:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	4b18      	ldr	r3, [pc, #96]	@ (8001ea0 <HAL_ADC_Init+0x1ac>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d10b      	bne.n	8001e60 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e52:	f023 0303 	bic.w	r3, r3, #3
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e5e:	e018      	b.n	8001e92 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e64:	f023 0312 	bic.w	r3, r3, #18
 8001e68:	f043 0210 	orr.w	r2, r3, #16
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e74:	f043 0201 	orr.w	r2, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e80:	e007      	b.n	8001e92 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e86:	f043 0210 	orr.w	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	ffe1f7fd 	.word	0xffe1f7fd
 8001ea0:	ff1f0efe 	.word	0xff1f0efe

08001ea4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_ADC_Start+0x1a>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e098      	b.n	8001ff0 <HAL_ADC_Start+0x14c>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fad0 	bl	800246c <ADC_Enable>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f040 8087 	bne.w	8001fe6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001edc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ee0:	f023 0301 	bic.w	r3, r3, #1
 8001ee4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a41      	ldr	r2, [pc, #260]	@ (8001ff8 <HAL_ADC_Start+0x154>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d105      	bne.n	8001f02 <HAL_ADC_Start+0x5e>
 8001ef6:	4b41      	ldr	r3, [pc, #260]	@ (8001ffc <HAL_ADC_Start+0x158>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d115      	bne.n	8001f2e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f06:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d026      	beq.n	8001f6a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f20:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f24:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f2c:	e01d      	b.n	8001f6a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f32:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a2f      	ldr	r2, [pc, #188]	@ (8001ffc <HAL_ADC_Start+0x158>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d004      	beq.n	8001f4e <HAL_ADC_Start+0xaa>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a2b      	ldr	r2, [pc, #172]	@ (8001ff8 <HAL_ADC_Start+0x154>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d10d      	bne.n	8001f6a <HAL_ADC_Start+0xc6>
 8001f4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001ffc <HAL_ADC_Start+0x158>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d007      	beq.n	8001f6a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f62:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d006      	beq.n	8001f84 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7a:	f023 0206 	bic.w	r2, r3, #6
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f82:	e002      	b.n	8001f8a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f06f 0202 	mvn.w	r2, #2
 8001f9a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001fa6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001faa:	d113      	bne.n	8001fd4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001fb0:	4a11      	ldr	r2, [pc, #68]	@ (8001ff8 <HAL_ADC_Start+0x154>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d105      	bne.n	8001fc2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001fb6:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <HAL_ADC_Start+0x158>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d108      	bne.n	8001fd4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	e00c      	b.n	8001fee <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	e003      	b.n	8001fee <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40012800 	.word	0x40012800
 8001ffc:	40012400 	.word	0x40012400

08002000 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_ADC_Stop+0x1a>
 8002016:	2302      	movs	r3, #2
 8002018:	e01a      	b.n	8002050 <HAL_ADC_Stop+0x50>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fa7c 	bl	8002520 <ADC_ConversionStop_Disable>
 8002028:	4603      	mov	r3, r0
 800202a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002036:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800203a:	f023 0301 	bic.w	r3, r3, #1
 800203e:	f043 0201 	orr.w	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800204e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002058:	b590      	push	{r4, r7, lr}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800206e:	f7ff fe13 	bl	8001c98 <HAL_GetTick>
 8002072:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00b      	beq.n	800209a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002086:	f043 0220 	orr.w	r2, r3, #32
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e0d3      	b.n	8002242 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d131      	bne.n	800210c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ae:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d12a      	bne.n	800210c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80020b6:	e021      	b.n	80020fc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020be:	d01d      	beq.n	80020fc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d007      	beq.n	80020d6 <HAL_ADC_PollForConversion+0x7e>
 80020c6:	f7ff fde7 	bl	8001c98 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d212      	bcs.n	80020fc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10b      	bne.n	80020fc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e8:	f043 0204 	orr.w	r2, r3, #4
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e0a2      	b.n	8002242 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0d6      	beq.n	80020b8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800210a:	e070      	b.n	80021ee <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800210c:	4b4f      	ldr	r3, [pc, #316]	@ (800224c <HAL_ADC_PollForConversion+0x1f4>)
 800210e:	681c      	ldr	r4, [r3, #0]
 8002110:	2002      	movs	r0, #2
 8002112:	f001 faa5 	bl	8003660 <HAL_RCCEx_GetPeriphCLKFreq>
 8002116:	4603      	mov	r3, r0
 8002118:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6919      	ldr	r1, [r3, #16]
 8002122:	4b4b      	ldr	r3, [pc, #300]	@ (8002250 <HAL_ADC_PollForConversion+0x1f8>)
 8002124:	400b      	ands	r3, r1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d118      	bne.n	800215c <HAL_ADC_PollForConversion+0x104>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68d9      	ldr	r1, [r3, #12]
 8002130:	4b48      	ldr	r3, [pc, #288]	@ (8002254 <HAL_ADC_PollForConversion+0x1fc>)
 8002132:	400b      	ands	r3, r1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d111      	bne.n	800215c <HAL_ADC_PollForConversion+0x104>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6919      	ldr	r1, [r3, #16]
 800213e:	4b46      	ldr	r3, [pc, #280]	@ (8002258 <HAL_ADC_PollForConversion+0x200>)
 8002140:	400b      	ands	r3, r1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d108      	bne.n	8002158 <HAL_ADC_PollForConversion+0x100>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68d9      	ldr	r1, [r3, #12]
 800214c:	4b43      	ldr	r3, [pc, #268]	@ (800225c <HAL_ADC_PollForConversion+0x204>)
 800214e:	400b      	ands	r3, r1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_ADC_PollForConversion+0x100>
 8002154:	2314      	movs	r3, #20
 8002156:	e020      	b.n	800219a <HAL_ADC_PollForConversion+0x142>
 8002158:	2329      	movs	r3, #41	@ 0x29
 800215a:	e01e      	b.n	800219a <HAL_ADC_PollForConversion+0x142>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6919      	ldr	r1, [r3, #16]
 8002162:	4b3d      	ldr	r3, [pc, #244]	@ (8002258 <HAL_ADC_PollForConversion+0x200>)
 8002164:	400b      	ands	r3, r1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d106      	bne.n	8002178 <HAL_ADC_PollForConversion+0x120>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68d9      	ldr	r1, [r3, #12]
 8002170:	4b3a      	ldr	r3, [pc, #232]	@ (800225c <HAL_ADC_PollForConversion+0x204>)
 8002172:	400b      	ands	r3, r1
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00d      	beq.n	8002194 <HAL_ADC_PollForConversion+0x13c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6919      	ldr	r1, [r3, #16]
 800217e:	4b38      	ldr	r3, [pc, #224]	@ (8002260 <HAL_ADC_PollForConversion+0x208>)
 8002180:	400b      	ands	r3, r1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d108      	bne.n	8002198 <HAL_ADC_PollForConversion+0x140>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68d9      	ldr	r1, [r3, #12]
 800218c:	4b34      	ldr	r3, [pc, #208]	@ (8002260 <HAL_ADC_PollForConversion+0x208>)
 800218e:	400b      	ands	r3, r1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_ADC_PollForConversion+0x140>
 8002194:	2354      	movs	r3, #84	@ 0x54
 8002196:	e000      	b.n	800219a <HAL_ADC_PollForConversion+0x142>
 8002198:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80021a0:	e021      	b.n	80021e6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d01a      	beq.n	80021e0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d007      	beq.n	80021c0 <HAL_ADC_PollForConversion+0x168>
 80021b0:	f7ff fd72 	bl	8001c98 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d20f      	bcs.n	80021e0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d90b      	bls.n	80021e0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021cc:	f043 0204 	orr.w	r2, r3, #4
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e030      	b.n	8002242 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3301      	adds	r3, #1
 80021e4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d8d9      	bhi.n	80021a2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f06f 0212 	mvn.w	r2, #18
 80021f6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800220e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002212:	d115      	bne.n	8002240 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002218:	2b00      	cmp	r3, #0
 800221a:	d111      	bne.n	8002240 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002220:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002238:	f043 0201 	orr.w	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	371c      	adds	r7, #28
 8002246:	46bd      	mov	sp, r7
 8002248:	bd90      	pop	{r4, r7, pc}
 800224a:	bf00      	nop
 800224c:	20000004 	.word	0x20000004
 8002250:	24924924 	.word	0x24924924
 8002254:	00924924 	.word	0x00924924
 8002258:	12492492 	.word	0x12492492
 800225c:	00492492 	.word	0x00492492
 8002260:	00249249 	.word	0x00249249

08002264 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x20>
 8002298:	2302      	movs	r3, #2
 800229a:	e0dc      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1da>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b06      	cmp	r3, #6
 80022aa:	d81c      	bhi.n	80022e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	3b05      	subs	r3, #5
 80022be:	221f      	movs	r2, #31
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	4019      	ands	r1, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	3b05      	subs	r3, #5
 80022d8:	fa00 f203 	lsl.w	r2, r0, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80022e4:	e03c      	b.n	8002360 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b0c      	cmp	r3, #12
 80022ec:	d81c      	bhi.n	8002328 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	3b23      	subs	r3, #35	@ 0x23
 8002300:	221f      	movs	r2, #31
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	4019      	ands	r1, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	3b23      	subs	r3, #35	@ 0x23
 800231a:	fa00 f203 	lsl.w	r2, r0, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	631a      	str	r2, [r3, #48]	@ 0x30
 8002326:	e01b      	b.n	8002360 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	3b41      	subs	r3, #65	@ 0x41
 800233a:	221f      	movs	r2, #31
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	4019      	ands	r1, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	6818      	ldr	r0, [r3, #0]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	3b41      	subs	r3, #65	@ 0x41
 8002354:	fa00 f203 	lsl.w	r2, r0, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b09      	cmp	r3, #9
 8002366:	d91c      	bls.n	80023a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68d9      	ldr	r1, [r3, #12]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	4613      	mov	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4413      	add	r3, r2
 8002378:	3b1e      	subs	r3, #30
 800237a:	2207      	movs	r2, #7
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	4019      	ands	r1, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6898      	ldr	r0, [r3, #8]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4413      	add	r3, r2
 8002392:	3b1e      	subs	r3, #30
 8002394:	fa00 f203 	lsl.w	r2, r0, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	60da      	str	r2, [r3, #12]
 80023a0:	e019      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6919      	ldr	r1, [r3, #16]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	2207      	movs	r2, #7
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	4019      	ands	r1, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6898      	ldr	r0, [r3, #8]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4613      	mov	r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	fa00 f203 	lsl.w	r2, r0, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b10      	cmp	r3, #16
 80023dc:	d003      	beq.n	80023e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023e2:	2b11      	cmp	r3, #17
 80023e4:	d132      	bne.n	800244c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002460 <HAL_ADC_ConfigChannel+0x1e4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d125      	bne.n	800243c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d126      	bne.n	800244c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800240c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b10      	cmp	r3, #16
 8002414:	d11a      	bne.n	800244c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002416:	4b13      	ldr	r3, [pc, #76]	@ (8002464 <HAL_ADC_ConfigChannel+0x1e8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a13      	ldr	r2, [pc, #76]	@ (8002468 <HAL_ADC_ConfigChannel+0x1ec>)
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
 8002420:	0c9a      	lsrs	r2, r3, #18
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800242c:	e002      	b.n	8002434 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3b01      	subs	r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f9      	bne.n	800242e <HAL_ADC_ConfigChannel+0x1b2>
 800243a:	e007      	b.n	800244c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002440:	f043 0220 	orr.w	r2, r3, #32
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002454:	7bfb      	ldrb	r3, [r7, #15]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	40012400 	.word	0x40012400
 8002464:	20000004 	.word	0x20000004
 8002468:	431bde83 	.word	0x431bde83

0800246c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b01      	cmp	r3, #1
 8002488:	d040      	beq.n	800250c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 0201 	orr.w	r2, r2, #1
 8002498:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800249a:	4b1f      	ldr	r3, [pc, #124]	@ (8002518 <ADC_Enable+0xac>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a1f      	ldr	r2, [pc, #124]	@ (800251c <ADC_Enable+0xb0>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	0c9b      	lsrs	r3, r3, #18
 80024a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024a8:	e002      	b.n	80024b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f9      	bne.n	80024aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024b6:	f7ff fbef 	bl	8001c98 <HAL_GetTick>
 80024ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024bc:	e01f      	b.n	80024fe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024be:	f7ff fbeb 	bl	8001c98 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d918      	bls.n	80024fe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d011      	beq.n	80024fe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024de:	f043 0210 	orr.w	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ea:	f043 0201 	orr.w	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e007      	b.n	800250e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b01      	cmp	r3, #1
 800250a:	d1d8      	bne.n	80024be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000004 	.word	0x20000004
 800251c:	431bde83 	.word	0x431bde83

08002520 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	d12e      	bne.n	8002598 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0201 	bic.w	r2, r2, #1
 8002548:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800254a:	f7ff fba5 	bl	8001c98 <HAL_GetTick>
 800254e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002550:	e01b      	b.n	800258a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002552:	f7ff fba1 	bl	8001c98 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d914      	bls.n	800258a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b01      	cmp	r3, #1
 800256c:	d10d      	bne.n	800258a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002572:	f043 0210 	orr.w	r2, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257e:	f043 0201 	orr.w	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e007      	b.n	800259a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b01      	cmp	r3, #1
 8002596:	d0dc      	beq.n	8002552 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b4:	4b0c      	ldr	r3, [pc, #48]	@ (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025c0:	4013      	ands	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025d6:	4a04      	ldr	r2, [pc, #16]	@ (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	60d3      	str	r3, [r2, #12]
}
 80025dc:	bf00      	nop
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f0:	4b04      	ldr	r3, [pc, #16]	@ (8002604 <__NVIC_GetPriorityGrouping+0x18>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	f003 0307 	and.w	r3, r3, #7
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	2b00      	cmp	r3, #0
 8002618:	db0b      	blt.n	8002632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	f003 021f 	and.w	r2, r3, #31
 8002620:	4906      	ldr	r1, [pc, #24]	@ (800263c <__NVIC_EnableIRQ+0x34>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	2001      	movs	r0, #1
 800262a:	fa00 f202 	lsl.w	r2, r0, r2
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	e000e100 	.word	0xe000e100

08002640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	6039      	str	r1, [r7, #0]
 800264a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002650:	2b00      	cmp	r3, #0
 8002652:	db0a      	blt.n	800266a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	b2da      	uxtb	r2, r3
 8002658:	490c      	ldr	r1, [pc, #48]	@ (800268c <__NVIC_SetPriority+0x4c>)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	0112      	lsls	r2, r2, #4
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	440b      	add	r3, r1
 8002664:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002668:	e00a      	b.n	8002680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4908      	ldr	r1, [pc, #32]	@ (8002690 <__NVIC_SetPriority+0x50>)
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	3b04      	subs	r3, #4
 8002678:	0112      	lsls	r2, r2, #4
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	440b      	add	r3, r1
 800267e:	761a      	strb	r2, [r3, #24]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000e100 	.word	0xe000e100
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002694:	b480      	push	{r7}
 8002696:	b089      	sub	sp, #36	@ 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f1c3 0307 	rsb	r3, r3, #7
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	bf28      	it	cs
 80026b2:	2304      	movcs	r3, #4
 80026b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3304      	adds	r3, #4
 80026ba:	2b06      	cmp	r3, #6
 80026bc:	d902      	bls.n	80026c4 <NVIC_EncodePriority+0x30>
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3b03      	subs	r3, #3
 80026c2:	e000      	b.n	80026c6 <NVIC_EncodePriority+0x32>
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	f04f 32ff 	mov.w	r2, #4294967295
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43da      	mvns	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	401a      	ands	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026dc:	f04f 31ff 	mov.w	r1, #4294967295
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	43d9      	mvns	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ec:	4313      	orrs	r3, r2
         );
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3724      	adds	r7, #36	@ 0x24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002708:	d301      	bcc.n	800270e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800270a:	2301      	movs	r3, #1
 800270c:	e00f      	b.n	800272e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270e:	4a0a      	ldr	r2, [pc, #40]	@ (8002738 <SysTick_Config+0x40>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002716:	210f      	movs	r1, #15
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	f7ff ff90 	bl	8002640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002720:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <SysTick_Config+0x40>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002726:	4b04      	ldr	r3, [pc, #16]	@ (8002738 <SysTick_Config+0x40>)
 8002728:	2207      	movs	r2, #7
 800272a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	e000e010 	.word	0xe000e010

0800273c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff ff2d 	bl	80025a4 <__NVIC_SetPriorityGrouping>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002752:	b580      	push	{r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002764:	f7ff ff42 	bl	80025ec <__NVIC_GetPriorityGrouping>
 8002768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	6978      	ldr	r0, [r7, #20]
 8002770:	f7ff ff90 	bl	8002694 <NVIC_EncodePriority>
 8002774:	4602      	mov	r2, r0
 8002776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff5f 	bl	8002640 <__NVIC_SetPriority>
}
 8002782:	bf00      	nop
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff35 	bl	8002608 <__NVIC_EnableIRQ>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ffa2 	bl	80026f8 <SysTick_Config>
 80027b4:	4603      	mov	r3, r0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027be:	b480      	push	{r7}
 80027c0:	b085      	sub	sp, #20
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d008      	beq.n	80027e8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2204      	movs	r2, #4
 80027da:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e020      	b.n	800282a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 020e 	bic.w	r2, r2, #14
 80027f6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002810:	2101      	movs	r1, #1
 8002812:	fa01 f202 	lsl.w	r2, r1, r2
 8002816:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002828:	7bfb      	ldrb	r3, [r7, #15]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d005      	beq.n	8002858 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2204      	movs	r2, #4
 8002850:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
 8002856:	e051      	b.n	80028fc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 020e 	bic.w	r2, r2, #14
 8002866:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a22      	ldr	r2, [pc, #136]	@ (8002908 <HAL_DMA_Abort_IT+0xd4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d029      	beq.n	80028d6 <HAL_DMA_Abort_IT+0xa2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a21      	ldr	r2, [pc, #132]	@ (800290c <HAL_DMA_Abort_IT+0xd8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d022      	beq.n	80028d2 <HAL_DMA_Abort_IT+0x9e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1f      	ldr	r2, [pc, #124]	@ (8002910 <HAL_DMA_Abort_IT+0xdc>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d01a      	beq.n	80028cc <HAL_DMA_Abort_IT+0x98>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a1e      	ldr	r2, [pc, #120]	@ (8002914 <HAL_DMA_Abort_IT+0xe0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d012      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x92>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002918 <HAL_DMA_Abort_IT+0xe4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00a      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x8c>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1b      	ldr	r2, [pc, #108]	@ (800291c <HAL_DMA_Abort_IT+0xe8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d102      	bne.n	80028ba <HAL_DMA_Abort_IT+0x86>
 80028b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80028b8:	e00e      	b.n	80028d8 <HAL_DMA_Abort_IT+0xa4>
 80028ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028be:	e00b      	b.n	80028d8 <HAL_DMA_Abort_IT+0xa4>
 80028c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028c4:	e008      	b.n	80028d8 <HAL_DMA_Abort_IT+0xa4>
 80028c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028ca:	e005      	b.n	80028d8 <HAL_DMA_Abort_IT+0xa4>
 80028cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028d0:	e002      	b.n	80028d8 <HAL_DMA_Abort_IT+0xa4>
 80028d2:	2310      	movs	r3, #16
 80028d4:	e000      	b.n	80028d8 <HAL_DMA_Abort_IT+0xa4>
 80028d6:	2301      	movs	r3, #1
 80028d8:	4a11      	ldr	r2, [pc, #68]	@ (8002920 <HAL_DMA_Abort_IT+0xec>)
 80028da:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
    } 
  }
  return status;
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40020008 	.word	0x40020008
 800290c:	4002001c 	.word	0x4002001c
 8002910:	40020030 	.word	0x40020030
 8002914:	40020044 	.word	0x40020044
 8002918:	40020058 	.word	0x40020058
 800291c:	4002006c 	.word	0x4002006c
 8002920:	40020000 	.word	0x40020000

08002924 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002924:	b480      	push	{r7}
 8002926:	b08b      	sub	sp, #44	@ 0x2c
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800292e:	2300      	movs	r3, #0
 8002930:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002932:	2300      	movs	r3, #0
 8002934:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002936:	e169      	b.n	8002c0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002938:	2201      	movs	r2, #1
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	429a      	cmp	r2, r3
 8002952:	f040 8158 	bne.w	8002c06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	4a9a      	ldr	r2, [pc, #616]	@ (8002bc4 <HAL_GPIO_Init+0x2a0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d05e      	beq.n	8002a1e <HAL_GPIO_Init+0xfa>
 8002960:	4a98      	ldr	r2, [pc, #608]	@ (8002bc4 <HAL_GPIO_Init+0x2a0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d875      	bhi.n	8002a52 <HAL_GPIO_Init+0x12e>
 8002966:	4a98      	ldr	r2, [pc, #608]	@ (8002bc8 <HAL_GPIO_Init+0x2a4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d058      	beq.n	8002a1e <HAL_GPIO_Init+0xfa>
 800296c:	4a96      	ldr	r2, [pc, #600]	@ (8002bc8 <HAL_GPIO_Init+0x2a4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d86f      	bhi.n	8002a52 <HAL_GPIO_Init+0x12e>
 8002972:	4a96      	ldr	r2, [pc, #600]	@ (8002bcc <HAL_GPIO_Init+0x2a8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d052      	beq.n	8002a1e <HAL_GPIO_Init+0xfa>
 8002978:	4a94      	ldr	r2, [pc, #592]	@ (8002bcc <HAL_GPIO_Init+0x2a8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d869      	bhi.n	8002a52 <HAL_GPIO_Init+0x12e>
 800297e:	4a94      	ldr	r2, [pc, #592]	@ (8002bd0 <HAL_GPIO_Init+0x2ac>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d04c      	beq.n	8002a1e <HAL_GPIO_Init+0xfa>
 8002984:	4a92      	ldr	r2, [pc, #584]	@ (8002bd0 <HAL_GPIO_Init+0x2ac>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d863      	bhi.n	8002a52 <HAL_GPIO_Init+0x12e>
 800298a:	4a92      	ldr	r2, [pc, #584]	@ (8002bd4 <HAL_GPIO_Init+0x2b0>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d046      	beq.n	8002a1e <HAL_GPIO_Init+0xfa>
 8002990:	4a90      	ldr	r2, [pc, #576]	@ (8002bd4 <HAL_GPIO_Init+0x2b0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d85d      	bhi.n	8002a52 <HAL_GPIO_Init+0x12e>
 8002996:	2b12      	cmp	r3, #18
 8002998:	d82a      	bhi.n	80029f0 <HAL_GPIO_Init+0xcc>
 800299a:	2b12      	cmp	r3, #18
 800299c:	d859      	bhi.n	8002a52 <HAL_GPIO_Init+0x12e>
 800299e:	a201      	add	r2, pc, #4	@ (adr r2, 80029a4 <HAL_GPIO_Init+0x80>)
 80029a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a4:	08002a1f 	.word	0x08002a1f
 80029a8:	080029f9 	.word	0x080029f9
 80029ac:	08002a0b 	.word	0x08002a0b
 80029b0:	08002a4d 	.word	0x08002a4d
 80029b4:	08002a53 	.word	0x08002a53
 80029b8:	08002a53 	.word	0x08002a53
 80029bc:	08002a53 	.word	0x08002a53
 80029c0:	08002a53 	.word	0x08002a53
 80029c4:	08002a53 	.word	0x08002a53
 80029c8:	08002a53 	.word	0x08002a53
 80029cc:	08002a53 	.word	0x08002a53
 80029d0:	08002a53 	.word	0x08002a53
 80029d4:	08002a53 	.word	0x08002a53
 80029d8:	08002a53 	.word	0x08002a53
 80029dc:	08002a53 	.word	0x08002a53
 80029e0:	08002a53 	.word	0x08002a53
 80029e4:	08002a53 	.word	0x08002a53
 80029e8:	08002a01 	.word	0x08002a01
 80029ec:	08002a15 	.word	0x08002a15
 80029f0:	4a79      	ldr	r2, [pc, #484]	@ (8002bd8 <HAL_GPIO_Init+0x2b4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d013      	beq.n	8002a1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029f6:	e02c      	b.n	8002a52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	623b      	str	r3, [r7, #32]
          break;
 80029fe:	e029      	b.n	8002a54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	3304      	adds	r3, #4
 8002a06:	623b      	str	r3, [r7, #32]
          break;
 8002a08:	e024      	b.n	8002a54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	3308      	adds	r3, #8
 8002a10:	623b      	str	r3, [r7, #32]
          break;
 8002a12:	e01f      	b.n	8002a54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	330c      	adds	r3, #12
 8002a1a:	623b      	str	r3, [r7, #32]
          break;
 8002a1c:	e01a      	b.n	8002a54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d102      	bne.n	8002a2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a26:	2304      	movs	r3, #4
 8002a28:	623b      	str	r3, [r7, #32]
          break;
 8002a2a:	e013      	b.n	8002a54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d105      	bne.n	8002a40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a34:	2308      	movs	r3, #8
 8002a36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	611a      	str	r2, [r3, #16]
          break;
 8002a3e:	e009      	b.n	8002a54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a40:	2308      	movs	r3, #8
 8002a42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	615a      	str	r2, [r3, #20]
          break;
 8002a4a:	e003      	b.n	8002a54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	623b      	str	r3, [r7, #32]
          break;
 8002a50:	e000      	b.n	8002a54 <HAL_GPIO_Init+0x130>
          break;
 8002a52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	2bff      	cmp	r3, #255	@ 0xff
 8002a58:	d801      	bhi.n	8002a5e <HAL_GPIO_Init+0x13a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	e001      	b.n	8002a62 <HAL_GPIO_Init+0x13e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3304      	adds	r3, #4
 8002a62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2bff      	cmp	r3, #255	@ 0xff
 8002a68:	d802      	bhi.n	8002a70 <HAL_GPIO_Init+0x14c>
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	e002      	b.n	8002a76 <HAL_GPIO_Init+0x152>
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	3b08      	subs	r3, #8
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	210f      	movs	r1, #15
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	fa01 f303 	lsl.w	r3, r1, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	401a      	ands	r2, r3
 8002a88:	6a39      	ldr	r1, [r7, #32]
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a90:	431a      	orrs	r2, r3
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 80b1 	beq.w	8002c06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002aa4:	4b4d      	ldr	r3, [pc, #308]	@ (8002bdc <HAL_GPIO_Init+0x2b8>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	4a4c      	ldr	r2, [pc, #304]	@ (8002bdc <HAL_GPIO_Init+0x2b8>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	6193      	str	r3, [r2, #24]
 8002ab0:	4b4a      	ldr	r3, [pc, #296]	@ (8002bdc <HAL_GPIO_Init+0x2b8>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002abc:	4a48      	ldr	r2, [pc, #288]	@ (8002be0 <HAL_GPIO_Init+0x2bc>)
 8002abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac0:	089b      	lsrs	r3, r3, #2
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	220f      	movs	r2, #15
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4013      	ands	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a40      	ldr	r2, [pc, #256]	@ (8002be4 <HAL_GPIO_Init+0x2c0>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d013      	beq.n	8002b10 <HAL_GPIO_Init+0x1ec>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a3f      	ldr	r2, [pc, #252]	@ (8002be8 <HAL_GPIO_Init+0x2c4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00d      	beq.n	8002b0c <HAL_GPIO_Init+0x1e8>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a3e      	ldr	r2, [pc, #248]	@ (8002bec <HAL_GPIO_Init+0x2c8>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d007      	beq.n	8002b08 <HAL_GPIO_Init+0x1e4>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a3d      	ldr	r2, [pc, #244]	@ (8002bf0 <HAL_GPIO_Init+0x2cc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d101      	bne.n	8002b04 <HAL_GPIO_Init+0x1e0>
 8002b00:	2303      	movs	r3, #3
 8002b02:	e006      	b.n	8002b12 <HAL_GPIO_Init+0x1ee>
 8002b04:	2304      	movs	r3, #4
 8002b06:	e004      	b.n	8002b12 <HAL_GPIO_Init+0x1ee>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e002      	b.n	8002b12 <HAL_GPIO_Init+0x1ee>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <HAL_GPIO_Init+0x1ee>
 8002b10:	2300      	movs	r3, #0
 8002b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b14:	f002 0203 	and.w	r2, r2, #3
 8002b18:	0092      	lsls	r2, r2, #2
 8002b1a:	4093      	lsls	r3, r2
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b22:	492f      	ldr	r1, [pc, #188]	@ (8002be0 <HAL_GPIO_Init+0x2bc>)
 8002b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b26:	089b      	lsrs	r3, r3, #2
 8002b28:	3302      	adds	r3, #2
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d006      	beq.n	8002b4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	492c      	ldr	r1, [pc, #176]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	608b      	str	r3, [r1, #8]
 8002b48:	e006      	b.n	8002b58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	4928      	ldr	r1, [pc, #160]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d006      	beq.n	8002b72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b64:	4b23      	ldr	r3, [pc, #140]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	4922      	ldr	r1, [pc, #136]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60cb      	str	r3, [r1, #12]
 8002b70:	e006      	b.n	8002b80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b72:	4b20      	ldr	r3, [pc, #128]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	491e      	ldr	r1, [pc, #120]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d006      	beq.n	8002b9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b8c:	4b19      	ldr	r3, [pc, #100]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	4918      	ldr	r1, [pc, #96]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]
 8002b98:	e006      	b.n	8002ba8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b9a:	4b16      	ldr	r3, [pc, #88]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	4914      	ldr	r1, [pc, #80]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d021      	beq.n	8002bf8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	490e      	ldr	r1, [pc, #56]	@ (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	600b      	str	r3, [r1, #0]
 8002bc0:	e021      	b.n	8002c06 <HAL_GPIO_Init+0x2e2>
 8002bc2:	bf00      	nop
 8002bc4:	10320000 	.word	0x10320000
 8002bc8:	10310000 	.word	0x10310000
 8002bcc:	10220000 	.word	0x10220000
 8002bd0:	10210000 	.word	0x10210000
 8002bd4:	10120000 	.word	0x10120000
 8002bd8:	10110000 	.word	0x10110000
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40010000 	.word	0x40010000
 8002be4:	40010800 	.word	0x40010800
 8002be8:	40010c00 	.word	0x40010c00
 8002bec:	40011000 	.word	0x40011000
 8002bf0:	40011400 	.word	0x40011400
 8002bf4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c28 <HAL_GPIO_Init+0x304>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	4909      	ldr	r1, [pc, #36]	@ (8002c28 <HAL_GPIO_Init+0x304>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c08:	3301      	adds	r3, #1
 8002c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c12:	fa22 f303 	lsr.w	r3, r2, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f47f ae8e 	bne.w	8002938 <HAL_GPIO_Init+0x14>
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	372c      	adds	r7, #44	@ 0x2c
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	40010400 	.word	0x40010400

08002c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	807b      	strh	r3, [r7, #2]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c3c:	787b      	ldrb	r3, [r7, #1]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c42:	887a      	ldrh	r2, [r7, #2]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c48:	e003      	b.n	8002c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c4a:	887b      	ldrh	r3, [r7, #2]
 8002c4c:	041a      	lsls	r2, r3, #16
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	611a      	str	r2, [r3, #16]
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c6e:	887a      	ldrh	r2, [r7, #2]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4013      	ands	r3, r2
 8002c74:	041a      	lsls	r2, r3, #16
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	43d9      	mvns	r1, r3
 8002c7a:	887b      	ldrh	r3, [r7, #2]
 8002c7c:	400b      	ands	r3, r1
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	611a      	str	r2, [r3, #16]
}
 8002c84:	bf00      	nop
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr
	...

08002c90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c9a:	4b08      	ldr	r3, [pc, #32]	@ (8002cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	88fb      	ldrh	r3, [r7, #6]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d006      	beq.n	8002cb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ca6:	4a05      	ldr	r2, [pc, #20]	@ (8002cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ca8:	88fb      	ldrh	r3, [r7, #6]
 8002caa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 f806 	bl	8002cc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40010400 	.word	0x40010400

08002cc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e272      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 8087 	beq.w	8002e02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cf4:	4b92      	ldr	r3, [pc, #584]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d00c      	beq.n	8002d1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d00:	4b8f      	ldr	r3, [pc, #572]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d112      	bne.n	8002d32 <HAL_RCC_OscConfig+0x5e>
 8002d0c:	4b8c      	ldr	r3, [pc, #560]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d18:	d10b      	bne.n	8002d32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1a:	4b89      	ldr	r3, [pc, #548]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d06c      	beq.n	8002e00 <HAL_RCC_OscConfig+0x12c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d168      	bne.n	8002e00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e24c      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d3a:	d106      	bne.n	8002d4a <HAL_RCC_OscConfig+0x76>
 8002d3c:	4b80      	ldr	r3, [pc, #512]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a7f      	ldr	r2, [pc, #508]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	e02e      	b.n	8002da8 <HAL_RCC_OscConfig+0xd4>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x98>
 8002d52:	4b7b      	ldr	r3, [pc, #492]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a7a      	ldr	r2, [pc, #488]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b78      	ldr	r3, [pc, #480]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a77      	ldr	r2, [pc, #476]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	e01d      	b.n	8002da8 <HAL_RCC_OscConfig+0xd4>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d74:	d10c      	bne.n	8002d90 <HAL_RCC_OscConfig+0xbc>
 8002d76:	4b72      	ldr	r3, [pc, #456]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a71      	ldr	r2, [pc, #452]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	4b6f      	ldr	r3, [pc, #444]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a6e      	ldr	r2, [pc, #440]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	e00b      	b.n	8002da8 <HAL_RCC_OscConfig+0xd4>
 8002d90:	4b6b      	ldr	r3, [pc, #428]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a6a      	ldr	r2, [pc, #424]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	4b68      	ldr	r3, [pc, #416]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a67      	ldr	r2, [pc, #412]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002da2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002da6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d013      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fe ff72 	bl	8001c98 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db8:	f7fe ff6e 	bl	8001c98 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	@ 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e200      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	4b5d      	ldr	r3, [pc, #372]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCC_OscConfig+0xe4>
 8002dd6:	e014      	b.n	8002e02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7fe ff5e 	bl	8001c98 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de0:	f7fe ff5a 	bl	8001c98 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b64      	cmp	r3, #100	@ 0x64
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e1ec      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df2:	4b53      	ldr	r3, [pc, #332]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x10c>
 8002dfe:	e000      	b.n	8002e02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d063      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e0e:	4b4c      	ldr	r3, [pc, #304]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 030c 	and.w	r3, r3, #12
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00b      	beq.n	8002e32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e1a:	4b49      	ldr	r3, [pc, #292]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d11c      	bne.n	8002e60 <HAL_RCC_OscConfig+0x18c>
 8002e26:	4b46      	ldr	r3, [pc, #280]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d116      	bne.n	8002e60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e32:	4b43      	ldr	r3, [pc, #268]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d005      	beq.n	8002e4a <HAL_RCC_OscConfig+0x176>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d001      	beq.n	8002e4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e1c0      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4939      	ldr	r1, [pc, #228]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5e:	e03a      	b.n	8002ed6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d020      	beq.n	8002eaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e68:	4b36      	ldr	r3, [pc, #216]	@ (8002f44 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7fe ff13 	bl	8001c98 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e76:	f7fe ff0f 	bl	8001c98 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e1a1      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e88:	4b2d      	ldr	r3, [pc, #180]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e94:	4b2a      	ldr	r3, [pc, #168]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4927      	ldr	r1, [pc, #156]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	600b      	str	r3, [r1, #0]
 8002ea8:	e015      	b.n	8002ed6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eaa:	4b26      	ldr	r3, [pc, #152]	@ (8002f44 <HAL_RCC_OscConfig+0x270>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fe fef2 	bl	8001c98 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb8:	f7fe feee 	bl	8001c98 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e180      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eca:	4b1d      	ldr	r3, [pc, #116]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d03a      	beq.n	8002f58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d019      	beq.n	8002f1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eea:	4b17      	ldr	r3, [pc, #92]	@ (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef0:	f7fe fed2 	bl	8001c98 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef8:	f7fe fece 	bl	8001c98 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e160      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f16:	2001      	movs	r0, #1
 8002f18:	f000 face 	bl	80034b8 <RCC_Delay>
 8002f1c:	e01c      	b.n	8002f58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f24:	f7fe feb8 	bl	8001c98 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2a:	e00f      	b.n	8002f4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f2c:	f7fe feb4 	bl	8001c98 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d908      	bls.n	8002f4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e146      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000
 8002f44:	42420000 	.word	0x42420000
 8002f48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4c:	4b92      	ldr	r3, [pc, #584]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e9      	bne.n	8002f2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80a6 	beq.w	80030b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6a:	4b8b      	ldr	r3, [pc, #556]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10d      	bne.n	8002f92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f76:	4b88      	ldr	r3, [pc, #544]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	4a87      	ldr	r2, [pc, #540]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f80:	61d3      	str	r3, [r2, #28]
 8002f82:	4b85      	ldr	r3, [pc, #532]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f92:	4b82      	ldr	r3, [pc, #520]	@ (800319c <HAL_RCC_OscConfig+0x4c8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d118      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f9e:	4b7f      	ldr	r3, [pc, #508]	@ (800319c <HAL_RCC_OscConfig+0x4c8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a7e      	ldr	r2, [pc, #504]	@ (800319c <HAL_RCC_OscConfig+0x4c8>)
 8002fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002faa:	f7fe fe75 	bl	8001c98 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb2:	f7fe fe71 	bl	8001c98 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b64      	cmp	r3, #100	@ 0x64
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e103      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	4b75      	ldr	r3, [pc, #468]	@ (800319c <HAL_RCC_OscConfig+0x4c8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x312>
 8002fd8:	4b6f      	ldr	r3, [pc, #444]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	4a6e      	ldr	r2, [pc, #440]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6213      	str	r3, [r2, #32]
 8002fe4:	e02d      	b.n	8003042 <HAL_RCC_OscConfig+0x36e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10c      	bne.n	8003008 <HAL_RCC_OscConfig+0x334>
 8002fee:	4b6a      	ldr	r3, [pc, #424]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	4a69      	ldr	r2, [pc, #420]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	f023 0301 	bic.w	r3, r3, #1
 8002ff8:	6213      	str	r3, [r2, #32]
 8002ffa:	4b67      	ldr	r3, [pc, #412]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	4a66      	ldr	r2, [pc, #408]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003000:	f023 0304 	bic.w	r3, r3, #4
 8003004:	6213      	str	r3, [r2, #32]
 8003006:	e01c      	b.n	8003042 <HAL_RCC_OscConfig+0x36e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2b05      	cmp	r3, #5
 800300e:	d10c      	bne.n	800302a <HAL_RCC_OscConfig+0x356>
 8003010:	4b61      	ldr	r3, [pc, #388]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4a60      	ldr	r2, [pc, #384]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003016:	f043 0304 	orr.w	r3, r3, #4
 800301a:	6213      	str	r3, [r2, #32]
 800301c:	4b5e      	ldr	r3, [pc, #376]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	4a5d      	ldr	r2, [pc, #372]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	6213      	str	r3, [r2, #32]
 8003028:	e00b      	b.n	8003042 <HAL_RCC_OscConfig+0x36e>
 800302a:	4b5b      	ldr	r3, [pc, #364]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	4a5a      	ldr	r2, [pc, #360]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003030:	f023 0301 	bic.w	r3, r3, #1
 8003034:	6213      	str	r3, [r2, #32]
 8003036:	4b58      	ldr	r3, [pc, #352]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	4a57      	ldr	r2, [pc, #348]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800303c:	f023 0304 	bic.w	r3, r3, #4
 8003040:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d015      	beq.n	8003076 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304a:	f7fe fe25 	bl	8001c98 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003050:	e00a      	b.n	8003068 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003052:	f7fe fe21 	bl	8001c98 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003060:	4293      	cmp	r3, r2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e0b1      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003068:	4b4b      	ldr	r3, [pc, #300]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0ee      	beq.n	8003052 <HAL_RCC_OscConfig+0x37e>
 8003074:	e014      	b.n	80030a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003076:	f7fe fe0f 	bl	8001c98 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307c:	e00a      	b.n	8003094 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307e:	f7fe fe0b 	bl	8001c98 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e09b      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003094:	4b40      	ldr	r3, [pc, #256]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1ee      	bne.n	800307e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d105      	bne.n	80030b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a6:	4b3c      	ldr	r3, [pc, #240]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	4a3b      	ldr	r2, [pc, #236]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 8087 	beq.w	80031ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030bc:	4b36      	ldr	r3, [pc, #216]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 030c 	and.w	r3, r3, #12
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d061      	beq.n	800318c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d146      	bne.n	800315e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d0:	4b33      	ldr	r3, [pc, #204]	@ (80031a0 <HAL_RCC_OscConfig+0x4cc>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d6:	f7fe fddf 	bl	8001c98 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030de:	f7fe fddb 	bl	8001c98 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e06d      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f0:	4b29      	ldr	r3, [pc, #164]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f0      	bne.n	80030de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003104:	d108      	bne.n	8003118 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003106:	4b24      	ldr	r3, [pc, #144]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	4921      	ldr	r1, [pc, #132]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003118:	4b1f      	ldr	r3, [pc, #124]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a19      	ldr	r1, [r3, #32]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	430b      	orrs	r3, r1
 800312a:	491b      	ldr	r1, [pc, #108]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003130:	4b1b      	ldr	r3, [pc, #108]	@ (80031a0 <HAL_RCC_OscConfig+0x4cc>)
 8003132:	2201      	movs	r2, #1
 8003134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003136:	f7fe fdaf 	bl	8001c98 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313e:	f7fe fdab 	bl	8001c98 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e03d      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003150:	4b11      	ldr	r3, [pc, #68]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x46a>
 800315c:	e035      	b.n	80031ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315e:	4b10      	ldr	r3, [pc, #64]	@ (80031a0 <HAL_RCC_OscConfig+0x4cc>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003164:	f7fe fd98 	bl	8001c98 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316c:	f7fe fd94 	bl	8001c98 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e026      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800317e:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x498>
 800318a:	e01e      	b.n	80031ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d107      	bne.n	80031a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e019      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
 8003198:	40021000 	.word	0x40021000
 800319c:	40007000 	.word	0x40007000
 80031a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031a4:	4b0b      	ldr	r3, [pc, #44]	@ (80031d4 <HAL_RCC_OscConfig+0x500>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d106      	bne.n	80031c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d001      	beq.n	80031ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000

080031d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0d0      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d910      	bls.n	800321c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fa:	4b67      	ldr	r3, [pc, #412]	@ (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 0207 	bic.w	r2, r3, #7
 8003202:	4965      	ldr	r1, [pc, #404]	@ (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b63      	ldr	r3, [pc, #396]	@ (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0b8      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d020      	beq.n	800326a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003234:	4b59      	ldr	r3, [pc, #356]	@ (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	4a58      	ldr	r2, [pc, #352]	@ (800339c <HAL_RCC_ClockConfig+0x1c4>)
 800323a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800323e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800324c:	4b53      	ldr	r3, [pc, #332]	@ (800339c <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	4a52      	ldr	r2, [pc, #328]	@ (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003256:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003258:	4b50      	ldr	r3, [pc, #320]	@ (800339c <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	494d      	ldr	r1, [pc, #308]	@ (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003266:	4313      	orrs	r3, r2
 8003268:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d040      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b47      	ldr	r3, [pc, #284]	@ (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d115      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e07f      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003296:	4b41      	ldr	r3, [pc, #260]	@ (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e073      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a6:	4b3d      	ldr	r3, [pc, #244]	@ (800339c <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e06b      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b6:	4b39      	ldr	r3, [pc, #228]	@ (800339c <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f023 0203 	bic.w	r2, r3, #3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4936      	ldr	r1, [pc, #216]	@ (800339c <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c8:	f7fe fce6 	bl	8001c98 <HAL_GetTick>
 80032cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d0:	f7fe fce2 	bl	8001c98 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e053      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e6:	4b2d      	ldr	r3, [pc, #180]	@ (800339c <HAL_RCC_ClockConfig+0x1c4>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 020c 	and.w	r2, r3, #12
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d1eb      	bne.n	80032d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032f8:	4b27      	ldr	r3, [pc, #156]	@ (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d210      	bcs.n	8003328 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	4b24      	ldr	r3, [pc, #144]	@ (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 0207 	bic.w	r2, r3, #7
 800330e:	4922      	ldr	r1, [pc, #136]	@ (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b20      	ldr	r3, [pc, #128]	@ (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e032      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003334:	4b19      	ldr	r3, [pc, #100]	@ (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4916      	ldr	r1, [pc, #88]	@ (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003342:	4313      	orrs	r3, r2
 8003344:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003352:	4b12      	ldr	r3, [pc, #72]	@ (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	490e      	ldr	r1, [pc, #56]	@ (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	4313      	orrs	r3, r2
 8003364:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003366:	f000 f821 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 800336a:	4602      	mov	r2, r0
 800336c:	4b0b      	ldr	r3, [pc, #44]	@ (800339c <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	490a      	ldr	r1, [pc, #40]	@ (80033a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003378:	5ccb      	ldrb	r3, [r1, r3]
 800337a:	fa22 f303 	lsr.w	r3, r2, r3
 800337e:	4a09      	ldr	r2, [pc, #36]	@ (80033a4 <HAL_RCC_ClockConfig+0x1cc>)
 8003380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003382:	4b09      	ldr	r3, [pc, #36]	@ (80033a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe fc44 	bl	8001c14 <HAL_InitTick>

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40022000 	.word	0x40022000
 800339c:	40021000 	.word	0x40021000
 80033a0:	08005488 	.word	0x08005488
 80033a4:	20000004 	.word	0x20000004
 80033a8:	20000008 	.word	0x20000008

080033ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	2300      	movs	r3, #0
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	2300      	movs	r3, #0
 80033c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x94>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d002      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x30>
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0x36>
 80033da:	e027      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033dc:	4b19      	ldr	r3, [pc, #100]	@ (8003444 <HAL_RCC_GetSysClockFreq+0x98>)
 80033de:	613b      	str	r3, [r7, #16]
      break;
 80033e0:	e027      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	0c9b      	lsrs	r3, r3, #18
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	4a17      	ldr	r2, [pc, #92]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033ec:	5cd3      	ldrb	r3, [r2, r3]
 80033ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d010      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033fa:	4b11      	ldr	r3, [pc, #68]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x94>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	0c5b      	lsrs	r3, r3, #17
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	4a11      	ldr	r2, [pc, #68]	@ (800344c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003406:	5cd3      	ldrb	r3, [r2, r3]
 8003408:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a0d      	ldr	r2, [pc, #52]	@ (8003444 <HAL_RCC_GetSysClockFreq+0x98>)
 800340e:	fb03 f202 	mul.w	r2, r3, r2
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	e004      	b.n	8003426 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a0c      	ldr	r2, [pc, #48]	@ (8003450 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003420:	fb02 f303 	mul.w	r3, r2, r3
 8003424:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	613b      	str	r3, [r7, #16]
      break;
 800342a:	e002      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800342c:	4b05      	ldr	r3, [pc, #20]	@ (8003444 <HAL_RCC_GetSysClockFreq+0x98>)
 800342e:	613b      	str	r3, [r7, #16]
      break;
 8003430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003432:	693b      	ldr	r3, [r7, #16]
}
 8003434:	4618      	mov	r0, r3
 8003436:	371c      	adds	r7, #28
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	007a1200 	.word	0x007a1200
 8003448:	080054a0 	.word	0x080054a0
 800344c:	080054b0 	.word	0x080054b0
 8003450:	003d0900 	.word	0x003d0900

08003454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003458:	4b02      	ldr	r3, [pc, #8]	@ (8003464 <HAL_RCC_GetHCLKFreq+0x10>)
 800345a:	681b      	ldr	r3, [r3, #0]
}
 800345c:	4618      	mov	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	20000004 	.word	0x20000004

08003468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800346c:	f7ff fff2 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	0a1b      	lsrs	r3, r3, #8
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4903      	ldr	r1, [pc, #12]	@ (800348c <HAL_RCC_GetPCLK1Freq+0x24>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40021000 	.word	0x40021000
 800348c:	08005498 	.word	0x08005498

08003490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003494:	f7ff ffde 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 8003498:	4602      	mov	r2, r0
 800349a:	4b05      	ldr	r3, [pc, #20]	@ (80034b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	0adb      	lsrs	r3, r3, #11
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	4903      	ldr	r1, [pc, #12]	@ (80034b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a6:	5ccb      	ldrb	r3, [r1, r3]
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40021000 	.word	0x40021000
 80034b4:	08005498 	.word	0x08005498

080034b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034c0:	4b0a      	ldr	r3, [pc, #40]	@ (80034ec <RCC_Delay+0x34>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a0a      	ldr	r2, [pc, #40]	@ (80034f0 <RCC_Delay+0x38>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	0a5b      	lsrs	r3, r3, #9
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
 80034d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034d4:	bf00      	nop
  }
  while (Delay --);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1e5a      	subs	r2, r3, #1
 80034da:	60fa      	str	r2, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f9      	bne.n	80034d4 <RCC_Delay+0x1c>
}
 80034e0:	bf00      	nop
 80034e2:	bf00      	nop
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr
 80034ec:	20000004 	.word	0x20000004
 80034f0:	10624dd3 	.word	0x10624dd3

080034f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d07d      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003510:	2300      	movs	r3, #0
 8003512:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003514:	4b4f      	ldr	r3, [pc, #316]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10d      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003520:	4b4c      	ldr	r3, [pc, #304]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	4a4b      	ldr	r2, [pc, #300]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800352a:	61d3      	str	r3, [r2, #28]
 800352c:	4b49      	ldr	r3, [pc, #292]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003538:	2301      	movs	r3, #1
 800353a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353c:	4b46      	ldr	r3, [pc, #280]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003544:	2b00      	cmp	r3, #0
 8003546:	d118      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003548:	4b43      	ldr	r3, [pc, #268]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a42      	ldr	r2, [pc, #264]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800354e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003552:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003554:	f7fe fba0 	bl	8001c98 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355a:	e008      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355c:	f7fe fb9c 	bl	8001c98 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	@ 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e06d      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356e:	4b3a      	ldr	r3, [pc, #232]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800357a:	4b36      	ldr	r3, [pc, #216]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003582:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d02e      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	429a      	cmp	r2, r3
 8003596:	d027      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003598:	4b2e      	ldr	r3, [pc, #184]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035a2:	4b2e      	ldr	r3, [pc, #184]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035a8:	4b2c      	ldr	r3, [pc, #176]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035ae:	4a29      	ldr	r2, [pc, #164]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d014      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035be:	f7fe fb6b 	bl	8001c98 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c4:	e00a      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c6:	f7fe fb67 	bl	8001c98 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d901      	bls.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e036      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0ee      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	4917      	ldr	r1, [pc, #92]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d105      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003600:	4b14      	ldr	r3, [pc, #80]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	4a13      	ldr	r2, [pc, #76]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003606:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800360a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003618:	4b0e      	ldr	r3, [pc, #56]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	490b      	ldr	r1, [pc, #44]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003626:	4313      	orrs	r3, r2
 8003628:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	2b00      	cmp	r3, #0
 8003634:	d008      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003636:	4b07      	ldr	r3, [pc, #28]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	4904      	ldr	r1, [pc, #16]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003644:	4313      	orrs	r3, r2
 8003646:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40021000 	.word	0x40021000
 8003658:	40007000 	.word	0x40007000
 800365c:	42420440 	.word	0x42420440

08003660 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	2300      	movs	r3, #0
 800366e:	61fb      	str	r3, [r7, #28]
 8003670:	2300      	movs	r3, #0
 8003672:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	2300      	movs	r3, #0
 800367a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b10      	cmp	r3, #16
 8003680:	d00a      	beq.n	8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b10      	cmp	r3, #16
 8003686:	f200 808a 	bhi.w	800379e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d045      	beq.n	800371c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d075      	beq.n	8003782 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003696:	e082      	b.n	800379e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003698:	4b46      	ldr	r3, [pc, #280]	@ (80037b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800369e:	4b45      	ldr	r3, [pc, #276]	@ (80037b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d07b      	beq.n	80037a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	0c9b      	lsrs	r3, r3, #18
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	4a41      	ldr	r2, [pc, #260]	@ (80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80036b4:	5cd3      	ldrb	r3, [r2, r3]
 80036b6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d015      	beq.n	80036ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036c2:	4b3c      	ldr	r3, [pc, #240]	@ (80037b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	0c5b      	lsrs	r3, r3, #17
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	4a3b      	ldr	r2, [pc, #236]	@ (80037bc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80036ce:	5cd3      	ldrb	r3, [r2, r3]
 80036d0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00d      	beq.n	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80036dc:	4a38      	ldr	r2, [pc, #224]	@ (80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	fb02 f303 	mul.w	r3, r2, r3
 80036ea:	61fb      	str	r3, [r7, #28]
 80036ec:	e004      	b.n	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4a34      	ldr	r2, [pc, #208]	@ (80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80036f8:	4b2e      	ldr	r3, [pc, #184]	@ (80037b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003700:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003704:	d102      	bne.n	800370c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	61bb      	str	r3, [r7, #24]
      break;
 800370a:	e04a      	b.n	80037a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	4a2d      	ldr	r2, [pc, #180]	@ (80037c8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	085b      	lsrs	r3, r3, #1
 8003718:	61bb      	str	r3, [r7, #24]
      break;
 800371a:	e042      	b.n	80037a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800371c:	4b25      	ldr	r3, [pc, #148]	@ (80037b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003728:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800372c:	d108      	bne.n	8003740 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003738:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	e01f      	b.n	8003780 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800374a:	d109      	bne.n	8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800374c:	4b19      	ldr	r3, [pc, #100]	@ (80037b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003758:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800375c:	61bb      	str	r3, [r7, #24]
 800375e:	e00f      	b.n	8003780 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003766:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800376a:	d11c      	bne.n	80037a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800376c:	4b11      	ldr	r3, [pc, #68]	@ (80037b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d016      	beq.n	80037a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003778:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800377c:	61bb      	str	r3, [r7, #24]
      break;
 800377e:	e012      	b.n	80037a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003780:	e011      	b.n	80037a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003782:	f7ff fe85 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 8003786:	4602      	mov	r2, r0
 8003788:	4b0a      	ldr	r3, [pc, #40]	@ (80037b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	0b9b      	lsrs	r3, r3, #14
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	3301      	adds	r3, #1
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	fbb2 f3f3 	udiv	r3, r2, r3
 800379a:	61bb      	str	r3, [r7, #24]
      break;
 800379c:	e004      	b.n	80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800379e:	bf00      	nop
 80037a0:	e002      	b.n	80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80037a2:	bf00      	nop
 80037a4:	e000      	b.n	80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80037a6:	bf00      	nop
    }
  }
  return (frequency);
 80037a8:	69bb      	ldr	r3, [r7, #24]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3720      	adds	r7, #32
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40021000 	.word	0x40021000
 80037b8:	080054b4 	.word	0x080054b4
 80037bc:	080054c4 	.word	0x080054c4
 80037c0:	007a1200 	.word	0x007a1200
 80037c4:	003d0900 	.word	0x003d0900
 80037c8:	aaaaaaab 	.word	0xaaaaaaab

080037cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e041      	b.n	8003862 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fe f854 	bl	80018a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3304      	adds	r3, #4
 8003808:	4619      	mov	r1, r3
 800380a:	4610      	mov	r0, r2
 800380c:	f000 fd16 	bl	800423c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e041      	b.n	8003900 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d106      	bne.n	8003896 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f839 	bl	8003908 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2202      	movs	r2, #2
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3304      	adds	r3, #4
 80038a6:	4619      	mov	r1, r3
 80038a8:	4610      	mov	r0, r2
 80038aa:	f000 fcc7 	bl	800423c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
	...

0800391c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d109      	bne.n	8003940 <HAL_TIM_PWM_Start+0x24>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b01      	cmp	r3, #1
 8003936:	bf14      	ite	ne
 8003938:	2301      	movne	r3, #1
 800393a:	2300      	moveq	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	e022      	b.n	8003986 <HAL_TIM_PWM_Start+0x6a>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b04      	cmp	r3, #4
 8003944:	d109      	bne.n	800395a <HAL_TIM_PWM_Start+0x3e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b01      	cmp	r3, #1
 8003950:	bf14      	ite	ne
 8003952:	2301      	movne	r3, #1
 8003954:	2300      	moveq	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	e015      	b.n	8003986 <HAL_TIM_PWM_Start+0x6a>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d109      	bne.n	8003974 <HAL_TIM_PWM_Start+0x58>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b01      	cmp	r3, #1
 800396a:	bf14      	ite	ne
 800396c:	2301      	movne	r3, #1
 800396e:	2300      	moveq	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	e008      	b.n	8003986 <HAL_TIM_PWM_Start+0x6a>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b01      	cmp	r3, #1
 800397e:	bf14      	ite	ne
 8003980:	2301      	movne	r3, #1
 8003982:	2300      	moveq	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e05e      	b.n	8003a4c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d104      	bne.n	800399e <HAL_TIM_PWM_Start+0x82>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800399c:	e013      	b.n	80039c6 <HAL_TIM_PWM_Start+0xaa>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d104      	bne.n	80039ae <HAL_TIM_PWM_Start+0x92>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039ac:	e00b      	b.n	80039c6 <HAL_TIM_PWM_Start+0xaa>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d104      	bne.n	80039be <HAL_TIM_PWM_Start+0xa2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039bc:	e003      	b.n	80039c6 <HAL_TIM_PWM_Start+0xaa>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2202      	movs	r2, #2
 80039c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2201      	movs	r2, #1
 80039cc:	6839      	ldr	r1, [r7, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fec0 	bl	8004754 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003a54 <HAL_TIM_PWM_Start+0x138>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d107      	bne.n	80039ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a18      	ldr	r2, [pc, #96]	@ (8003a54 <HAL_TIM_PWM_Start+0x138>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00e      	beq.n	8003a16 <HAL_TIM_PWM_Start+0xfa>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a00:	d009      	beq.n	8003a16 <HAL_TIM_PWM_Start+0xfa>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a14      	ldr	r2, [pc, #80]	@ (8003a58 <HAL_TIM_PWM_Start+0x13c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d004      	beq.n	8003a16 <HAL_TIM_PWM_Start+0xfa>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a12      	ldr	r2, [pc, #72]	@ (8003a5c <HAL_TIM_PWM_Start+0x140>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d111      	bne.n	8003a3a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b06      	cmp	r3, #6
 8003a26:	d010      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a38:	e007      	b.n	8003a4a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0201 	orr.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40012c00 	.word	0x40012c00
 8003a58:	40000400 	.word	0x40000400
 8003a5c:	40000800 	.word	0x40000800

08003a60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e093      	b.n	8003b9c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d106      	bne.n	8003a8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7fd ff25 	bl	80018d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2202      	movs	r2, #2
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6812      	ldr	r2, [r2, #0]
 8003aa0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003aa4:	f023 0307 	bic.w	r3, r3, #7
 8003aa8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	f000 fbc1 	bl	800423c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ae2:	f023 0303 	bic.w	r3, r3, #3
 8003ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	4313      	orrs	r3, r2
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003b00:	f023 030c 	bic.w	r3, r3, #12
 8003b04:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	011a      	lsls	r2, r3, #4
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	031b      	lsls	r3, r3, #12
 8003b30:	4313      	orrs	r3, r2
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003b3e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bb4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003bbc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bc4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003bcc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d110      	bne.n	8003bf6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d102      	bne.n	8003be0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bda:	7b7b      	ldrb	r3, [r7, #13]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d001      	beq.n	8003be4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e089      	b.n	8003cf8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bf4:	e031      	b.n	8003c5a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d110      	bne.n	8003c1e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bfc:	7bbb      	ldrb	r3, [r7, #14]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d102      	bne.n	8003c08 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c02:	7b3b      	ldrb	r3, [r7, #12]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d001      	beq.n	8003c0c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e075      	b.n	8003cf8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c1c:	e01d      	b.n	8003c5a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d108      	bne.n	8003c36 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c24:	7bbb      	ldrb	r3, [r7, #14]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d105      	bne.n	8003c36 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c2a:	7b7b      	ldrb	r3, [r7, #13]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d102      	bne.n	8003c36 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c30:	7b3b      	ldrb	r3, [r7, #12]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d001      	beq.n	8003c3a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e05e      	b.n	8003cf8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2202      	movs	r2, #2
 8003c46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2202      	movs	r2, #2
 8003c56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d010      	beq.n	8003c88 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003c66:	e01f      	b.n	8003ca8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	2100      	movs	r1, #0
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fd6f 	bl	8004754 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0202 	orr.w	r2, r2, #2
 8003c84:	60da      	str	r2, [r3, #12]
      break;
 8003c86:	e02e      	b.n	8003ce6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	2104      	movs	r1, #4
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fd5f 	bl	8004754 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 0204 	orr.w	r2, r2, #4
 8003ca4:	60da      	str	r2, [r3, #12]
      break;
 8003ca6:	e01e      	b.n	8003ce6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2201      	movs	r2, #1
 8003cae:	2100      	movs	r1, #0
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fd4f 	bl	8004754 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	2104      	movs	r1, #4
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fd48 	bl	8004754 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0202 	orr.w	r2, r2, #2
 8003cd2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0204 	orr.w	r2, r2, #4
 8003ce2:	60da      	str	r2, [r3, #12]
      break;
 8003ce4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d020      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01b      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0202 	mvn.w	r2, #2
 8003d34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fd f9fa 	bl	8001144 <HAL_TIM_IC_CaptureCallback>
 8003d50:	e005      	b.n	8003d5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fa56 	bl	8004204 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fa5c 	bl	8004216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d020      	beq.n	8003db0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01b      	beq.n	8003db0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0204 	mvn.w	r2, #4
 8003d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2202      	movs	r2, #2
 8003d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7fd f9d4 	bl	8001144 <HAL_TIM_IC_CaptureCallback>
 8003d9c:	e005      	b.n	8003daa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fa30 	bl	8004204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fa36 	bl	8004216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d020      	beq.n	8003dfc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d01b      	beq.n	8003dfc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f06f 0208 	mvn.w	r2, #8
 8003dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2204      	movs	r2, #4
 8003dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fd f9ae 	bl	8001144 <HAL_TIM_IC_CaptureCallback>
 8003de8:	e005      	b.n	8003df6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fa0a 	bl	8004204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fa10 	bl	8004216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d020      	beq.n	8003e48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f003 0310 	and.w	r3, r3, #16
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01b      	beq.n	8003e48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f06f 0210 	mvn.w	r2, #16
 8003e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2208      	movs	r2, #8
 8003e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fd f988 	bl	8001144 <HAL_TIM_IC_CaptureCallback>
 8003e34:	e005      	b.n	8003e42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f9e4 	bl	8004204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f9ea 	bl	8004216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00c      	beq.n	8003e6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d007      	beq.n	8003e6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0201 	mvn.w	r2, #1
 8003e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f9c3 	bl	80041f2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00c      	beq.n	8003e90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d007      	beq.n	8003e90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fced 	bl	800486a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00c      	beq.n	8003eb4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d007      	beq.n	8003eb4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f9ba 	bl	8004228 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00c      	beq.n	8003ed8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0220 	mvn.w	r2, #32
 8003ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fcc0 	bl	8004858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ed8:	bf00      	nop
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e0ae      	b.n	800405c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b0c      	cmp	r3, #12
 8003f0a:	f200 809f 	bhi.w	800404c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f14:	08003f49 	.word	0x08003f49
 8003f18:	0800404d 	.word	0x0800404d
 8003f1c:	0800404d 	.word	0x0800404d
 8003f20:	0800404d 	.word	0x0800404d
 8003f24:	08003f89 	.word	0x08003f89
 8003f28:	0800404d 	.word	0x0800404d
 8003f2c:	0800404d 	.word	0x0800404d
 8003f30:	0800404d 	.word	0x0800404d
 8003f34:	08003fcb 	.word	0x08003fcb
 8003f38:	0800404d 	.word	0x0800404d
 8003f3c:	0800404d 	.word	0x0800404d
 8003f40:	0800404d 	.word	0x0800404d
 8003f44:	0800400b 	.word	0x0800400b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 f9e2 	bl	8004318 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699a      	ldr	r2, [r3, #24]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0208 	orr.w	r2, r2, #8
 8003f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699a      	ldr	r2, [r3, #24]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0204 	bic.w	r2, r2, #4
 8003f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6999      	ldr	r1, [r3, #24]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	619a      	str	r2, [r3, #24]
      break;
 8003f86:	e064      	b.n	8004052 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68b9      	ldr	r1, [r7, #8]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fa28 	bl	80043e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699a      	ldr	r2, [r3, #24]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6999      	ldr	r1, [r3, #24]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	021a      	lsls	r2, r3, #8
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	619a      	str	r2, [r3, #24]
      break;
 8003fc8:	e043      	b.n	8004052 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68b9      	ldr	r1, [r7, #8]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fa71 	bl	80044b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69da      	ldr	r2, [r3, #28]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0208 	orr.w	r2, r2, #8
 8003fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69da      	ldr	r2, [r3, #28]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0204 	bic.w	r2, r2, #4
 8003ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	69d9      	ldr	r1, [r3, #28]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	61da      	str	r2, [r3, #28]
      break;
 8004008:	e023      	b.n	8004052 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68b9      	ldr	r1, [r7, #8]
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fabb 	bl	800458c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69da      	ldr	r2, [r3, #28]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69da      	ldr	r2, [r3, #28]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69d9      	ldr	r1, [r3, #28]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	021a      	lsls	r2, r3, #8
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	61da      	str	r2, [r3, #28]
      break;
 800404a:	e002      	b.n	8004052 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	75fb      	strb	r3, [r7, #23]
      break;
 8004050:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800405a:	7dfb      	ldrb	r3, [r7, #23]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_TIM_ConfigClockSource+0x1c>
 800407c:	2302      	movs	r3, #2
 800407e:	e0b4      	b.n	80041ea <HAL_TIM_ConfigClockSource+0x186>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800409e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040b8:	d03e      	beq.n	8004138 <HAL_TIM_ConfigClockSource+0xd4>
 80040ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040be:	f200 8087 	bhi.w	80041d0 <HAL_TIM_ConfigClockSource+0x16c>
 80040c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040c6:	f000 8086 	beq.w	80041d6 <HAL_TIM_ConfigClockSource+0x172>
 80040ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040ce:	d87f      	bhi.n	80041d0 <HAL_TIM_ConfigClockSource+0x16c>
 80040d0:	2b70      	cmp	r3, #112	@ 0x70
 80040d2:	d01a      	beq.n	800410a <HAL_TIM_ConfigClockSource+0xa6>
 80040d4:	2b70      	cmp	r3, #112	@ 0x70
 80040d6:	d87b      	bhi.n	80041d0 <HAL_TIM_ConfigClockSource+0x16c>
 80040d8:	2b60      	cmp	r3, #96	@ 0x60
 80040da:	d050      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x11a>
 80040dc:	2b60      	cmp	r3, #96	@ 0x60
 80040de:	d877      	bhi.n	80041d0 <HAL_TIM_ConfigClockSource+0x16c>
 80040e0:	2b50      	cmp	r3, #80	@ 0x50
 80040e2:	d03c      	beq.n	800415e <HAL_TIM_ConfigClockSource+0xfa>
 80040e4:	2b50      	cmp	r3, #80	@ 0x50
 80040e6:	d873      	bhi.n	80041d0 <HAL_TIM_ConfigClockSource+0x16c>
 80040e8:	2b40      	cmp	r3, #64	@ 0x40
 80040ea:	d058      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x13a>
 80040ec:	2b40      	cmp	r3, #64	@ 0x40
 80040ee:	d86f      	bhi.n	80041d0 <HAL_TIM_ConfigClockSource+0x16c>
 80040f0:	2b30      	cmp	r3, #48	@ 0x30
 80040f2:	d064      	beq.n	80041be <HAL_TIM_ConfigClockSource+0x15a>
 80040f4:	2b30      	cmp	r3, #48	@ 0x30
 80040f6:	d86b      	bhi.n	80041d0 <HAL_TIM_ConfigClockSource+0x16c>
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	d060      	beq.n	80041be <HAL_TIM_ConfigClockSource+0x15a>
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	d867      	bhi.n	80041d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004100:	2b00      	cmp	r3, #0
 8004102:	d05c      	beq.n	80041be <HAL_TIM_ConfigClockSource+0x15a>
 8004104:	2b10      	cmp	r3, #16
 8004106:	d05a      	beq.n	80041be <HAL_TIM_ConfigClockSource+0x15a>
 8004108:	e062      	b.n	80041d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800411a:	f000 fafc 	bl	8004716 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800412c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	609a      	str	r2, [r3, #8]
      break;
 8004136:	e04f      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004148:	f000 fae5 	bl	8004716 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800415a:	609a      	str	r2, [r3, #8]
      break;
 800415c:	e03c      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800416a:	461a      	mov	r2, r3
 800416c:	f000 fa5c 	bl	8004628 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2150      	movs	r1, #80	@ 0x50
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fab3 	bl	80046e2 <TIM_ITRx_SetConfig>
      break;
 800417c:	e02c      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800418a:	461a      	mov	r2, r3
 800418c:	f000 fa7a 	bl	8004684 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2160      	movs	r1, #96	@ 0x60
 8004196:	4618      	mov	r0, r3
 8004198:	f000 faa3 	bl	80046e2 <TIM_ITRx_SetConfig>
      break;
 800419c:	e01c      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041aa:	461a      	mov	r2, r3
 80041ac:	f000 fa3c 	bl	8004628 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2140      	movs	r1, #64	@ 0x40
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fa93 	bl	80046e2 <TIM_ITRx_SetConfig>
      break;
 80041bc:	e00c      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4619      	mov	r1, r3
 80041c8:	4610      	mov	r0, r2
 80041ca:	f000 fa8a 	bl	80046e2 <TIM_ITRx_SetConfig>
      break;
 80041ce:	e003      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
      break;
 80041d4:	e000      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr

08004204 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr

08004216 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr

08004228 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr
	...

0800423c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a2f      	ldr	r2, [pc, #188]	@ (800430c <TIM_Base_SetConfig+0xd0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d00b      	beq.n	800426c <TIM_Base_SetConfig+0x30>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800425a:	d007      	beq.n	800426c <TIM_Base_SetConfig+0x30>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a2c      	ldr	r2, [pc, #176]	@ (8004310 <TIM_Base_SetConfig+0xd4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d003      	beq.n	800426c <TIM_Base_SetConfig+0x30>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a2b      	ldr	r2, [pc, #172]	@ (8004314 <TIM_Base_SetConfig+0xd8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d108      	bne.n	800427e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a22      	ldr	r2, [pc, #136]	@ (800430c <TIM_Base_SetConfig+0xd0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00b      	beq.n	800429e <TIM_Base_SetConfig+0x62>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800428c:	d007      	beq.n	800429e <TIM_Base_SetConfig+0x62>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a1f      	ldr	r2, [pc, #124]	@ (8004310 <TIM_Base_SetConfig+0xd4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_Base_SetConfig+0x62>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a1e      	ldr	r2, [pc, #120]	@ (8004314 <TIM_Base_SetConfig+0xd8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d108      	bne.n	80042b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a0d      	ldr	r2, [pc, #52]	@ (800430c <TIM_Base_SetConfig+0xd0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d103      	bne.n	80042e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d005      	beq.n	8004302 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f023 0201 	bic.w	r2, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	611a      	str	r2, [r3, #16]
  }
}
 8004302:	bf00      	nop
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr
 800430c:	40012c00 	.word	0x40012c00
 8004310:	40000400 	.word	0x40000400
 8004314:	40000800 	.word	0x40000800

08004318 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	f023 0201 	bic.w	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0303 	bic.w	r3, r3, #3
 800434e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f023 0302 	bic.w	r3, r3, #2
 8004360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	4313      	orrs	r3, r2
 800436a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a1c      	ldr	r2, [pc, #112]	@ (80043e0 <TIM_OC1_SetConfig+0xc8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d10c      	bne.n	800438e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f023 0308 	bic.w	r3, r3, #8
 800437a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f023 0304 	bic.w	r3, r3, #4
 800438c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a13      	ldr	r2, [pc, #76]	@ (80043e0 <TIM_OC1_SetConfig+0xc8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d111      	bne.n	80043ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800439c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	621a      	str	r2, [r3, #32]
}
 80043d4:	bf00      	nop
 80043d6:	371c      	adds	r7, #28
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40012c00 	.word	0x40012c00

080043e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	f023 0210 	bic.w	r2, r3, #16
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800441a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f023 0320 	bic.w	r3, r3, #32
 800442e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a1d      	ldr	r2, [pc, #116]	@ (80044b4 <TIM_OC2_SetConfig+0xd0>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d10d      	bne.n	8004460 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800444a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800445e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a14      	ldr	r2, [pc, #80]	@ (80044b4 <TIM_OC2_SetConfig+0xd0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d113      	bne.n	8004490 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800446e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004476:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	621a      	str	r2, [r3, #32]
}
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr
 80044b4:	40012c00 	.word	0x40012c00

080044b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0303 	bic.w	r3, r3, #3
 80044ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	021b      	lsls	r3, r3, #8
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a1d      	ldr	r2, [pc, #116]	@ (8004588 <TIM_OC3_SetConfig+0xd0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d10d      	bne.n	8004532 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800451c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	021b      	lsls	r3, r3, #8
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a14      	ldr	r2, [pc, #80]	@ (8004588 <TIM_OC3_SetConfig+0xd0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d113      	bne.n	8004562 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	621a      	str	r2, [r3, #32]
}
 800457c:	bf00      	nop
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40012c00 	.word	0x40012c00

0800458c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	031b      	lsls	r3, r3, #12
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a0f      	ldr	r2, [pc, #60]	@ (8004624 <TIM_OC4_SetConfig+0x98>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d109      	bne.n	8004600 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	019b      	lsls	r3, r3, #6
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	621a      	str	r2, [r3, #32]
}
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr
 8004624:	40012c00 	.word	0x40012c00

08004628 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	f023 0201 	bic.w	r2, r3, #1
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f023 030a 	bic.w	r3, r3, #10
 8004664:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4313      	orrs	r3, r2
 800466c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	621a      	str	r2, [r3, #32]
}
 800467a:	bf00      	nop
 800467c:	371c      	adds	r7, #28
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr

08004684 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f023 0210 	bic.w	r2, r3, #16
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	031b      	lsls	r3, r3, #12
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	621a      	str	r2, [r3, #32]
}
 80046d8:	bf00      	nop
 80046da:	371c      	adds	r7, #28
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr

080046e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b085      	sub	sp, #20
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	f043 0307 	orr.w	r3, r3, #7
 8004704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	609a      	str	r2, [r3, #8]
}
 800470c:	bf00      	nop
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr

08004716 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004716:	b480      	push	{r7}
 8004718:	b087      	sub	sp, #28
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]
 8004722:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004730:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	021a      	lsls	r2, r3, #8
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	431a      	orrs	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4313      	orrs	r3, r2
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4313      	orrs	r3, r2
 8004742:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	609a      	str	r2, [r3, #8]
}
 800474a:	bf00      	nop
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr

08004754 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f003 031f 	and.w	r3, r3, #31
 8004766:	2201      	movs	r2, #1
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a1a      	ldr	r2, [r3, #32]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	43db      	mvns	r3, r3
 8004776:	401a      	ands	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a1a      	ldr	r2, [r3, #32]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	fa01 f303 	lsl.w	r3, r1, r3
 800478c:	431a      	orrs	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	621a      	str	r2, [r3, #32]
}
 8004792:	bf00      	nop
 8004794:	371c      	adds	r7, #28
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr

0800479c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e046      	b.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a16      	ldr	r2, [pc, #88]	@ (800484c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00e      	beq.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004800:	d009      	beq.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a12      	ldr	r2, [pc, #72]	@ (8004850 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d004      	beq.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a10      	ldr	r2, [pc, #64]	@ (8004854 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d10c      	bne.n	8004830 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800481c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	4313      	orrs	r3, r2
 8004826:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr
 800484c:	40012c00 	.word	0x40012c00
 8004850:	40000400 	.word	0x40000400
 8004854:	40000800 	.word	0x40000800

08004858 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr

0800486a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr

0800487c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e042      	b.n	8004914 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fd f8c4 	bl	8001a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2224      	movs	r2, #36	@ 0x24
 80048ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fd09 	bl	80052d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	4613      	mov	r3, r2
 8004928:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b20      	cmp	r3, #32
 8004934:	d121      	bne.n	800497a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <HAL_UART_Transmit_IT+0x26>
 800493c:	88fb      	ldrh	r3, [r7, #6]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e01a      	b.n	800497c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	88fa      	ldrh	r2, [r7, #6]
 8004950:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	88fa      	ldrh	r2, [r7, #6]
 8004956:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2221      	movs	r2, #33	@ 0x21
 8004962:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004974:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	e000      	b.n	800497c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800497a:	2302      	movs	r3, #2
  }
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr

08004986 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	4613      	mov	r3, r2
 8004992:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b20      	cmp	r3, #32
 800499e:	d112      	bne.n	80049c6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_UART_Receive_IT+0x26>
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e00b      	b.n	80049c8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	461a      	mov	r2, r3
 80049ba:	68b9      	ldr	r1, [r7, #8]
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 fab6 	bl	8004f2e <UART_Start_Receive_IT>
 80049c2:	4603      	mov	r3, r0
 80049c4:	e000      	b.n	80049c8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80049c6:	2302      	movs	r3, #2
  }
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b0ba      	sub	sp, #232	@ 0xe8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10f      	bne.n	8004a36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d009      	beq.n	8004a36 <HAL_UART_IRQHandler+0x66>
 8004a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fb93 	bl	800515a <UART_Receive_IT>
      return;
 8004a34:	e25b      	b.n	8004eee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 80de 	beq.w	8004bfc <HAL_UART_IRQHandler+0x22c>
 8004a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d106      	bne.n	8004a5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a50:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80d1 	beq.w	8004bfc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00b      	beq.n	8004a7e <HAL_UART_IRQHandler+0xae>
 8004a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d005      	beq.n	8004a7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a76:	f043 0201 	orr.w	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a82:	f003 0304 	and.w	r3, r3, #4
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00b      	beq.n	8004aa2 <HAL_UART_IRQHandler+0xd2>
 8004a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d005      	beq.n	8004aa2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9a:	f043 0202 	orr.w	r2, r3, #2
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00b      	beq.n	8004ac6 <HAL_UART_IRQHandler+0xf6>
 8004aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004abe:	f043 0204 	orr.w	r2, r3, #4
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d011      	beq.n	8004af6 <HAL_UART_IRQHandler+0x126>
 8004ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ad6:	f003 0320 	and.w	r3, r3, #32
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d105      	bne.n	8004aea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d005      	beq.n	8004af6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aee:	f043 0208 	orr.w	r2, r3, #8
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 81f2 	beq.w	8004ee4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b04:	f003 0320 	and.w	r3, r3, #32
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d008      	beq.n	8004b1e <HAL_UART_IRQHandler+0x14e>
 8004b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fb1e 	bl	800515a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	bf14      	ite	ne
 8004b2c:	2301      	movne	r3, #1
 8004b2e:	2300      	moveq	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d103      	bne.n	8004b4a <HAL_UART_IRQHandler+0x17a>
 8004b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d04f      	beq.n	8004bea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fa28 	bl	8004fa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d041      	beq.n	8004be2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3314      	adds	r3, #20
 8004b64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b6c:	e853 3f00 	ldrex	r3, [r3]
 8004b70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3314      	adds	r3, #20
 8004b86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004ba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1d9      	bne.n	8004b5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d013      	beq.n	8004bda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb6:	4a7e      	ldr	r2, [pc, #504]	@ (8004db0 <HAL_UART_IRQHandler+0x3e0>)
 8004bb8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fd fe38 	bl	8002834 <HAL_DMA_Abort_IT>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d016      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd8:	e00e      	b.n	8004bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f993 	bl	8004f06 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be0:	e00a      	b.n	8004bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f98f 	bl	8004f06 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be8:	e006      	b.n	8004bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f98b 	bl	8004f06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004bf6:	e175      	b.n	8004ee4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf8:	bf00      	nop
    return;
 8004bfa:	e173      	b.n	8004ee4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	f040 814f 	bne.w	8004ea4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 8148 	beq.w	8004ea4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8141 	beq.w	8004ea4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c22:	2300      	movs	r3, #0
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	60bb      	str	r3, [r7, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 80b6 	beq.w	8004db4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8145 	beq.w	8004ee8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c66:	429a      	cmp	r2, r3
 8004c68:	f080 813e 	bcs.w	8004ee8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c72:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	f000 8088 	beq.w	8004d90 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	330c      	adds	r3, #12
 8004c86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c9e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	330c      	adds	r3, #12
 8004ca8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004cac:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004cb8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004cbc:	e841 2300 	strex	r3, r2, [r1]
 8004cc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004cc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1d9      	bne.n	8004c80 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3314      	adds	r3, #20
 8004cd2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cd6:	e853 3f00 	ldrex	r3, [r3]
 8004cda:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004cdc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004cde:	f023 0301 	bic.w	r3, r3, #1
 8004ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3314      	adds	r3, #20
 8004cec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004cf0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004cf4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004cf8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e1      	bne.n	8004ccc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3314      	adds	r3, #20
 8004d0e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3314      	adds	r3, #20
 8004d28:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d2c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d2e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d32:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e3      	bne.n	8004d08 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	330c      	adds	r3, #12
 8004d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d60:	f023 0310 	bic.w	r3, r3, #16
 8004d64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	330c      	adds	r3, #12
 8004d6e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004d72:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d74:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e3      	bne.n	8004d4e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fd fd17 	bl	80027be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	4619      	mov	r1, r3
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f8b6 	bl	8004f18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dac:	e09c      	b.n	8004ee8 <HAL_UART_IRQHandler+0x518>
 8004dae:	bf00      	nop
 8004db0:	08005065 	.word	0x08005065
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 808e 	beq.w	8004eec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004dd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 8089 	beq.w	8004eec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	330c      	adds	r3, #12
 8004de0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004df0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	330c      	adds	r3, #12
 8004dfa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004dfe:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e3      	bne.n	8004dda <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3314      	adds	r3, #20
 8004e18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	623b      	str	r3, [r7, #32]
   return(result);
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	f023 0301 	bic.w	r3, r3, #1
 8004e28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3314      	adds	r3, #20
 8004e32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e36:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e3      	bne.n	8004e12 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	330c      	adds	r3, #12
 8004e5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	e853 3f00 	ldrex	r3, [r3]
 8004e66:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0310 	bic.w	r3, r3, #16
 8004e6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	330c      	adds	r3, #12
 8004e78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e7c:	61fa      	str	r2, [r7, #28]
 8004e7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e80:	69b9      	ldr	r1, [r7, #24]
 8004e82:	69fa      	ldr	r2, [r7, #28]
 8004e84:	e841 2300 	strex	r3, r2, [r1]
 8004e88:	617b      	str	r3, [r7, #20]
   return(result);
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e3      	bne.n	8004e58 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f83b 	bl	8004f18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ea2:	e023      	b.n	8004eec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d009      	beq.n	8004ec4 <HAL_UART_IRQHandler+0x4f4>
 8004eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f8e5 	bl	800508c <UART_Transmit_IT>
    return;
 8004ec2:	e014      	b.n	8004eee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00e      	beq.n	8004eee <HAL_UART_IRQHandler+0x51e>
 8004ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d008      	beq.n	8004eee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f924 	bl	800512a <UART_EndTransmit_IT>
    return;
 8004ee2:	e004      	b.n	8004eee <HAL_UART_IRQHandler+0x51e>
    return;
 8004ee4:	bf00      	nop
 8004ee6:	e002      	b.n	8004eee <HAL_UART_IRQHandler+0x51e>
      return;
 8004ee8:	bf00      	nop
 8004eea:	e000      	b.n	8004eee <HAL_UART_IRQHandler+0x51e>
      return;
 8004eec:	bf00      	nop
  }
}
 8004eee:	37e8      	adds	r7, #232	@ 0xe8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr

08004f06 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bc80      	pop	{r7}
 8004f16:	4770      	bx	lr

08004f18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bc80      	pop	{r7}
 8004f2c:	4770      	bx	lr

08004f2e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b085      	sub	sp, #20
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	88fa      	ldrh	r2, [r7, #6]
 8004f46:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	88fa      	ldrh	r2, [r7, #6]
 8004f4c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2222      	movs	r2, #34	@ 0x22
 8004f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d007      	beq.n	8004f74 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f72:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0201 	orr.w	r2, r2, #1
 8004f82:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0220 	orr.w	r2, r2, #32
 8004f92:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bc80      	pop	{r7}
 8004f9e:	4770      	bx	lr

08004fa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b095      	sub	sp, #84	@ 0x54
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	330c      	adds	r3, #12
 8004fae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb2:	e853 3f00 	ldrex	r3, [r3]
 8004fb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	330c      	adds	r3, #12
 8004fc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fc8:	643a      	str	r2, [r7, #64]	@ 0x40
 8004fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fd0:	e841 2300 	strex	r3, r2, [r1]
 8004fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1e5      	bne.n	8004fa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3314      	adds	r3, #20
 8004fe2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	e853 3f00 	ldrex	r3, [r3]
 8004fea:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f023 0301 	bic.w	r3, r3, #1
 8004ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	3314      	adds	r3, #20
 8004ffa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ffc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005000:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005002:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005004:	e841 2300 	strex	r3, r2, [r1]
 8005008:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e5      	bne.n	8004fdc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005014:	2b01      	cmp	r3, #1
 8005016:	d119      	bne.n	800504c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	330c      	adds	r3, #12
 800501e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	e853 3f00 	ldrex	r3, [r3]
 8005026:	60bb      	str	r3, [r7, #8]
   return(result);
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f023 0310 	bic.w	r3, r3, #16
 800502e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	330c      	adds	r3, #12
 8005036:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005038:	61ba      	str	r2, [r7, #24]
 800503a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	6979      	ldr	r1, [r7, #20]
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	e841 2300 	strex	r3, r2, [r1]
 8005044:	613b      	str	r3, [r7, #16]
   return(result);
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1e5      	bne.n	8005018 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800505a:	bf00      	nop
 800505c:	3754      	adds	r7, #84	@ 0x54
 800505e:	46bd      	mov	sp, r7
 8005060:	bc80      	pop	{r7}
 8005062:	4770      	bx	lr

08005064 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005070:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f7ff ff41 	bl	8004f06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005084:	bf00      	nop
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b21      	cmp	r3, #33	@ 0x21
 800509e:	d13e      	bne.n	800511e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050a8:	d114      	bne.n	80050d4 <UART_Transmit_IT+0x48>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d110      	bne.n	80050d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	1c9a      	adds	r2, r3, #2
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	621a      	str	r2, [r3, #32]
 80050d2:	e008      	b.n	80050e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	1c59      	adds	r1, r3, #1
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6211      	str	r1, [r2, #32]
 80050de:	781a      	ldrb	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	4619      	mov	r1, r3
 80050f4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10f      	bne.n	800511a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005108:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005118:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	e000      	b.n	8005120 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800511e:	2302      	movs	r3, #2
  }
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr

0800512a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b082      	sub	sp, #8
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005140:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2220      	movs	r2, #32
 8005146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff fed2 	bl	8004ef4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b08c      	sub	sp, #48	@ 0x30
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b22      	cmp	r3, #34	@ 0x22
 800516c:	f040 80ae 	bne.w	80052cc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005178:	d117      	bne.n	80051aa <UART_Receive_IT+0x50>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d113      	bne.n	80051aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005182:	2300      	movs	r3, #0
 8005184:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800518a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	b29b      	uxth	r3, r3
 8005194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005198:	b29a      	uxth	r2, r3
 800519a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a2:	1c9a      	adds	r2, r3, #2
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80051a8:	e026      	b.n	80051f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051bc:	d007      	beq.n	80051ce <UART_Receive_IT+0x74>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10a      	bne.n	80051dc <UART_Receive_IT+0x82>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d8:	701a      	strb	r2, [r3, #0]
 80051da:	e008      	b.n	80051ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29b      	uxth	r3, r3
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	4619      	mov	r1, r3
 8005206:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005208:	2b00      	cmp	r3, #0
 800520a:	d15d      	bne.n	80052c8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0220 	bic.w	r2, r2, #32
 800521a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800522a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695a      	ldr	r2, [r3, #20]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0201 	bic.w	r2, r2, #1
 800523a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524e:	2b01      	cmp	r3, #1
 8005250:	d135      	bne.n	80052be <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	330c      	adds	r3, #12
 800525e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	e853 3f00 	ldrex	r3, [r3]
 8005266:	613b      	str	r3, [r7, #16]
   return(result);
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f023 0310 	bic.w	r3, r3, #16
 800526e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	330c      	adds	r3, #12
 8005276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005278:	623a      	str	r2, [r7, #32]
 800527a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	69f9      	ldr	r1, [r7, #28]
 800527e:	6a3a      	ldr	r2, [r7, #32]
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	61bb      	str	r3, [r7, #24]
   return(result);
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e5      	bne.n	8005258 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0310 	and.w	r3, r3, #16
 8005296:	2b10      	cmp	r3, #16
 8005298:	d10a      	bne.n	80052b0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052b4:	4619      	mov	r1, r3
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff fe2e 	bl	8004f18 <HAL_UARTEx_RxEventCallback>
 80052bc:	e002      	b.n	80052c4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fb fe4a 	bl	8000f58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	e002      	b.n	80052ce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	e000      	b.n	80052ce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80052cc:	2302      	movs	r3, #2
  }
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3730      	adds	r7, #48	@ 0x30
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005312:	f023 030c 	bic.w	r3, r3, #12
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6812      	ldr	r2, [r2, #0]
 800531a:	68b9      	ldr	r1, [r7, #8]
 800531c:	430b      	orrs	r3, r1
 800531e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699a      	ldr	r2, [r3, #24]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a2c      	ldr	r2, [pc, #176]	@ (80053ec <UART_SetConfig+0x114>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d103      	bne.n	8005348 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005340:	f7fe f8a6 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	e002      	b.n	800534e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005348:	f7fe f88e 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 800534c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	009a      	lsls	r2, r3, #2
 8005358:	441a      	add	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	fbb2 f3f3 	udiv	r3, r2, r3
 8005364:	4a22      	ldr	r2, [pc, #136]	@ (80053f0 <UART_SetConfig+0x118>)
 8005366:	fba2 2303 	umull	r2, r3, r2, r3
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	0119      	lsls	r1, r3, #4
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	009a      	lsls	r2, r3, #2
 8005378:	441a      	add	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	fbb2 f2f3 	udiv	r2, r2, r3
 8005384:	4b1a      	ldr	r3, [pc, #104]	@ (80053f0 <UART_SetConfig+0x118>)
 8005386:	fba3 0302 	umull	r0, r3, r3, r2
 800538a:	095b      	lsrs	r3, r3, #5
 800538c:	2064      	movs	r0, #100	@ 0x64
 800538e:	fb00 f303 	mul.w	r3, r0, r3
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	3332      	adds	r3, #50	@ 0x32
 8005398:	4a15      	ldr	r2, [pc, #84]	@ (80053f0 <UART_SetConfig+0x118>)
 800539a:	fba2 2303 	umull	r2, r3, r2, r3
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053a4:	4419      	add	r1, r3
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4613      	mov	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	009a      	lsls	r2, r3, #2
 80053b0:	441a      	add	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80053bc:	4b0c      	ldr	r3, [pc, #48]	@ (80053f0 <UART_SetConfig+0x118>)
 80053be:	fba3 0302 	umull	r0, r3, r3, r2
 80053c2:	095b      	lsrs	r3, r3, #5
 80053c4:	2064      	movs	r0, #100	@ 0x64
 80053c6:	fb00 f303 	mul.w	r3, r0, r3
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	3332      	adds	r3, #50	@ 0x32
 80053d0:	4a07      	ldr	r2, [pc, #28]	@ (80053f0 <UART_SetConfig+0x118>)
 80053d2:	fba2 2303 	umull	r2, r3, r2, r3
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	f003 020f 	and.w	r2, r3, #15
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	440a      	add	r2, r1
 80053e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80053e4:	bf00      	nop
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40013800 	.word	0x40013800
 80053f0:	51eb851f 	.word	0x51eb851f

080053f4 <memset>:
 80053f4:	4603      	mov	r3, r0
 80053f6:	4402      	add	r2, r0
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d100      	bne.n	80053fe <memset+0xa>
 80053fc:	4770      	bx	lr
 80053fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005402:	e7f9      	b.n	80053f8 <memset+0x4>

08005404 <__libc_init_array>:
 8005404:	b570      	push	{r4, r5, r6, lr}
 8005406:	2600      	movs	r6, #0
 8005408:	4d0c      	ldr	r5, [pc, #48]	@ (800543c <__libc_init_array+0x38>)
 800540a:	4c0d      	ldr	r4, [pc, #52]	@ (8005440 <__libc_init_array+0x3c>)
 800540c:	1b64      	subs	r4, r4, r5
 800540e:	10a4      	asrs	r4, r4, #2
 8005410:	42a6      	cmp	r6, r4
 8005412:	d109      	bne.n	8005428 <__libc_init_array+0x24>
 8005414:	f000 f828 	bl	8005468 <_init>
 8005418:	2600      	movs	r6, #0
 800541a:	4d0a      	ldr	r5, [pc, #40]	@ (8005444 <__libc_init_array+0x40>)
 800541c:	4c0a      	ldr	r4, [pc, #40]	@ (8005448 <__libc_init_array+0x44>)
 800541e:	1b64      	subs	r4, r4, r5
 8005420:	10a4      	asrs	r4, r4, #2
 8005422:	42a6      	cmp	r6, r4
 8005424:	d105      	bne.n	8005432 <__libc_init_array+0x2e>
 8005426:	bd70      	pop	{r4, r5, r6, pc}
 8005428:	f855 3b04 	ldr.w	r3, [r5], #4
 800542c:	4798      	blx	r3
 800542e:	3601      	adds	r6, #1
 8005430:	e7ee      	b.n	8005410 <__libc_init_array+0xc>
 8005432:	f855 3b04 	ldr.w	r3, [r5], #4
 8005436:	4798      	blx	r3
 8005438:	3601      	adds	r6, #1
 800543a:	e7f2      	b.n	8005422 <__libc_init_array+0x1e>
 800543c:	080054c8 	.word	0x080054c8
 8005440:	080054c8 	.word	0x080054c8
 8005444:	080054c8 	.word	0x080054c8
 8005448:	080054cc 	.word	0x080054cc

0800544c <memcpy>:
 800544c:	440a      	add	r2, r1
 800544e:	4291      	cmp	r1, r2
 8005450:	f100 33ff 	add.w	r3, r0, #4294967295
 8005454:	d100      	bne.n	8005458 <memcpy+0xc>
 8005456:	4770      	bx	lr
 8005458:	b510      	push	{r4, lr}
 800545a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800545e:	4291      	cmp	r1, r2
 8005460:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005464:	d1f9      	bne.n	800545a <memcpy+0xe>
 8005466:	bd10      	pop	{r4, pc}

08005468 <_init>:
 8005468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546a:	bf00      	nop
 800546c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800546e:	bc08      	pop	{r3}
 8005470:	469e      	mov	lr, r3
 8005472:	4770      	bx	lr

08005474 <_fini>:
 8005474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005476:	bf00      	nop
 8005478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800547a:	bc08      	pop	{r3}
 800547c:	469e      	mov	lr, r3
 800547e:	4770      	bx	lr
