
TheHammer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a58  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08006b68  08006b68  00007b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c0c  08006c0c  00008020  2**0
                  CONTENTS
  4 .ARM          00000000  08006c0c  08006c0c  00008020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c0c  08006c0c  00008020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c0c  08006c0c  00007c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c10  08006c10  00007c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08006c14  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ac4  20000020  08006c34  00008020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000ae4  08006c34  00008ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119d8  00000000  00000000  00008049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003004  00000000  00000000  00019a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  0001ca28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c3d  00000000  00000000  0001d9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e47  00000000  00000000  0001e62d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015178  00000000  00000000  00038474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009085a  00000000  00000000  0004d5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dde46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b4  00000000  00000000  000dde8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000e2140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	08006b50 	.word	0x08006b50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	08006b50 	.word	0x08006b50

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	@ 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c4a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	@ 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	@ 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	@ 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__gesf2>:
 8000e98:	f04f 3cff 	mov.w	ip, #4294967295
 8000e9c:	e006      	b.n	8000eac <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__lesf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	e002      	b.n	8000eac <__cmpsf2+0x4>
 8000ea6:	bf00      	nop

08000ea8 <__cmpsf2>:
 8000ea8:	f04f 0c01 	mov.w	ip, #1
 8000eac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d011      	beq.n	8000ee8 <__cmpsf2+0x40>
 8000ec4:	b001      	add	sp, #4
 8000ec6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eca:	bf18      	it	ne
 8000ecc:	ea90 0f01 	teqne	r0, r1
 8000ed0:	bf58      	it	pl
 8000ed2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed6:	bf88      	it	hi
 8000ed8:	17c8      	asrhi	r0, r1, #31
 8000eda:	bf38      	it	cc
 8000edc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee0:	bf18      	it	ne
 8000ee2:	f040 0001 	orrne.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eec:	d102      	bne.n	8000ef4 <__cmpsf2+0x4c>
 8000eee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef2:	d105      	bne.n	8000f00 <__cmpsf2+0x58>
 8000ef4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef8:	d1e4      	bne.n	8000ec4 <__cmpsf2+0x1c>
 8000efa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efe:	d0e1      	beq.n	8000ec4 <__cmpsf2+0x1c>
 8000f00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_cfrcmple>:
 8000f08:	4684      	mov	ip, r0
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	e7ff      	b.n	8000f10 <__aeabi_cfcmpeq>

08000f10 <__aeabi_cfcmpeq>:
 8000f10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f12:	f7ff ffc9 	bl	8000ea8 <__cmpsf2>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	bf48      	it	mi
 8000f1a:	f110 0f00 	cmnmi.w	r0, #0
 8000f1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f20 <__aeabi_fcmpeq>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff fff4 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f28:	bf0c      	ite	eq
 8000f2a:	2001      	moveq	r0, #1
 8000f2c:	2000      	movne	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmplt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffea 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmple>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffe0 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f50:	bf94      	ite	ls
 8000f52:	2001      	movls	r0, #1
 8000f54:	2000      	movhi	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmpge>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffd2 	bl	8000f08 <__aeabi_cfrcmple>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpgt>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffc8 	bl	8000f08 <__aeabi_cfrcmple>
 8000f78:	bf34      	ite	cc
 8000f7a:	2001      	movcc	r0, #1
 8000f7c:	2000      	movcs	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2uiz>:
 8000f84:	0042      	lsls	r2, r0, #1
 8000f86:	d20e      	bcs.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f8c:	d30b      	bcc.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f8e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d409      	bmi.n	8000fac <__aeabi_f2uiz+0x28>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fa0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr
 8000fac:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_f2uiz+0x32>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d102      	bne.n	8000fbc <__aeabi_f2uiz+0x38>
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fba:	4770      	bx	lr
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b08f      	sub	sp, #60	@ 0x3c
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fca:	f002 f98b 	bl	80032e4 <HAL_Init>

  /* USER CODE BEGIN Init */
  LED_Power_Init();
 8000fce:	f001 fb0f 	bl	80025f0 <LED_Power_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd2:	f000 f89b 	bl	800110c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd6:	f000 fabd 	bl	8001554 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fda:	f000 f8ed 	bl	80011b8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000fde:	f000 f967 	bl	80012b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fe2:	f000 f9e5 	bl	80013b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fe6:	f000 fa37 	bl	8001458 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000fea:	f000 fa89 	bl	8001500 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8000fee:	f000 f921 	bl	8001234 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t startBuff;
  HAL_UART_Receive_IT(&huart1, &startBuff, 1);
 8000ff2:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4837      	ldr	r0, [pc, #220]	@ (80010d8 <main+0x114>)
 8000ffc:	f005 f837 	bl	800606e <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001000:	2108      	movs	r1, #8
 8001002:	4836      	ldr	r0, [pc, #216]	@ (80010dc <main+0x118>)
 8001004:	f003 fffe 	bl	8005004 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001008:	210c      	movs	r1, #12
 800100a:	4834      	ldr	r0, [pc, #208]	@ (80010dc <main+0x118>)
 800100c:	f003 fffa 	bl	8005004 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001010:	213c      	movs	r1, #60	@ 0x3c
 8001012:	4833      	ldr	r0, [pc, #204]	@ (80010e0 <main+0x11c>)
 8001014:	f004 f93a 	bl	800528c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001018:	213c      	movs	r1, #60	@ 0x3c
 800101a:	4832      	ldr	r0, [pc, #200]	@ (80010e4 <main+0x120>)
 800101c:	f004 f936 	bl	800528c <HAL_TIM_Encoder_Start_IT>

  // Initialize maze and set initial goal cells (center of 16x16 maze)
  Maze_Init(&maze);
 8001020:	4831      	ldr	r0, [pc, #196]	@ (80010e8 <main+0x124>)
 8001022:	f000 fda1 	bl	8001b68 <Maze_Init>
  Set_Goal_Cell(&maze, 4);
 8001026:	2104      	movs	r1, #4
 8001028:	482f      	ldr	r0, [pc, #188]	@ (80010e8 <main+0x124>)
 800102a:	f000 fd5b 	bl	8001ae4 <Set_Goal_Cell>

  // Initialize mouse state to 0
  bzero(&mouse_state, sizeof(mouse_state_t));
 800102e:	4b2f      	ldr	r3, [pc, #188]	@ (80010ec <main+0x128>)
 8001030:	4618      	mov	r0, r3
 8001032:	2320      	movs	r3, #32
 8001034:	461a      	mov	r2, r3
 8001036:	2100      	movs	r1, #0
 8001038:	f005 fd50 	bl	8006adc <memset>

  Clear_Profile(&forward_profile);
 800103c:	482c      	ldr	r0, [pc, #176]	@ (80010f0 <main+0x12c>)
 800103e:	f001 f8eb 	bl	8002218 <Clear_Profile>
  Clear_Profile(&rotational_profile);
 8001042:	482c      	ldr	r0, [pc, #176]	@ (80010f4 <main+0x130>)
 8001044:	f001 f8e8 	bl	8002218 <Clear_Profile>

  param_t test_parameters_forward = {.acceleration = 1000,
 8001048:	4b2b      	ldr	r3, [pc, #172]	@ (80010f8 <main+0x134>)
 800104a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800104e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001050:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  	  	  	  	  	  	  	 	 	 .distance = 125,
									 .max_speed = 700,
									 .end_speed = 300 };

  param_t test_parameters_forward_2 = {.acceleration = 1000,
 8001054:	4b29      	ldr	r3, [pc, #164]	@ (80010fc <main+0x138>)
 8001056:	f107 0414 	add.w	r4, r7, #20
 800105a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800105c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    	  	  	  	  	  	  	 	 	 .distance = 125/3,
  									 .max_speed = 700,
  									 .end_speed = 0 };

  param_t test_parameters_rotational = {.acceleration = 2000,
 8001060:	4b27      	ldr	r3, [pc, #156]	@ (8001100 <main+0x13c>)
 8001062:	1d3c      	adds	r4, r7, #4
 8001064:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001066:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (armed) {
 800106a:	4b26      	ldr	r3, [pc, #152]	@ (8001104 <main+0x140>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0fb      	beq.n	800106a <main+0xa6>
		  adjust_steering = true;
 8001072:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <main+0x144>)
 8001074:	2201      	movs	r2, #1
 8001076:	701a      	strb	r2, [r3, #0]
		  Profile_Container(&test_parameters_forward, &forward_profile);
 8001078:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107c:	491c      	ldr	r1, [pc, #112]	@ (80010f0 <main+0x12c>)
 800107e:	4618      	mov	r0, r3
 8001080:	f001 f980 	bl	8002384 <Profile_Container>
		  Profile_Container(&test_parameters_forward, &forward_profile);
 8001084:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001088:	4919      	ldr	r1, [pc, #100]	@ (80010f0 <main+0x12c>)
 800108a:	4618      	mov	r0, r3
 800108c:	f001 f97a 	bl	8002384 <Profile_Container>
		  Profile_Container(&test_parameters_forward, &forward_profile);
 8001090:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001094:	4916      	ldr	r1, [pc, #88]	@ (80010f0 <main+0x12c>)
 8001096:	4618      	mov	r0, r3
 8001098:	f001 f974 	bl	8002384 <Profile_Container>
		  Profile_Container(&test_parameters_forward_2, &forward_profile);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4913      	ldr	r1, [pc, #76]	@ (80010f0 <main+0x12c>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 f96e 	bl	8002384 <Profile_Container>
		  Profile_Container(&test_parameters_rotational, &rotational_profile);
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	4912      	ldr	r1, [pc, #72]	@ (80010f4 <main+0x130>)
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 f969 	bl	8002384 <Profile_Container>
		  Profile_Container(&test_parameters_forward_2, &forward_profile);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	490e      	ldr	r1, [pc, #56]	@ (80010f0 <main+0x12c>)
 80010b8:	4618      	mov	r0, r3
 80010ba:	f001 f963 	bl	8002384 <Profile_Container>
		  Profile_Container(&test_parameters_forward, &forward_profile);
 80010be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c2:	490b      	ldr	r1, [pc, #44]	@ (80010f0 <main+0x12c>)
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 f95d 	bl	8002384 <Profile_Container>
		  armed = false;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <main+0x140>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
		  adjust_steering = false;
 80010d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001108 <main+0x144>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
	  if (armed) {
 80010d6:	e7c8      	b.n	800106a <main+0xa6>
 80010d8:	20000174 	.word	0x20000174
 80010dc:	2000009c 	.word	0x2000009c
 80010e0:	2000012c 	.word	0x2000012c
 80010e4:	200000e4 	.word	0x200000e4
 80010e8:	200001f4 	.word	0x200001f4
 80010ec:	200001c0 	.word	0x200001c0
 80010f0:	20000a20 	.word	0x20000a20
 80010f4:	20000a44 	.word	0x20000a44
 80010f8:	08006b68 	.word	0x08006b68
 80010fc:	08006b78 	.word	0x08006b78
 8001100:	08006b88 	.word	0x08006b88
 8001104:	200001e8 	.word	0x200001e8
 8001108:	20000ad7 	.word	0x20000ad7

0800110c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b094      	sub	sp, #80	@ 0x50
 8001110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001116:	2228      	movs	r2, #40	@ 0x28
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f005 fcde 	bl	8006adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800113c:	2302      	movs	r3, #2
 800113e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001140:	2301      	movs	r3, #1
 8001142:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001144:	2310      	movs	r3, #16
 8001146:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001148:	2302      	movs	r3, #2
 800114a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800114c:	2300      	movs	r3, #0
 800114e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001150:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001154:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001156:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800115a:	4618      	mov	r0, r3
 800115c:	f003 f92e 	bl	80043bc <HAL_RCC_OscConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001166:	f000 fad4 	bl	8001712 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116a:	230f      	movs	r3, #15
 800116c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116e:	2302      	movs	r3, #2
 8001170:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	2101      	movs	r1, #1
 8001184:	4618      	mov	r0, r3
 8001186:	f003 fb9b 	bl	80048c0 <HAL_RCC_ClockConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001190:	f000 fabf 	bl	8001712 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001194:	2302      	movs	r3, #2
 8001196:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001198:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800119c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4618      	mov	r0, r3
 80011a2:	f003 fd1b 	bl	8004bdc <HAL_RCCEx_PeriphCLKConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80011ac:	f000 fab1 	bl	8001712 <Error_Handler>
  }
}
 80011b0:	bf00      	nop
 80011b2:	3750      	adds	r7, #80	@ 0x50
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011c8:	4b18      	ldr	r3, [pc, #96]	@ (800122c <MX_ADC1_Init+0x74>)
 80011ca:	4a19      	ldr	r2, [pc, #100]	@ (8001230 <MX_ADC1_Init+0x78>)
 80011cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ce:	4b17      	ldr	r3, [pc, #92]	@ (800122c <MX_ADC1_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011d4:	4b15      	ldr	r3, [pc, #84]	@ (800122c <MX_ADC1_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011da:	4b14      	ldr	r3, [pc, #80]	@ (800122c <MX_ADC1_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <MX_ADC1_Init+0x74>)
 80011e2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80011e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e8:	4b10      	ldr	r3, [pc, #64]	@ (800122c <MX_ADC1_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <MX_ADC1_Init+0x74>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f4:	480d      	ldr	r0, [pc, #52]	@ (800122c <MX_ADC1_Init+0x74>)
 80011f6:	f002 f8fb 	bl	80033f0 <HAL_ADC_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001200:	f000 fa87 	bl	8001712 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001204:	2305      	movs	r3, #5
 8001206:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001208:	2301      	movs	r3, #1
 800120a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	@ (800122c <MX_ADC1_Init+0x74>)
 8001216:	f002 fbaf 	bl	8003978 <HAL_ADC_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001220:	f000 fa77 	bl	8001712 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000003c 	.word	0x2000003c
 8001230:	40012400 	.word	0x40012400

08001234 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001244:	4b18      	ldr	r3, [pc, #96]	@ (80012a8 <MX_ADC2_Init+0x74>)
 8001246:	4a19      	ldr	r2, [pc, #100]	@ (80012ac <MX_ADC2_Init+0x78>)
 8001248:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800124a:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <MX_ADC2_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001250:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <MX_ADC2_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001256:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <MX_ADC2_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800125c:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <MX_ADC2_Init+0x74>)
 800125e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001262:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001264:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <MX_ADC2_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <MX_ADC2_Init+0x74>)
 800126c:	2201      	movs	r2, #1
 800126e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001270:	480d      	ldr	r0, [pc, #52]	@ (80012a8 <MX_ADC2_Init+0x74>)
 8001272:	f002 f8bd 	bl	80033f0 <HAL_ADC_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800127c:	f000 fa49 	bl	8001712 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001280:	2301      	movs	r3, #1
 8001282:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001284:	2301      	movs	r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	@ (80012a8 <MX_ADC2_Init+0x74>)
 8001292:	f002 fb71 	bl	8003978 <HAL_ADC_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800129c:	f000 fa39 	bl	8001712 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2000006c 	.word	0x2000006c
 80012ac:	40012800 	.word	0x40012800

080012b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08e      	sub	sp, #56	@ 0x38
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	f107 0320 	add.w	r3, r7, #32
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
 80012dc:	615a      	str	r2, [r3, #20]
 80012de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012e0:	4b32      	ldr	r3, [pc, #200]	@ (80013ac <MX_TIM2_Init+0xfc>)
 80012e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012e8:	4b30      	ldr	r3, [pc, #192]	@ (80013ac <MX_TIM2_Init+0xfc>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ee:	4b2f      	ldr	r3, [pc, #188]	@ (80013ac <MX_TIM2_Init+0xfc>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2047;
 80012f4:	4b2d      	ldr	r3, [pc, #180]	@ (80013ac <MX_TIM2_Init+0xfc>)
 80012f6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80012fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fc:	4b2b      	ldr	r3, [pc, #172]	@ (80013ac <MX_TIM2_Init+0xfc>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001302:	4b2a      	ldr	r3, [pc, #168]	@ (80013ac <MX_TIM2_Init+0xfc>)
 8001304:	2280      	movs	r2, #128	@ 0x80
 8001306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001308:	4828      	ldr	r0, [pc, #160]	@ (80013ac <MX_TIM2_Init+0xfc>)
 800130a:	f003 fdd3 	bl	8004eb4 <HAL_TIM_Base_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001314:	f000 f9fd 	bl	8001712 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001318:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800131c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800131e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001322:	4619      	mov	r1, r3
 8001324:	4821      	ldr	r0, [pc, #132]	@ (80013ac <MX_TIM2_Init+0xfc>)
 8001326:	f004 fa11 	bl	800574c <HAL_TIM_ConfigClockSource>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001330:	f000 f9ef 	bl	8001712 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001334:	481d      	ldr	r0, [pc, #116]	@ (80013ac <MX_TIM2_Init+0xfc>)
 8001336:	f003 fe0c 	bl	8004f52 <HAL_TIM_PWM_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001340:	f000 f9e7 	bl	8001712 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800134c:	f107 0320 	add.w	r3, r7, #32
 8001350:	4619      	mov	r1, r3
 8001352:	4816      	ldr	r0, [pc, #88]	@ (80013ac <MX_TIM2_Init+0xfc>)
 8001354:	f004 fd96 	bl	8005e84 <HAL_TIMEx_MasterConfigSynchronization>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800135e:	f000 f9d8 	bl	8001712 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001362:	2360      	movs	r3, #96	@ 0x60
 8001364:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2208      	movs	r2, #8
 8001376:	4619      	mov	r1, r3
 8001378:	480c      	ldr	r0, [pc, #48]	@ (80013ac <MX_TIM2_Init+0xfc>)
 800137a:	f004 f925 	bl	80055c8 <HAL_TIM_PWM_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001384:	f000 f9c5 	bl	8001712 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	220c      	movs	r2, #12
 800138c:	4619      	mov	r1, r3
 800138e:	4807      	ldr	r0, [pc, #28]	@ (80013ac <MX_TIM2_Init+0xfc>)
 8001390:	f004 f91a 	bl	80055c8 <HAL_TIM_PWM_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800139a:	f000 f9ba 	bl	8001712 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800139e:	4803      	ldr	r0, [pc, #12]	@ (80013ac <MX_TIM2_Init+0xfc>)
 80013a0:	f001 fe94 	bl	80030cc <HAL_TIM_MspPostInit>

}
 80013a4:	bf00      	nop
 80013a6:	3738      	adds	r7, #56	@ 0x38
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	2000009c 	.word	0x2000009c

080013b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	@ 0x30
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	2224      	movs	r2, #36	@ 0x24
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f005 fb8c 	bl	8006adc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013cc:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013ce:	4a21      	ldr	r2, [pc, #132]	@ (8001454 <MX_TIM3_Init+0xa4>)
 80013d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013de:	4b1c      	ldr	r3, [pc, #112]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b18      	ldr	r3, [pc, #96]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013f2:	2303      	movs	r3, #3
 80013f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80013f6:	2302      	movs	r3, #2
 80013f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013fa:	2301      	movs	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001406:	2302      	movs	r3, #2
 8001408:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800140a:	2301      	movs	r3, #1
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	4619      	mov	r1, r3
 800141c:	480c      	ldr	r0, [pc, #48]	@ (8001450 <MX_TIM3_Init+0xa0>)
 800141e:	f003 fe93 	bl	8005148 <HAL_TIM_Encoder_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001428:	f000 f973 	bl	8001712 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	@ (8001450 <MX_TIM3_Init+0xa0>)
 800143a:	f004 fd23 	bl	8005e84 <HAL_TIMEx_MasterConfigSynchronization>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001444:	f000 f965 	bl	8001712 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	3730      	adds	r7, #48	@ 0x30
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200000e4 	.word	0x200000e4
 8001454:	40000400 	.word	0x40000400

08001458 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	@ 0x30
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	2224      	movs	r2, #36	@ 0x24
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f005 fb38 	bl	8006adc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001474:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <MX_TIM4_Init+0xa0>)
 8001476:	4a21      	ldr	r2, [pc, #132]	@ (80014fc <MX_TIM4_Init+0xa4>)
 8001478:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800147a:	4b1f      	ldr	r3, [pc, #124]	@ (80014f8 <MX_TIM4_Init+0xa0>)
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001480:	4b1d      	ldr	r3, [pc, #116]	@ (80014f8 <MX_TIM4_Init+0xa0>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001486:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <MX_TIM4_Init+0xa0>)
 8001488:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800148c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148e:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <MX_TIM4_Init+0xa0>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001494:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <MX_TIM4_Init+0xa0>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800149a:	2303      	movs	r3, #3
 800149c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800149e:	2302      	movs	r3, #2
 80014a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014a2:	2301      	movs	r3, #1
 80014a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80014ae:	2302      	movs	r3, #2
 80014b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014b2:	2301      	movs	r3, #1
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	4619      	mov	r1, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	@ (80014f8 <MX_TIM4_Init+0xa0>)
 80014c6:	f003 fe3f 	bl	8005148 <HAL_TIM_Encoder_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80014d0:	f000 f91f 	bl	8001712 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <MX_TIM4_Init+0xa0>)
 80014e2:	f004 fccf 	bl	8005e84 <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80014ec:	f000 f911 	bl	8001712 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	3730      	adds	r7, #48	@ 0x30
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000012c 	.word	0x2000012c
 80014fc:	40000800 	.word	0x40000800

08001500 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <MX_USART1_UART_Init+0x4c>)
 8001506:	4a12      	ldr	r2, [pc, #72]	@ (8001550 <MX_USART1_UART_Init+0x50>)
 8001508:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <MX_USART1_UART_Init+0x4c>)
 800150c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001510:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001512:	4b0e      	ldr	r3, [pc, #56]	@ (800154c <MX_USART1_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001518:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <MX_USART1_UART_Init+0x4c>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800151e:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <MX_USART1_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001524:	4b09      	ldr	r3, [pc, #36]	@ (800154c <MX_USART1_UART_Init+0x4c>)
 8001526:	220c      	movs	r2, #12
 8001528:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152a:	4b08      	ldr	r3, [pc, #32]	@ (800154c <MX_USART1_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <MX_USART1_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001536:	4805      	ldr	r0, [pc, #20]	@ (800154c <MX_USART1_UART_Init+0x4c>)
 8001538:	f004 fd14 	bl	8005f64 <HAL_UART_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001542:	f000 f8e6 	bl	8001712 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000174 	.word	0x20000174
 8001550:	40013800 	.word	0x40013800

08001554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001568:	4b51      	ldr	r3, [pc, #324]	@ (80016b0 <MX_GPIO_Init+0x15c>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a50      	ldr	r2, [pc, #320]	@ (80016b0 <MX_GPIO_Init+0x15c>)
 800156e:	f043 0310 	orr.w	r3, r3, #16
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b4e      	ldr	r3, [pc, #312]	@ (80016b0 <MX_GPIO_Init+0x15c>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0310 	and.w	r3, r3, #16
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	4b4b      	ldr	r3, [pc, #300]	@ (80016b0 <MX_GPIO_Init+0x15c>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a4a      	ldr	r2, [pc, #296]	@ (80016b0 <MX_GPIO_Init+0x15c>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b48      	ldr	r3, [pc, #288]	@ (80016b0 <MX_GPIO_Init+0x15c>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001598:	4b45      	ldr	r3, [pc, #276]	@ (80016b0 <MX_GPIO_Init+0x15c>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a44      	ldr	r2, [pc, #272]	@ (80016b0 <MX_GPIO_Init+0x15c>)
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b42      	ldr	r3, [pc, #264]	@ (80016b0 <MX_GPIO_Init+0x15c>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Power_GPIO_Port, LED_Power_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015b6:	483f      	ldr	r0, [pc, #252]	@ (80016b4 <MX_GPIO_Init+0x160>)
 80015b8:	f002 feb6 	bl	8004328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMIT_L_Pin|EMIT_R_Pin|EMIT_FR_Pin|MR_FWD_Pin
 80015bc:	2200      	movs	r2, #0
 80015be:	f64f 5120 	movw	r1, #64800	@ 0xfd20
 80015c2:	483d      	ldr	r0, [pc, #244]	@ (80016b8 <MX_GPIO_Init+0x164>)
 80015c4:	f002 feb0 	bl	8004328 <HAL_GPIO_WritePin>
                          |ML_FWD_Pin|MR_BWD_Pin|EMIT_FL_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015ce:	483b      	ldr	r0, [pc, #236]	@ (80016bc <MX_GPIO_Init+0x168>)
 80015d0:	f002 feaa 	bl	8004328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Blue_Pin|LED_Green_Pin, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 80015da:	4838      	ldr	r0, [pc, #224]	@ (80016bc <MX_GPIO_Init+0x168>)
 80015dc:	f002 fea4 	bl	8004328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Power_Pin */
  GPIO_InitStruct.Pin = LED_Power_Pin;
 80015e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2302      	movs	r3, #2
 80015f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_Power_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 0310 	add.w	r3, r7, #16
 80015f6:	4619      	mov	r1, r3
 80015f8:	482e      	ldr	r0, [pc, #184]	@ (80016b4 <MX_GPIO_Init+0x160>)
 80015fa:	f002 fd11 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pin : RACE_SW2_Pin */
  GPIO_InitStruct.Pin = RACE_SW2_Pin;
 80015fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001604:	4b2e      	ldr	r3, [pc, #184]	@ (80016c0 <MX_GPIO_Init+0x16c>)
 8001606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RACE_SW2_GPIO_Port, &GPIO_InitStruct);
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	4619      	mov	r1, r3
 8001612:	4828      	ldr	r0, [pc, #160]	@ (80016b4 <MX_GPIO_Init+0x160>)
 8001614:	f002 fd04 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_L_Pin EMIT_R_Pin EMIT_FR_Pin MR_FWD_Pin
                           ML_FWD_Pin MR_BWD_Pin EMIT_FL_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = EMIT_L_Pin|EMIT_R_Pin|EMIT_FR_Pin|MR_FWD_Pin
 8001618:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800161c:	613b      	str	r3, [r7, #16]
                          |ML_FWD_Pin|MR_BWD_Pin|EMIT_FL_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161e:	2301      	movs	r3, #1
 8001620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2302      	movs	r3, #2
 8001628:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	4619      	mov	r1, r3
 8001630:	4821      	ldr	r0, [pc, #132]	@ (80016b8 <MX_GPIO_Init+0x164>)
 8001632:	f002 fcf5 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pins : ML_BWD_Pin LED_Red_Pin LED_Blue_Pin LED_Green_Pin */
  GPIO_InitStruct.Pin = ML_BWD_Pin|LED_Red_Pin|LED_Blue_Pin|LED_Green_Pin;
 8001636:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 800163a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2302      	movs	r3, #2
 8001646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	4619      	mov	r1, r3
 800164e:	481b      	ldr	r0, [pc, #108]	@ (80016bc <MX_GPIO_Init+0x168>)
 8001650:	f002 fce6 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARM_SW1_Pin */
  GPIO_InitStruct.Pin = ARM_SW1_Pin;
 8001654:	2310      	movs	r3, #16
 8001656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001658:	4b19      	ldr	r3, [pc, #100]	@ (80016c0 <MX_GPIO_Init+0x16c>)
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ARM_SW1_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	4619      	mov	r1, r3
 8001666:	4814      	ldr	r0, [pc, #80]	@ (80016b8 <MX_GPIO_Init+0x164>)
 8001668:	f002 fcda 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOADMAZE_SW3_Pin */
  GPIO_InitStruct.Pin = LOADMAZE_SW3_Pin;
 800166c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LOADMAZE_SW3_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 0310 	add.w	r3, r7, #16
 800167e:	4619      	mov	r1, r3
 8001680:	480d      	ldr	r0, [pc, #52]	@ (80016b8 <MX_GPIO_Init+0x164>)
 8001682:	f002 fccd 	bl	8004020 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	210f      	movs	r1, #15
 800168a:	200a      	movs	r0, #10
 800168c:	f002 fbdf 	bl	8003e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001690:	200a      	movs	r0, #10
 8001692:	f002 fbf8 	bl	8003e86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	210f      	movs	r1, #15
 800169a:	2028      	movs	r0, #40	@ 0x28
 800169c:	f002 fbd7 	bl	8003e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016a0:	2028      	movs	r0, #40	@ 0x28
 80016a2:	f002 fbf0 	bl	8003e86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a6:	bf00      	nop
 80016a8:	3720      	adds	r7, #32
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40011000 	.word	0x40011000
 80016b8:	40010c00 	.word	0x40010c00
 80016bc:	40010800 	.word	0x40010800
 80016c0:	10210000 	.word	0x10210000

080016c4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ARM_SW1_Pin) {       // Set to arm mode
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	2b10      	cmp	r3, #16
 80016d2:	d102      	bne.n	80016da <HAL_GPIO_EXTI_Callback+0x16>
		ARM_Button();
 80016d4:	f001 f81c 	bl	8002710 <ARM_Button>
		RACE_Button();
	}
	else if (GPIO_Pin == LOADMAZE_SW3_Pin) { // Load maze from memory into maze struct
		LOADMAZE_Button();
	}
}
 80016d8:	e00c      	b.n	80016f4 <HAL_GPIO_EXTI_Callback+0x30>
	else if (GPIO_Pin == RACE_SW2_Pin) { // Set to race mode
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016e0:	d102      	bne.n	80016e8 <HAL_GPIO_EXTI_Callback+0x24>
		RACE_Button();
 80016e2:	f001 f831 	bl	8002748 <RACE_Button>
}
 80016e6:	e005      	b.n	80016f4 <HAL_GPIO_EXTI_Callback+0x30>
	else if (GPIO_Pin == LOADMAZE_SW3_Pin) { // Load maze from memory into maze struct
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016ee:	d101      	bne.n	80016f4 <HAL_GPIO_EXTI_Callback+0x30>
		LOADMAZE_Button();
 80016f0:	f001 f83a 	bl	8002768 <LOADMAZE_Button>
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	UART_Receive_Callback(huart);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f8cb 	bl	80018a0 <UART_Receive_Callback>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001716:	b672      	cpsid	i
}
 8001718:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800171a:	bf00      	nop
 800171c:	e7fd      	b.n	800171a <Error_Handler+0x8>
	...

08001720 <Parse_Receive_Data>:
#define READ_BATT   0b0010  // READ BATTERY: Read battery voltage.
#define PULSE_BUZZ  0b0011  // PULSE BUZZER: Play a short noise from the buzzer.
#define START_RUN   0b0100  // START RUN: Start a maze run. For testing purposes only.
#define PAIRED      0b0101  // PAIRED: Send OK response to verify received.

void Parse_Receive_Data(uint8_t rxBuff) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
	uint8_t command = (rxBuff & 0xF0) >> 4;   // Isolate command code
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	73fb      	strb	r3, [r7, #15]
	uint8_t data    = (rxBuff & 0x0F);        // Isolate other data (not used currently)
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	73bb      	strb	r3, [r7, #14]
	(void) data;                              // Temporary to remove warning for unused variable

	switch(command) {
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	2b07      	cmp	r3, #7
 800173c:	d837      	bhi.n	80017ae <Parse_Receive_Data+0x8e>
 800173e:	a201      	add	r2, pc, #4	@ (adr r2, 8001744 <Parse_Receive_Data+0x24>)
 8001740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001744:	08001765 	.word	0x08001765
 8001748:	08001783 	.word	0x08001783
 800174c:	08001793 	.word	0x08001793
 8001750:	0800179f 	.word	0x0800179f
 8001754:	080017a7 	.word	0x080017a7
 8001758:	080017af 	.word	0x080017af
 800175c:	080017af 	.word	0x080017af
 8001760:	0800178b 	.word	0x0800178b
		case SET_MODE:
			debugMode = (debugMode + 1) % 2;
 8001764:	4b14      	ldr	r3, [pc, #80]	@ (80017b8 <Parse_Receive_Data+0x98>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	bfb8      	it	lt
 8001772:	425b      	neglt	r3, r3
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <Parse_Receive_Data+0x98>)
 8001778:	701a      	strb	r2, [r3, #0]
			debugCounter = 0;
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <Parse_Receive_Data+0x9c>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
			break;
 8001780:	e016      	b.n	80017b0 <Parse_Receive_Data+0x90>
		case HALT_RUN:
			armed = false;
 8001782:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <Parse_Receive_Data+0xa0>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
			break;
 8001788:	e012      	b.n	80017b0 <Parse_Receive_Data+0x90>
		case RESUME_RUN:
			HALTED = 0;
 800178a:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <Parse_Receive_Data+0xa4>)
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
			break;
 8001790:	e00e      	b.n	80017b0 <Parse_Receive_Data+0x90>
		case READ_BATT:
			HAL_UART_Transmit_IT(&huart1, (uint8_t*)&(mouse_state.battery_voltage), sizeof(double));
 8001792:	2208      	movs	r2, #8
 8001794:	490c      	ldr	r1, [pc, #48]	@ (80017c8 <Parse_Receive_Data+0xa8>)
 8001796:	480d      	ldr	r0, [pc, #52]	@ (80017cc <Parse_Receive_Data+0xac>)
 8001798:	f004 fc34 	bl	8006004 <HAL_UART_Transmit_IT>
			break;
 800179c:	e008      	b.n	80017b0 <Parse_Receive_Data+0x90>
		case PULSE_BUZZ:
			Pulse_Buzzer(100);
 800179e:	2064      	movs	r0, #100	@ 0x64
 80017a0:	f000 ff32 	bl	8002608 <Pulse_Buzzer>
			break;
 80017a4:	e004      	b.n	80017b0 <Parse_Receive_Data+0x90>
		case START_RUN:
			armed = true;
 80017a6:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <Parse_Receive_Data+0xa0>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	701a      	strb	r2, [r3, #0]
			break;
 80017ac:	e000      	b.n	80017b0 <Parse_Receive_Data+0x90>
		case PAIRED:
			break;
		default:
			break;
 80017ae:	bf00      	nop
	}
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200001e0 	.word	0x200001e0
 80017bc:	200001e1 	.word	0x200001e1
 80017c0:	200001e8 	.word	0x200001e8
 80017c4:	20000a88 	.word	0x20000a88
 80017c8:	200001d8 	.word	0x200001d8
 80017cc:	20000174 	.word	0x20000174

080017d0 <Create_Byte_Stream>:

void Create_Byte_Stream(uint8_t txData[PACKET_SIZE]) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	bzero(txData, PACKET_SIZE);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	461a      	mov	r2, r3
 80017dc:	2300      	movs	r3, #0
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	6053      	str	r3, [r2, #4]
 80017e2:	6093      	str	r3, [r2, #8]
 80017e4:	60d3      	str	r3, [r2, #12]
 80017e6:	6113      	str	r3, [r2, #16]
 80017e8:	6153      	str	r3, [r2, #20]
 80017ea:	6193      	str	r3, [r2, #24]

	memcpy(txData, "Debug", 5);
 80017ec:	2205      	movs	r2, #5
 80017ee:	4922      	ldr	r1, [pc, #136]	@ (8001878 <Create_Byte_Stream+0xa8>)
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f005 f99f 	bl	8006b34 <memcpy>
	memcpy(txData + 5, &mouse_state.current_cell, sizeof(uint8_t));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3305      	adds	r3, #5
 80017fa:	4a20      	ldr	r2, [pc, #128]	@ (800187c <Create_Byte_Stream+0xac>)
 80017fc:	7812      	ldrb	r2, [r2, #0]
 80017fe:	701a      	strb	r2, [r3, #0]
	memcpy(txData + 6, &mouse_state.rpm.left_rpm, sizeof(uint16_t));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3306      	adds	r3, #6
 8001804:	4a1d      	ldr	r2, [pc, #116]	@ (800187c <Create_Byte_Stream+0xac>)
 8001806:	8892      	ldrh	r2, [r2, #4]
 8001808:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 8, &mouse_state.rpm.right_rpm, sizeof(uint16_t));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3308      	adds	r3, #8
 800180e:	4a1b      	ldr	r2, [pc, #108]	@ (800187c <Create_Byte_Stream+0xac>)
 8001810:	88d2      	ldrh	r2, [r2, #6]
 8001812:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 10, &mouse_state.mouse_direction, sizeof(uint8_t));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	330a      	adds	r3, #10
 8001818:	4a18      	ldr	r2, [pc, #96]	@ (800187c <Create_Byte_Stream+0xac>)
 800181a:	78d2      	ldrb	r2, [r2, #3]
 800181c:	701a      	strb	r2, [r3, #0]
	memset(txData + 11, ((mouse_state.mouse_position[0] << 4) | mouse_state.mouse_position[1]), sizeof(uint8_t));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f103 000b 	add.w	r0, r3, #11
 8001824:	4b15      	ldr	r3, [pc, #84]	@ (800187c <Create_Byte_Stream+0xac>)
 8001826:	785b      	ldrb	r3, [r3, #1]
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	4a14      	ldr	r2, [pc, #80]	@ (800187c <Create_Byte_Stream+0xac>)
 800182c:	7892      	ldrb	r2, [r2, #2]
 800182e:	4313      	orrs	r3, r2
 8001830:	2201      	movs	r2, #1
 8001832:	4619      	mov	r1, r3
 8001834:	f005 f952 	bl	8006adc <memset>
	memcpy(txData + 12, &mouse_state.battery_voltage, sizeof(double));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f103 010c 	add.w	r1, r3, #12
 800183e:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <Create_Byte_Stream+0xac>)
 8001840:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001844:	600a      	str	r2, [r1, #0]
 8001846:	604b      	str	r3, [r1, #4]
	memcpy(txData + 20, &mouse_state.raw.front_left, sizeof(uint16_t));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3314      	adds	r3, #20
 800184c:	4a0b      	ldr	r2, [pc, #44]	@ (800187c <Create_Byte_Stream+0xac>)
 800184e:	8912      	ldrh	r2, [r2, #8]
 8001850:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 22, &mouse_state.raw.left, sizeof(uint16_t));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3316      	adds	r3, #22
 8001856:	4a09      	ldr	r2, [pc, #36]	@ (800187c <Create_Byte_Stream+0xac>)
 8001858:	8952      	ldrh	r2, [r2, #10]
 800185a:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 24, &mouse_state.raw.right, sizeof(uint16_t));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3318      	adds	r3, #24
 8001860:	4a06      	ldr	r2, [pc, #24]	@ (800187c <Create_Byte_Stream+0xac>)
 8001862:	8992      	ldrh	r2, [r2, #12]
 8001864:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 26, &mouse_state.raw.front_right, sizeof(uint16_t));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	331a      	adds	r3, #26
 800186a:	4a04      	ldr	r2, [pc, #16]	@ (800187c <Create_Byte_Stream+0xac>)
 800186c:	89d2      	ldrh	r2, [r2, #14]
 800186e:	801a      	strh	r2, [r3, #0]
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	08006b98 	.word	0x08006b98
 800187c:	200001c0 	.word	0x200001c0

08001880 <Debug_Packet_Send>:

// When mouse in debug mode transmit above data.
//  Also transmit start identifier "Debug". This totals to 28 bytes of data transmitted every 50 ms.
void Debug_Packet_Send() {
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	Create_Byte_Stream(txDebug);                                  // Create byte stream
 8001884:	4804      	ldr	r0, [pc, #16]	@ (8001898 <Debug_Packet_Send+0x18>)
 8001886:	f7ff ffa3 	bl	80017d0 <Create_Byte_Stream>
	HAL_UART_Transmit_IT(&huart1, txDebug, sizeof(txDebug));      // Transmit data
 800188a:	221c      	movs	r2, #28
 800188c:	4902      	ldr	r1, [pc, #8]	@ (8001898 <Debug_Packet_Send+0x18>)
 800188e:	4803      	ldr	r0, [pc, #12]	@ (800189c <Debug_Packet_Send+0x1c>)
 8001890:	f004 fbb8 	bl	8006004 <HAL_UART_Transmit_IT>
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000a6c 	.word	0x20000a6c
 800189c:	20000174 	.word	0x20000174

080018a0 <UART_Receive_Callback>:

void UART_Receive_Callback(UART_HandleTypeDef *huart) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <UART_Receive_Callback+0x38>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d10e      	bne.n	80018d0 <UART_Receive_Callback+0x30>
		Parse_Receive_Data(rxData);
 80018b2:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <UART_Receive_Callback+0x3c>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff32 	bl	8001720 <Parse_Receive_Data>
		HAL_UART_Transmit_IT(&huart1, &txData, sizeof(txData));      // Transmit response ACK (0xFF)                          // Parse incoming command
 80018bc:	2201      	movs	r2, #1
 80018be:	4908      	ldr	r1, [pc, #32]	@ (80018e0 <UART_Receive_Callback+0x40>)
 80018c0:	4808      	ldr	r0, [pc, #32]	@ (80018e4 <UART_Receive_Callback+0x44>)
 80018c2:	f004 fb9f 	bl	8006004 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart1, &rxData, sizeof(rxData));       // Receive incoming command
 80018c6:	2201      	movs	r2, #1
 80018c8:	4904      	ldr	r1, [pc, #16]	@ (80018dc <UART_Receive_Callback+0x3c>)
 80018ca:	4806      	ldr	r0, [pc, #24]	@ (80018e4 <UART_Receive_Callback+0x44>)
 80018cc:	f004 fbcf 	bl	800606e <HAL_UART_Receive_IT>
	}
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40013800 	.word	0x40013800
 80018dc:	20000a68 	.word	0x20000a68
 80018e0:	20000001 	.word	0x20000001
 80018e4:	20000174 	.word	0x20000174

080018e8 <HAL_TIM_IC_CaptureCallback>:
float mouse_position = 0;

uint32_t last_calculated_time[2] = { 0, 0 }; // { last calculated time left, last calculated time right }
uint32_t last_tick_count[2] = { 0, 0 };

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	uint16_t current_count = __HAL_TIM_GET_COUNTER(htim);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f6:	81fb      	strh	r3, [r7, #14]
	if (htim == &htim4) { // Motor right
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a14      	ldr	r2, [pc, #80]	@ (800194c <HAL_TIM_IC_CaptureCallback+0x64>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d10d      	bne.n	800191c <HAL_TIM_IC_CaptureCallback+0x34>
		objective_R -= (int16_t)(current_count - counter_R);
 8001900:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a13      	ldr	r2, [pc, #76]	@ (8001954 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001906:	8812      	ldrh	r2, [r2, #0]
 8001908:	89f9      	ldrh	r1, [r7, #14]
 800190a:	1a8a      	subs	r2, r1, r2
 800190c:	b292      	uxth	r2, r2
 800190e:	b212      	sxth	r2, r2
 8001910:	1a9b      	subs	r3, r3, r2
 8001912:	4a0f      	ldr	r2, [pc, #60]	@ (8001950 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001914:	6013      	str	r3, [r2, #0]
		counter_R = current_count;
 8001916:	4a0f      	ldr	r2, [pc, #60]	@ (8001954 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001918:	89fb      	ldrh	r3, [r7, #14]
 800191a:	8013      	strh	r3, [r2, #0]
	}
	if (htim == &htim3) { // Motor left
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a0e      	ldr	r2, [pc, #56]	@ (8001958 <HAL_TIM_IC_CaptureCallback+0x70>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d10d      	bne.n	8001940 <HAL_TIM_IC_CaptureCallback+0x58>
		objective_L -= (int16_t)(current_count - counter_L);
 8001924:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <HAL_TIM_IC_CaptureCallback+0x74>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0d      	ldr	r2, [pc, #52]	@ (8001960 <HAL_TIM_IC_CaptureCallback+0x78>)
 800192a:	8812      	ldrh	r2, [r2, #0]
 800192c:	89f9      	ldrh	r1, [r7, #14]
 800192e:	1a8a      	subs	r2, r1, r2
 8001930:	b292      	uxth	r2, r2
 8001932:	b212      	sxth	r2, r2
 8001934:	1a9b      	subs	r3, r3, r2
 8001936:	4a09      	ldr	r2, [pc, #36]	@ (800195c <HAL_TIM_IC_CaptureCallback+0x74>)
 8001938:	6013      	str	r3, [r2, #0]
		counter_L = current_count;
 800193a:	4a09      	ldr	r2, [pc, #36]	@ (8001960 <HAL_TIM_IC_CaptureCallback+0x78>)
 800193c:	89fb      	ldrh	r3, [r7, #14]
 800193e:	8013      	strh	r3, [r2, #0]
	}
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	2000012c 	.word	0x2000012c
 8001950:	200001f0 	.word	0x200001f0
 8001954:	20000a8c 	.word	0x20000a8c
 8001958:	200000e4 	.word	0x200000e4
 800195c:	200001ec 	.word	0x200001ec
 8001960:	20000a8a 	.word	0x20000a8a

08001964 <Calculate_RPM>:

// LIKELY WILL HAVE TO CHANGE
uint16_t Calculate_RPM(int32_t current_ticks, uint8_t motor) {
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	70fb      	strb	r3, [r7, #3]
	uint32_t time_difference = global_time - last_calculated_time[motor];
 8001970:	4b20      	ldr	r3, [pc, #128]	@ (80019f4 <Calculate_RPM+0x90>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	4920      	ldr	r1, [pc, #128]	@ (80019f8 <Calculate_RPM+0x94>)
 8001978:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	60fb      	str	r3, [r7, #12]
	last_calculated_time[motor] = global_time;
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	4a1c      	ldr	r2, [pc, #112]	@ (80019f4 <Calculate_RPM+0x90>)
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	491c      	ldr	r1, [pc, #112]	@ (80019f8 <Calculate_RPM+0x94>)
 8001988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	int32_t tick_difference = abs(current_ticks - last_tick_count[motor]);
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	491a      	ldr	r1, [pc, #104]	@ (80019fc <Calculate_RPM+0x98>)
 8001992:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	bfb8      	it	lt
 800199c:	425b      	neglt	r3, r3
 800199e:	60bb      	str	r3, [r7, #8]
	last_tick_count[motor] = current_ticks;
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	4915      	ldr	r1, [pc, #84]	@ (80019fc <Calculate_RPM+0x98>)
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return ((MS_PER_SEC * SEC_PER_MIN * tick_difference) / (TICKS_PER_ROTATION * time_difference));
 80019aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ae:	223c      	movs	r2, #60	@ 0x3c
 80019b0:	fb02 f303 	mul.w	r3, r2, r3
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	fb02 f303 	mul.w	r3, r2, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f8c8 	bl	8000b50 <__aeabi_i2f>
 80019c0:	4604      	mov	r4, r0
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f7ff f8c0 	bl	8000b48 <__aeabi_ui2f>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001a00 <Calculate_RPM+0x9c>)
 80019cc:	4611      	mov	r1, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f912 	bl	8000bf8 <__aeabi_fmul>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4619      	mov	r1, r3
 80019d8:	4620      	mov	r0, r4
 80019da:	f7ff f9c1 	bl	8000d60 <__aeabi_fdiv>
 80019de:	4603      	mov	r3, r0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff facf 	bl	8000f84 <__aeabi_f2uiz>
 80019e6:	4603      	mov	r3, r0
 80019e8:	b29b      	uxth	r3, r3
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd90      	pop	{r4, r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200001e4 	.word	0x200001e4
 80019f8:	20000aa0 	.word	0x20000aa0
 80019fc:	20000aa8 	.word	0x20000aa8
 8001a00:	43b328f6 	.word	0x43b328f6

08001a04 <Update_Encoders>:

void Update_Encoders() {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
	int32_t delta_tick_right = objective_R;
 8001a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac0 <Update_Encoders+0xbc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	60fb      	str	r3, [r7, #12]
	int32_t delta_tick_left = objective_L;
 8001a10:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac4 <Update_Encoders+0xc0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60bb      	str	r3, [r7, #8]
	objective_R = 0;
 8001a16:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac0 <Update_Encoders+0xbc>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
	objective_L = 0;
 8001a1c:	4b29      	ldr	r3, [pc, #164]	@ (8001ac4 <Update_Encoders+0xc0>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]

	float delta_position_right = delta_tick_right * MM_PER_TICK_LEFT;
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f7ff f894 	bl	8000b50 <__aeabi_i2f>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4a27      	ldr	r2, [pc, #156]	@ (8001ac8 <Update_Encoders+0xc4>)
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f8e2 	bl	8000bf8 <__aeabi_fmul>
 8001a34:	4603      	mov	r3, r0
 8001a36:	607b      	str	r3, [r7, #4]
	float delta_position_left = delta_tick_left * MM_PER_TICK_RIGHT;
 8001a38:	68b8      	ldr	r0, [r7, #8]
 8001a3a:	f7ff f889 	bl	8000b50 <__aeabi_i2f>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4a22      	ldr	r2, [pc, #136]	@ (8001acc <Update_Encoders+0xc8>)
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff f8d7 	bl	8000bf8 <__aeabi_fmul>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	603b      	str	r3, [r7, #0]
	delta_position_forward = (delta_position_right + delta_position_left) / 2; // average change in position
 8001a4e:	6839      	ldr	r1, [r7, #0]
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7fe ffc9 	bl	80009e8 <__addsf3>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff f97f 	bl	8000d60 <__aeabi_fdiv>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <Update_Encoders+0xcc>)
 8001a68:	601a      	str	r2, [r3, #0]
	mouse_position += delta_position_forward;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad4 <Update_Encoders+0xd0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a18      	ldr	r2, [pc, #96]	@ (8001ad0 <Update_Encoders+0xcc>)
 8001a70:	6812      	ldr	r2, [r2, #0]
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe ffb7 	bl	80009e8 <__addsf3>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <Update_Encoders+0xd0>)
 8001a80:	601a      	str	r2, [r3, #0]
	delta_position_rotational = (delta_position_right - delta_position_left) * DEG_PER_MM_DIFFERENCE;
 8001a82:	6839      	ldr	r1, [r7, #0]
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7fe ffad 	bl	80009e4 <__aeabi_fsub>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <Update_Encoders+0xd4>)
 8001a90:	4619      	mov	r1, r3
 8001a92:	4610      	mov	r0, r2
 8001a94:	f7ff f8b0 	bl	8000bf8 <__aeabi_fmul>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <Update_Encoders+0xd8>)
 8001a9e:	601a      	str	r2, [r3, #0]
	mouse_angle += delta_position_rotational;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae0 <Update_Encoders+0xdc>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8001adc <Update_Encoders+0xd8>)
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe ff9c 	bl	80009e8 <__addsf3>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <Update_Encoders+0xdc>)
 8001ab6:	601a      	str	r2, [r3, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	200001f0 	.word	0x200001f0
 8001ac4:	200001ec 	.word	0x200001ec
 8001ac8:	3e8f49e2 	.word	0x3e8f49e2
 8001acc:	3e9001c1 	.word	0x3e9001c1
 8001ad0:	20000a90 	.word	0x20000a90
 8001ad4:	20000a9c 	.word	0x20000a9c
 8001ad8:	3f3f2f61 	.word	0x3f3f2f61
 8001adc:	20000a94 	.word	0x20000a94
 8001ae0:	20000a98 	.word	0x20000a98

08001ae4 <Set_Goal_Cell>:
	mouse_state.mouse_position[0] = (uint8_t)pos->x;
	mouse_state.mouse_position[1] = (uint8_t)pos->y;
	mouse_state.mouse_direction = dir;
}

void Set_Goal_Cell(struct Maze* maze, int num_of_goals) {
 8001ae4:	b480      	push	{r7}
 8001ae6:	b08d      	sub	sp, #52	@ 0x34
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
    if (num_of_goals == 1) {
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d108      	bne.n	8001b06 <Set_Goal_Cell+0x22>
		maze->goalPos[0] = (struct Coord){0, 0};
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
    	maze->goalPos[0] = (struct Coord){7, 7};
		maze->goalPos[1] = (struct Coord){7, 8};
		maze->goalPos[2] = (struct Coord){8, 7};
		maze->goalPos[3] = (struct Coord){8, 8};
    }
}
 8001b04:	e022      	b.n	8001b4c <Set_Goal_Cell+0x68>
    else if (num_of_goals == 4) {
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d11f      	bne.n	8001b4c <Set_Goal_Cell+0x68>
    	maze->goalPos[0] = (struct Coord){7, 7};
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a12      	ldr	r2, [pc, #72]	@ (8001b58 <Set_Goal_Cell+0x74>)
 8001b10:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 8001b14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b18:	e883 0003 	stmia.w	r3, {r0, r1}
		maze->goalPos[1] = (struct Coord){7, 8};
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b5c <Set_Goal_Cell+0x78>)
 8001b20:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8001b24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b28:	e883 0003 	stmia.w	r3, {r0, r1}
		maze->goalPos[2] = (struct Coord){8, 7};
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b60 <Set_Goal_Cell+0x7c>)
 8001b30:	f603 031c 	addw	r3, r3, #2076	@ 0x81c
 8001b34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b38:	e883 0003 	stmia.w	r3, {r0, r1}
		maze->goalPos[3] = (struct Coord){8, 8};
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a09      	ldr	r2, [pc, #36]	@ (8001b64 <Set_Goal_Cell+0x80>)
 8001b40:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 8001b44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b48:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8001b4c:	bf00      	nop
 8001b4e:	3734      	adds	r7, #52	@ 0x34
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	08006ba0 	.word	0x08006ba0
 8001b5c:	08006ba8 	.word	0x08006ba8
 8001b60:	08006bb0 	.word	0x08006bb0
 8001b64:	08006bb8 	.word	0x08006bb8

08001b68 <Maze_Init>:
    free(neighbors->cells); free(neighbors);

    return ret_dir;                                                                                                 // Return direction of lowest cost cell
}

void Maze_Init(struct Maze* maze) {
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
    for (uint8_t y = 0; y < 16; y++) { for (uint8_t x = 0; x < 16; x++) { maze->cellWalls[y][x] = 0; } }            // Initialize all wall values to 0
 8001b70:	2300      	movs	r3, #0
 8001b72:	75fb      	strb	r3, [r7, #23]
 8001b74:	e016      	b.n	8001ba4 <Maze_Init+0x3c>
 8001b76:	2300      	movs	r3, #0
 8001b78:	75bb      	strb	r3, [r7, #22]
 8001b7a:	e00d      	b.n	8001b98 <Maze_Init+0x30>
 8001b7c:	7df9      	ldrb	r1, [r7, #23]
 8001b7e:	7dbb      	ldrb	r3, [r7, #22]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	0109      	lsls	r1, r1, #4
 8001b84:	440b      	add	r3, r1
 8001b86:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	2200      	movs	r2, #0
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	7dbb      	ldrb	r3, [r7, #22]
 8001b94:	3301      	adds	r3, #1
 8001b96:	75bb      	strb	r3, [r7, #22]
 8001b98:	7dbb      	ldrb	r3, [r7, #22]
 8001b9a:	2b0f      	cmp	r3, #15
 8001b9c:	d9ee      	bls.n	8001b7c <Maze_Init+0x14>
 8001b9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	75fb      	strb	r3, [r7, #23]
 8001ba4:	7dfb      	ldrb	r3, [r7, #23]
 8001ba6:	2b0f      	cmp	r3, #15
 8001ba8:	d9e5      	bls.n	8001b76 <Maze_Init+0xe>
    maze->mouse_dir = NORTH;                                                                                        // Mouse starting direction/pos always NORTH/{0,0}
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	721a      	strb	r2, [r3, #8]
    maze->mouse_pos = (struct Coord){0,0};
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	605a      	str	r2, [r3, #4]
}
 8001bbc:	bf00      	nop
 8001bbe:	371c      	adds	r7, #28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
	...

08001bc8 <Set_Motor_Volts>:
float motor_left_previous_speed = 0;
float motor_right_previous_speed = 0;

bool motor_controller_enabled = true;

void Set_Motor_Volts(motor_t motor, float voltage_to_translate) {
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
	voltage_to_translate = voltage_to_translate > MAX_MOTOR_VOLTAGE ? MAX_MOTOR_VOLTAGE : voltage_to_translate;
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c94 <Set_Motor_Volts+0xcc>)
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6838      	ldr	r0, [r7, #0]
 8001bda:	f7ff f9c9 	bl	8000f70 <__aeabi_fcmpgt>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <Set_Motor_Volts+0x20>
 8001be4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c94 <Set_Motor_Volts+0xcc>)
 8001be6:	e000      	b.n	8001bea <Set_Motor_Volts+0x22>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	603b      	str	r3, [r7, #0]
	voltage_to_translate = voltage_to_translate < -MAX_MOTOR_VOLTAGE ? -MAX_MOTOR_VOLTAGE : voltage_to_translate;
 8001bec:	4b29      	ldr	r3, [pc, #164]	@ (8001c94 <Set_Motor_Volts+0xcc>)
 8001bee:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6838      	ldr	r0, [r7, #0]
 8001bf6:	f7ff f99d 	bl	8000f34 <__aeabi_fcmplt>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <Set_Motor_Volts+0x40>
 8001c00:	4b24      	ldr	r3, [pc, #144]	@ (8001c94 <Set_Motor_Volts+0xcc>)
 8001c02:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001c06:	e000      	b.n	8001c0a <Set_Motor_Volts+0x42>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	603b      	str	r3, [r7, #0]

	int counter_period = MAX_PWM * (voltage_to_translate + Calculate_Battery_Bias(voltage_to_translate))
 8001c0c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe ff9d 	bl	8000b50 <__aeabi_i2f>
 8001c16:	4604      	mov	r4, r0
 8001c18:	6838      	ldr	r0, [r7, #0]
 8001c1a:	f000 fd23 	bl	8002664 <Calculate_Battery_Bias>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	6839      	ldr	r1, [r7, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fee0 	bl	80009e8 <__addsf3>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	f7fe ffe3 	bl	8000bf8 <__aeabi_fmul>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fbef 	bl	8000418 <__aeabi_f2d>
							/ mouse_state.battery_voltage;
 8001c3a:	4b17      	ldr	r3, [pc, #92]	@ (8001c98 <Set_Motor_Volts+0xd0>)
 8001c3c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001c40:	f7fe fd6c 	bl	800071c <__aeabi_ddiv>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
	int counter_period = MAX_PWM * (voltage_to_translate + Calculate_Battery_Bias(voltage_to_translate))
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe fe4e 	bl	80008ec <__aeabi_d2iz>
 8001c50:	4603      	mov	r3, r0
 8001c52:	60fb      	str	r3, [r7, #12]
	if (counter_period < 0) {
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	da08      	bge.n	8001c6c <Set_Motor_Volts+0xa4>
		Set_Direction(motor, REVERSE);
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f848 	bl	8001cf4 <Set_Direction>
		counter_period = -counter_period;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	425b      	negs	r3, r3
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	e007      	b.n	8001c7c <Set_Motor_Volts+0xb4>
	}
	else if (counter_period > 0) {
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	dd04      	ble.n	8001c7c <Set_Motor_Volts+0xb4>
		Set_Direction(motor, FORWARD);
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f83c 	bl	8001cf4 <Set_Direction>
	}

	Set_PWM(motor, counter_period);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 f809 	bl	8001c9c <Set_PWM>
}
 8001c8a:	bf00      	nop
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd90      	pop	{r4, r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40c00000 	.word	0x40c00000
 8001c98:	200001c0 	.word	0x200001c0

08001c9c <Set_PWM>:

void Set_PWM(motor_t motor, uint16_t counter_period) {
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	460a      	mov	r2, r1
 8001ca6:	71fb      	strb	r3, [r7, #7]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	80bb      	strh	r3, [r7, #4]
	// Software limit for motor voltage ~6V
	counter_period = counter_period > 1650 ? 1650: counter_period;
 8001cac:	88bb      	ldrh	r3, [r7, #4]
 8001cae:	f240 6272 	movw	r2, #1650	@ 0x672
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	bf28      	it	cs
 8001cb6:	4613      	movcs	r3, r2
 8001cb8:	80bb      	strh	r3, [r7, #4]
	counter_period = counter_period < 50 ? 0: counter_period;
 8001cba:	88bb      	ldrh	r3, [r7, #4]
 8001cbc:	2b31      	cmp	r3, #49	@ 0x31
 8001cbe:	d901      	bls.n	8001cc4 <Set_PWM+0x28>
 8001cc0:	88bb      	ldrh	r3, [r7, #4]
 8001cc2:	e000      	b.n	8001cc6 <Set_PWM+0x2a>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	80bb      	strh	r3, [r7, #4]
	switch(motor) {
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <Set_PWM+0x38>
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d005      	beq.n	8001cde <Set_PWM+0x42>
			break;
		case MOTOR_RIGHT:
			TIM2->CCR3 = counter_period;
			break;
	}
}
 8001cd2:	e009      	b.n	8001ce8 <Set_PWM+0x4c>
			TIM2->CCR4 = counter_period;
 8001cd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cd8:	88bb      	ldrh	r3, [r7, #4]
 8001cda:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8001cdc:	e004      	b.n	8001ce8 <Set_PWM+0x4c>
			TIM2->CCR3 = counter_period;
 8001cde:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ce2:	88bb      	ldrh	r3, [r7, #4]
 8001ce4:	63d3      	str	r3, [r2, #60]	@ 0x3c
			break;
 8001ce6:	bf00      	nop
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
	...

08001cf4 <Set_Direction>:

void Set_Direction(motor_t motor, motor_direction_t direction) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	460a      	mov	r2, r1
 8001cfe:	71fb      	strb	r3, [r7, #7]
 8001d00:	4613      	mov	r3, r2
 8001d02:	71bb      	strb	r3, [r7, #6]
	switch(motor) {
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <Set_Direction+0x1c>
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d032      	beq.n	8001d74 <Set_Direction+0x80>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
					break;
			}
			break;
	}
}
 8001d0e:	e066      	b.n	8001dde <Set_Direction+0xea>
			switch(direction) {
 8001d10:	79bb      	ldrb	r3, [r7, #6]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d020      	beq.n	8001d58 <Set_Direction+0x64>
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	dc5e      	bgt.n	8001dd8 <Set_Direction+0xe4>
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <Set_Direction+0x30>
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d00d      	beq.n	8001d3e <Set_Direction+0x4a>
			break;
 8001d22:	e059      	b.n	8001dd8 <Set_Direction+0xe4>
					HAL_GPIO_WritePin(ML_FWD_GPIO_Port,  ML_FWD_Pin, 1);
 8001d24:	2201      	movs	r2, #1
 8001d26:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d2a:	482f      	ldr	r0, [pc, #188]	@ (8001de8 <Set_Direction+0xf4>)
 8001d2c:	f002 fafc 	bl	8004328 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 8001d30:	2200      	movs	r2, #0
 8001d32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d36:	482d      	ldr	r0, [pc, #180]	@ (8001dec <Set_Direction+0xf8>)
 8001d38:	f002 faf6 	bl	8004328 <HAL_GPIO_WritePin>
					break;
 8001d3c:	e019      	b.n	8001d72 <Set_Direction+0x7e>
					HAL_GPIO_WritePin(ML_FWD_GPIO_Port,  ML_FWD_Pin, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d44:	4828      	ldr	r0, [pc, #160]	@ (8001de8 <Set_Direction+0xf4>)
 8001d46:	f002 faef 	bl	8004328 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 1);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d50:	4826      	ldr	r0, [pc, #152]	@ (8001dec <Set_Direction+0xf8>)
 8001d52:	f002 fae9 	bl	8004328 <HAL_GPIO_WritePin>
					break;
 8001d56:	e00c      	b.n	8001d72 <Set_Direction+0x7e>
					HAL_GPIO_WritePin(ML_FWD_GPIO_Port,  ML_FWD_Pin, 0);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d5e:	4822      	ldr	r0, [pc, #136]	@ (8001de8 <Set_Direction+0xf4>)
 8001d60:	f002 fae2 	bl	8004328 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 8001d64:	2200      	movs	r2, #0
 8001d66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d6a:	4820      	ldr	r0, [pc, #128]	@ (8001dec <Set_Direction+0xf8>)
 8001d6c:	f002 fadc 	bl	8004328 <HAL_GPIO_WritePin>
					break;
 8001d70:	bf00      	nop
			break;
 8001d72:	e031      	b.n	8001dd8 <Set_Direction+0xe4>
			switch(direction) {
 8001d74:	79bb      	ldrb	r3, [r7, #6]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d020      	beq.n	8001dbc <Set_Direction+0xc8>
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	dc2e      	bgt.n	8001ddc <Set_Direction+0xe8>
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <Set_Direction+0x94>
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d00d      	beq.n	8001da2 <Set_Direction+0xae>
			break;
 8001d86:	e029      	b.n	8001ddc <Set_Direction+0xe8>
					HAL_GPIO_WritePin(MR_FWD_GPIO_Port,  MR_FWD_Pin, 1);
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d8e:	4816      	ldr	r0, [pc, #88]	@ (8001de8 <Set_Direction+0xf4>)
 8001d90:	f002 faca 	bl	8004328 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d9a:	4813      	ldr	r0, [pc, #76]	@ (8001de8 <Set_Direction+0xf4>)
 8001d9c:	f002 fac4 	bl	8004328 <HAL_GPIO_WritePin>
					break;
 8001da0:	e019      	b.n	8001dd6 <Set_Direction+0xe2>
					HAL_GPIO_WritePin(MR_FWD_GPIO_Port,  MR_FWD_Pin, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001da8:	480f      	ldr	r0, [pc, #60]	@ (8001de8 <Set_Direction+0xf4>)
 8001daa:	f002 fabd 	bl	8004328 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 1);
 8001dae:	2201      	movs	r2, #1
 8001db0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001db4:	480c      	ldr	r0, [pc, #48]	@ (8001de8 <Set_Direction+0xf4>)
 8001db6:	f002 fab7 	bl	8004328 <HAL_GPIO_WritePin>
					break;
 8001dba:	e00c      	b.n	8001dd6 <Set_Direction+0xe2>
					HAL_GPIO_WritePin(MR_FWD_GPIO_Port,  MR_FWD_Pin, 0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dc2:	4809      	ldr	r0, [pc, #36]	@ (8001de8 <Set_Direction+0xf4>)
 8001dc4:	f002 fab0 	bl	8004328 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dce:	4806      	ldr	r0, [pc, #24]	@ (8001de8 <Set_Direction+0xf4>)
 8001dd0:	f002 faaa 	bl	8004328 <HAL_GPIO_WritePin>
					break;
 8001dd4:	bf00      	nop
			break;
 8001dd6:	e001      	b.n	8001ddc <Set_Direction+0xe8>
			break;
 8001dd8:	bf00      	nop
 8001dda:	e000      	b.n	8001dde <Set_Direction+0xea>
			break;
 8001ddc:	bf00      	nop
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40010c00 	.word	0x40010c00
 8001dec:	40010800 	.word	0x40010800

08001df0 <Position_Controller>:

float Position_Controller(float velocity) {
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	float increment = velocity * SYSTICK_INTERVAL;
 8001df8:	4b31      	ldr	r3, [pc, #196]	@ (8001ec0 <Position_Controller+0xd0>)
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7fe fefb 	bl	8000bf8 <__aeabi_fmul>
 8001e02:	4603      	mov	r3, r0
 8001e04:	60fb      	str	r3, [r7, #12]
	forward_error += increment - delta_position_forward;
 8001e06:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec4 <Position_Controller+0xd4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f7fe fde9 	bl	80009e4 <__aeabi_fsub>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec8 <Position_Controller+0xd8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	f7fe fde3 	bl	80009e8 <__addsf3>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b28      	ldr	r3, [pc, #160]	@ (8001ec8 <Position_Controller+0xd8>)
 8001e28:	601a      	str	r2, [r3, #0]
	float forward_error_difference = forward_error - previous_forward_error;
 8001e2a:	4b27      	ldr	r3, [pc, #156]	@ (8001ec8 <Position_Controller+0xd8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a27      	ldr	r2, [pc, #156]	@ (8001ecc <Position_Controller+0xdc>)
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fdd5 	bl	80009e4 <__aeabi_fsub>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	60bb      	str	r3, [r7, #8]
	previous_forward_error = forward_error;
 8001e3e:	4b22      	ldr	r3, [pc, #136]	@ (8001ec8 <Position_Controller+0xd8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a22      	ldr	r2, [pc, #136]	@ (8001ecc <Position_Controller+0xdc>)
 8001e44:	6013      	str	r3, [r2, #0]

	return 0.93*FWD_KP * forward_error + FWD_KD * forward_error_difference;
 8001e46:	4b22      	ldr	r3, [pc, #136]	@ (8001ed0 <Position_Controller+0xe0>)
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe fae5 	bl	8000418 <__aeabi_f2d>
 8001e4e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001eb8 <Position_Controller+0xc8>)
 8001e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e54:	f7fe fb38 	bl	80004c8 <__aeabi_dmul>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4614      	mov	r4, r2
 8001e5e:	461d      	mov	r5, r3
 8001e60:	4b19      	ldr	r3, [pc, #100]	@ (8001ec8 <Position_Controller+0xd8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fad7 	bl	8000418 <__aeabi_f2d>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4620      	mov	r0, r4
 8001e70:	4629      	mov	r1, r5
 8001e72:	f7fe fb29 	bl	80004c8 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4614      	mov	r4, r2
 8001e7c:	461d      	mov	r5, r3
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <Position_Controller+0xe4>)
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe feb8 	bl	8000bf8 <__aeabi_fmul>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fac4 	bl	8000418 <__aeabi_f2d>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4620      	mov	r0, r4
 8001e96:	4629      	mov	r1, r5
 8001e98:	f7fe f960 	bl	800015c <__adddf3>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f7fe fd4a 	bl	800093c <__aeabi_d2f>
 8001ea8:	4603      	mov	r3, r0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	f3af 8000 	nop.w
 8001eb8:	5c28f5c3 	.word	0x5c28f5c3
 8001ebc:	3fedc28f 	.word	0x3fedc28f
 8001ec0:	3b03126f 	.word	0x3b03126f
 8001ec4:	20000a90 	.word	0x20000a90
 8001ec8:	20000ab0 	.word	0x20000ab0
 8001ecc:	20000ab4 	.word	0x20000ab4
 8001ed0:	3ee5f0d4 	.word	0x3ee5f0d4
 8001ed4:	4159e619 	.word	0x4159e619

08001ed8 <Rotational_Controller>:

float Rotational_Controller(float steering_adjustment, float omega) {
 8001ed8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
	float increment = omega * SYSTICK_INTERVAL;
 8001ee4:	4b34      	ldr	r3, [pc, #208]	@ (8001fb8 <Rotational_Controller+0xe0>)
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	6838      	ldr	r0, [r7, #0]
 8001eea:	f7fe fe85 	bl	8000bf8 <__aeabi_fmul>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	60fb      	str	r3, [r7, #12]
	rotational_error += increment - delta_position_rotational;
 8001ef2:	4b32      	ldr	r3, [pc, #200]	@ (8001fbc <Rotational_Controller+0xe4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f7fe fd73 	bl	80009e4 <__aeabi_fsub>
 8001efe:	4603      	mov	r3, r0
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc0 <Rotational_Controller+0xe8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4619      	mov	r1, r3
 8001f08:	4610      	mov	r0, r2
 8001f0a:	f7fe fd6d 	bl	80009e8 <__addsf3>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	461a      	mov	r2, r3
 8001f12:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc0 <Rotational_Controller+0xe8>)
 8001f14:	601a      	str	r2, [r3, #0]
	rotational_error += steering_adjustment;
 8001f16:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc0 <Rotational_Controller+0xe8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fd63 	bl	80009e8 <__addsf3>
 8001f22:	4603      	mov	r3, r0
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b26      	ldr	r3, [pc, #152]	@ (8001fc0 <Rotational_Controller+0xe8>)
 8001f28:	601a      	str	r2, [r3, #0]
	float rotational_error_difference = rotational_error - previous_rotational_error;
 8001f2a:	4b25      	ldr	r3, [pc, #148]	@ (8001fc0 <Rotational_Controller+0xe8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a25      	ldr	r2, [pc, #148]	@ (8001fc4 <Rotational_Controller+0xec>)
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fd55 	bl	80009e4 <__aeabi_fsub>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	60bb      	str	r3, [r7, #8]
	previous_rotational_error = rotational_error;
 8001f3e:	4b20      	ldr	r3, [pc, #128]	@ (8001fc0 <Rotational_Controller+0xe8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a20      	ldr	r2, [pc, #128]	@ (8001fc4 <Rotational_Controller+0xec>)
 8001f44:	6013      	str	r3, [r2, #0]

	return ROT_KP * rotational_error - 0.1 * ROT_KD * rotational_error_difference;
 8001f46:	4a20      	ldr	r2, [pc, #128]	@ (8001fc8 <Rotational_Controller+0xf0>)
 8001f48:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <Rotational_Controller+0xe8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4610      	mov	r0, r2
 8001f50:	f7fe fe52 	bl	8000bf8 <__aeabi_fmul>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fa5e 	bl	8000418 <__aeabi_f2d>
 8001f5c:	4604      	mov	r4, r0
 8001f5e:	460d      	mov	r5, r1
 8001f60:	4b1a      	ldr	r3, [pc, #104]	@ (8001fcc <Rotational_Controller+0xf4>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fa58 	bl	8000418 <__aeabi_f2d>
 8001f68:	a311      	add	r3, pc, #68	@ (adr r3, 8001fb0 <Rotational_Controller+0xd8>)
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	f7fe faab 	bl	80004c8 <__aeabi_dmul>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4690      	mov	r8, r2
 8001f78:	4699      	mov	r9, r3
 8001f7a:	68b8      	ldr	r0, [r7, #8]
 8001f7c:	f7fe fa4c 	bl	8000418 <__aeabi_f2d>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4640      	mov	r0, r8
 8001f86:	4649      	mov	r1, r9
 8001f88:	f7fe fa9e 	bl	80004c8 <__aeabi_dmul>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4620      	mov	r0, r4
 8001f92:	4629      	mov	r1, r5
 8001f94:	f7fe f8e0 	bl	8000158 <__aeabi_dsub>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f7fe fccc 	bl	800093c <__aeabi_d2f>
 8001fa4:	4603      	mov	r3, r0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fb0:	9999999a 	.word	0x9999999a
 8001fb4:	3fb99999 	.word	0x3fb99999
 8001fb8:	3b03126f 	.word	0x3b03126f
 8001fbc:	20000a94 	.word	0x20000a94
 8001fc0:	20000ab8 	.word	0x20000ab8
 8001fc4:	20000abc 	.word	0x20000abc
 8001fc8:	3de13cae 	.word	0x3de13cae
 8001fcc:	41114412 	.word	0x41114412

08001fd0 <Feed_Forward>:

float Feed_Forward(motor_t motor, float motor_speed) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	71fb      	strb	r3, [r7, #7]
	float previous_speed = motor == MOTOR_LEFT ? motor_left_previous_speed: motor_right_previous_speed;
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d102      	bne.n	8001fe8 <Feed_Forward+0x18>
 8001fe2:	4b26      	ldr	r3, [pc, #152]	@ (800207c <Feed_Forward+0xac>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	e001      	b.n	8001fec <Feed_Forward+0x1c>
 8001fe8:	4b25      	ldr	r3, [pc, #148]	@ (8002080 <Feed_Forward+0xb0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	613b      	str	r3, [r7, #16]
	float feedforward = motor_speed * SPEED_FF;
 8001fee:	4b25      	ldr	r3, [pc, #148]	@ (8002084 <Feed_Forward+0xb4>)
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	6838      	ldr	r0, [r7, #0]
 8001ff4:	f7fe fe00 	bl	8000bf8 <__aeabi_fmul>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	617b      	str	r3, [r7, #20]
	if (motor_speed > 0) {
 8001ffc:	f04f 0100 	mov.w	r1, #0
 8002000:	6838      	ldr	r0, [r7, #0]
 8002002:	f7fe ffb5 	bl	8000f70 <__aeabi_fcmpgt>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <Feed_Forward+0x4c>
		feedforward += BIAS_FF;
 800200c:	4b1e      	ldr	r3, [pc, #120]	@ (8002088 <Feed_Forward+0xb8>)
 800200e:	4619      	mov	r1, r3
 8002010:	6978      	ldr	r0, [r7, #20]
 8002012:	f7fe fce9 	bl	80009e8 <__addsf3>
 8002016:	4603      	mov	r3, r0
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	e00e      	b.n	800203a <Feed_Forward+0x6a>
	}
	else if (motor_speed < 0) {
 800201c:	f04f 0100 	mov.w	r1, #0
 8002020:	6838      	ldr	r0, [r7, #0]
 8002022:	f7fe ff87 	bl	8000f34 <__aeabi_fcmplt>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <Feed_Forward+0x6a>
		feedforward -= BIAS_FF;
 800202c:	4b16      	ldr	r3, [pc, #88]	@ (8002088 <Feed_Forward+0xb8>)
 800202e:	4619      	mov	r1, r3
 8002030:	6978      	ldr	r0, [r7, #20]
 8002032:	f7fe fcd7 	bl	80009e4 <__aeabi_fsub>
 8002036:	4603      	mov	r3, r0
 8002038:	617b      	str	r3, [r7, #20]
	}
	float acceleration = (motor_speed - previous_speed) * SYSTICK_FREQUENCY;
 800203a:	6939      	ldr	r1, [r7, #16]
 800203c:	6838      	ldr	r0, [r7, #0]
 800203e:	f7fe fcd1 	bl	80009e4 <__aeabi_fsub>
 8002042:	4603      	mov	r3, r0
 8002044:	461a      	mov	r2, r3
 8002046:	4b11      	ldr	r3, [pc, #68]	@ (800208c <Feed_Forward+0xbc>)
 8002048:	4619      	mov	r1, r3
 800204a:	4610      	mov	r0, r2
 800204c:	f7fe fdd4 	bl	8000bf8 <__aeabi_fmul>
 8002050:	4603      	mov	r3, r0
 8002052:	60fb      	str	r3, [r7, #12]
	previous_speed = motor_speed;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	613b      	str	r3, [r7, #16]
	float acceleration_feedforward = ACC_FF * acceleration;
 8002058:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <Feed_Forward+0xc0>)
 800205a:	4619      	mov	r1, r3
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f7fe fdcb 	bl	8000bf8 <__aeabi_fmul>
 8002062:	4603      	mov	r3, r0
 8002064:	60bb      	str	r3, [r7, #8]
	feedforward += acceleration_feedforward;
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	6978      	ldr	r0, [r7, #20]
 800206a:	f7fe fcbd 	bl	80009e8 <__addsf3>
 800206e:	4603      	mov	r3, r0
 8002070:	617b      	str	r3, [r7, #20]

	return feedforward;
 8002072:	697b      	ldr	r3, [r7, #20]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000ac0 	.word	0x20000ac0
 8002080:	20000ac4 	.word	0x20000ac4
 8002084:	3b7f00ff 	.word	0x3b7f00ff
 8002088:	3ee24dd3 	.word	0x3ee24dd3
 800208c:	43fa0000 	.word	0x43fa0000
 8002090:	3a849a1e 	.word	0x3a849a1e
 8002094:	00000000 	.word	0x00000000

08002098 <Update_Motors>:

void Update_Motors(float velocity, float omega, float steering_adjustment) {
 8002098:	b5b0      	push	{r4, r5, r7, lr}
 800209a:	b08c      	sub	sp, #48	@ 0x30
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
	steering_adjustment = rotational_profile.state == IDLE || rotational_profile.state == COMPLETE ? steering_adjustment : 0;
 80020a4:	4b58      	ldr	r3, [pc, #352]	@ (8002208 <Update_Motors+0x170>)
 80020a6:	7c1b      	ldrb	r3, [r3, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <Update_Motors+0x1c>
 80020ac:	4b56      	ldr	r3, [pc, #344]	@ (8002208 <Update_Motors+0x170>)
 80020ae:	7c1b      	ldrb	r3, [r3, #16]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d101      	bne.n	80020b8 <Update_Motors+0x20>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	e001      	b.n	80020bc <Update_Motors+0x24>
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	607b      	str	r3, [r7, #4]

	float position_output = Position_Controller(velocity);
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f7ff fe96 	bl	8001df0 <Position_Controller>
 80020c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
	float rotational_output = 0.61 * Rotational_Controller(steering_adjustment, omega);
 80020c6:	68b9      	ldr	r1, [r7, #8]
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ff05 	bl	8001ed8 <Rotational_Controller>
 80020ce:	4603      	mov	r3, r0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe f9a1 	bl	8000418 <__aeabi_f2d>
 80020d6:	a348      	add	r3, pc, #288	@ (adr r3, 80021f8 <Update_Motors+0x160>)
 80020d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020dc:	f7fe f9f4 	bl	80004c8 <__aeabi_dmul>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f7fe fc28 	bl	800093c <__aeabi_d2f>
 80020ec:	4603      	mov	r3, r0
 80020ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	float motor_left_voltage = 0;
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
	float motor_right_voltage = 0;
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	623b      	str	r3, [r7, #32]
	motor_left_voltage = position_output - rotational_output;
 80020fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002100:	f7fe fc70 	bl	80009e4 <__aeabi_fsub>
 8002104:	4603      	mov	r3, r0
 8002106:	627b      	str	r3, [r7, #36]	@ 0x24
	motor_right_voltage = position_output + rotational_output;
 8002108:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800210a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800210c:	f7fe fc6c 	bl	80009e8 <__addsf3>
 8002110:	4603      	mov	r3, r0
 8002112:	623b      	str	r3, [r7, #32]

	float tangent_speed = omega * MOUSE_RADIUS * RADIANS_PER_DEGREE;
 8002114:	4b3d      	ldr	r3, [pc, #244]	@ (800220c <Update_Motors+0x174>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fd6c 	bl	8000bf8 <__aeabi_fmul>
 8002120:	4603      	mov	r3, r0
 8002122:	461a      	mov	r2, r3
 8002124:	4b3a      	ldr	r3, [pc, #232]	@ (8002210 <Update_Motors+0x178>)
 8002126:	4619      	mov	r1, r3
 8002128:	4610      	mov	r0, r2
 800212a:	f7fe fd65 	bl	8000bf8 <__aeabi_fmul>
 800212e:	4603      	mov	r3, r0
 8002130:	61fb      	str	r3, [r7, #28]
	float motor_left_speed = velocity - tangent_speed;
 8002132:	69f9      	ldr	r1, [r7, #28]
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7fe fc55 	bl	80009e4 <__aeabi_fsub>
 800213a:	4603      	mov	r3, r0
 800213c:	61bb      	str	r3, [r7, #24]
	float motor_right_speed = velocity + tangent_speed;
 800213e:	69f9      	ldr	r1, [r7, #28]
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f7fe fc51 	bl	80009e8 <__addsf3>
 8002146:	4603      	mov	r3, r0
 8002148:	617b      	str	r3, [r7, #20]
	#ifdef FEEDFORWARD_ENABLE
		motor_left_voltage += 0.01*Feed_Forward(MOTOR_LEFT, motor_left_speed);
 800214a:	69b9      	ldr	r1, [r7, #24]
 800214c:	2000      	movs	r0, #0
 800214e:	f7ff ff3f 	bl	8001fd0 <Feed_Forward>
 8002152:	4603      	mov	r3, r0
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe f95f 	bl	8000418 <__aeabi_f2d>
 800215a:	a329      	add	r3, pc, #164	@ (adr r3, 8002200 <Update_Motors+0x168>)
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	f7fe f9b2 	bl	80004c8 <__aeabi_dmul>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4614      	mov	r4, r2
 800216a:	461d      	mov	r5, r3
 800216c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800216e:	f7fe f953 	bl	8000418 <__aeabi_f2d>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4620      	mov	r0, r4
 8002178:	4629      	mov	r1, r5
 800217a:	f7fd ffef 	bl	800015c <__adddf3>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	f7fe fbd9 	bl	800093c <__aeabi_d2f>
 800218a:	4603      	mov	r3, r0
 800218c:	627b      	str	r3, [r7, #36]	@ 0x24
		motor_right_voltage += 0.01*Feed_Forward(MOTOR_RIGHT, motor_right_speed);
 800218e:	6979      	ldr	r1, [r7, #20]
 8002190:	2001      	movs	r0, #1
 8002192:	f7ff ff1d 	bl	8001fd0 <Feed_Forward>
 8002196:	4603      	mov	r3, r0
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe f93d 	bl	8000418 <__aeabi_f2d>
 800219e:	a318      	add	r3, pc, #96	@ (adr r3, 8002200 <Update_Motors+0x168>)
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	f7fe f990 	bl	80004c8 <__aeabi_dmul>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4614      	mov	r4, r2
 80021ae:	461d      	mov	r5, r3
 80021b0:	6a38      	ldr	r0, [r7, #32]
 80021b2:	f7fe f931 	bl	8000418 <__aeabi_f2d>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4620      	mov	r0, r4
 80021bc:	4629      	mov	r1, r5
 80021be:	f7fd ffcd 	bl	800015c <__adddf3>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4610      	mov	r0, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	f7fe fbb7 	bl	800093c <__aeabi_d2f>
 80021ce:	4603      	mov	r3, r0
 80021d0:	623b      	str	r3, [r7, #32]
	#endif
	if (motor_controller_enabled) {
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <Update_Motors+0x17c>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <Update_Motors+0x152>
		Set_Motor_Volts(MOTOR_LEFT, motor_left_voltage);
 80021da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021dc:	2000      	movs	r0, #0
 80021de:	f7ff fcf3 	bl	8001bc8 <Set_Motor_Volts>
		Set_Motor_Volts(MOTOR_RIGHT, motor_right_voltage);
 80021e2:	6a39      	ldr	r1, [r7, #32]
 80021e4:	2001      	movs	r0, #1
 80021e6:	f7ff fcef 	bl	8001bc8 <Set_Motor_Volts>
	}
}
 80021ea:	bf00      	nop
 80021ec:	3730      	adds	r7, #48	@ 0x30
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bdb0      	pop	{r4, r5, r7, pc}
 80021f2:	bf00      	nop
 80021f4:	f3af 8000 	nop.w
 80021f8:	b851eb85 	.word	0xb851eb85
 80021fc:	3fe3851e 	.word	0x3fe3851e
 8002200:	47ae147b 	.word	0x47ae147b
 8002204:	3f847ae1 	.word	0x3f847ae1
 8002208:	20000a44 	.word	0x20000a44
 800220c:	08006bc0 	.word	0x08006bc0
 8002210:	3c8efa35 	.word	0x3c8efa35
 8002214:	20000002 	.word	0x20000002

08002218 <Clear_Profile>:
extern float mouse_position;

float on_completion_error_forward = 0;
float on_completion_error_rotational = 0;

void Clear_Profile(profile_t* profile) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	bzero(profile, sizeof(profile_t));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4618      	mov	r0, r3
 8002224:	2324      	movs	r3, #36	@ 0x24
 8002226:	461a      	mov	r2, r3
 8002228:	2100      	movs	r1, #0
 800222a:	f004 fc57 	bl	8006adc <memset>
	profile->state = IDLE; // Should be handled above, just make sure it's IDLE
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	741a      	strb	r2, [r3, #16]
	profile->direction = 1;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	621a      	str	r2, [r3, #32]
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <Start_Profile>:

void Start_Profile(param_t* parameters, profile_t* profile) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
	if (parameters->distance < 0) {
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f04f 0100 	mov.w	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe fe6c 	bl	8000f34 <__aeabi_fcmplt>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <Start_Profile+0x32>
		profile->direction = -1;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	f04f 32ff 	mov.w	r2, #4294967295
 8002268:	621a      	str	r2, [r3, #32]
		parameters->distance *= -1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	601a      	str	r2, [r3, #0]
	}
	if (parameters->distance < 1.0) {
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe fe58 	bl	8000f34 <__aeabi_fcmplt>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <Start_Profile+0x4e>
		profile->state = COMPLETE;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2203      	movs	r2, #3
 800228e:	741a      	strb	r2, [r3, #16]
		return;
 8002290:	e070      	b.n	8002374 <Start_Profile+0x130>
	}
	if (parameters->end_speed > parameters->max_speed) {
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4619      	mov	r1, r3
 800229c:	4610      	mov	r0, r2
 800229e:	f7fe fe67 	bl	8000f70 <__aeabi_fcmpgt>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <Start_Profile+0x6c>
		parameters->end_speed = parameters->max_speed;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	609a      	str	r2, [r3, #8]
	}

	profile->position = 0;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
	profile->parameters.distance += profile == &forward_profile ? on_completion_error_forward : 0;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	492f      	ldr	r1, [pc, #188]	@ (800237c <Start_Profile+0x138>)
 80022c0:	428b      	cmp	r3, r1
 80022c2:	d102      	bne.n	80022ca <Start_Profile+0x86>
 80022c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002380 <Start_Profile+0x13c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	e001      	b.n	80022ce <Start_Profile+0x8a>
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe fb89 	bl	80009e8 <__addsf3>
 80022d6:	4603      	mov	r3, r0
 80022d8:	461a      	mov	r2, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	601a      	str	r2, [r3, #0]
	parameters->max_speed = profile->direction * fabsf(parameters->max_speed);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe fc34 	bl	8000b50 <__aeabi_i2f>
 80022e8:	4602      	mov	r2, r0
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022f2:	4619      	mov	r1, r3
 80022f4:	4610      	mov	r0, r2
 80022f6:	f7fe fc7f 	bl	8000bf8 <__aeabi_fmul>
 80022fa:	4603      	mov	r3, r0
 80022fc:	461a      	mov	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	605a      	str	r2, [r3, #4]
	parameters->end_speed = profile->direction * fabsf(parameters->end_speed);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fc22 	bl	8000b50 <__aeabi_i2f>
 800230c:	4602      	mov	r2, r0
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002316:	4619      	mov	r1, r3
 8002318:	4610      	mov	r0, r2
 800231a:	f7fe fc6d 	bl	8000bf8 <__aeabi_fmul>
 800231e:	4603      	mov	r3, r0
 8002320:	461a      	mov	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	609a      	str	r2, [r3, #8]
	parameters->acceleration = fabsf(parameters->acceleration);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	60da      	str	r2, [r3, #12]
	memcpy(&(profile->parameters), parameters, sizeof(param_t));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2210      	movs	r2, #16
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4618      	mov	r0, r3
 800233a:	f004 fbfb 	bl	8006b34 <memcpy>
	profile->inverse_acceleration = parameters->acceleration >= 1 ? (1.0f / parameters->acceleration) : 1.0;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe fe08 	bl	8000f5c <__aeabi_fcmpge>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d009      	beq.n	8002366 <Start_Profile+0x122>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	4619      	mov	r1, r3
 8002358:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800235c:	f7fe fd00 	bl	8000d60 <__aeabi_fdiv>
 8002360:	4603      	mov	r3, r0
 8002362:	461a      	mov	r2, r3
 8002364:	e001      	b.n	800236a <Start_Profile+0x126>
 8002366:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	61da      	str	r2, [r3, #28]

	profile->state = ACCELERATING;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2201      	movs	r2, #1
 8002372:	741a      	strb	r2, [r3, #16]
}
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000a20 	.word	0x20000a20
 8002380:	20000ac8 	.word	0x20000ac8

08002384 <Profile_Container>:

void Profile_Container(param_t* parameters, profile_t* profile) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
	float original_position = mouse_position;
 800238e:	4b12      	ldr	r3, [pc, #72]	@ (80023d8 <Profile_Container+0x54>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60fb      	str	r3, [r7, #12]
	Start_Profile(parameters, profile);
 8002394:	6839      	ldr	r1, [r7, #0]
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ff54 	bl	8002244 <Start_Profile>
	while (profile->state != COMPLETE) {
 800239c:	e002      	b.n	80023a4 <Profile_Container+0x20>
		HAL_Delay(2);
 800239e:	2002      	movs	r0, #2
 80023a0:	f001 f802 	bl	80033a8 <HAL_Delay>
	while (profile->state != COMPLETE) {
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	7c1b      	ldrb	r3, [r3, #16]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d1f8      	bne.n	800239e <Profile_Container+0x1a>
	}
	float delta_position = mouse_position - original_position;
 80023ac:	4b0a      	ldr	r3, [pc, #40]	@ (80023d8 <Profile_Container+0x54>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68f9      	ldr	r1, [r7, #12]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fb16 	bl	80009e4 <__aeabi_fsub>
 80023b8:	4603      	mov	r3, r0
 80023ba:	60bb      	str	r3, [r7, #8]
	on_completion_error_forward = parameters->distance - delta_position;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fb0e 	bl	80009e4 <__aeabi_fsub>
 80023c8:	4603      	mov	r3, r0
 80023ca:	461a      	mov	r2, r3
 80023cc:	4b03      	ldr	r3, [pc, #12]	@ (80023dc <Profile_Container+0x58>)
 80023ce:	601a      	str	r2, [r3, #0]
}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000a9c 	.word	0x20000a9c
 80023dc:	20000ac8 	.word	0x20000ac8

080023e0 <Calculate_Braking_Distance>:

float Calculate_Braking_Distance(float current_speed, float end_speed, float inverse_acceleration) {
 80023e0:	b5b0      	push	{r4, r5, r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
	return fabsf(current_speed * current_speed - end_speed * end_speed) * 0.5 * inverse_acceleration;
 80023ec:	68f9      	ldr	r1, [r7, #12]
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f7fe fc02 	bl	8000bf8 <__aeabi_fmul>
 80023f4:	4603      	mov	r3, r0
 80023f6:	461c      	mov	r4, r3
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	68b8      	ldr	r0, [r7, #8]
 80023fc:	f7fe fbfc 	bl	8000bf8 <__aeabi_fmul>
 8002400:	4603      	mov	r3, r0
 8002402:	4619      	mov	r1, r3
 8002404:	4620      	mov	r0, r4
 8002406:	f7fe faed 	bl	80009e4 <__aeabi_fsub>
 800240a:	4603      	mov	r3, r0
 800240c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe f801 	bl	8000418 <__aeabi_f2d>
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	4b0d      	ldr	r3, [pc, #52]	@ (8002450 <Calculate_Braking_Distance+0x70>)
 800241c:	f7fe f854 	bl	80004c8 <__aeabi_dmul>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4614      	mov	r4, r2
 8002426:	461d      	mov	r5, r3
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7fd fff5 	bl	8000418 <__aeabi_f2d>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4620      	mov	r0, r4
 8002434:	4629      	mov	r1, r5
 8002436:	f7fe f847 	bl	80004c8 <__aeabi_dmul>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	f7fe fa7b 	bl	800093c <__aeabi_d2f>
 8002446:	4603      	mov	r3, r0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bdb0      	pop	{r4, r5, r7, pc}
 8002450:	3fe00000 	.word	0x3fe00000

08002454 <Update_Profile>:

void Update_Profile(profile_t* profile) {
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	if (profile->state == IDLE) {
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7c1b      	ldrb	r3, [r3, #16]
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80bc 	beq.w	80025de <Update_Profile+0x18a>
		return;
	}

	float delta_v = profile->parameters.acceleration * SYSTICK_INTERVAL;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	4a5f      	ldr	r2, [pc, #380]	@ (80025e8 <Update_Profile+0x194>)
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe fbc1 	bl	8000bf8 <__aeabi_fmul>
 8002476:	4603      	mov	r3, r0
 8002478:	617b      	str	r3, [r7, #20]
	float remaining_distance = fabsf(profile->parameters.distance) - fabsf(profile->position);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800248a:	4619      	mov	r1, r3
 800248c:	4610      	mov	r0, r2
 800248e:	f7fe faa9 	bl	80009e4 <__aeabi_fsub>
 8002492:	4603      	mov	r3, r0
 8002494:	613b      	str	r3, [r7, #16]
	if (profile->state == ACCELERATING) {
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	7c1b      	ldrb	r3, [r3, #16]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d130      	bne.n	8002500 <Update_Profile+0xac>
		float braking_distance = Calculate_Braking_Distance(profile->speed, profile->parameters.end_speed, profile->inverse_acceleration);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6958      	ldr	r0, [r3, #20]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6899      	ldr	r1, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	461a      	mov	r2, r3
 80024ac:	f7ff ff98 	bl	80023e0 <Calculate_Braking_Distance>
 80024b0:	60f8      	str	r0, [r7, #12]
		if (remaining_distance < braking_distance) {
 80024b2:	68f9      	ldr	r1, [r7, #12]
 80024b4:	6938      	ldr	r0, [r7, #16]
 80024b6:	f7fe fd3d 	bl	8000f34 <__aeabi_fcmplt>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d01f      	beq.n	8002500 <Update_Profile+0xac>
			profile->state = BRAKING;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	741a      	strb	r2, [r3, #16]
			if (profile->parameters.end_speed == 0) {
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f04f 0100 	mov.w	r1, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fd26 	bl	8000f20 <__aeabi_fcmpeq>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00e      	beq.n	80024f8 <Update_Profile+0xa4>
				profile->parameters.max_speed = profile->direction * 5.0f;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe fb36 	bl	8000b50 <__aeabi_i2f>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4941      	ldr	r1, [pc, #260]	@ (80025ec <Update_Profile+0x198>)
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe fb85 	bl	8000bf8 <__aeabi_fmul>
 80024ee:	4603      	mov	r3, r0
 80024f0:	461a      	mov	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	e003      	b.n	8002500 <Update_Profile+0xac>
			}
			else {
				profile->parameters.max_speed = profile->parameters.end_speed;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	605a      	str	r2, [r3, #4]
			}
		}
	}

	if (profile->speed < profile->parameters.max_speed) {
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4619      	mov	r1, r3
 800250a:	4610      	mov	r0, r2
 800250c:	f7fe fd12 	bl	8000f34 <__aeabi_fcmplt>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d018      	beq.n	8002548 <Update_Profile+0xf4>
		profile->speed += delta_v;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	6979      	ldr	r1, [r7, #20]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe fa63 	bl	80009e8 <__addsf3>
 8002522:	4603      	mov	r3, r0
 8002524:	461a      	mov	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	615a      	str	r2, [r3, #20]
		if (profile->speed > profile->parameters.max_speed) {
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	4619      	mov	r1, r3
 8002534:	4610      	mov	r0, r2
 8002536:	f7fe fd1b 	bl	8000f70 <__aeabi_fcmpgt>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <Update_Profile+0xf4>
			profile->speed = profile->parameters.max_speed;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	615a      	str	r2, [r3, #20]
		}
	}
	if (profile->speed > profile->parameters.max_speed) {
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695a      	ldr	r2, [r3, #20]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4619      	mov	r1, r3
 8002552:	4610      	mov	r0, r2
 8002554:	f7fe fd0c 	bl	8000f70 <__aeabi_fcmpgt>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d018      	beq.n	8002590 <Update_Profile+0x13c>
		profile->speed -= delta_v;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	6979      	ldr	r1, [r7, #20]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fa3d 	bl	80009e4 <__aeabi_fsub>
 800256a:	4603      	mov	r3, r0
 800256c:	461a      	mov	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	615a      	str	r2, [r3, #20]
		if (profile->speed < profile->parameters.max_speed) {
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4619      	mov	r1, r3
 800257c:	4610      	mov	r0, r2
 800257e:	f7fe fcd9 	bl	8000f34 <__aeabi_fcmplt>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <Update_Profile+0x13c>
			profile->speed = profile->parameters.max_speed;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	615a      	str	r2, [r3, #20]
		}
	}

	profile->position += profile->speed * SYSTICK_INTERVAL;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699c      	ldr	r4, [r3, #24]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	4a13      	ldr	r2, [pc, #76]	@ (80025e8 <Update_Profile+0x194>)
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fb2a 	bl	8000bf8 <__aeabi_fmul>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4619      	mov	r1, r3
 80025a8:	4620      	mov	r0, r4
 80025aa:	f7fe fa1d 	bl	80009e8 <__addsf3>
 80025ae:	4603      	mov	r3, r0
 80025b0:	461a      	mov	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	619a      	str	r2, [r3, #24]
	if (profile->state != COMPLETE && remaining_distance < 0.125) {
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	7c1b      	ldrb	r3, [r3, #16]
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d010      	beq.n	80025e0 <Update_Profile+0x18c>
 80025be:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 80025c2:	6938      	ldr	r0, [r7, #16]
 80025c4:	f7fe fcb6 	bl	8000f34 <__aeabi_fcmplt>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d008      	beq.n	80025e0 <Update_Profile+0x18c>
		profile->state = COMPLETE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2203      	movs	r2, #3
 80025d2:	741a      	strb	r2, [r3, #16]
		profile->parameters.max_speed = profile->parameters.end_speed;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	e000      	b.n	80025e0 <Update_Profile+0x18c>
		return;
 80025de:	bf00      	nop
	}
}
 80025e0:	371c      	adds	r7, #28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd90      	pop	{r4, r7, pc}
 80025e6:	bf00      	nop
 80025e8:	08006bc8 	.word	0x08006bc8
 80025ec:	40a00000 	.word	0x40a00000

080025f0 <LED_Power_Init>:
const float ADC_MAX_READING = 4096.0;
const float ADC_REFERENCE_V = 3.3;

const float BATTERY_MULTIPLIER = (ADC_REFERENCE_V / ADC_MAX_READING / DIVIDER_RATIO);

void LED_Power_Init() {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Power_GPIO_Port, LED_Power_Pin);
 80025f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025f8:	4802      	ldr	r0, [pc, #8]	@ (8002604 <LED_Power_Init+0x14>)
 80025fa:	f001 fead 	bl	8004358 <HAL_GPIO_TogglePin>
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40011000 	.word	0x40011000

08002608 <Pulse_Buzzer>:
void Reset_Buffers(uint8_t rxBuff, uint8_t txBuff) {
	rxBuff = 0;
	txBuff = 0;
}

void Pulse_Buzzer(uint16_t delay) {
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002612:	2201      	movs	r2, #1
 8002614:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002618:	4804      	ldr	r0, [pc, #16]	@ (800262c <Pulse_Buzzer+0x24>)
 800261a:	f001 fe85 	bl	8004328 <HAL_GPIO_WritePin>
	buzzerDelay = delay;
 800261e:	4a04      	ldr	r2, [pc, #16]	@ (8002630 <Pulse_Buzzer+0x28>)
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	8013      	strh	r3, [r2, #0]
}
 8002624:	bf00      	nop
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40010c00 	.word	0x40010c00
 8002630:	20000acc 	.word	0x20000acc

08002634 <LED_Red_Toggle>:

void LED_Red_Toggle() {
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 8002638:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800263c:	4802      	ldr	r0, [pc, #8]	@ (8002648 <LED_Red_Toggle+0x14>)
 800263e:	f001 fe8b 	bl	8004358 <HAL_GPIO_TogglePin>
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40010800 	.word	0x40010800

0800264c <LED_Blue_Toggle>:

void LED_Green_Toggle() {
	HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
}

void LED_Blue_Toggle() {
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 8002650:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002654:	4802      	ldr	r0, [pc, #8]	@ (8002660 <LED_Blue_Toggle+0x14>)
 8002656:	f001 fe7f 	bl	8004358 <HAL_GPIO_TogglePin>
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40010800 	.word	0x40010800

08002664 <Calculate_Battery_Bias>:

float Calculate_Battery_Bias(float commanded_voltage) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	return (BATTERY_BIAS_SLOPE * commanded_voltage + BATTERY_BIAS_OFFSET) / BATTERY_RATIO;
 800266c:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <Calculate_Battery_Bias+0x38>)
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4618      	mov	r0, r3
 8002672:	f7fe fac1 	bl	8000bf8 <__aeabi_fmul>
 8002676:	4603      	mov	r3, r0
 8002678:	461a      	mov	r2, r3
 800267a:	4b09      	ldr	r3, [pc, #36]	@ (80026a0 <Calculate_Battery_Bias+0x3c>)
 800267c:	4619      	mov	r1, r3
 800267e:	4610      	mov	r0, r2
 8002680:	f7fe f9b2 	bl	80009e8 <__addsf3>
 8002684:	4603      	mov	r3, r0
 8002686:	461a      	mov	r2, r3
 8002688:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <Calculate_Battery_Bias+0x40>)
 800268a:	4619      	mov	r1, r3
 800268c:	4610      	mov	r0, r2
 800268e:	f7fe fb67 	bl	8000d60 <__aeabi_fdiv>
 8002692:	4603      	mov	r3, r0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	3d9b089a 	.word	0x3d9b089a
 80026a0:	3cbb98c8 	.word	0x3cbb98c8
 80026a4:	3f69ba5e 	.word	0x3f69ba5e

080026a8 <Read_Battery>:

double Read_Battery() {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 80026ae:	4815      	ldr	r0, [pc, #84]	@ (8002704 <Read_Battery+0x5c>)
 80026b0:	f000 ff76 	bl	80035a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80026b4:	f04f 31ff 	mov.w	r1, #4294967295
 80026b8:	4812      	ldr	r0, [pc, #72]	@ (8002704 <Read_Battery+0x5c>)
 80026ba:	f001 f84b 	bl	8003754 <HAL_ADC_PollForConversion>
	uint16_t raw_adc = HAL_ADC_GetValue(&hadc2);
 80026be:	4811      	ldr	r0, [pc, #68]	@ (8002704 <Read_Battery+0x5c>)
 80026c0:	f001 f94e 	bl	8003960 <HAL_ADC_GetValue>
 80026c4:	4603      	mov	r3, r0
 80026c6:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc2);
 80026c8:	480e      	ldr	r0, [pc, #56]	@ (8002704 <Read_Battery+0x5c>)
 80026ca:	f001 f817 	bl	80036fc <HAL_ADC_Stop>

	return raw_adc * BATTERY_MULTIPLIER + 1.0;
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fe fa3d 	bl	8000b50 <__aeabi_i2f>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002708 <Read_Battery+0x60>)
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe fa8b 	bl	8000bf8 <__aeabi_fmul>
 80026e2:	4603      	mov	r3, r0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fd fe97 	bl	8000418 <__aeabi_f2d>
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	4b07      	ldr	r3, [pc, #28]	@ (800270c <Read_Battery+0x64>)
 80026f0:	f7fd fd34 	bl	800015c <__adddf3>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
}
 80026f8:	4610      	mov	r0, r2
 80026fa:	4619      	mov	r1, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	2000006c 	.word	0x2000006c
 8002708:	3b1e6666 	.word	0x3b1e6666
 800270c:	3ff00000 	.word	0x3ff00000

08002710 <ARM_Button>:

void ARM_Button() {
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
	for (uint8_t i=0; i < 10; i++) {
 8002716:	2300      	movs	r3, #0
 8002718:	71fb      	strb	r3, [r7, #7]
 800271a:	e008      	b.n	800272e <ARM_Button+0x1e>
		LED_Red_Toggle();
 800271c:	f7ff ff8a 	bl	8002634 <LED_Red_Toggle>
		HAL_Delay(500);
 8002720:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002724:	f000 fe40 	bl	80033a8 <HAL_Delay>
	for (uint8_t i=0; i < 10; i++) {
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	3301      	adds	r3, #1
 800272c:	71fb      	strb	r3, [r7, #7]
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	2b09      	cmp	r3, #9
 8002732:	d9f3      	bls.n	800271c <ARM_Button+0xc>
	}
	armed = true;
 8002734:	4b03      	ldr	r3, [pc, #12]	@ (8002744 <ARM_Button+0x34>)
 8002736:	2201      	movs	r2, #1
 8002738:	701a      	strb	r2, [r3, #0]
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	200001e8 	.word	0x200001e8

08002748 <RACE_Button>:

void RACE_Button() {
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
	searching = false;
 800274c:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <RACE_Button+0x1c>)
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
	LED_Blue_Toggle();
 8002752:	f7ff ff7b 	bl	800264c <LED_Blue_Toggle>
	HAL_Delay(1000);
 8002756:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800275a:	f000 fe25 	bl	80033a8 <HAL_Delay>
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000000 	.word	0x20000000

08002768 <LOADMAZE_Button>:

void LOADMAZE_Button() {
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
	// TODO: Implement load from flash
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <Systick>:
extern float steering_adjustment;

const uint8_t UPDATE_DELAY_MS = 2;
uint32_t time_last_updated_ms = 0;

void Systick() {
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
	global_time = HAL_GetTick();
 8002778:	f000 fe0c 	bl	8003394 <HAL_GetTick>
 800277c:	4603      	mov	r3, r0
 800277e:	4a1c      	ldr	r2, [pc, #112]	@ (80027f0 <Systick+0x7c>)
 8002780:	6013      	str	r3, [r2, #0]

	Debug_Mode();
 8002782:	f000 f841 	bl	8002808 <Debug_Mode>
	Buzzer_Check();
 8002786:	f000 f87d 	bl	8002884 <Buzzer_Check>

	if (global_time > time_last_updated_ms + UPDATE_DELAY_MS) {
 800278a:	2302      	movs	r3, #2
 800278c:	461a      	mov	r2, r3
 800278e:	4b19      	ldr	r3, [pc, #100]	@ (80027f4 <Systick+0x80>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	441a      	add	r2, r3
 8002794:	4b16      	ldr	r3, [pc, #88]	@ (80027f0 <Systick+0x7c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d226      	bcs.n	80027ea <Systick+0x76>
		// Update distance traveled and angle turned
		Update_Encoders();
 800279c:	f7ff f932 	bl	8001a04 <Update_Encoders>
		// Update forward and rotational profile
		Update_Profile(&forward_profile);
 80027a0:	4815      	ldr	r0, [pc, #84]	@ (80027f8 <Systick+0x84>)
 80027a2:	f7ff fe57 	bl	8002454 <Update_Profile>
		Update_Profile(&rotational_profile);
 80027a6:	4815      	ldr	r0, [pc, #84]	@ (80027fc <Systick+0x88>)
 80027a8:	f7ff fe54 	bl	8002454 <Update_Profile>
		// Update IR sensor readings and check for walls
		Poll_Sensors(&mouse_state);
 80027ac:	4814      	ldr	r0, [pc, #80]	@ (8002800 <Systick+0x8c>)
 80027ae:	f000 f9df 	bl	8002b70 <Poll_Sensors>

		Wall_Front();
 80027b2:	f000 fa05 	bl	8002bc0 <Wall_Front>
		Wall_Left();
 80027b6:	f000 fa39 	bl	8002c2c <Wall_Left>
		Wall_Right();
 80027ba:	f000 fa61 	bl	8002c80 <Wall_Right>

		Calculate_Error();
 80027be:	f000 faed 	bl	8002d9c <Calculate_Error>
		// Update battery voltage
		mouse_state.battery_voltage = Read_Battery();
 80027c2:	f7ff ff71 	bl	80026a8 <Read_Battery>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	490d      	ldr	r1, [pc, #52]	@ (8002800 <Systick+0x8c>)
 80027cc:	e9c1 2306 	strd	r2, r3, [r1, #24]
		// Update motor voltages
		Update_Motors(forward_profile.speed, rotational_profile.speed, steering_adjustment);
 80027d0:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <Systick+0x84>)
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	4a09      	ldr	r2, [pc, #36]	@ (80027fc <Systick+0x88>)
 80027d6:	6951      	ldr	r1, [r2, #20]
 80027d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002804 <Systick+0x90>)
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff fc5b 	bl	8002098 <Update_Motors>

		time_last_updated_ms = global_time;
 80027e2:	4b03      	ldr	r3, [pc, #12]	@ (80027f0 <Systick+0x7c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a03      	ldr	r2, [pc, #12]	@ (80027f4 <Systick+0x80>)
 80027e8:	6013      	str	r3, [r2, #0]
	}
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	200001e4 	.word	0x200001e4
 80027f4:	20000ad0 	.word	0x20000ad0
 80027f8:	20000a20 	.word	0x20000a20
 80027fc:	20000a44 	.word	0x20000a44
 8002800:	200001c0 	.word	0x200001c0
 8002804:	20000adc 	.word	0x20000adc

08002808 <Debug_Mode>:

void Debug_Mode() {
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
	if (debugMode) {
 800280c:	4b17      	ldr	r3, [pc, #92]	@ (800286c <Debug_Mode+0x64>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d029      	beq.n	8002868 <Debug_Mode+0x60>
		debugCounter = (debugCounter + 1) % DEBUG_PERIOD;
 8002814:	4b16      	ldr	r3, [pc, #88]	@ (8002870 <Debug_Mode+0x68>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	3301      	adds	r3, #1
 800281a:	4a16      	ldr	r2, [pc, #88]	@ (8002874 <Debug_Mode+0x6c>)
 800281c:	fb82 1203 	smull	r1, r2, r2, r3
 8002820:	1111      	asrs	r1, r2, #4
 8002822:	17da      	asrs	r2, r3, #31
 8002824:	1a8a      	subs	r2, r1, r2
 8002826:	2132      	movs	r1, #50	@ 0x32
 8002828:	fb01 f202 	mul.w	r2, r1, r2
 800282c:	1a9a      	subs	r2, r3, r2
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	4b0f      	ldr	r3, [pc, #60]	@ (8002870 <Debug_Mode+0x68>)
 8002832:	701a      	strb	r2, [r3, #0]
		if (debugCounter == 0) {
 8002834:	4b0e      	ldr	r3, [pc, #56]	@ (8002870 <Debug_Mode+0x68>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d115      	bne.n	8002868 <Debug_Mode+0x60>
			mouse_state.rpm.left_rpm = Calculate_RPM(objective_L, MOTOR_LEFT);
 800283c:	4b0e      	ldr	r3, [pc, #56]	@ (8002878 <Debug_Mode+0x70>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff f88e 	bl	8001964 <Calculate_RPM>
 8002848:	4603      	mov	r3, r0
 800284a:	461a      	mov	r2, r3
 800284c:	4b0b      	ldr	r3, [pc, #44]	@ (800287c <Debug_Mode+0x74>)
 800284e:	809a      	strh	r2, [r3, #4]
			mouse_state.rpm.right_rpm  = Calculate_RPM(objective_R, MOTOR_RIGHT);
 8002850:	4b0b      	ldr	r3, [pc, #44]	@ (8002880 <Debug_Mode+0x78>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2101      	movs	r1, #1
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff f884 	bl	8001964 <Calculate_RPM>
 800285c:	4603      	mov	r3, r0
 800285e:	461a      	mov	r2, r3
 8002860:	4b06      	ldr	r3, [pc, #24]	@ (800287c <Debug_Mode+0x74>)
 8002862:	80da      	strh	r2, [r3, #6]

			Debug_Packet_Send();
 8002864:	f7ff f80c 	bl	8001880 <Debug_Packet_Send>
		}
	}
}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}
 800286c:	200001e0 	.word	0x200001e0
 8002870:	200001e1 	.word	0x200001e1
 8002874:	51eb851f 	.word	0x51eb851f
 8002878:	200001ec 	.word	0x200001ec
 800287c:	200001c0 	.word	0x200001c0
 8002880:	200001f0 	.word	0x200001f0

08002884 <Buzzer_Check>:

void Buzzer_Check() {
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
	if (buzzerDelay > 0) {
 8002888:	4b0a      	ldr	r3, [pc, #40]	@ (80028b4 <Buzzer_Check+0x30>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d007      	beq.n	80028a2 <Buzzer_Check+0x1e>
		buzzerDelay--;
 8002892:	4b08      	ldr	r3, [pc, #32]	@ (80028b4 <Buzzer_Check+0x30>)
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	4b05      	ldr	r3, [pc, #20]	@ (80028b4 <Buzzer_Check+0x30>)
 800289e:	801a      	strh	r2, [r3, #0]
	}
	else {
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
	}
}
 80028a0:	e005      	b.n	80028ae <Buzzer_Check+0x2a>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80028a2:	2200      	movs	r2, #0
 80028a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028a8:	4803      	ldr	r0, [pc, #12]	@ (80028b8 <Buzzer_Check+0x34>)
 80028aa:	f001 fd3d 	bl	8004328 <HAL_GPIO_WritePin>
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000acc 	.word	0x20000acc
 80028b8:	40010c00 	.word	0x40010c00

080028bc <ADC1_Select_CH9>:

bool adjust_steering = false;
float prev_error = 0;
float steering_adjustment = 0;

static void ADC1_Select_CH9(void) {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_9;
 80028cc:	2309      	movs	r3, #9
 80028ce:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80028d0:	2301      	movs	r3, #1
 80028d2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80028d4:	2301      	movs	r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel (&hadc1, &sConfig) != HAL_OK) {
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	4619      	mov	r1, r3
 80028dc:	4805      	ldr	r0, [pc, #20]	@ (80028f4 <ADC1_Select_CH9+0x38>)
 80028de:	f001 f84b 	bl	8003978 <HAL_ADC_ConfigChannel>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <ADC1_Select_CH9+0x30>
		Error_Handler();
 80028e8:	f7fe ff13 	bl	8001712 <Error_Handler>
	}
}
 80028ec:	bf00      	nop
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	2000003c 	.word	0x2000003c

080028f8 <ADC1_Select_CH8>:

static void ADC1_Select_CH8(void) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_8;
 8002908:	2308      	movs	r3, #8
 800290a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800290c:	2301      	movs	r3, #1
 800290e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8002910:	2301      	movs	r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002914:	1d3b      	adds	r3, r7, #4
 8002916:	4619      	mov	r1, r3
 8002918:	4805      	ldr	r0, [pc, #20]	@ (8002930 <ADC1_Select_CH8+0x38>)
 800291a:	f001 f82d 	bl	8003978 <HAL_ADC_ConfigChannel>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <ADC1_Select_CH8+0x30>
		Error_Handler();
 8002924:	f7fe fef5 	bl	8001712 <Error_Handler>
	}
}
 8002928:	bf00      	nop
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	2000003c 	.word	0x2000003c

08002934 <ADC1_Select_CH5>:

static void ADC1_Select_CH5(void) {
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_5;
 8002944:	2305      	movs	r3, #5
 8002946:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002948:	2301      	movs	r3, #1
 800294a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800294c:	2301      	movs	r3, #1
 800294e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	4619      	mov	r1, r3
 8002954:	4805      	ldr	r0, [pc, #20]	@ (800296c <ADC1_Select_CH5+0x38>)
 8002956:	f001 f80f 	bl	8003978 <HAL_ADC_ConfigChannel>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <ADC1_Select_CH5+0x30>
		Error_Handler();
 8002960:	f7fe fed7 	bl	8001712 <Error_Handler>
	}
}
 8002964:	bf00      	nop
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	2000003c 	.word	0x2000003c

08002970 <ADC1_Select_CH4>:

static void ADC1_Select_CH4(void) {
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8002976:	1d3b      	adds	r3, r7, #4
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_4;
 8002980:	2304      	movs	r3, #4
 8002982:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002984:	2301      	movs	r3, #1
 8002986:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8002988:	2301      	movs	r3, #1
 800298a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel (&hadc1, &sConfig) != HAL_OK) {
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	4619      	mov	r1, r3
 8002990:	4805      	ldr	r0, [pc, #20]	@ (80029a8 <ADC1_Select_CH4+0x38>)
 8002992:	f000 fff1 	bl	8003978 <HAL_ADC_ConfigChannel>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <ADC1_Select_CH4+0x30>
		Error_Handler();
 800299c:	f7fe feb9 	bl	8001712 <Error_Handler>
	}
}
 80029a0:	bf00      	nop
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	2000003c 	.word	0x2000003c

080029ac <Measure_Dist>:

uint16_t Measure_Dist(dist_t dist) { // Poll raw IR sensors
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef* emitter_port;
	uint16_t emitter_pin;

	switch(dist) {
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d82a      	bhi.n	8002a12 <Measure_Dist+0x66>
 80029bc:	a201      	add	r2, pc, #4	@ (adr r2, 80029c4 <Measure_Dist+0x18>)
 80029be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c2:	bf00      	nop
 80029c4:	080029d5 	.word	0x080029d5
 80029c8:	080029e3 	.word	0x080029e3
 80029cc:	080029f3 	.word	0x080029f3
 80029d0:	08002a03 	.word	0x08002a03
	case DIST_FL:
		emitter_port = EMIT_FL_GPIO_Port;
 80029d4:	4b20      	ldr	r3, [pc, #128]	@ (8002a58 <Measure_Dist+0xac>)
 80029d6:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_FL_Pin;
 80029d8:	2320      	movs	r3, #32
 80029da:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH4();
 80029dc:	f7ff ffc8 	bl	8002970 <ADC1_Select_CH4>
		break;
 80029e0:	e018      	b.n	8002a14 <Measure_Dist+0x68>
	case DIST_L:
		emitter_port = EMIT_L_GPIO_Port;
 80029e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a58 <Measure_Dist+0xac>)
 80029e4:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_L_Pin;
 80029e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029ea:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH5();
 80029ec:	f7ff ffa2 	bl	8002934 <ADC1_Select_CH5>
		break;
 80029f0:	e010      	b.n	8002a14 <Measure_Dist+0x68>
	case DIST_R:
		emitter_port = EMIT_R_GPIO_Port;
 80029f2:	4b19      	ldr	r3, [pc, #100]	@ (8002a58 <Measure_Dist+0xac>)
 80029f4:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_R_Pin;
 80029f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80029fa:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH8();
 80029fc:	f7ff ff7c 	bl	80028f8 <ADC1_Select_CH8>
		break;
 8002a00:	e008      	b.n	8002a14 <Measure_Dist+0x68>
	case DIST_FR:
		emitter_port = EMIT_FR_GPIO_Port;
 8002a02:	4b15      	ldr	r3, [pc, #84]	@ (8002a58 <Measure_Dist+0xac>)
 8002a04:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_FR_Pin;
 8002a06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a0a:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH9();
 8002a0c:	f7ff ff56 	bl	80028bc <ADC1_Select_CH9>
		break;
 8002a10:	e000      	b.n	8002a14 <Measure_Dist+0x68>
	default:
		break;
 8002a12:	bf00      	nop
	}
	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_SET);
 8002a14:	897b      	ldrh	r3, [r7, #10]
 8002a16:	2201      	movs	r2, #1
 8002a18:	4619      	mov	r1, r3
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f001 fc84 	bl	8004328 <HAL_GPIO_WritePin>

	HAL_ADC_Start(&hadc1);
 8002a20:	480e      	ldr	r0, [pc, #56]	@ (8002a5c <Measure_Dist+0xb0>)
 8002a22:	f000 fdbd 	bl	80035a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002a26:	f04f 31ff 	mov.w	r1, #4294967295
 8002a2a:	480c      	ldr	r0, [pc, #48]	@ (8002a5c <Measure_Dist+0xb0>)
 8002a2c:	f000 fe92 	bl	8003754 <HAL_ADC_PollForConversion>
	uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 8002a30:	480a      	ldr	r0, [pc, #40]	@ (8002a5c <Measure_Dist+0xb0>)
 8002a32:	f000 ff95 	bl	8003960 <HAL_ADC_GetValue>
 8002a36:	4603      	mov	r3, r0
 8002a38:	813b      	strh	r3, [r7, #8]
	HAL_ADC_Stop(&hadc1);
 8002a3a:	4808      	ldr	r0, [pc, #32]	@ (8002a5c <Measure_Dist+0xb0>)
 8002a3c:	f000 fe5e 	bl	80036fc <HAL_ADC_Stop>

	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_RESET);
 8002a40:	897b      	ldrh	r3, [r7, #10]
 8002a42:	2200      	movs	r2, #0
 8002a44:	4619      	mov	r1, r3
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f001 fc6e 	bl	8004328 <HAL_GPIO_WritePin>

	return adc_val;
 8002a4c:	893b      	ldrh	r3, [r7, #8]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40010c00 	.word	0x40010c00
 8002a5c:	2000003c 	.word	0x2000003c

08002a60 <Calibrate_Readings>:

void Calibrate_Readings(mouse_state_t* mouse_state) { // Normalize raw IR values
 8002a60:	b590      	push	{r4, r7, lr}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	mouse_state->cal.front_left  = 200 * ((float)mouse_state->raw.front_left / (float)translation_FL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	891b      	ldrh	r3, [r3, #8]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fe f86b 	bl	8000b48 <__aeabi_ui2f>
 8002a72:	4604      	mov	r4, r0
 8002a74:	4b38      	ldr	r3, [pc, #224]	@ (8002b58 <Calibrate_Readings+0xf8>)
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe f865 	bl	8000b48 <__aeabi_ui2f>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4619      	mov	r1, r3
 8002a82:	4620      	mov	r0, r4
 8002a84:	f7fe f96c 	bl	8000d60 <__aeabi_fdiv>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4934      	ldr	r1, [pc, #208]	@ (8002b5c <Calibrate_Readings+0xfc>)
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe f8b3 	bl	8000bf8 <__aeabi_fmul>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fe fa75 	bl	8000f84 <__aeabi_f2uiz>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	821a      	strh	r2, [r3, #16]
	mouse_state->cal.left        = 100 * ((float)mouse_state->raw.left / (float)translation_L);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	895b      	ldrh	r3, [r3, #10]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe f84e 	bl	8000b48 <__aeabi_ui2f>
 8002aac:	4604      	mov	r4, r0
 8002aae:	4b2c      	ldr	r3, [pc, #176]	@ (8002b60 <Calibrate_Readings+0x100>)
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe f848 	bl	8000b48 <__aeabi_ui2f>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4619      	mov	r1, r3
 8002abc:	4620      	mov	r0, r4
 8002abe:	f7fe f94f 	bl	8000d60 <__aeabi_fdiv>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4927      	ldr	r1, [pc, #156]	@ (8002b64 <Calibrate_Readings+0x104>)
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe f896 	bl	8000bf8 <__aeabi_fmul>
 8002acc:	4603      	mov	r3, r0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe fa58 	bl	8000f84 <__aeabi_f2uiz>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	825a      	strh	r2, [r3, #18]
	mouse_state->cal.right       = 100 * ((float)mouse_state->raw.right / (float)translation_R);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	899b      	ldrh	r3, [r3, #12]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fe f831 	bl	8000b48 <__aeabi_ui2f>
 8002ae6:	4604      	mov	r4, r0
 8002ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b68 <Calibrate_Readings+0x108>)
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fe f82b 	bl	8000b48 <__aeabi_ui2f>
 8002af2:	4603      	mov	r3, r0
 8002af4:	4619      	mov	r1, r3
 8002af6:	4620      	mov	r0, r4
 8002af8:	f7fe f932 	bl	8000d60 <__aeabi_fdiv>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4919      	ldr	r1, [pc, #100]	@ (8002b64 <Calibrate_Readings+0x104>)
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fe f879 	bl	8000bf8 <__aeabi_fmul>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fe fa3b 	bl	8000f84 <__aeabi_f2uiz>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	829a      	strh	r2, [r3, #20]
	mouse_state->cal.front_right = 200 * ((float)mouse_state->raw.front_right / (float)translation_FR);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	89db      	ldrh	r3, [r3, #14]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe f814 	bl	8000b48 <__aeabi_ui2f>
 8002b20:	4604      	mov	r4, r0
 8002b22:	4b12      	ldr	r3, [pc, #72]	@ (8002b6c <Calibrate_Readings+0x10c>)
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fe f80e 	bl	8000b48 <__aeabi_ui2f>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4620      	mov	r0, r4
 8002b32:	f7fe f915 	bl	8000d60 <__aeabi_fdiv>
 8002b36:	4603      	mov	r3, r0
 8002b38:	4908      	ldr	r1, [pc, #32]	@ (8002b5c <Calibrate_Readings+0xfc>)
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe f85c 	bl	8000bf8 <__aeabi_fmul>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe fa1e 	bl	8000f84 <__aeabi_f2uiz>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	82da      	strh	r2, [r3, #22]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd90      	pop	{r4, r7, pc}
 8002b58:	20000004 	.word	0x20000004
 8002b5c:	43480000 	.word	0x43480000
 8002b60:	20000006 	.word	0x20000006
 8002b64:	42c80000 	.word	0x42c80000
 8002b68:	20000008 	.word	0x20000008
 8002b6c:	2000000a 	.word	0x2000000a

08002b70 <Poll_Sensors>:

void Poll_Sensors(mouse_state_t* mouse_state){ // Gather all raw IR values
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	mouse_state->raw.front_left = Measure_Dist(DIST_FL);
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7ff ff17 	bl	80029ac <Measure_Dist>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	461a      	mov	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	811a      	strh	r2, [r3, #8]
	mouse_state->raw.left = Measure_Dist(DIST_L);
 8002b86:	2001      	movs	r0, #1
 8002b88:	f7ff ff10 	bl	80029ac <Measure_Dist>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	461a      	mov	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	815a      	strh	r2, [r3, #10]
	mouse_state->raw.right = Measure_Dist(DIST_R);
 8002b94:	2002      	movs	r0, #2
 8002b96:	f7ff ff09 	bl	80029ac <Measure_Dist>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	819a      	strh	r2, [r3, #12]
	mouse_state->raw.front_right = Measure_Dist(DIST_FR);
 8002ba2:	2003      	movs	r0, #3
 8002ba4:	f7ff ff02 	bl	80029ac <Measure_Dist>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	461a      	mov	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	81da      	strh	r2, [r3, #14]

	Calibrate_Readings(mouse_state);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff ff55 	bl	8002a60 <Calibrate_Readings>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <Wall_Front>:

bool Wall_Front() {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
	Poll_Sensors(&mouse_state);
 8002bc6:	4815      	ldr	r0, [pc, #84]	@ (8002c1c <Wall_Front+0x5c>)
 8002bc8:	f7ff ffd2 	bl	8002b70 <Poll_Sensors>
	uint16_t front_avg = (mouse_state.cal.front_left + mouse_state.cal.front_right) / 2;
 8002bcc:	4b13      	ldr	r3, [pc, #76]	@ (8002c1c <Wall_Front+0x5c>)
 8002bce:	8a1b      	ldrh	r3, [r3, #16]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b12      	ldr	r3, [pc, #72]	@ (8002c1c <Wall_Front+0x5c>)
 8002bd4:	8adb      	ldrh	r3, [r3, #22]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	0fda      	lsrs	r2, r3, #31
 8002bda:	4413      	add	r3, r2
 8002bdc:	105b      	asrs	r3, r3, #1
 8002bde:	80fb      	strh	r3, [r7, #6]
	if (front_avg > wall_front_thresh) {
 8002be0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c20 <Wall_Front+0x60>)
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	88fa      	ldrh	r2, [r7, #6]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d909      	bls.n	8002bfe <Wall_Front+0x3e>
		wall_front = true;
 8002bea:	4b0e      	ldr	r3, [pc, #56]	@ (8002c24 <Wall_Front+0x64>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002bf6:	480c      	ldr	r0, [pc, #48]	@ (8002c28 <Wall_Front+0x68>)
 8002bf8:	f001 fb96 	bl	8004328 <HAL_GPIO_WritePin>
 8002bfc:	e008      	b.n	8002c10 <Wall_Front+0x50>

	}
	else {
		wall_front = false;
 8002bfe:	4b09      	ldr	r3, [pc, #36]	@ (8002c24 <Wall_Front+0x64>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 8002c04:	2201      	movs	r2, #1
 8002c06:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c0a:	4807      	ldr	r0, [pc, #28]	@ (8002c28 <Wall_Front+0x68>)
 8002c0c:	f001 fb8c 	bl	8004328 <HAL_GPIO_WritePin>
	}
	return wall_front;
 8002c10:	4b04      	ldr	r3, [pc, #16]	@ (8002c24 <Wall_Front+0x64>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	200001c0 	.word	0x200001c0
 8002c20:	2000000c 	.word	0x2000000c
 8002c24:	20000ad4 	.word	0x20000ad4
 8002c28:	40010800 	.word	0x40010800

08002c2c <Wall_Left>:

bool Wall_Left() {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
	Poll_Sensors(&mouse_state);
 8002c30:	480f      	ldr	r0, [pc, #60]	@ (8002c70 <Wall_Left+0x44>)
 8002c32:	f7ff ff9d 	bl	8002b70 <Poll_Sensors>
	if (mouse_state.cal.left > wall_left_thresh) {
 8002c36:	4b0e      	ldr	r3, [pc, #56]	@ (8002c70 <Wall_Left+0x44>)
 8002c38:	8a5a      	ldrh	r2, [r3, #18]
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c74 <Wall_Left+0x48>)
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d909      	bls.n	8002c56 <Wall_Left+0x2a>
		wall_left = true;
 8002c42:	4b0d      	ldr	r3, [pc, #52]	@ (8002c78 <Wall_Left+0x4c>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002c4e:	480b      	ldr	r0, [pc, #44]	@ (8002c7c <Wall_Left+0x50>)
 8002c50:	f001 fb6a 	bl	8004328 <HAL_GPIO_WritePin>
 8002c54:	e008      	b.n	8002c68 <Wall_Left+0x3c>
	}
	else {
		wall_left = false;
 8002c56:	4b08      	ldr	r3, [pc, #32]	@ (8002c78 <Wall_Left+0x4c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002c62:	4806      	ldr	r0, [pc, #24]	@ (8002c7c <Wall_Left+0x50>)
 8002c64:	f001 fb60 	bl	8004328 <HAL_GPIO_WritePin>
	}
	return wall_left;
 8002c68:	4b03      	ldr	r3, [pc, #12]	@ (8002c78 <Wall_Left+0x4c>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	200001c0 	.word	0x200001c0
 8002c74:	2000000e 	.word	0x2000000e
 8002c78:	20000ad5 	.word	0x20000ad5
 8002c7c:	40010800 	.word	0x40010800

08002c80 <Wall_Right>:

bool Wall_Right() {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
	Poll_Sensors(&mouse_state);
 8002c84:	480f      	ldr	r0, [pc, #60]	@ (8002cc4 <Wall_Right+0x44>)
 8002c86:	f7ff ff73 	bl	8002b70 <Poll_Sensors>
	if (mouse_state.cal.right > wall_right_thresh) {
 8002c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc4 <Wall_Right+0x44>)
 8002c8c:	8a9a      	ldrh	r2, [r3, #20]
 8002c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc8 <Wall_Right+0x48>)
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d909      	bls.n	8002caa <Wall_Right+0x2a>
		wall_right = true;
 8002c96:	4b0d      	ldr	r3, [pc, #52]	@ (8002ccc <Wall_Right+0x4c>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ca2:	480b      	ldr	r0, [pc, #44]	@ (8002cd0 <Wall_Right+0x50>)
 8002ca4:	f001 fb40 	bl	8004328 <HAL_GPIO_WritePin>
 8002ca8:	e008      	b.n	8002cbc <Wall_Right+0x3c>

	}
	else {
		wall_right = false;
 8002caa:	4b08      	ldr	r3, [pc, #32]	@ (8002ccc <Wall_Right+0x4c>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002cb6:	4806      	ldr	r0, [pc, #24]	@ (8002cd0 <Wall_Right+0x50>)
 8002cb8:	f001 fb36 	bl	8004328 <HAL_GPIO_WritePin>
	}
	return wall_right;
 8002cbc:	4b03      	ldr	r3, [pc, #12]	@ (8002ccc <Wall_Right+0x4c>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	200001c0 	.word	0x200001c0
 8002cc8:	20000010 	.word	0x20000010
 8002ccc:	20000ad6 	.word	0x20000ad6
 8002cd0:	40010800 	.word	0x40010800

08002cd4 <Calculate_Steering_Adjustment>:

void Calculate_Steering_Adjustment(int error) {
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
	float adjustment = IR_KP * error - IR_KD * (error - prev_error) * SYSTICK_FREQUENCY;
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7fd ff37 	bl	8000b50 <__aeabi_i2f>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4a28      	ldr	r2, [pc, #160]	@ (8002d88 <Calculate_Steering_Adjustment+0xb4>)
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd ff85 	bl	8000bf8 <__aeabi_fmul>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	461c      	mov	r4, r3
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fd ff2c 	bl	8000b50 <__aeabi_i2f>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	4b24      	ldr	r3, [pc, #144]	@ (8002d8c <Calculate_Steering_Adjustment+0xb8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4610      	mov	r0, r2
 8002d02:	f7fd fe6f 	bl	80009e4 <__aeabi_fsub>
 8002d06:	4603      	mov	r3, r0
 8002d08:	461a      	mov	r2, r3
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4610      	mov	r0, r2
 8002d12:	f7fd ff71 	bl	8000bf8 <__aeabi_fmul>
 8002d16:	4603      	mov	r3, r0
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002d90 <Calculate_Steering_Adjustment+0xbc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4610      	mov	r0, r2
 8002d22:	f7fd ff69 	bl	8000bf8 <__aeabi_fmul>
 8002d26:	4603      	mov	r3, r0
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f7fd fe5a 	bl	80009e4 <__aeabi_fsub>
 8002d30:	4603      	mov	r3, r0
 8002d32:	60fb      	str	r3, [r7, #12]
	prev_error = error;
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7fd ff0b 	bl	8000b50 <__aeabi_i2f>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4a13      	ldr	r2, [pc, #76]	@ (8002d8c <Calculate_Steering_Adjustment+0xb8>)
 8002d3e:	6013      	str	r3, [r2, #0]

	adjustment = adjustment > STEERING_ADJUSTMENT_LIMIT ? STEERING_ADJUSTMENT_LIMIT: adjustment;
 8002d40:	4b14      	ldr	r3, [pc, #80]	@ (8002d94 <Calculate_Steering_Adjustment+0xc0>)
 8002d42:	4619      	mov	r1, r3
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f7fe f913 	bl	8000f70 <__aeabi_fcmpgt>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <Calculate_Steering_Adjustment+0x80>
 8002d50:	4b10      	ldr	r3, [pc, #64]	@ (8002d94 <Calculate_Steering_Adjustment+0xc0>)
 8002d52:	e000      	b.n	8002d56 <Calculate_Steering_Adjustment+0x82>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	60fb      	str	r3, [r7, #12]
	adjustment = adjustment < -STEERING_ADJUSTMENT_LIMIT ? -STEERING_ADJUSTMENT_LIMIT: adjustment;
 8002d58:	4b0e      	ldr	r3, [pc, #56]	@ (8002d94 <Calculate_Steering_Adjustment+0xc0>)
 8002d5a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002d5e:	4619      	mov	r1, r3
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f7fe f8e7 	bl	8000f34 <__aeabi_fcmplt>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <Calculate_Steering_Adjustment+0xa0>
 8002d6c:	4b09      	ldr	r3, [pc, #36]	@ (8002d94 <Calculate_Steering_Adjustment+0xc0>)
 8002d6e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002d72:	e000      	b.n	8002d76 <Calculate_Steering_Adjustment+0xa2>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	60fb      	str	r3, [r7, #12]

	steering_adjustment = adjustment;
 8002d78:	4a07      	ldr	r2, [pc, #28]	@ (8002d98 <Calculate_Steering_Adjustment+0xc4>)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6013      	str	r3, [r2, #0]
}
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd90      	pop	{r4, r7, pc}
 8002d86:	bf00      	nop
 8002d88:	3a83126f 	.word	0x3a83126f
 8002d8c:	20000ad8 	.word	0x20000ad8
 8002d90:	08006bc4 	.word	0x08006bc4
 8002d94:	40a00000 	.word	0x40a00000
 8002d98:	20000adc 	.word	0x20000adc

08002d9c <Calculate_Error>:

void Calculate_Error() {
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
	int error = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
	int right_error = 100 - mouse_state.cal.right;
 8002da6:	4b21      	ldr	r3, [pc, #132]	@ (8002e2c <Calculate_Error+0x90>)
 8002da8:	8a9b      	ldrh	r3, [r3, #20]
 8002daa:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8002dae:	60bb      	str	r3, [r7, #8]
	int left_error = 100 - mouse_state.cal.left;
 8002db0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e2c <Calculate_Error+0x90>)
 8002db2:	8a5b      	ldrh	r3, [r3, #18]
 8002db4:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8002db8:	607b      	str	r3, [r7, #4]

	if (adjust_steering) {
 8002dba:	4b1d      	ldr	r3, [pc, #116]	@ (8002e30 <Calculate_Error+0x94>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d01e      	beq.n	8002e00 <Calculate_Error+0x64>
		if (wall_left && wall_right) {
 8002dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e34 <Calculate_Error+0x98>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d008      	beq.n	8002ddc <Calculate_Error+0x40>
 8002dca:	4b1b      	ldr	r3, [pc, #108]	@ (8002e38 <Calculate_Error+0x9c>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d004      	beq.n	8002ddc <Calculate_Error+0x40>
			error = left_error - right_error;
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	e011      	b.n	8002e00 <Calculate_Error+0x64>
		}
		else if (wall_left) {
 8002ddc:	4b15      	ldr	r3, [pc, #84]	@ (8002e34 <Calculate_Error+0x98>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d006      	beq.n	8002df2 <Calculate_Error+0x56>
			error = -2 * left_error;
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	07db      	lsls	r3, r3, #31
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	e006      	b.n	8002e00 <Calculate_Error+0x64>
		}
		else if (wall_right) {
 8002df2:	4b11      	ldr	r3, [pc, #68]	@ (8002e38 <Calculate_Error+0x9c>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <Calculate_Error+0x64>
			error = 2 * right_error;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	60fb      	str	r3, [r7, #12]
		}
	}

	if (((mouse_state.cal.front_left + mouse_state.cal.front_right) / 2) > FRONT_WALL_LIMIT) {
 8002e00:	4b0a      	ldr	r3, [pc, #40]	@ (8002e2c <Calculate_Error+0x90>)
 8002e02:	8a1b      	ldrh	r3, [r3, #16]
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b09      	ldr	r3, [pc, #36]	@ (8002e2c <Calculate_Error+0x90>)
 8002e08:	8adb      	ldrh	r3, [r3, #22]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	0fda      	lsrs	r2, r3, #31
 8002e0e:	4413      	add	r3, r2
 8002e10:	105b      	asrs	r3, r3, #1
 8002e12:	461a      	mov	r2, r3
 8002e14:	2364      	movs	r3, #100	@ 0x64
 8002e16:	429a      	cmp	r2, r3
 8002e18:	dd01      	ble.n	8002e1e <Calculate_Error+0x82>
		error = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
	}

	Calculate_Steering_Adjustment(error);
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f7ff ff58 	bl	8002cd4 <Calculate_Steering_Adjustment>
}
 8002e24:	bf00      	nop
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	200001c0 	.word	0x200001c0
 8002e30:	20000ad7 	.word	0x20000ad7
 8002e34:	20000ad5 	.word	0x20000ad5
 8002e38:	20000ad6 	.word	0x20000ad6

08002e3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e42:	4b15      	ldr	r3, [pc, #84]	@ (8002e98 <HAL_MspInit+0x5c>)
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	4a14      	ldr	r2, [pc, #80]	@ (8002e98 <HAL_MspInit+0x5c>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	6193      	str	r3, [r2, #24]
 8002e4e:	4b12      	ldr	r3, [pc, #72]	@ (8002e98 <HAL_MspInit+0x5c>)
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e98 <HAL_MspInit+0x5c>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8002e98 <HAL_MspInit+0x5c>)
 8002e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e64:	61d3      	str	r3, [r2, #28]
 8002e66:	4b0c      	ldr	r3, [pc, #48]	@ (8002e98 <HAL_MspInit+0x5c>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6e:	607b      	str	r3, [r7, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e72:	4b0a      	ldr	r3, [pc, #40]	@ (8002e9c <HAL_MspInit+0x60>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	4a04      	ldr	r2, [pc, #16]	@ (8002e9c <HAL_MspInit+0x60>)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40010000 	.word	0x40010000

08002ea0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08c      	sub	sp, #48	@ 0x30
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea8:	f107 0320 	add.w	r3, r7, #32
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a33      	ldr	r2, [pc, #204]	@ (8002f88 <HAL_ADC_MspInit+0xe8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d138      	bne.n	8002f32 <HAL_ADC_MspInit+0x92>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ec0:	4b32      	ldr	r3, [pc, #200]	@ (8002f8c <HAL_ADC_MspInit+0xec>)
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	4a31      	ldr	r2, [pc, #196]	@ (8002f8c <HAL_ADC_MspInit+0xec>)
 8002ec6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002eca:	6193      	str	r3, [r2, #24]
 8002ecc:	4b2f      	ldr	r3, [pc, #188]	@ (8002f8c <HAL_ADC_MspInit+0xec>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed8:	4b2c      	ldr	r3, [pc, #176]	@ (8002f8c <HAL_ADC_MspInit+0xec>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	4a2b      	ldr	r2, [pc, #172]	@ (8002f8c <HAL_ADC_MspInit+0xec>)
 8002ede:	f043 0304 	orr.w	r3, r3, #4
 8002ee2:	6193      	str	r3, [r2, #24]
 8002ee4:	4b29      	ldr	r3, [pc, #164]	@ (8002f8c <HAL_ADC_MspInit+0xec>)
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef0:	4b26      	ldr	r3, [pc, #152]	@ (8002f8c <HAL_ADC_MspInit+0xec>)
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	4a25      	ldr	r2, [pc, #148]	@ (8002f8c <HAL_ADC_MspInit+0xec>)
 8002ef6:	f043 0308 	orr.w	r3, r3, #8
 8002efa:	6193      	str	r3, [r2, #24]
 8002efc:	4b23      	ldr	r3, [pc, #140]	@ (8002f8c <HAL_ADC_MspInit+0xec>)
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	697b      	ldr	r3, [r7, #20]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RECIV_FL_Pin|RECIV_L_Pin;
 8002f08:	2330      	movs	r3, #48	@ 0x30
 8002f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f10:	f107 0320 	add.w	r3, r7, #32
 8002f14:	4619      	mov	r1, r3
 8002f16:	481e      	ldr	r0, [pc, #120]	@ (8002f90 <HAL_ADC_MspInit+0xf0>)
 8002f18:	f001 f882 	bl	8004020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RECIV_R_Pin|RECIV_FR_Pin;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f20:	2303      	movs	r3, #3
 8002f22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f24:	f107 0320 	add.w	r3, r7, #32
 8002f28:	4619      	mov	r1, r3
 8002f2a:	481a      	ldr	r0, [pc, #104]	@ (8002f94 <HAL_ADC_MspInit+0xf4>)
 8002f2c:	f001 f878 	bl	8004020 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002f30:	e026      	b.n	8002f80 <HAL_ADC_MspInit+0xe0>
  else if(hadc->Instance==ADC2)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a18      	ldr	r2, [pc, #96]	@ (8002f98 <HAL_ADC_MspInit+0xf8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d121      	bne.n	8002f80 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002f3c:	4b13      	ldr	r3, [pc, #76]	@ (8002f8c <HAL_ADC_MspInit+0xec>)
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	4a12      	ldr	r2, [pc, #72]	@ (8002f8c <HAL_ADC_MspInit+0xec>)
 8002f42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f46:	6193      	str	r3, [r2, #24]
 8002f48:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <HAL_ADC_MspInit+0xec>)
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f54:	4b0d      	ldr	r3, [pc, #52]	@ (8002f8c <HAL_ADC_MspInit+0xec>)
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	4a0c      	ldr	r2, [pc, #48]	@ (8002f8c <HAL_ADC_MspInit+0xec>)
 8002f5a:	f043 0304 	orr.w	r3, r3, #4
 8002f5e:	6193      	str	r3, [r2, #24]
 8002f60:	4b0a      	ldr	r3, [pc, #40]	@ (8002f8c <HAL_ADC_MspInit+0xec>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_METER_Pin;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f70:	2303      	movs	r3, #3
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(V_METER_GPIO_Port, &GPIO_InitStruct);
 8002f74:	f107 0320 	add.w	r3, r7, #32
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4805      	ldr	r0, [pc, #20]	@ (8002f90 <HAL_ADC_MspInit+0xf0>)
 8002f7c:	f001 f850 	bl	8004020 <HAL_GPIO_Init>
}
 8002f80:	bf00      	nop
 8002f82:	3730      	adds	r7, #48	@ 0x30
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40012400 	.word	0x40012400
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40010800 	.word	0x40010800
 8002f94:	40010c00 	.word	0x40010c00
 8002f98:	40012800 	.word	0x40012800

08002f9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fac:	d10b      	bne.n	8002fc6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fae:	4b08      	ldr	r3, [pc, #32]	@ (8002fd0 <HAL_TIM_Base_MspInit+0x34>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	4a07      	ldr	r2, [pc, #28]	@ (8002fd0 <HAL_TIM_Base_MspInit+0x34>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	61d3      	str	r3, [r2, #28]
 8002fba:	4b05      	ldr	r3, [pc, #20]	@ (8002fd0 <HAL_TIM_Base_MspInit+0x34>)
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002fc6:	bf00      	nop
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	40021000 	.word	0x40021000

08002fd4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	@ 0x28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fdc:	f107 0318 	add.w	r3, r7, #24
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a32      	ldr	r2, [pc, #200]	@ (80030b8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d12c      	bne.n	800304e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ff4:	4b31      	ldr	r3, [pc, #196]	@ (80030bc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	4a30      	ldr	r2, [pc, #192]	@ (80030bc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002ffa:	f043 0302 	orr.w	r3, r3, #2
 8002ffe:	61d3      	str	r3, [r2, #28]
 8003000:	4b2e      	ldr	r3, [pc, #184]	@ (80030bc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800300c:	4b2b      	ldr	r3, [pc, #172]	@ (80030bc <HAL_TIM_Encoder_MspInit+0xe8>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	4a2a      	ldr	r2, [pc, #168]	@ (80030bc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003012:	f043 0304 	orr.w	r3, r3, #4
 8003016:	6193      	str	r3, [r2, #24]
 8003018:	4b28      	ldr	r3, [pc, #160]	@ (80030bc <HAL_TIM_Encoder_MspInit+0xe8>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ML_ENC_A_Pin|ML_ENC_B_Pin;
 8003024:	23c0      	movs	r3, #192	@ 0xc0
 8003026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003028:	2300      	movs	r3, #0
 800302a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302c:	2300      	movs	r3, #0
 800302e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003030:	f107 0318 	add.w	r3, r7, #24
 8003034:	4619      	mov	r1, r3
 8003036:	4822      	ldr	r0, [pc, #136]	@ (80030c0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003038:	f000 fff2 	bl	8004020 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800303c:	2200      	movs	r2, #0
 800303e:	2100      	movs	r1, #0
 8003040:	201d      	movs	r0, #29
 8003042:	f000 ff04 	bl	8003e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003046:	201d      	movs	r0, #29
 8003048:	f000 ff1d 	bl	8003e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800304c:	e030      	b.n	80030b0 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1c      	ldr	r2, [pc, #112]	@ (80030c4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d12b      	bne.n	80030b0 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003058:	4b18      	ldr	r3, [pc, #96]	@ (80030bc <HAL_TIM_Encoder_MspInit+0xe8>)
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	4a17      	ldr	r2, [pc, #92]	@ (80030bc <HAL_TIM_Encoder_MspInit+0xe8>)
 800305e:	f043 0304 	orr.w	r3, r3, #4
 8003062:	61d3      	str	r3, [r2, #28]
 8003064:	4b15      	ldr	r3, [pc, #84]	@ (80030bc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003070:	4b12      	ldr	r3, [pc, #72]	@ (80030bc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	4a11      	ldr	r2, [pc, #68]	@ (80030bc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003076:	f043 0308 	orr.w	r3, r3, #8
 800307a:	6193      	str	r3, [r2, #24]
 800307c:	4b0f      	ldr	r3, [pc, #60]	@ (80030bc <HAL_TIM_Encoder_MspInit+0xe8>)
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MR_ENC_B_Pin|MR_ENC_A_Pin;
 8003088:	23c0      	movs	r3, #192	@ 0xc0
 800308a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800308c:	2300      	movs	r3, #0
 800308e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003090:	2300      	movs	r3, #0
 8003092:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003094:	f107 0318 	add.w	r3, r7, #24
 8003098:	4619      	mov	r1, r3
 800309a:	480b      	ldr	r0, [pc, #44]	@ (80030c8 <HAL_TIM_Encoder_MspInit+0xf4>)
 800309c:	f000 ffc0 	bl	8004020 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80030a0:	2200      	movs	r2, #0
 80030a2:	2100      	movs	r1, #0
 80030a4:	201e      	movs	r0, #30
 80030a6:	f000 fed2 	bl	8003e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80030aa:	201e      	movs	r0, #30
 80030ac:	f000 feeb 	bl	8003e86 <HAL_NVIC_EnableIRQ>
}
 80030b0:	bf00      	nop
 80030b2:	3728      	adds	r7, #40	@ 0x28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40000400 	.word	0x40000400
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40010800 	.word	0x40010800
 80030c4:	40000800 	.word	0x40000800
 80030c8:	40010c00 	.word	0x40010c00

080030cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d4:	f107 0310 	add.w	r3, r7, #16
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ea:	d117      	bne.n	800311c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003124 <HAL_TIM_MspPostInit+0x58>)
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	4a0c      	ldr	r2, [pc, #48]	@ (8003124 <HAL_TIM_MspPostInit+0x58>)
 80030f2:	f043 0304 	orr.w	r3, r3, #4
 80030f6:	6193      	str	r3, [r2, #24]
 80030f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003124 <HAL_TIM_MspPostInit+0x58>)
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ML_PWM_Pin|MR_PWM_Pin;
 8003104:	230c      	movs	r3, #12
 8003106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003108:	2302      	movs	r3, #2
 800310a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310c:	2302      	movs	r3, #2
 800310e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003110:	f107 0310 	add.w	r3, r7, #16
 8003114:	4619      	mov	r1, r3
 8003116:	4804      	ldr	r0, [pc, #16]	@ (8003128 <HAL_TIM_MspPostInit+0x5c>)
 8003118:	f000 ff82 	bl	8004020 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800311c:	bf00      	nop
 800311e:	3720      	adds	r7, #32
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000
 8003128:	40010800 	.word	0x40010800

0800312c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003134:	f107 0310 	add.w	r3, r7, #16
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a20      	ldr	r2, [pc, #128]	@ (80031c8 <HAL_UART_MspInit+0x9c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d139      	bne.n	80031c0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800314c:	4b1f      	ldr	r3, [pc, #124]	@ (80031cc <HAL_UART_MspInit+0xa0>)
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	4a1e      	ldr	r2, [pc, #120]	@ (80031cc <HAL_UART_MspInit+0xa0>)
 8003152:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003156:	6193      	str	r3, [r2, #24]
 8003158:	4b1c      	ldr	r3, [pc, #112]	@ (80031cc <HAL_UART_MspInit+0xa0>)
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003164:	4b19      	ldr	r3, [pc, #100]	@ (80031cc <HAL_UART_MspInit+0xa0>)
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	4a18      	ldr	r2, [pc, #96]	@ (80031cc <HAL_UART_MspInit+0xa0>)
 800316a:	f043 0304 	orr.w	r3, r3, #4
 800316e:	6193      	str	r3, [r2, #24]
 8003170:	4b16      	ldr	r3, [pc, #88]	@ (80031cc <HAL_UART_MspInit+0xa0>)
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800317c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003180:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003182:	2302      	movs	r3, #2
 8003184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003186:	2303      	movs	r3, #3
 8003188:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318a:	f107 0310 	add.w	r3, r7, #16
 800318e:	4619      	mov	r1, r3
 8003190:	480f      	ldr	r0, [pc, #60]	@ (80031d0 <HAL_UART_MspInit+0xa4>)
 8003192:	f000 ff45 	bl	8004020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003196:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800319a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a4:	f107 0310 	add.w	r3, r7, #16
 80031a8:	4619      	mov	r1, r3
 80031aa:	4809      	ldr	r0, [pc, #36]	@ (80031d0 <HAL_UART_MspInit+0xa4>)
 80031ac:	f000 ff38 	bl	8004020 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80031b0:	2200      	movs	r2, #0
 80031b2:	2100      	movs	r1, #0
 80031b4:	2025      	movs	r0, #37	@ 0x25
 80031b6:	f000 fe4a 	bl	8003e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031ba:	2025      	movs	r0, #37	@ 0x25
 80031bc:	f000 fe63 	bl	8003e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80031c0:	bf00      	nop
 80031c2:	3720      	adds	r7, #32
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40013800 	.word	0x40013800
 80031cc:	40021000 	.word	0x40021000
 80031d0:	40010800 	.word	0x40010800

080031d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031d8:	bf00      	nop
 80031da:	e7fd      	b.n	80031d8 <NMI_Handler+0x4>

080031dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031e0:	bf00      	nop
 80031e2:	e7fd      	b.n	80031e0 <HardFault_Handler+0x4>

080031e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031e8:	bf00      	nop
 80031ea:	e7fd      	b.n	80031e8 <MemManage_Handler+0x4>

080031ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031f0:	bf00      	nop
 80031f2:	e7fd      	b.n	80031f0 <BusFault_Handler+0x4>

080031f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031f8:	bf00      	nop
 80031fa:	e7fd      	b.n	80031f8 <UsageFault_Handler+0x4>

080031fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003200:	bf00      	nop
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003224:	f000 f8a4 	bl	8003370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Systick();
 8003228:	f7ff faa4 	bl	8002774 <Systick>
  /* USER CODE END SysTick_IRQn 1 */
}
 800322c:	bf00      	nop
 800322e:	bd80      	pop	{r7, pc}

08003230 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ARM_SW1_Pin);
 8003234:	2010      	movs	r0, #16
 8003236:	f001 f8a9 	bl	800438c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003244:	4802      	ldr	r0, [pc, #8]	@ (8003250 <TIM3_IRQHandler+0x10>)
 8003246:	f002 f8cf 	bl	80053e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	200000e4 	.word	0x200000e4

08003254 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003258:	4802      	ldr	r0, [pc, #8]	@ (8003264 <TIM4_IRQHandler+0x10>)
 800325a:	f002 f8c5 	bl	80053e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	2000012c 	.word	0x2000012c

08003268 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800326c:	4802      	ldr	r0, [pc, #8]	@ (8003278 <USART1_IRQHandler+0x10>)
 800326e:	f002 ff23 	bl	80060b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003272:	bf00      	nop
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000174 	.word	0x20000174

0800327c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RACE_SW2_Pin);
 8003280:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003284:	f001 f882 	bl	800438c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003288:	bf00      	nop
 800328a:	bd80      	pop	{r7, pc}

0800328c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003298:	f7ff fff8 	bl	800328c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800329c:	480b      	ldr	r0, [pc, #44]	@ (80032cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800329e:	490c      	ldr	r1, [pc, #48]	@ (80032d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80032a0:	4a0c      	ldr	r2, [pc, #48]	@ (80032d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80032a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032a4:	e002      	b.n	80032ac <LoopCopyDataInit>

080032a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032aa:	3304      	adds	r3, #4

080032ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032b0:	d3f9      	bcc.n	80032a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032b2:	4a09      	ldr	r2, [pc, #36]	@ (80032d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80032b4:	4c09      	ldr	r4, [pc, #36]	@ (80032dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032b8:	e001      	b.n	80032be <LoopFillZerobss>

080032ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032bc:	3204      	adds	r2, #4

080032be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032c0:	d3fb      	bcc.n	80032ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032c2:	f003 fc13 	bl	8006aec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032c6:	f7fd fe7d 	bl	8000fc4 <main>
  bx lr
 80032ca:	4770      	bx	lr
  ldr r0, =_sdata
 80032cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032d0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80032d4:	08006c14 	.word	0x08006c14
  ldr r2, =_sbss
 80032d8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80032dc:	20000ae4 	.word	0x20000ae4

080032e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032e0:	e7fe      	b.n	80032e0 <ADC1_2_IRQHandler>
	...

080032e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032e8:	4b08      	ldr	r3, [pc, #32]	@ (800330c <HAL_Init+0x28>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a07      	ldr	r2, [pc, #28]	@ (800330c <HAL_Init+0x28>)
 80032ee:	f043 0310 	orr.w	r3, r3, #16
 80032f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032f4:	2003      	movs	r0, #3
 80032f6:	f000 fd9f 	bl	8003e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032fa:	200e      	movs	r0, #14
 80032fc:	f000 f808 	bl	8003310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003300:	f7ff fd9c 	bl	8002e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40022000 	.word	0x40022000

08003310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003318:	4b12      	ldr	r3, [pc, #72]	@ (8003364 <HAL_InitTick+0x54>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b12      	ldr	r3, [pc, #72]	@ (8003368 <HAL_InitTick+0x58>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	4619      	mov	r1, r3
 8003322:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003326:	fbb3 f3f1 	udiv	r3, r3, r1
 800332a:	fbb2 f3f3 	udiv	r3, r2, r3
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fdb7 	bl	8003ea2 <HAL_SYSTICK_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e00e      	b.n	800335c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b0f      	cmp	r3, #15
 8003342:	d80a      	bhi.n	800335a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003344:	2200      	movs	r2, #0
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	f000 fd7f 	bl	8003e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003350:	4a06      	ldr	r2, [pc, #24]	@ (800336c <HAL_InitTick+0x5c>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	e000      	b.n	800335c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20000014 	.word	0x20000014
 8003368:	2000001c 	.word	0x2000001c
 800336c:	20000018 	.word	0x20000018

08003370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003374:	4b05      	ldr	r3, [pc, #20]	@ (800338c <HAL_IncTick+0x1c>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	4b05      	ldr	r3, [pc, #20]	@ (8003390 <HAL_IncTick+0x20>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4413      	add	r3, r2
 8003380:	4a03      	ldr	r2, [pc, #12]	@ (8003390 <HAL_IncTick+0x20>)
 8003382:	6013      	str	r3, [r2, #0]
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	2000001c 	.word	0x2000001c
 8003390:	20000ae0 	.word	0x20000ae0

08003394 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return uwTick;
 8003398:	4b02      	ldr	r3, [pc, #8]	@ (80033a4 <HAL_GetTick+0x10>)
 800339a:	681b      	ldr	r3, [r3, #0]
}
 800339c:	4618      	mov	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr
 80033a4:	20000ae0 	.word	0x20000ae0

080033a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033b0:	f7ff fff0 	bl	8003394 <HAL_GetTick>
 80033b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c0:	d005      	beq.n	80033ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033c2:	4b0a      	ldr	r3, [pc, #40]	@ (80033ec <HAL_Delay+0x44>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4413      	add	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033ce:	bf00      	nop
 80033d0:	f7ff ffe0 	bl	8003394 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d8f7      	bhi.n	80033d0 <HAL_Delay+0x28>
  {
  }
}
 80033e0:	bf00      	nop
 80033e2:	bf00      	nop
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	2000001c 	.word	0x2000001c

080033f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e0be      	b.n	8003590 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341c:	2b00      	cmp	r3, #0
 800341e:	d109      	bne.n	8003434 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff fd36 	bl	8002ea0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fbf1 	bl	8003c1c <ADC_ConversionStop_Disable>
 800343a:	4603      	mov	r3, r0
 800343c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b00      	cmp	r3, #0
 8003448:	f040 8099 	bne.w	800357e <HAL_ADC_Init+0x18e>
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	2b00      	cmp	r3, #0
 8003450:	f040 8095 	bne.w	800357e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003458:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800345c:	f023 0302 	bic.w	r3, r3, #2
 8003460:	f043 0202 	orr.w	r2, r3, #2
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003470:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	7b1b      	ldrb	r3, [r3, #12]
 8003476:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003478:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	4313      	orrs	r3, r2
 800347e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003488:	d003      	beq.n	8003492 <HAL_ADC_Init+0xa2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d102      	bne.n	8003498 <HAL_ADC_Init+0xa8>
 8003492:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003496:	e000      	b.n	800349a <HAL_ADC_Init+0xaa>
 8003498:	2300      	movs	r3, #0
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	7d1b      	ldrb	r3, [r3, #20]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d119      	bne.n	80034dc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	7b1b      	ldrb	r3, [r3, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d109      	bne.n	80034c4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	035a      	lsls	r2, r3, #13
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	e00b      	b.n	80034dc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c8:	f043 0220 	orr.w	r2, r3, #32
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d4:	f043 0201 	orr.w	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	4b28      	ldr	r3, [pc, #160]	@ (8003598 <HAL_ADC_Init+0x1a8>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	68b9      	ldr	r1, [r7, #8]
 8003500:	430b      	orrs	r3, r1
 8003502:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800350c:	d003      	beq.n	8003516 <HAL_ADC_Init+0x126>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d104      	bne.n	8003520 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	3b01      	subs	r3, #1
 800351c:	051b      	lsls	r3, r3, #20
 800351e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003526:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	430a      	orrs	r2, r1
 8003532:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	4b18      	ldr	r3, [pc, #96]	@ (800359c <HAL_ADC_Init+0x1ac>)
 800353c:	4013      	ands	r3, r2
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	429a      	cmp	r2, r3
 8003542:	d10b      	bne.n	800355c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354e:	f023 0303 	bic.w	r3, r3, #3
 8003552:	f043 0201 	orr.w	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800355a:	e018      	b.n	800358e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003560:	f023 0312 	bic.w	r3, r3, #18
 8003564:	f043 0210 	orr.w	r2, r3, #16
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003570:	f043 0201 	orr.w	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800357c:	e007      	b.n	800358e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003582:	f043 0210 	orr.w	r2, r3, #16
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800358e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	ffe1f7fd 	.word	0xffe1f7fd
 800359c:	ff1f0efe 	.word	0xff1f0efe

080035a0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_ADC_Start+0x1a>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e098      	b.n	80036ec <HAL_ADC_Start+0x14c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fad0 	bl	8003b68 <ADC_Enable>
 80035c8:	4603      	mov	r3, r0
 80035ca:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f040 8087 	bne.w	80036e2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035dc:	f023 0301 	bic.w	r3, r3, #1
 80035e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a41      	ldr	r2, [pc, #260]	@ (80036f4 <HAL_ADC_Start+0x154>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d105      	bne.n	80035fe <HAL_ADC_Start+0x5e>
 80035f2:	4b41      	ldr	r3, [pc, #260]	@ (80036f8 <HAL_ADC_Start+0x158>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d115      	bne.n	800362a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003602:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003614:	2b00      	cmp	r3, #0
 8003616:	d026      	beq.n	8003666 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003620:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003628:	e01d      	b.n	8003666 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a2f      	ldr	r2, [pc, #188]	@ (80036f8 <HAL_ADC_Start+0x158>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d004      	beq.n	800364a <HAL_ADC_Start+0xaa>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a2b      	ldr	r2, [pc, #172]	@ (80036f4 <HAL_ADC_Start+0x154>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d10d      	bne.n	8003666 <HAL_ADC_Start+0xc6>
 800364a:	4b2b      	ldr	r3, [pc, #172]	@ (80036f8 <HAL_ADC_Start+0x158>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003652:	2b00      	cmp	r3, #0
 8003654:	d007      	beq.n	8003666 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800365e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d006      	beq.n	8003680 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003676:	f023 0206 	bic.w	r2, r3, #6
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800367e:	e002      	b.n	8003686 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f06f 0202 	mvn.w	r2, #2
 8003696:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80036a2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80036a6:	d113      	bne.n	80036d0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80036ac:	4a11      	ldr	r2, [pc, #68]	@ (80036f4 <HAL_ADC_Start+0x154>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d105      	bne.n	80036be <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80036b2:	4b11      	ldr	r3, [pc, #68]	@ (80036f8 <HAL_ADC_Start+0x158>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d108      	bne.n	80036d0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80036cc:	609a      	str	r2, [r3, #8]
 80036ce:	e00c      	b.n	80036ea <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	e003      	b.n	80036ea <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40012800 	.word	0x40012800
 80036f8:	40012400 	.word	0x40012400

080036fc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_ADC_Stop+0x1a>
 8003712:	2302      	movs	r3, #2
 8003714:	e01a      	b.n	800374c <HAL_ADC_Stop+0x50>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fa7c 	bl	8003c1c <ADC_ConversionStop_Disable>
 8003724:	4603      	mov	r3, r0
 8003726:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d109      	bne.n	8003742 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003732:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003736:	f023 0301 	bic.w	r3, r3, #1
 800373a:	f043 0201 	orr.w	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800374a:	7bfb      	ldrb	r3, [r7, #15]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003754:	b590      	push	{r4, r7, lr}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800376a:	f7ff fe13 	bl	8003394 <HAL_GetTick>
 800376e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00b      	beq.n	8003796 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003782:	f043 0220 	orr.w	r2, r3, #32
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e0d3      	b.n	800393e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d131      	bne.n	8003808 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037aa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d12a      	bne.n	8003808 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80037b2:	e021      	b.n	80037f8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ba:	d01d      	beq.n	80037f8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d007      	beq.n	80037d2 <HAL_ADC_PollForConversion+0x7e>
 80037c2:	f7ff fde7 	bl	8003394 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d212      	bcs.n	80037f8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10b      	bne.n	80037f8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e4:	f043 0204 	orr.w	r2, r3, #4
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e0a2      	b.n	800393e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0d6      	beq.n	80037b4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003806:	e070      	b.n	80038ea <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003808:	4b4f      	ldr	r3, [pc, #316]	@ (8003948 <HAL_ADC_PollForConversion+0x1f4>)
 800380a:	681c      	ldr	r4, [r3, #0]
 800380c:	2002      	movs	r0, #2
 800380e:	f001 fa9b 	bl	8004d48 <HAL_RCCEx_GetPeriphCLKFreq>
 8003812:	4603      	mov	r3, r0
 8003814:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6919      	ldr	r1, [r3, #16]
 800381e:	4b4b      	ldr	r3, [pc, #300]	@ (800394c <HAL_ADC_PollForConversion+0x1f8>)
 8003820:	400b      	ands	r3, r1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d118      	bne.n	8003858 <HAL_ADC_PollForConversion+0x104>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68d9      	ldr	r1, [r3, #12]
 800382c:	4b48      	ldr	r3, [pc, #288]	@ (8003950 <HAL_ADC_PollForConversion+0x1fc>)
 800382e:	400b      	ands	r3, r1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d111      	bne.n	8003858 <HAL_ADC_PollForConversion+0x104>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6919      	ldr	r1, [r3, #16]
 800383a:	4b46      	ldr	r3, [pc, #280]	@ (8003954 <HAL_ADC_PollForConversion+0x200>)
 800383c:	400b      	ands	r3, r1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d108      	bne.n	8003854 <HAL_ADC_PollForConversion+0x100>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68d9      	ldr	r1, [r3, #12]
 8003848:	4b43      	ldr	r3, [pc, #268]	@ (8003958 <HAL_ADC_PollForConversion+0x204>)
 800384a:	400b      	ands	r3, r1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_ADC_PollForConversion+0x100>
 8003850:	2314      	movs	r3, #20
 8003852:	e020      	b.n	8003896 <HAL_ADC_PollForConversion+0x142>
 8003854:	2329      	movs	r3, #41	@ 0x29
 8003856:	e01e      	b.n	8003896 <HAL_ADC_PollForConversion+0x142>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6919      	ldr	r1, [r3, #16]
 800385e:	4b3d      	ldr	r3, [pc, #244]	@ (8003954 <HAL_ADC_PollForConversion+0x200>)
 8003860:	400b      	ands	r3, r1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_ADC_PollForConversion+0x120>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68d9      	ldr	r1, [r3, #12]
 800386c:	4b3a      	ldr	r3, [pc, #232]	@ (8003958 <HAL_ADC_PollForConversion+0x204>)
 800386e:	400b      	ands	r3, r1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00d      	beq.n	8003890 <HAL_ADC_PollForConversion+0x13c>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6919      	ldr	r1, [r3, #16]
 800387a:	4b38      	ldr	r3, [pc, #224]	@ (800395c <HAL_ADC_PollForConversion+0x208>)
 800387c:	400b      	ands	r3, r1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d108      	bne.n	8003894 <HAL_ADC_PollForConversion+0x140>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68d9      	ldr	r1, [r3, #12]
 8003888:	4b34      	ldr	r3, [pc, #208]	@ (800395c <HAL_ADC_PollForConversion+0x208>)
 800388a:	400b      	ands	r3, r1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_ADC_PollForConversion+0x140>
 8003890:	2354      	movs	r3, #84	@ 0x54
 8003892:	e000      	b.n	8003896 <HAL_ADC_PollForConversion+0x142>
 8003894:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800389c:	e021      	b.n	80038e2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a4:	d01a      	beq.n	80038dc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d007      	beq.n	80038bc <HAL_ADC_PollForConversion+0x168>
 80038ac:	f7ff fd72 	bl	8003394 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d20f      	bcs.n	80038dc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d90b      	bls.n	80038dc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c8:	f043 0204 	orr.w	r2, r3, #4
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e030      	b.n	800393e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	3301      	adds	r3, #1
 80038e0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d8d9      	bhi.n	800389e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f06f 0212 	mvn.w	r2, #18
 80038f2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800390a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800390e:	d115      	bne.n	800393c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003914:	2b00      	cmp	r3, #0
 8003916:	d111      	bne.n	800393c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003928:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d105      	bne.n	800393c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003934:	f043 0201 	orr.w	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	bd90      	pop	{r4, r7, pc}
 8003946:	bf00      	nop
 8003948:	20000014 	.word	0x20000014
 800394c:	24924924 	.word	0x24924924
 8003950:	00924924 	.word	0x00924924
 8003954:	12492492 	.word	0x12492492
 8003958:	00492492 	.word	0x00492492
 800395c:	00249249 	.word	0x00249249

08003960 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr

08003978 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x20>
 8003994:	2302      	movs	r3, #2
 8003996:	e0dc      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x1da>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b06      	cmp	r3, #6
 80039a6:	d81c      	bhi.n	80039e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	3b05      	subs	r3, #5
 80039ba:	221f      	movs	r2, #31
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	43db      	mvns	r3, r3
 80039c2:	4019      	ands	r1, r3
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	3b05      	subs	r3, #5
 80039d4:	fa00 f203 	lsl.w	r2, r0, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	635a      	str	r2, [r3, #52]	@ 0x34
 80039e0:	e03c      	b.n	8003a5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b0c      	cmp	r3, #12
 80039e8:	d81c      	bhi.n	8003a24 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	3b23      	subs	r3, #35	@ 0x23
 80039fc:	221f      	movs	r2, #31
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43db      	mvns	r3, r3
 8003a04:	4019      	ands	r1, r3
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	3b23      	subs	r3, #35	@ 0x23
 8003a16:	fa00 f203 	lsl.w	r2, r0, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a22:	e01b      	b.n	8003a5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	3b41      	subs	r3, #65	@ 0x41
 8003a36:	221f      	movs	r2, #31
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	4019      	ands	r1, r3
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3b41      	subs	r3, #65	@ 0x41
 8003a50:	fa00 f203 	lsl.w	r2, r0, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b09      	cmp	r3, #9
 8003a62:	d91c      	bls.n	8003a9e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68d9      	ldr	r1, [r3, #12]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	4413      	add	r3, r2
 8003a74:	3b1e      	subs	r3, #30
 8003a76:	2207      	movs	r2, #7
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	4019      	ands	r1, r3
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	6898      	ldr	r0, [r3, #8]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	4413      	add	r3, r2
 8003a8e:	3b1e      	subs	r3, #30
 8003a90:	fa00 f203 	lsl.w	r2, r0, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	60da      	str	r2, [r3, #12]
 8003a9c:	e019      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6919      	ldr	r1, [r3, #16]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	4413      	add	r3, r2
 8003aae:	2207      	movs	r2, #7
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	4019      	ands	r1, r3
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	6898      	ldr	r0, [r3, #8]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	4413      	add	r3, r2
 8003ac6:	fa00 f203 	lsl.w	r2, r0, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d003      	beq.n	8003ae2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003ade:	2b11      	cmp	r3, #17
 8003ae0:	d132      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8003b5c <HAL_ADC_ConfigChannel+0x1e4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d125      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d126      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003b08:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b10      	cmp	r3, #16
 8003b10:	d11a      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b12:	4b13      	ldr	r3, [pc, #76]	@ (8003b60 <HAL_ADC_ConfigChannel+0x1e8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a13      	ldr	r2, [pc, #76]	@ (8003b64 <HAL_ADC_ConfigChannel+0x1ec>)
 8003b18:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1c:	0c9a      	lsrs	r2, r3, #18
 8003b1e:	4613      	mov	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b28:	e002      	b.n	8003b30 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f9      	bne.n	8003b2a <HAL_ADC_ConfigChannel+0x1b2>
 8003b36:	e007      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3c:	f043 0220 	orr.w	r2, r3, #32
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr
 8003b5c:	40012400 	.word	0x40012400
 8003b60:	20000014 	.word	0x20000014
 8003b64:	431bde83 	.word	0x431bde83

08003b68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d040      	beq.n	8003c08 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f042 0201 	orr.w	r2, r2, #1
 8003b94:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b96:	4b1f      	ldr	r3, [pc, #124]	@ (8003c14 <ADC_Enable+0xac>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003c18 <ADC_Enable+0xb0>)
 8003b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba0:	0c9b      	lsrs	r3, r3, #18
 8003ba2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003ba4:	e002      	b.n	8003bac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f9      	bne.n	8003ba6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bb2:	f7ff fbef 	bl	8003394 <HAL_GetTick>
 8003bb6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003bb8:	e01f      	b.n	8003bfa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bba:	f7ff fbeb 	bl	8003394 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d918      	bls.n	8003bfa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d011      	beq.n	8003bfa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bda:	f043 0210 	orr.w	r2, r3, #16
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be6:	f043 0201 	orr.w	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e007      	b.n	8003c0a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d1d8      	bne.n	8003bba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000014 	.word	0x20000014
 8003c18:	431bde83 	.word	0x431bde83

08003c1c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d12e      	bne.n	8003c94 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0201 	bic.w	r2, r2, #1
 8003c44:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c46:	f7ff fba5 	bl	8003394 <HAL_GetTick>
 8003c4a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c4c:	e01b      	b.n	8003c86 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c4e:	f7ff fba1 	bl	8003394 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d914      	bls.n	8003c86 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d10d      	bne.n	8003c86 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6e:	f043 0210 	orr.w	r2, r3, #16
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7a:	f043 0201 	orr.w	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e007      	b.n	8003c96 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d0dc      	beq.n	8003c4e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cd2:	4a04      	ldr	r2, [pc, #16]	@ (8003ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	60d3      	str	r3, [r2, #12]
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	e000ed00 	.word	0xe000ed00

08003ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cec:	4b04      	ldr	r3, [pc, #16]	@ (8003d00 <__NVIC_GetPriorityGrouping+0x18>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	f003 0307 	and.w	r3, r3, #7
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	e000ed00 	.word	0xe000ed00

08003d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	db0b      	blt.n	8003d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	f003 021f 	and.w	r2, r3, #31
 8003d1c:	4906      	ldr	r1, [pc, #24]	@ (8003d38 <__NVIC_EnableIRQ+0x34>)
 8003d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	2001      	movs	r0, #1
 8003d26:	fa00 f202 	lsl.w	r2, r0, r2
 8003d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr
 8003d38:	e000e100 	.word	0xe000e100

08003d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	6039      	str	r1, [r7, #0]
 8003d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	db0a      	blt.n	8003d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	490c      	ldr	r1, [pc, #48]	@ (8003d88 <__NVIC_SetPriority+0x4c>)
 8003d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5a:	0112      	lsls	r2, r2, #4
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	440b      	add	r3, r1
 8003d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d64:	e00a      	b.n	8003d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	4908      	ldr	r1, [pc, #32]	@ (8003d8c <__NVIC_SetPriority+0x50>)
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	3b04      	subs	r3, #4
 8003d74:	0112      	lsls	r2, r2, #4
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	440b      	add	r3, r1
 8003d7a:	761a      	strb	r2, [r3, #24]
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	e000e100 	.word	0xe000e100
 8003d8c:	e000ed00 	.word	0xe000ed00

08003d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b089      	sub	sp, #36	@ 0x24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f1c3 0307 	rsb	r3, r3, #7
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	bf28      	it	cs
 8003dae:	2304      	movcs	r3, #4
 8003db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	3304      	adds	r3, #4
 8003db6:	2b06      	cmp	r3, #6
 8003db8:	d902      	bls.n	8003dc0 <NVIC_EncodePriority+0x30>
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	3b03      	subs	r3, #3
 8003dbe:	e000      	b.n	8003dc2 <NVIC_EncodePriority+0x32>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	43da      	mvns	r2, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	401a      	ands	r2, r3
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	fa01 f303 	lsl.w	r3, r1, r3
 8003de2:	43d9      	mvns	r1, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de8:	4313      	orrs	r3, r2
         );
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3724      	adds	r7, #36	@ 0x24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr

08003df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e04:	d301      	bcc.n	8003e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e06:	2301      	movs	r3, #1
 8003e08:	e00f      	b.n	8003e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e34 <SysTick_Config+0x40>)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e12:	210f      	movs	r1, #15
 8003e14:	f04f 30ff 	mov.w	r0, #4294967295
 8003e18:	f7ff ff90 	bl	8003d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e1c:	4b05      	ldr	r3, [pc, #20]	@ (8003e34 <SysTick_Config+0x40>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e22:	4b04      	ldr	r3, [pc, #16]	@ (8003e34 <SysTick_Config+0x40>)
 8003e24:	2207      	movs	r2, #7
 8003e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	e000e010 	.word	0xe000e010

08003e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff ff2d 	bl	8003ca0 <__NVIC_SetPriorityGrouping>
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b086      	sub	sp, #24
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	4603      	mov	r3, r0
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e60:	f7ff ff42 	bl	8003ce8 <__NVIC_GetPriorityGrouping>
 8003e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	68b9      	ldr	r1, [r7, #8]
 8003e6a:	6978      	ldr	r0, [r7, #20]
 8003e6c:	f7ff ff90 	bl	8003d90 <NVIC_EncodePriority>
 8003e70:	4602      	mov	r2, r0
 8003e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e76:	4611      	mov	r1, r2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff ff5f 	bl	8003d3c <__NVIC_SetPriority>
}
 8003e7e:	bf00      	nop
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b082      	sub	sp, #8
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ff35 	bl	8003d04 <__NVIC_EnableIRQ>
}
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff ffa2 	bl	8003df4 <SysTick_Config>
 8003eb0:	4603      	mov	r3, r0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b085      	sub	sp, #20
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d008      	beq.n	8003ee4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2204      	movs	r2, #4
 8003ed6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e020      	b.n	8003f26 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 020e 	bic.w	r2, r2, #14
 8003ef2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0201 	bic.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f12:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr

08003f30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d005      	beq.n	8003f54 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	73fb      	strb	r3, [r7, #15]
 8003f52:	e051      	b.n	8003ff8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 020e 	bic.w	r2, r2, #14
 8003f62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0201 	bic.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a22      	ldr	r2, [pc, #136]	@ (8004004 <HAL_DMA_Abort_IT+0xd4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d029      	beq.n	8003fd2 <HAL_DMA_Abort_IT+0xa2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a21      	ldr	r2, [pc, #132]	@ (8004008 <HAL_DMA_Abort_IT+0xd8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d022      	beq.n	8003fce <HAL_DMA_Abort_IT+0x9e>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800400c <HAL_DMA_Abort_IT+0xdc>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01a      	beq.n	8003fc8 <HAL_DMA_Abort_IT+0x98>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a1e      	ldr	r2, [pc, #120]	@ (8004010 <HAL_DMA_Abort_IT+0xe0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d012      	beq.n	8003fc2 <HAL_DMA_Abort_IT+0x92>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8004014 <HAL_DMA_Abort_IT+0xe4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00a      	beq.n	8003fbc <HAL_DMA_Abort_IT+0x8c>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1b      	ldr	r2, [pc, #108]	@ (8004018 <HAL_DMA_Abort_IT+0xe8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d102      	bne.n	8003fb6 <HAL_DMA_Abort_IT+0x86>
 8003fb0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003fb4:	e00e      	b.n	8003fd4 <HAL_DMA_Abort_IT+0xa4>
 8003fb6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fba:	e00b      	b.n	8003fd4 <HAL_DMA_Abort_IT+0xa4>
 8003fbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003fc0:	e008      	b.n	8003fd4 <HAL_DMA_Abort_IT+0xa4>
 8003fc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fc6:	e005      	b.n	8003fd4 <HAL_DMA_Abort_IT+0xa4>
 8003fc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fcc:	e002      	b.n	8003fd4 <HAL_DMA_Abort_IT+0xa4>
 8003fce:	2310      	movs	r3, #16
 8003fd0:	e000      	b.n	8003fd4 <HAL_DMA_Abort_IT+0xa4>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	4a11      	ldr	r2, [pc, #68]	@ (800401c <HAL_DMA_Abort_IT+0xec>)
 8003fd6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	4798      	blx	r3
    } 
  }
  return status;
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40020008 	.word	0x40020008
 8004008:	4002001c 	.word	0x4002001c
 800400c:	40020030 	.word	0x40020030
 8004010:	40020044 	.word	0x40020044
 8004014:	40020058 	.word	0x40020058
 8004018:	4002006c 	.word	0x4002006c
 800401c:	40020000 	.word	0x40020000

08004020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004020:	b480      	push	{r7}
 8004022:	b08b      	sub	sp, #44	@ 0x2c
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800402a:	2300      	movs	r3, #0
 800402c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800402e:	2300      	movs	r3, #0
 8004030:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004032:	e169      	b.n	8004308 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004034:	2201      	movs	r2, #1
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	4013      	ands	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	429a      	cmp	r2, r3
 800404e:	f040 8158 	bne.w	8004302 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	4a9a      	ldr	r2, [pc, #616]	@ (80042c0 <HAL_GPIO_Init+0x2a0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d05e      	beq.n	800411a <HAL_GPIO_Init+0xfa>
 800405c:	4a98      	ldr	r2, [pc, #608]	@ (80042c0 <HAL_GPIO_Init+0x2a0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d875      	bhi.n	800414e <HAL_GPIO_Init+0x12e>
 8004062:	4a98      	ldr	r2, [pc, #608]	@ (80042c4 <HAL_GPIO_Init+0x2a4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d058      	beq.n	800411a <HAL_GPIO_Init+0xfa>
 8004068:	4a96      	ldr	r2, [pc, #600]	@ (80042c4 <HAL_GPIO_Init+0x2a4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d86f      	bhi.n	800414e <HAL_GPIO_Init+0x12e>
 800406e:	4a96      	ldr	r2, [pc, #600]	@ (80042c8 <HAL_GPIO_Init+0x2a8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d052      	beq.n	800411a <HAL_GPIO_Init+0xfa>
 8004074:	4a94      	ldr	r2, [pc, #592]	@ (80042c8 <HAL_GPIO_Init+0x2a8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d869      	bhi.n	800414e <HAL_GPIO_Init+0x12e>
 800407a:	4a94      	ldr	r2, [pc, #592]	@ (80042cc <HAL_GPIO_Init+0x2ac>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d04c      	beq.n	800411a <HAL_GPIO_Init+0xfa>
 8004080:	4a92      	ldr	r2, [pc, #584]	@ (80042cc <HAL_GPIO_Init+0x2ac>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d863      	bhi.n	800414e <HAL_GPIO_Init+0x12e>
 8004086:	4a92      	ldr	r2, [pc, #584]	@ (80042d0 <HAL_GPIO_Init+0x2b0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d046      	beq.n	800411a <HAL_GPIO_Init+0xfa>
 800408c:	4a90      	ldr	r2, [pc, #576]	@ (80042d0 <HAL_GPIO_Init+0x2b0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d85d      	bhi.n	800414e <HAL_GPIO_Init+0x12e>
 8004092:	2b12      	cmp	r3, #18
 8004094:	d82a      	bhi.n	80040ec <HAL_GPIO_Init+0xcc>
 8004096:	2b12      	cmp	r3, #18
 8004098:	d859      	bhi.n	800414e <HAL_GPIO_Init+0x12e>
 800409a:	a201      	add	r2, pc, #4	@ (adr r2, 80040a0 <HAL_GPIO_Init+0x80>)
 800409c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a0:	0800411b 	.word	0x0800411b
 80040a4:	080040f5 	.word	0x080040f5
 80040a8:	08004107 	.word	0x08004107
 80040ac:	08004149 	.word	0x08004149
 80040b0:	0800414f 	.word	0x0800414f
 80040b4:	0800414f 	.word	0x0800414f
 80040b8:	0800414f 	.word	0x0800414f
 80040bc:	0800414f 	.word	0x0800414f
 80040c0:	0800414f 	.word	0x0800414f
 80040c4:	0800414f 	.word	0x0800414f
 80040c8:	0800414f 	.word	0x0800414f
 80040cc:	0800414f 	.word	0x0800414f
 80040d0:	0800414f 	.word	0x0800414f
 80040d4:	0800414f 	.word	0x0800414f
 80040d8:	0800414f 	.word	0x0800414f
 80040dc:	0800414f 	.word	0x0800414f
 80040e0:	0800414f 	.word	0x0800414f
 80040e4:	080040fd 	.word	0x080040fd
 80040e8:	08004111 	.word	0x08004111
 80040ec:	4a79      	ldr	r2, [pc, #484]	@ (80042d4 <HAL_GPIO_Init+0x2b4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d013      	beq.n	800411a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80040f2:	e02c      	b.n	800414e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	623b      	str	r3, [r7, #32]
          break;
 80040fa:	e029      	b.n	8004150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	3304      	adds	r3, #4
 8004102:	623b      	str	r3, [r7, #32]
          break;
 8004104:	e024      	b.n	8004150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	3308      	adds	r3, #8
 800410c:	623b      	str	r3, [r7, #32]
          break;
 800410e:	e01f      	b.n	8004150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	330c      	adds	r3, #12
 8004116:	623b      	str	r3, [r7, #32]
          break;
 8004118:	e01a      	b.n	8004150 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d102      	bne.n	8004128 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004122:	2304      	movs	r3, #4
 8004124:	623b      	str	r3, [r7, #32]
          break;
 8004126:	e013      	b.n	8004150 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d105      	bne.n	800413c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004130:	2308      	movs	r3, #8
 8004132:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	611a      	str	r2, [r3, #16]
          break;
 800413a:	e009      	b.n	8004150 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800413c:	2308      	movs	r3, #8
 800413e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	615a      	str	r2, [r3, #20]
          break;
 8004146:	e003      	b.n	8004150 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004148:	2300      	movs	r3, #0
 800414a:	623b      	str	r3, [r7, #32]
          break;
 800414c:	e000      	b.n	8004150 <HAL_GPIO_Init+0x130>
          break;
 800414e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2bff      	cmp	r3, #255	@ 0xff
 8004154:	d801      	bhi.n	800415a <HAL_GPIO_Init+0x13a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	e001      	b.n	800415e <HAL_GPIO_Init+0x13e>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3304      	adds	r3, #4
 800415e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2bff      	cmp	r3, #255	@ 0xff
 8004164:	d802      	bhi.n	800416c <HAL_GPIO_Init+0x14c>
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	e002      	b.n	8004172 <HAL_GPIO_Init+0x152>
 800416c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416e:	3b08      	subs	r3, #8
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	210f      	movs	r1, #15
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	fa01 f303 	lsl.w	r3, r1, r3
 8004180:	43db      	mvns	r3, r3
 8004182:	401a      	ands	r2, r3
 8004184:	6a39      	ldr	r1, [r7, #32]
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	fa01 f303 	lsl.w	r3, r1, r3
 800418c:	431a      	orrs	r2, r3
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 80b1 	beq.w	8004302 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80041a0:	4b4d      	ldr	r3, [pc, #308]	@ (80042d8 <HAL_GPIO_Init+0x2b8>)
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	4a4c      	ldr	r2, [pc, #304]	@ (80042d8 <HAL_GPIO_Init+0x2b8>)
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	6193      	str	r3, [r2, #24]
 80041ac:	4b4a      	ldr	r3, [pc, #296]	@ (80042d8 <HAL_GPIO_Init+0x2b8>)
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80041b8:	4a48      	ldr	r2, [pc, #288]	@ (80042dc <HAL_GPIO_Init+0x2bc>)
 80041ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041bc:	089b      	lsrs	r3, r3, #2
 80041be:	3302      	adds	r3, #2
 80041c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	220f      	movs	r2, #15
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	43db      	mvns	r3, r3
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4013      	ands	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a40      	ldr	r2, [pc, #256]	@ (80042e0 <HAL_GPIO_Init+0x2c0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d013      	beq.n	800420c <HAL_GPIO_Init+0x1ec>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a3f      	ldr	r2, [pc, #252]	@ (80042e4 <HAL_GPIO_Init+0x2c4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d00d      	beq.n	8004208 <HAL_GPIO_Init+0x1e8>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a3e      	ldr	r2, [pc, #248]	@ (80042e8 <HAL_GPIO_Init+0x2c8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d007      	beq.n	8004204 <HAL_GPIO_Init+0x1e4>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a3d      	ldr	r2, [pc, #244]	@ (80042ec <HAL_GPIO_Init+0x2cc>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d101      	bne.n	8004200 <HAL_GPIO_Init+0x1e0>
 80041fc:	2303      	movs	r3, #3
 80041fe:	e006      	b.n	800420e <HAL_GPIO_Init+0x1ee>
 8004200:	2304      	movs	r3, #4
 8004202:	e004      	b.n	800420e <HAL_GPIO_Init+0x1ee>
 8004204:	2302      	movs	r3, #2
 8004206:	e002      	b.n	800420e <HAL_GPIO_Init+0x1ee>
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <HAL_GPIO_Init+0x1ee>
 800420c:	2300      	movs	r3, #0
 800420e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004210:	f002 0203 	and.w	r2, r2, #3
 8004214:	0092      	lsls	r2, r2, #2
 8004216:	4093      	lsls	r3, r2
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800421e:	492f      	ldr	r1, [pc, #188]	@ (80042dc <HAL_GPIO_Init+0x2bc>)
 8004220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004222:	089b      	lsrs	r3, r3, #2
 8004224:	3302      	adds	r3, #2
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d006      	beq.n	8004246 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004238:	4b2d      	ldr	r3, [pc, #180]	@ (80042f0 <HAL_GPIO_Init+0x2d0>)
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	492c      	ldr	r1, [pc, #176]	@ (80042f0 <HAL_GPIO_Init+0x2d0>)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	4313      	orrs	r3, r2
 8004242:	608b      	str	r3, [r1, #8]
 8004244:	e006      	b.n	8004254 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004246:	4b2a      	ldr	r3, [pc, #168]	@ (80042f0 <HAL_GPIO_Init+0x2d0>)
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	43db      	mvns	r3, r3
 800424e:	4928      	ldr	r1, [pc, #160]	@ (80042f0 <HAL_GPIO_Init+0x2d0>)
 8004250:	4013      	ands	r3, r2
 8004252:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d006      	beq.n	800426e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004260:	4b23      	ldr	r3, [pc, #140]	@ (80042f0 <HAL_GPIO_Init+0x2d0>)
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	4922      	ldr	r1, [pc, #136]	@ (80042f0 <HAL_GPIO_Init+0x2d0>)
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	4313      	orrs	r3, r2
 800426a:	60cb      	str	r3, [r1, #12]
 800426c:	e006      	b.n	800427c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800426e:	4b20      	ldr	r3, [pc, #128]	@ (80042f0 <HAL_GPIO_Init+0x2d0>)
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	43db      	mvns	r3, r3
 8004276:	491e      	ldr	r1, [pc, #120]	@ (80042f0 <HAL_GPIO_Init+0x2d0>)
 8004278:	4013      	ands	r3, r2
 800427a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d006      	beq.n	8004296 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004288:	4b19      	ldr	r3, [pc, #100]	@ (80042f0 <HAL_GPIO_Init+0x2d0>)
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	4918      	ldr	r1, [pc, #96]	@ (80042f0 <HAL_GPIO_Init+0x2d0>)
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	4313      	orrs	r3, r2
 8004292:	604b      	str	r3, [r1, #4]
 8004294:	e006      	b.n	80042a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004296:	4b16      	ldr	r3, [pc, #88]	@ (80042f0 <HAL_GPIO_Init+0x2d0>)
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	43db      	mvns	r3, r3
 800429e:	4914      	ldr	r1, [pc, #80]	@ (80042f0 <HAL_GPIO_Init+0x2d0>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d021      	beq.n	80042f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80042b0:	4b0f      	ldr	r3, [pc, #60]	@ (80042f0 <HAL_GPIO_Init+0x2d0>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	490e      	ldr	r1, [pc, #56]	@ (80042f0 <HAL_GPIO_Init+0x2d0>)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	600b      	str	r3, [r1, #0]
 80042bc:	e021      	b.n	8004302 <HAL_GPIO_Init+0x2e2>
 80042be:	bf00      	nop
 80042c0:	10320000 	.word	0x10320000
 80042c4:	10310000 	.word	0x10310000
 80042c8:	10220000 	.word	0x10220000
 80042cc:	10210000 	.word	0x10210000
 80042d0:	10120000 	.word	0x10120000
 80042d4:	10110000 	.word	0x10110000
 80042d8:	40021000 	.word	0x40021000
 80042dc:	40010000 	.word	0x40010000
 80042e0:	40010800 	.word	0x40010800
 80042e4:	40010c00 	.word	0x40010c00
 80042e8:	40011000 	.word	0x40011000
 80042ec:	40011400 	.word	0x40011400
 80042f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80042f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004324 <HAL_GPIO_Init+0x304>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	43db      	mvns	r3, r3
 80042fc:	4909      	ldr	r1, [pc, #36]	@ (8004324 <HAL_GPIO_Init+0x304>)
 80042fe:	4013      	ands	r3, r2
 8004300:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004304:	3301      	adds	r3, #1
 8004306:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	fa22 f303 	lsr.w	r3, r2, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	f47f ae8e 	bne.w	8004034 <HAL_GPIO_Init+0x14>
  }
}
 8004318:	bf00      	nop
 800431a:	bf00      	nop
 800431c:	372c      	adds	r7, #44	@ 0x2c
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr
 8004324:	40010400 	.word	0x40010400

08004328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	807b      	strh	r3, [r7, #2]
 8004334:	4613      	mov	r3, r2
 8004336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004338:	787b      	ldrb	r3, [r7, #1]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800433e:	887a      	ldrh	r2, [r7, #2]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004344:	e003      	b.n	800434e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004346:	887b      	ldrh	r3, [r7, #2]
 8004348:	041a      	lsls	r2, r3, #16
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	611a      	str	r2, [r3, #16]
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr

08004358 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800436a:	887a      	ldrh	r2, [r7, #2]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4013      	ands	r3, r2
 8004370:	041a      	lsls	r2, r3, #16
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	43d9      	mvns	r1, r3
 8004376:	887b      	ldrh	r3, [r7, #2]
 8004378:	400b      	ands	r3, r1
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	611a      	str	r2, [r3, #16]
}
 8004380:	bf00      	nop
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr
	...

0800438c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004396:	4b08      	ldr	r3, [pc, #32]	@ (80043b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004398:	695a      	ldr	r2, [r3, #20]
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	4013      	ands	r3, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d006      	beq.n	80043b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043a2:	4a05      	ldr	r2, [pc, #20]	@ (80043b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043a4:	88fb      	ldrh	r3, [r7, #6]
 80043a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043a8:	88fb      	ldrh	r3, [r7, #6]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fd f98a 	bl	80016c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40010400 	.word	0x40010400

080043bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e272      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 8087 	beq.w	80044ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043dc:	4b92      	ldr	r3, [pc, #584]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f003 030c 	and.w	r3, r3, #12
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d00c      	beq.n	8004402 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043e8:	4b8f      	ldr	r3, [pc, #572]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 030c 	and.w	r3, r3, #12
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d112      	bne.n	800441a <HAL_RCC_OscConfig+0x5e>
 80043f4:	4b8c      	ldr	r3, [pc, #560]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004400:	d10b      	bne.n	800441a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004402:	4b89      	ldr	r3, [pc, #548]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d06c      	beq.n	80044e8 <HAL_RCC_OscConfig+0x12c>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d168      	bne.n	80044e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e24c      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004422:	d106      	bne.n	8004432 <HAL_RCC_OscConfig+0x76>
 8004424:	4b80      	ldr	r3, [pc, #512]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a7f      	ldr	r2, [pc, #508]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 800442a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	e02e      	b.n	8004490 <HAL_RCC_OscConfig+0xd4>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10c      	bne.n	8004454 <HAL_RCC_OscConfig+0x98>
 800443a:	4b7b      	ldr	r3, [pc, #492]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a7a      	ldr	r2, [pc, #488]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004440:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	4b78      	ldr	r3, [pc, #480]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a77      	ldr	r2, [pc, #476]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 800444c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	e01d      	b.n	8004490 <HAL_RCC_OscConfig+0xd4>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800445c:	d10c      	bne.n	8004478 <HAL_RCC_OscConfig+0xbc>
 800445e:	4b72      	ldr	r3, [pc, #456]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a71      	ldr	r2, [pc, #452]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	4b6f      	ldr	r3, [pc, #444]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a6e      	ldr	r2, [pc, #440]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e00b      	b.n	8004490 <HAL_RCC_OscConfig+0xd4>
 8004478:	4b6b      	ldr	r3, [pc, #428]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a6a      	ldr	r2, [pc, #424]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 800447e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	4b68      	ldr	r3, [pc, #416]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a67      	ldr	r2, [pc, #412]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 800448a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800448e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d013      	beq.n	80044c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004498:	f7fe ff7c 	bl	8003394 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044a0:	f7fe ff78 	bl	8003394 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b64      	cmp	r3, #100	@ 0x64
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e200      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b2:	4b5d      	ldr	r3, [pc, #372]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0xe4>
 80044be:	e014      	b.n	80044ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c0:	f7fe ff68 	bl	8003394 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044c8:	f7fe ff64 	bl	8003394 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b64      	cmp	r3, #100	@ 0x64
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e1ec      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044da:	4b53      	ldr	r3, [pc, #332]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0x10c>
 80044e6:	e000      	b.n	80044ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d063      	beq.n	80045be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044f6:	4b4c      	ldr	r3, [pc, #304]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00b      	beq.n	800451a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004502:	4b49      	ldr	r3, [pc, #292]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	2b08      	cmp	r3, #8
 800450c:	d11c      	bne.n	8004548 <HAL_RCC_OscConfig+0x18c>
 800450e:	4b46      	ldr	r3, [pc, #280]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d116      	bne.n	8004548 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800451a:	4b43      	ldr	r3, [pc, #268]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d005      	beq.n	8004532 <HAL_RCC_OscConfig+0x176>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d001      	beq.n	8004532 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e1c0      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004532:	4b3d      	ldr	r3, [pc, #244]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4939      	ldr	r1, [pc, #228]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004542:	4313      	orrs	r3, r2
 8004544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004546:	e03a      	b.n	80045be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d020      	beq.n	8004592 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004550:	4b36      	ldr	r3, [pc, #216]	@ (800462c <HAL_RCC_OscConfig+0x270>)
 8004552:	2201      	movs	r2, #1
 8004554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004556:	f7fe ff1d 	bl	8003394 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800455e:	f7fe ff19 	bl	8003394 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e1a1      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004570:	4b2d      	ldr	r3, [pc, #180]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457c:	4b2a      	ldr	r3, [pc, #168]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	4927      	ldr	r1, [pc, #156]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 800458c:	4313      	orrs	r3, r2
 800458e:	600b      	str	r3, [r1, #0]
 8004590:	e015      	b.n	80045be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004592:	4b26      	ldr	r3, [pc, #152]	@ (800462c <HAL_RCC_OscConfig+0x270>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004598:	f7fe fefc 	bl	8003394 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a0:	f7fe fef8 	bl	8003394 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e180      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d03a      	beq.n	8004640 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d019      	beq.n	8004606 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045d2:	4b17      	ldr	r3, [pc, #92]	@ (8004630 <HAL_RCC_OscConfig+0x274>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d8:	f7fe fedc 	bl	8003394 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e0:	f7fe fed8 	bl	8003394 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e160      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004628 <HAL_RCC_OscConfig+0x26c>)
 80045f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80045fe:	2001      	movs	r0, #1
 8004600:	f000 face 	bl	8004ba0 <RCC_Delay>
 8004604:	e01c      	b.n	8004640 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004606:	4b0a      	ldr	r3, [pc, #40]	@ (8004630 <HAL_RCC_OscConfig+0x274>)
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460c:	f7fe fec2 	bl	8003394 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004612:	e00f      	b.n	8004634 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004614:	f7fe febe 	bl	8003394 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d908      	bls.n	8004634 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e146      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
 8004626:	bf00      	nop
 8004628:	40021000 	.word	0x40021000
 800462c:	42420000 	.word	0x42420000
 8004630:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004634:	4b92      	ldr	r3, [pc, #584]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e9      	bne.n	8004614 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80a6 	beq.w	800479a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800464e:	2300      	movs	r3, #0
 8004650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004652:	4b8b      	ldr	r3, [pc, #556]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10d      	bne.n	800467a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800465e:	4b88      	ldr	r3, [pc, #544]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	4a87      	ldr	r2, [pc, #540]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004668:	61d3      	str	r3, [r2, #28]
 800466a:	4b85      	ldr	r3, [pc, #532]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004672:	60bb      	str	r3, [r7, #8]
 8004674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004676:	2301      	movs	r3, #1
 8004678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467a:	4b82      	ldr	r3, [pc, #520]	@ (8004884 <HAL_RCC_OscConfig+0x4c8>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004682:	2b00      	cmp	r3, #0
 8004684:	d118      	bne.n	80046b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004686:	4b7f      	ldr	r3, [pc, #508]	@ (8004884 <HAL_RCC_OscConfig+0x4c8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a7e      	ldr	r2, [pc, #504]	@ (8004884 <HAL_RCC_OscConfig+0x4c8>)
 800468c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004692:	f7fe fe7f 	bl	8003394 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800469a:	f7fe fe7b 	bl	8003394 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b64      	cmp	r3, #100	@ 0x64
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e103      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ac:	4b75      	ldr	r3, [pc, #468]	@ (8004884 <HAL_RCC_OscConfig+0x4c8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d106      	bne.n	80046ce <HAL_RCC_OscConfig+0x312>
 80046c0:	4b6f      	ldr	r3, [pc, #444]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	4a6e      	ldr	r2, [pc, #440]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	6213      	str	r3, [r2, #32]
 80046cc:	e02d      	b.n	800472a <HAL_RCC_OscConfig+0x36e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCC_OscConfig+0x334>
 80046d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	4a69      	ldr	r2, [pc, #420]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	6213      	str	r3, [r2, #32]
 80046e2:	4b67      	ldr	r3, [pc, #412]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	4a66      	ldr	r2, [pc, #408]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80046e8:	f023 0304 	bic.w	r3, r3, #4
 80046ec:	6213      	str	r3, [r2, #32]
 80046ee:	e01c      	b.n	800472a <HAL_RCC_OscConfig+0x36e>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	2b05      	cmp	r3, #5
 80046f6:	d10c      	bne.n	8004712 <HAL_RCC_OscConfig+0x356>
 80046f8:	4b61      	ldr	r3, [pc, #388]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	4a60      	ldr	r2, [pc, #384]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80046fe:	f043 0304 	orr.w	r3, r3, #4
 8004702:	6213      	str	r3, [r2, #32]
 8004704:	4b5e      	ldr	r3, [pc, #376]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	4a5d      	ldr	r2, [pc, #372]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	6213      	str	r3, [r2, #32]
 8004710:	e00b      	b.n	800472a <HAL_RCC_OscConfig+0x36e>
 8004712:	4b5b      	ldr	r3, [pc, #364]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	4a5a      	ldr	r2, [pc, #360]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004718:	f023 0301 	bic.w	r3, r3, #1
 800471c:	6213      	str	r3, [r2, #32]
 800471e:	4b58      	ldr	r3, [pc, #352]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	4a57      	ldr	r2, [pc, #348]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004724:	f023 0304 	bic.w	r3, r3, #4
 8004728:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d015      	beq.n	800475e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004732:	f7fe fe2f 	bl	8003394 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004738:	e00a      	b.n	8004750 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473a:	f7fe fe2b 	bl	8003394 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004748:	4293      	cmp	r3, r2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e0b1      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004750:	4b4b      	ldr	r3, [pc, #300]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0ee      	beq.n	800473a <HAL_RCC_OscConfig+0x37e>
 800475c:	e014      	b.n	8004788 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800475e:	f7fe fe19 	bl	8003394 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004764:	e00a      	b.n	800477c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004766:	f7fe fe15 	bl	8003394 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004774:	4293      	cmp	r3, r2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e09b      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800477c:	4b40      	ldr	r3, [pc, #256]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1ee      	bne.n	8004766 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004788:	7dfb      	ldrb	r3, [r7, #23]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d105      	bne.n	800479a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800478e:	4b3c      	ldr	r3, [pc, #240]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	4a3b      	ldr	r2, [pc, #236]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004794:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004798:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 8087 	beq.w	80048b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047a4:	4b36      	ldr	r3, [pc, #216]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f003 030c 	and.w	r3, r3, #12
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d061      	beq.n	8004874 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d146      	bne.n	8004846 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b8:	4b33      	ldr	r3, [pc, #204]	@ (8004888 <HAL_RCC_OscConfig+0x4cc>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047be:	f7fe fde9 	bl	8003394 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c6:	f7fe fde5 	bl	8003394 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e06d      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047d8:	4b29      	ldr	r3, [pc, #164]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1f0      	bne.n	80047c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ec:	d108      	bne.n	8004800 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047ee:	4b24      	ldr	r3, [pc, #144]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	4921      	ldr	r1, [pc, #132]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004800:	4b1f      	ldr	r3, [pc, #124]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a19      	ldr	r1, [r3, #32]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004810:	430b      	orrs	r3, r1
 8004812:	491b      	ldr	r1, [pc, #108]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004814:	4313      	orrs	r3, r2
 8004816:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004818:	4b1b      	ldr	r3, [pc, #108]	@ (8004888 <HAL_RCC_OscConfig+0x4cc>)
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481e:	f7fe fdb9 	bl	8003394 <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004826:	f7fe fdb5 	bl	8003394 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e03d      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004838:	4b11      	ldr	r3, [pc, #68]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0f0      	beq.n	8004826 <HAL_RCC_OscConfig+0x46a>
 8004844:	e035      	b.n	80048b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004846:	4b10      	ldr	r3, [pc, #64]	@ (8004888 <HAL_RCC_OscConfig+0x4cc>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484c:	f7fe fda2 	bl	8003394 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004854:	f7fe fd9e 	bl	8003394 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e026      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004866:	4b06      	ldr	r3, [pc, #24]	@ (8004880 <HAL_RCC_OscConfig+0x4c4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x498>
 8004872:	e01e      	b.n	80048b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d107      	bne.n	800488c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e019      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
 8004880:	40021000 	.word	0x40021000
 8004884:	40007000 	.word	0x40007000
 8004888:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800488c:	4b0b      	ldr	r3, [pc, #44]	@ (80048bc <HAL_RCC_OscConfig+0x500>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	429a      	cmp	r2, r3
 800489e:	d106      	bne.n	80048ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d001      	beq.n	80048b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e000      	b.n	80048b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3718      	adds	r7, #24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40021000 	.word	0x40021000

080048c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0d0      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004a80 <HAL_RCC_ClockConfig+0x1c0>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d910      	bls.n	8004904 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e2:	4b67      	ldr	r3, [pc, #412]	@ (8004a80 <HAL_RCC_ClockConfig+0x1c0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 0207 	bic.w	r2, r3, #7
 80048ea:	4965      	ldr	r1, [pc, #404]	@ (8004a80 <HAL_RCC_ClockConfig+0x1c0>)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f2:	4b63      	ldr	r3, [pc, #396]	@ (8004a80 <HAL_RCC_ClockConfig+0x1c0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d001      	beq.n	8004904 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e0b8      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d020      	beq.n	8004952 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800491c:	4b59      	ldr	r3, [pc, #356]	@ (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	4a58      	ldr	r2, [pc, #352]	@ (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004922:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004926:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004934:	4b53      	ldr	r3, [pc, #332]	@ (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	4a52      	ldr	r2, [pc, #328]	@ (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 800493a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800493e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004940:	4b50      	ldr	r3, [pc, #320]	@ (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	494d      	ldr	r1, [pc, #308]	@ (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 800494e:	4313      	orrs	r3, r2
 8004950:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d040      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d107      	bne.n	8004976 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004966:	4b47      	ldr	r3, [pc, #284]	@ (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d115      	bne.n	800499e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e07f      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d107      	bne.n	800498e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497e:	4b41      	ldr	r3, [pc, #260]	@ (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e073      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800498e:	4b3d      	ldr	r3, [pc, #244]	@ (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e06b      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800499e:	4b39      	ldr	r3, [pc, #228]	@ (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f023 0203 	bic.w	r2, r3, #3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	4936      	ldr	r1, [pc, #216]	@ (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049b0:	f7fe fcf0 	bl	8003394 <HAL_GetTick>
 80049b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b6:	e00a      	b.n	80049ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b8:	f7fe fcec 	bl	8003394 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e053      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f003 020c 	and.w	r2, r3, #12
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	429a      	cmp	r2, r3
 80049de:	d1eb      	bne.n	80049b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049e0:	4b27      	ldr	r3, [pc, #156]	@ (8004a80 <HAL_RCC_ClockConfig+0x1c0>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d210      	bcs.n	8004a10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ee:	4b24      	ldr	r3, [pc, #144]	@ (8004a80 <HAL_RCC_ClockConfig+0x1c0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f023 0207 	bic.w	r2, r3, #7
 80049f6:	4922      	ldr	r1, [pc, #136]	@ (8004a80 <HAL_RCC_ClockConfig+0x1c0>)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fe:	4b20      	ldr	r3, [pc, #128]	@ (8004a80 <HAL_RCC_ClockConfig+0x1c0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0307 	and.w	r3, r3, #7
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d001      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e032      	b.n	8004a76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d008      	beq.n	8004a2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a1c:	4b19      	ldr	r3, [pc, #100]	@ (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4916      	ldr	r1, [pc, #88]	@ (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d009      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a3a:	4b12      	ldr	r3, [pc, #72]	@ (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	490e      	ldr	r1, [pc, #56]	@ (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a4e:	f000 f821 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 8004a52:	4602      	mov	r2, r0
 8004a54:	4b0b      	ldr	r3, [pc, #44]	@ (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	490a      	ldr	r1, [pc, #40]	@ (8004a88 <HAL_RCC_ClockConfig+0x1c8>)
 8004a60:	5ccb      	ldrb	r3, [r1, r3]
 8004a62:	fa22 f303 	lsr.w	r3, r2, r3
 8004a66:	4a09      	ldr	r2, [pc, #36]	@ (8004a8c <HAL_RCC_ClockConfig+0x1cc>)
 8004a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a6a:	4b09      	ldr	r3, [pc, #36]	@ (8004a90 <HAL_RCC_ClockConfig+0x1d0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fe fc4e 	bl	8003310 <HAL_InitTick>

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	40022000 	.word	0x40022000
 8004a84:	40021000 	.word	0x40021000
 8004a88:	08006bcc 	.word	0x08006bcc
 8004a8c:	20000014 	.word	0x20000014
 8004a90:	20000018 	.word	0x20000018

08004a94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60bb      	str	r3, [r7, #8]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004aae:	4b1e      	ldr	r3, [pc, #120]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f003 030c 	and.w	r3, r3, #12
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	d002      	beq.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x30>
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d003      	beq.n	8004aca <HAL_RCC_GetSysClockFreq+0x36>
 8004ac2:	e027      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ac4:	4b19      	ldr	r3, [pc, #100]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x98>)
 8004ac6:	613b      	str	r3, [r7, #16]
      break;
 8004ac8:	e027      	b.n	8004b1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	0c9b      	lsrs	r3, r3, #18
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	4a17      	ldr	r2, [pc, #92]	@ (8004b30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ad4:	5cd3      	ldrb	r3, [r2, r3]
 8004ad6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d010      	beq.n	8004b04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ae2:	4b11      	ldr	r3, [pc, #68]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	0c5b      	lsrs	r3, r3, #17
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	4a11      	ldr	r2, [pc, #68]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004aee:	5cd3      	ldrb	r3, [r2, r3]
 8004af0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a0d      	ldr	r2, [pc, #52]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x98>)
 8004af6:	fb03 f202 	mul.w	r2, r3, r2
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	e004      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a0c      	ldr	r2, [pc, #48]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b08:	fb02 f303 	mul.w	r3, r2, r3
 8004b0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	613b      	str	r3, [r7, #16]
      break;
 8004b12:	e002      	b.n	8004b1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b14:	4b05      	ldr	r3, [pc, #20]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x98>)
 8004b16:	613b      	str	r3, [r7, #16]
      break;
 8004b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b1a:	693b      	ldr	r3, [r7, #16]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bc80      	pop	{r7}
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	007a1200 	.word	0x007a1200
 8004b30:	08006be4 	.word	0x08006be4
 8004b34:	08006bf4 	.word	0x08006bf4
 8004b38:	003d0900 	.word	0x003d0900

08004b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b40:	4b02      	ldr	r3, [pc, #8]	@ (8004b4c <HAL_RCC_GetHCLKFreq+0x10>)
 8004b42:	681b      	ldr	r3, [r3, #0]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr
 8004b4c:	20000014 	.word	0x20000014

08004b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b54:	f7ff fff2 	bl	8004b3c <HAL_RCC_GetHCLKFreq>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	4b05      	ldr	r3, [pc, #20]	@ (8004b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	0a1b      	lsrs	r3, r3, #8
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	4903      	ldr	r1, [pc, #12]	@ (8004b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b66:	5ccb      	ldrb	r3, [r1, r3]
 8004b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40021000 	.word	0x40021000
 8004b74:	08006bdc 	.word	0x08006bdc

08004b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b7c:	f7ff ffde 	bl	8004b3c <HAL_RCC_GetHCLKFreq>
 8004b80:	4602      	mov	r2, r0
 8004b82:	4b05      	ldr	r3, [pc, #20]	@ (8004b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	0adb      	lsrs	r3, r3, #11
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	4903      	ldr	r1, [pc, #12]	@ (8004b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b8e:	5ccb      	ldrb	r3, [r1, r3]
 8004b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	08006bdc 	.word	0x08006bdc

08004ba0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd4 <RCC_Delay+0x34>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a0a      	ldr	r2, [pc, #40]	@ (8004bd8 <RCC_Delay+0x38>)
 8004bae:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb2:	0a5b      	lsrs	r3, r3, #9
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	fb02 f303 	mul.w	r3, r2, r3
 8004bba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004bbc:	bf00      	nop
  }
  while (Delay --);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	1e5a      	subs	r2, r3, #1
 8004bc2:	60fa      	str	r2, [r7, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1f9      	bne.n	8004bbc <RCC_Delay+0x1c>
}
 8004bc8:	bf00      	nop
 8004bca:	bf00      	nop
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bc80      	pop	{r7}
 8004bd2:	4770      	bx	lr
 8004bd4:	20000014 	.word	0x20000014
 8004bd8:	10624dd3 	.word	0x10624dd3

08004bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	613b      	str	r3, [r7, #16]
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d07d      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bfc:	4b4f      	ldr	r3, [pc, #316]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10d      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c08:	4b4c      	ldr	r3, [pc, #304]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	4a4b      	ldr	r2, [pc, #300]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c12:	61d3      	str	r3, [r2, #28]
 8004c14:	4b49      	ldr	r3, [pc, #292]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c20:	2301      	movs	r3, #1
 8004c22:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c24:	4b46      	ldr	r3, [pc, #280]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d118      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c30:	4b43      	ldr	r3, [pc, #268]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a42      	ldr	r2, [pc, #264]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c3c:	f7fe fbaa 	bl	8003394 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c42:	e008      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c44:	f7fe fba6 	bl	8003394 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b64      	cmp	r3, #100	@ 0x64
 8004c50:	d901      	bls.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e06d      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c56:	4b3a      	ldr	r3, [pc, #232]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c62:	4b36      	ldr	r3, [pc, #216]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c6a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d02e      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d027      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c80:	4b2e      	ldr	r3, [pc, #184]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c8a:	4b2e      	ldr	r3, [pc, #184]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c90:	4b2c      	ldr	r3, [pc, #176]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c96:	4a29      	ldr	r2, [pc, #164]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d014      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca6:	f7fe fb75 	bl	8003394 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cac:	e00a      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cae:	f7fe fb71 	bl	8003394 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e036      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0ee      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	4917      	ldr	r1, [pc, #92]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ce2:	7dfb      	ldrb	r3, [r7, #23]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d105      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ce8:	4b14      	ldr	r3, [pc, #80]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	4a13      	ldr	r2, [pc, #76]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cf2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d008      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d00:	4b0e      	ldr	r3, [pc, #56]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	490b      	ldr	r1, [pc, #44]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0310 	and.w	r3, r3, #16
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d008      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d1e:	4b07      	ldr	r3, [pc, #28]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	4904      	ldr	r1, [pc, #16]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	40007000 	.word	0x40007000
 8004d44:	42420440 	.word	0x42420440

08004d48 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	2300      	movs	r3, #0
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	2300      	movs	r3, #0
 8004d5a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	2300      	movs	r3, #0
 8004d62:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b10      	cmp	r3, #16
 8004d68:	d00a      	beq.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b10      	cmp	r3, #16
 8004d6e:	f200 808a 	bhi.w	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d045      	beq.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d075      	beq.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004d7e:	e082      	b.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004d80:	4b46      	ldr	r3, [pc, #280]	@ (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004d86:	4b45      	ldr	r3, [pc, #276]	@ (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d07b      	beq.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	0c9b      	lsrs	r3, r3, #18
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	4a41      	ldr	r2, [pc, #260]	@ (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004d9c:	5cd3      	ldrb	r3, [r2, r3]
 8004d9e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d015      	beq.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004daa:	4b3c      	ldr	r3, [pc, #240]	@ (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	0c5b      	lsrs	r3, r3, #17
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	4a3b      	ldr	r2, [pc, #236]	@ (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004db6:	5cd3      	ldrb	r3, [r2, r3]
 8004db8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00d      	beq.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004dc4:	4a38      	ldr	r2, [pc, #224]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	fb02 f303 	mul.w	r3, r2, r3
 8004dd2:	61fb      	str	r3, [r7, #28]
 8004dd4:	e004      	b.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	4a34      	ldr	r2, [pc, #208]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004dda:	fb02 f303 	mul.w	r3, r2, r3
 8004dde:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004de0:	4b2e      	ldr	r3, [pc, #184]	@ (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004de8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dec:	d102      	bne.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	61bb      	str	r3, [r7, #24]
      break;
 8004df2:	e04a      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfe:	085b      	lsrs	r3, r3, #1
 8004e00:	61bb      	str	r3, [r7, #24]
      break;
 8004e02:	e042      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004e04:	4b25      	ldr	r3, [pc, #148]	@ (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e14:	d108      	bne.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004e20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e24:	61bb      	str	r3, [r7, #24]
 8004e26:	e01f      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e32:	d109      	bne.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004e34:	4b19      	ldr	r3, [pc, #100]	@ (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004e40:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	e00f      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e52:	d11c      	bne.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004e54:	4b11      	ldr	r3, [pc, #68]	@ (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d016      	beq.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004e60:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004e64:	61bb      	str	r3, [r7, #24]
      break;
 8004e66:	e012      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004e68:	e011      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004e6a:	f7ff fe85 	bl	8004b78 <HAL_RCC_GetPCLK2Freq>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	4b0a      	ldr	r3, [pc, #40]	@ (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	0b9b      	lsrs	r3, r3, #14
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e82:	61bb      	str	r3, [r7, #24]
      break;
 8004e84:	e004      	b.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004e86:	bf00      	nop
 8004e88:	e002      	b.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004e8a:	bf00      	nop
 8004e8c:	e000      	b.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004e8e:	bf00      	nop
    }
  }
  return (frequency);
 8004e90:	69bb      	ldr	r3, [r7, #24]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3720      	adds	r7, #32
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	08006bf8 	.word	0x08006bf8
 8004ea4:	08006c08 	.word	0x08006c08
 8004ea8:	007a1200 	.word	0x007a1200
 8004eac:	003d0900 	.word	0x003d0900
 8004eb0:	aaaaaaab 	.word	0xaaaaaaab

08004eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e041      	b.n	8004f4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d106      	bne.n	8004ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fe f85e 	bl	8002f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3304      	adds	r3, #4
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	f000 fd16 	bl	8005924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e041      	b.n	8004fe8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d106      	bne.n	8004f7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f839 	bl	8004ff0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2202      	movs	r2, #2
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4610      	mov	r0, r2
 8004f92:	f000 fcc7 	bl	8005924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bc80      	pop	{r7}
 8005000:	4770      	bx	lr
	...

08005004 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d109      	bne.n	8005028 <HAL_TIM_PWM_Start+0x24>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b01      	cmp	r3, #1
 800501e:	bf14      	ite	ne
 8005020:	2301      	movne	r3, #1
 8005022:	2300      	moveq	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	e022      	b.n	800506e <HAL_TIM_PWM_Start+0x6a>
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b04      	cmp	r3, #4
 800502c:	d109      	bne.n	8005042 <HAL_TIM_PWM_Start+0x3e>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b01      	cmp	r3, #1
 8005038:	bf14      	ite	ne
 800503a:	2301      	movne	r3, #1
 800503c:	2300      	moveq	r3, #0
 800503e:	b2db      	uxtb	r3, r3
 8005040:	e015      	b.n	800506e <HAL_TIM_PWM_Start+0x6a>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b08      	cmp	r3, #8
 8005046:	d109      	bne.n	800505c <HAL_TIM_PWM_Start+0x58>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	bf14      	ite	ne
 8005054:	2301      	movne	r3, #1
 8005056:	2300      	moveq	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	e008      	b.n	800506e <HAL_TIM_PWM_Start+0x6a>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	bf14      	ite	ne
 8005068:	2301      	movne	r3, #1
 800506a:	2300      	moveq	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e05e      	b.n	8005134 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d104      	bne.n	8005086 <HAL_TIM_PWM_Start+0x82>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005084:	e013      	b.n	80050ae <HAL_TIM_PWM_Start+0xaa>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b04      	cmp	r3, #4
 800508a:	d104      	bne.n	8005096 <HAL_TIM_PWM_Start+0x92>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005094:	e00b      	b.n	80050ae <HAL_TIM_PWM_Start+0xaa>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b08      	cmp	r3, #8
 800509a:	d104      	bne.n	80050a6 <HAL_TIM_PWM_Start+0xa2>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050a4:	e003      	b.n	80050ae <HAL_TIM_PWM_Start+0xaa>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2202      	movs	r2, #2
 80050aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2201      	movs	r2, #1
 80050b4:	6839      	ldr	r1, [r7, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fec0 	bl	8005e3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a1e      	ldr	r2, [pc, #120]	@ (800513c <HAL_TIM_PWM_Start+0x138>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d107      	bne.n	80050d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a18      	ldr	r2, [pc, #96]	@ (800513c <HAL_TIM_PWM_Start+0x138>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00e      	beq.n	80050fe <HAL_TIM_PWM_Start+0xfa>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050e8:	d009      	beq.n	80050fe <HAL_TIM_PWM_Start+0xfa>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a14      	ldr	r2, [pc, #80]	@ (8005140 <HAL_TIM_PWM_Start+0x13c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d004      	beq.n	80050fe <HAL_TIM_PWM_Start+0xfa>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a12      	ldr	r2, [pc, #72]	@ (8005144 <HAL_TIM_PWM_Start+0x140>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d111      	bne.n	8005122 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b06      	cmp	r3, #6
 800510e:	d010      	beq.n	8005132 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0201 	orr.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005120:	e007      	b.n	8005132 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f042 0201 	orr.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40012c00 	.word	0x40012c00
 8005140:	40000400 	.word	0x40000400
 8005144:	40000800 	.word	0x40000800

08005148 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e093      	b.n	8005284 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d106      	bne.n	8005176 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7fd ff2f 	bl	8002fd4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2202      	movs	r2, #2
 800517a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6812      	ldr	r2, [r2, #0]
 8005188:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800518c:	f023 0307 	bic.w	r3, r3, #7
 8005190:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3304      	adds	r3, #4
 800519a:	4619      	mov	r1, r3
 800519c:	4610      	mov	r0, r2
 800519e:	f000 fbc1 	bl	8005924 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051ca:	f023 0303 	bic.w	r3, r3, #3
 80051ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	4313      	orrs	r3, r2
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80051e8:	f023 030c 	bic.w	r3, r3, #12
 80051ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	4313      	orrs	r3, r2
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	011a      	lsls	r2, r3, #4
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	031b      	lsls	r3, r3, #12
 8005218:	4313      	orrs	r3, r2
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005226:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	4313      	orrs	r3, r2
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800529c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80052b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d110      	bne.n	80052de <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d102      	bne.n	80052c8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80052c2:	7b7b      	ldrb	r3, [r7, #13]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d001      	beq.n	80052cc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e089      	b.n	80053e0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052dc:	e031      	b.n	8005342 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d110      	bne.n	8005306 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80052e4:	7bbb      	ldrb	r3, [r7, #14]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d102      	bne.n	80052f0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80052ea:	7b3b      	ldrb	r3, [r7, #12]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d001      	beq.n	80052f4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e075      	b.n	80053e0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005304:	e01d      	b.n	8005342 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005306:	7bfb      	ldrb	r3, [r7, #15]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d108      	bne.n	800531e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800530c:	7bbb      	ldrb	r3, [r7, #14]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d105      	bne.n	800531e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005312:	7b7b      	ldrb	r3, [r7, #13]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d102      	bne.n	800531e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005318:	7b3b      	ldrb	r3, [r7, #12]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d001      	beq.n	8005322 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e05e      	b.n	80053e0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2202      	movs	r2, #2
 8005326:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2202      	movs	r2, #2
 8005336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2202      	movs	r2, #2
 800533e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b04      	cmp	r3, #4
 800534c:	d010      	beq.n	8005370 <HAL_TIM_Encoder_Start_IT+0xe4>
 800534e:	e01f      	b.n	8005390 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2201      	movs	r2, #1
 8005356:	2100      	movs	r1, #0
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fd6f 	bl	8005e3c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f042 0202 	orr.w	r2, r2, #2
 800536c:	60da      	str	r2, [r3, #12]
      break;
 800536e:	e02e      	b.n	80053ce <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2201      	movs	r2, #1
 8005376:	2104      	movs	r1, #4
 8005378:	4618      	mov	r0, r3
 800537a:	f000 fd5f 	bl	8005e3c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f042 0204 	orr.w	r2, r2, #4
 800538c:	60da      	str	r2, [r3, #12]
      break;
 800538e:	e01e      	b.n	80053ce <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2201      	movs	r2, #1
 8005396:	2100      	movs	r1, #0
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fd4f 	bl	8005e3c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2201      	movs	r2, #1
 80053a4:	2104      	movs	r1, #4
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fd48 	bl	8005e3c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0202 	orr.w	r2, r2, #2
 80053ba:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0204 	orr.w	r2, r2, #4
 80053ca:	60da      	str	r2, [r3, #12]
      break;
 80053cc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0201 	orr.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d020      	beq.n	800544c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01b      	beq.n	800544c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0202 	mvn.w	r2, #2
 800541c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fc fa58 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 8005438:	e005      	b.n	8005446 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fa56 	bl	80058ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 fa5c 	bl	80058fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f003 0304 	and.w	r3, r3, #4
 8005452:	2b00      	cmp	r3, #0
 8005454:	d020      	beq.n	8005498 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01b      	beq.n	8005498 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f06f 0204 	mvn.w	r2, #4
 8005468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2202      	movs	r2, #2
 800546e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7fc fa32 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 8005484:	e005      	b.n	8005492 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fa30 	bl	80058ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fa36 	bl	80058fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d020      	beq.n	80054e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f003 0308 	and.w	r3, r3, #8
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01b      	beq.n	80054e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0208 	mvn.w	r2, #8
 80054b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2204      	movs	r2, #4
 80054ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7fc fa0c 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 80054d0:	e005      	b.n	80054de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fa0a 	bl	80058ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fa10 	bl	80058fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f003 0310 	and.w	r3, r3, #16
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d020      	beq.n	8005530 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f003 0310 	and.w	r3, r3, #16
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01b      	beq.n	8005530 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0210 	mvn.w	r2, #16
 8005500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2208      	movs	r2, #8
 8005506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fc f9e6 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800551c:	e005      	b.n	800552a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f9e4 	bl	80058ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f9ea 	bl	80058fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00c      	beq.n	8005554 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d007      	beq.n	8005554 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0201 	mvn.w	r2, #1
 800554c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f9c3 	bl	80058da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00c      	beq.n	8005578 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005564:	2b00      	cmp	r3, #0
 8005566:	d007      	beq.n	8005578 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fced 	bl	8005f52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00c      	beq.n	800559c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005588:	2b00      	cmp	r3, #0
 800558a:	d007      	beq.n	800559c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f9ba 	bl	8005910 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00c      	beq.n	80055c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f003 0320 	and.w	r3, r3, #32
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d007      	beq.n	80055c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0220 	mvn.w	r2, #32
 80055b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fcc0 	bl	8005f40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055c0:	bf00      	nop
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d101      	bne.n	80055e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055e2:	2302      	movs	r3, #2
 80055e4:	e0ae      	b.n	8005744 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b0c      	cmp	r3, #12
 80055f2:	f200 809f 	bhi.w	8005734 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055f6:	a201      	add	r2, pc, #4	@ (adr r2, 80055fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fc:	08005631 	.word	0x08005631
 8005600:	08005735 	.word	0x08005735
 8005604:	08005735 	.word	0x08005735
 8005608:	08005735 	.word	0x08005735
 800560c:	08005671 	.word	0x08005671
 8005610:	08005735 	.word	0x08005735
 8005614:	08005735 	.word	0x08005735
 8005618:	08005735 	.word	0x08005735
 800561c:	080056b3 	.word	0x080056b3
 8005620:	08005735 	.word	0x08005735
 8005624:	08005735 	.word	0x08005735
 8005628:	08005735 	.word	0x08005735
 800562c:	080056f3 	.word	0x080056f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	4618      	mov	r0, r3
 8005638:	f000 f9e2 	bl	8005a00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699a      	ldr	r2, [r3, #24]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0208 	orr.w	r2, r2, #8
 800564a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699a      	ldr	r2, [r3, #24]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0204 	bic.w	r2, r2, #4
 800565a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6999      	ldr	r1, [r3, #24]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	691a      	ldr	r2, [r3, #16]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	619a      	str	r2, [r3, #24]
      break;
 800566e:	e064      	b.n	800573a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fa28 	bl	8005acc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699a      	ldr	r2, [r3, #24]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800568a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699a      	ldr	r2, [r3, #24]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800569a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6999      	ldr	r1, [r3, #24]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	021a      	lsls	r2, r3, #8
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	619a      	str	r2, [r3, #24]
      break;
 80056b0:	e043      	b.n	800573a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68b9      	ldr	r1, [r7, #8]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 fa71 	bl	8005ba0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69da      	ldr	r2, [r3, #28]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f042 0208 	orr.w	r2, r2, #8
 80056cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69da      	ldr	r2, [r3, #28]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 0204 	bic.w	r2, r2, #4
 80056dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69d9      	ldr	r1, [r3, #28]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	691a      	ldr	r2, [r3, #16]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	61da      	str	r2, [r3, #28]
      break;
 80056f0:	e023      	b.n	800573a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 fabb 	bl	8005c74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69da      	ldr	r2, [r3, #28]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800570c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69da      	ldr	r2, [r3, #28]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800571c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69d9      	ldr	r1, [r3, #28]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	021a      	lsls	r2, r3, #8
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	61da      	str	r2, [r3, #28]
      break;
 8005732:	e002      	b.n	800573a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	75fb      	strb	r3, [r7, #23]
      break;
 8005738:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005742:	7dfb      	ldrb	r3, [r7, #23]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005760:	2b01      	cmp	r3, #1
 8005762:	d101      	bne.n	8005768 <HAL_TIM_ConfigClockSource+0x1c>
 8005764:	2302      	movs	r3, #2
 8005766:	e0b4      	b.n	80058d2 <HAL_TIM_ConfigClockSource+0x186>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800578e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057a0:	d03e      	beq.n	8005820 <HAL_TIM_ConfigClockSource+0xd4>
 80057a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057a6:	f200 8087 	bhi.w	80058b8 <HAL_TIM_ConfigClockSource+0x16c>
 80057aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ae:	f000 8086 	beq.w	80058be <HAL_TIM_ConfigClockSource+0x172>
 80057b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b6:	d87f      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x16c>
 80057b8:	2b70      	cmp	r3, #112	@ 0x70
 80057ba:	d01a      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0xa6>
 80057bc:	2b70      	cmp	r3, #112	@ 0x70
 80057be:	d87b      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x16c>
 80057c0:	2b60      	cmp	r3, #96	@ 0x60
 80057c2:	d050      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x11a>
 80057c4:	2b60      	cmp	r3, #96	@ 0x60
 80057c6:	d877      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x16c>
 80057c8:	2b50      	cmp	r3, #80	@ 0x50
 80057ca:	d03c      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0xfa>
 80057cc:	2b50      	cmp	r3, #80	@ 0x50
 80057ce:	d873      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x16c>
 80057d0:	2b40      	cmp	r3, #64	@ 0x40
 80057d2:	d058      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0x13a>
 80057d4:	2b40      	cmp	r3, #64	@ 0x40
 80057d6:	d86f      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x16c>
 80057d8:	2b30      	cmp	r3, #48	@ 0x30
 80057da:	d064      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0x15a>
 80057dc:	2b30      	cmp	r3, #48	@ 0x30
 80057de:	d86b      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x16c>
 80057e0:	2b20      	cmp	r3, #32
 80057e2:	d060      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0x15a>
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d867      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x16c>
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d05c      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0x15a>
 80057ec:	2b10      	cmp	r3, #16
 80057ee:	d05a      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0x15a>
 80057f0:	e062      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005802:	f000 fafc 	bl	8005dfe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005814:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	609a      	str	r2, [r3, #8]
      break;
 800581e:	e04f      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005830:	f000 fae5 	bl	8005dfe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689a      	ldr	r2, [r3, #8]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005842:	609a      	str	r2, [r3, #8]
      break;
 8005844:	e03c      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005852:	461a      	mov	r2, r3
 8005854:	f000 fa5c 	bl	8005d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2150      	movs	r1, #80	@ 0x50
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fab3 	bl	8005dca <TIM_ITRx_SetConfig>
      break;
 8005864:	e02c      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005872:	461a      	mov	r2, r3
 8005874:	f000 fa7a 	bl	8005d6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2160      	movs	r1, #96	@ 0x60
 800587e:	4618      	mov	r0, r3
 8005880:	f000 faa3 	bl	8005dca <TIM_ITRx_SetConfig>
      break;
 8005884:	e01c      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005892:	461a      	mov	r2, r3
 8005894:	f000 fa3c 	bl	8005d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2140      	movs	r1, #64	@ 0x40
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fa93 	bl	8005dca <TIM_ITRx_SetConfig>
      break;
 80058a4:	e00c      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4619      	mov	r1, r3
 80058b0:	4610      	mov	r0, r2
 80058b2:	f000 fa8a 	bl	8005dca <TIM_ITRx_SetConfig>
      break;
 80058b6:	e003      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	73fb      	strb	r3, [r7, #15]
      break;
 80058bc:	e000      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bc80      	pop	{r7}
 80058ea:	4770      	bx	lr

080058ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc80      	pop	{r7}
 80058fc:	4770      	bx	lr

080058fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	bc80      	pop	{r7}
 800590e:	4770      	bx	lr

08005910 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	bc80      	pop	{r7}
 8005920:	4770      	bx	lr
	...

08005924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a2f      	ldr	r2, [pc, #188]	@ (80059f4 <TIM_Base_SetConfig+0xd0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00b      	beq.n	8005954 <TIM_Base_SetConfig+0x30>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005942:	d007      	beq.n	8005954 <TIM_Base_SetConfig+0x30>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a2c      	ldr	r2, [pc, #176]	@ (80059f8 <TIM_Base_SetConfig+0xd4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d003      	beq.n	8005954 <TIM_Base_SetConfig+0x30>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a2b      	ldr	r2, [pc, #172]	@ (80059fc <TIM_Base_SetConfig+0xd8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d108      	bne.n	8005966 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800595a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a22      	ldr	r2, [pc, #136]	@ (80059f4 <TIM_Base_SetConfig+0xd0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00b      	beq.n	8005986 <TIM_Base_SetConfig+0x62>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005974:	d007      	beq.n	8005986 <TIM_Base_SetConfig+0x62>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a1f      	ldr	r2, [pc, #124]	@ (80059f8 <TIM_Base_SetConfig+0xd4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d003      	beq.n	8005986 <TIM_Base_SetConfig+0x62>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a1e      	ldr	r2, [pc, #120]	@ (80059fc <TIM_Base_SetConfig+0xd8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d108      	bne.n	8005998 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800598c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a0d      	ldr	r2, [pc, #52]	@ (80059f4 <TIM_Base_SetConfig+0xd0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d103      	bne.n	80059cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d005      	beq.n	80059ea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	f023 0201 	bic.w	r2, r3, #1
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	611a      	str	r2, [r3, #16]
  }
}
 80059ea:	bf00      	nop
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bc80      	pop	{r7}
 80059f2:	4770      	bx	lr
 80059f4:	40012c00 	.word	0x40012c00
 80059f8:	40000400 	.word	0x40000400
 80059fc:	40000800 	.word	0x40000800

08005a00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	f023 0201 	bic.w	r2, r3, #1
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0303 	bic.w	r3, r3, #3
 8005a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f023 0302 	bic.w	r3, r3, #2
 8005a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a1c      	ldr	r2, [pc, #112]	@ (8005ac8 <TIM_OC1_SetConfig+0xc8>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d10c      	bne.n	8005a76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f023 0308 	bic.w	r3, r3, #8
 8005a62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f023 0304 	bic.w	r3, r3, #4
 8005a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a13      	ldr	r2, [pc, #76]	@ (8005ac8 <TIM_OC1_SetConfig+0xc8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d111      	bne.n	8005aa2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	621a      	str	r2, [r3, #32]
}
 8005abc:	bf00      	nop
 8005abe:	371c      	adds	r7, #28
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bc80      	pop	{r7}
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40012c00 	.word	0x40012c00

08005acc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	f023 0210 	bic.w	r2, r3, #16
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	021b      	lsls	r3, r3, #8
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f023 0320 	bic.w	r3, r3, #32
 8005b16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a1d      	ldr	r2, [pc, #116]	@ (8005b9c <TIM_OC2_SetConfig+0xd0>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d10d      	bne.n	8005b48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a14      	ldr	r2, [pc, #80]	@ (8005b9c <TIM_OC2_SetConfig+0xd0>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d113      	bne.n	8005b78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	621a      	str	r2, [r3, #32]
}
 8005b92:	bf00      	nop
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bc80      	pop	{r7}
 8005b9a:	4770      	bx	lr
 8005b9c:	40012c00 	.word	0x40012c00

08005ba0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0303 	bic.w	r3, r3, #3
 8005bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	021b      	lsls	r3, r3, #8
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c70 <TIM_OC3_SetConfig+0xd0>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d10d      	bne.n	8005c1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	021b      	lsls	r3, r3, #8
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a14      	ldr	r2, [pc, #80]	@ (8005c70 <TIM_OC3_SetConfig+0xd0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d113      	bne.n	8005c4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	011b      	lsls	r3, r3, #4
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	621a      	str	r2, [r3, #32]
}
 8005c64:	bf00      	nop
 8005c66:	371c      	adds	r7, #28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bc80      	pop	{r7}
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	40012c00 	.word	0x40012c00

08005c74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	021b      	lsls	r3, r3, #8
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	031b      	lsls	r3, r3, #12
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a0f      	ldr	r2, [pc, #60]	@ (8005d0c <TIM_OC4_SetConfig+0x98>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d109      	bne.n	8005ce8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	019b      	lsls	r3, r3, #6
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	621a      	str	r2, [r3, #32]
}
 8005d02:	bf00      	nop
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bc80      	pop	{r7}
 8005d0a:	4770      	bx	lr
 8005d0c:	40012c00 	.word	0x40012c00

08005d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	f023 0201 	bic.w	r2, r3, #1
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f023 030a 	bic.w	r3, r3, #10
 8005d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	621a      	str	r2, [r3, #32]
}
 8005d62:	bf00      	nop
 8005d64:	371c      	adds	r7, #28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr

08005d6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	f023 0210 	bic.w	r2, r3, #16
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	031b      	lsls	r3, r3, #12
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005da8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	621a      	str	r2, [r3, #32]
}
 8005dc0:	bf00      	nop
 8005dc2:	371c      	adds	r7, #28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr

08005dca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b085      	sub	sp, #20
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	f043 0307 	orr.w	r3, r3, #7
 8005dec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	609a      	str	r2, [r3, #8]
}
 8005df4:	bf00      	nop
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bc80      	pop	{r7}
 8005dfc:	4770      	bx	lr

08005dfe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b087      	sub	sp, #28
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	607a      	str	r2, [r7, #4]
 8005e0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	021a      	lsls	r2, r3, #8
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	431a      	orrs	r2, r3
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	609a      	str	r2, [r3, #8]
}
 8005e32:	bf00      	nop
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bc80      	pop	{r7}
 8005e3a:	4770      	bx	lr

08005e3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f003 031f 	and.w	r3, r3, #31
 8005e4e:	2201      	movs	r2, #1
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a1a      	ldr	r2, [r3, #32]
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	43db      	mvns	r3, r3
 8005e5e:	401a      	ands	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a1a      	ldr	r2, [r3, #32]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f003 031f 	and.w	r3, r3, #31
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	fa01 f303 	lsl.w	r3, r1, r3
 8005e74:	431a      	orrs	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	621a      	str	r2, [r3, #32]
}
 8005e7a:	bf00      	nop
 8005e7c:	371c      	adds	r7, #28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bc80      	pop	{r7}
 8005e82:	4770      	bx	lr

08005e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d101      	bne.n	8005e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e046      	b.n	8005f2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a16      	ldr	r2, [pc, #88]	@ (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d00e      	beq.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ee8:	d009      	beq.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a12      	ldr	r2, [pc, #72]	@ (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d004      	beq.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a10      	ldr	r2, [pc, #64]	@ (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d10c      	bne.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bc80      	pop	{r7}
 8005f32:	4770      	bx	lr
 8005f34:	40012c00 	.word	0x40012c00
 8005f38:	40000400 	.word	0x40000400
 8005f3c:	40000800 	.word	0x40000800

08005f40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bc80      	pop	{r7}
 8005f50:	4770      	bx	lr

08005f52 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bc80      	pop	{r7}
 8005f62:	4770      	bx	lr

08005f64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e042      	b.n	8005ffc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fd f8ce 	bl	800312c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2224      	movs	r2, #36	@ 0x24
 8005f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fd09 	bl	80069c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	691a      	ldr	r2, [r3, #16]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695a      	ldr	r2, [r3, #20]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	4613      	mov	r3, r2
 8006010:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b20      	cmp	r3, #32
 800601c:	d121      	bne.n	8006062 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <HAL_UART_Transmit_IT+0x26>
 8006024:	88fb      	ldrh	r3, [r7, #6]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e01a      	b.n	8006064 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	88fa      	ldrh	r2, [r7, #6]
 8006038:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	88fa      	ldrh	r2, [r7, #6]
 800603e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2221      	movs	r2, #33	@ 0x21
 800604a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68da      	ldr	r2, [r3, #12]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800605c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	e000      	b.n	8006064 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8006062:	2302      	movs	r3, #2
  }
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	bc80      	pop	{r7}
 800606c:	4770      	bx	lr

0800606e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b084      	sub	sp, #16
 8006072:	af00      	add	r7, sp, #0
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	4613      	mov	r3, r2
 800607a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b20      	cmp	r3, #32
 8006086:	d112      	bne.n	80060ae <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <HAL_UART_Receive_IT+0x26>
 800608e:	88fb      	ldrh	r3, [r7, #6]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e00b      	b.n	80060b0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800609e:	88fb      	ldrh	r3, [r7, #6]
 80060a0:	461a      	mov	r2, r3
 80060a2:	68b9      	ldr	r1, [r7, #8]
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 fab6 	bl	8006616 <UART_Start_Receive_IT>
 80060aa:	4603      	mov	r3, r0
 80060ac:	e000      	b.n	80060b0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80060ae:	2302      	movs	r3, #2
  }
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b0ba      	sub	sp, #232	@ 0xe8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80060de:	2300      	movs	r3, #0
 80060e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80060f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10f      	bne.n	800611e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006102:	f003 0320 	and.w	r3, r3, #32
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <HAL_UART_IRQHandler+0x66>
 800610a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fb93 	bl	8006842 <UART_Receive_IT>
      return;
 800611c:	e25b      	b.n	80065d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800611e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 80de 	beq.w	80062e4 <HAL_UART_IRQHandler+0x22c>
 8006128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	d106      	bne.n	8006142 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006138:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 80d1 	beq.w	80062e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00b      	beq.n	8006166 <HAL_UART_IRQHandler+0xae>
 800614e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006156:	2b00      	cmp	r3, #0
 8006158:	d005      	beq.n	8006166 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800615e:	f043 0201 	orr.w	r2, r3, #1
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800616a:	f003 0304 	and.w	r3, r3, #4
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00b      	beq.n	800618a <HAL_UART_IRQHandler+0xd2>
 8006172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d005      	beq.n	800618a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006182:	f043 0202 	orr.w	r2, r3, #2
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800618a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00b      	beq.n	80061ae <HAL_UART_IRQHandler+0xf6>
 8006196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d005      	beq.n	80061ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061a6:	f043 0204 	orr.w	r2, r3, #4
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d011      	beq.n	80061de <HAL_UART_IRQHandler+0x126>
 80061ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d105      	bne.n	80061d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80061c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d005      	beq.n	80061de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d6:	f043 0208 	orr.w	r2, r3, #8
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 81f2 	beq.w	80065cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d008      	beq.n	8006206 <HAL_UART_IRQHandler+0x14e>
 80061f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061f8:	f003 0320 	and.w	r3, r3, #32
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fb1e 	bl	8006842 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006210:	2b00      	cmp	r3, #0
 8006212:	bf14      	ite	ne
 8006214:	2301      	movne	r3, #1
 8006216:	2300      	moveq	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d103      	bne.n	8006232 <HAL_UART_IRQHandler+0x17a>
 800622a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800622e:	2b00      	cmp	r3, #0
 8006230:	d04f      	beq.n	80062d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fa28 	bl	8006688 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006242:	2b00      	cmp	r3, #0
 8006244:	d041      	beq.n	80062ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3314      	adds	r3, #20
 800624c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006250:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800625c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006260:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006264:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3314      	adds	r3, #20
 800626e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006272:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006276:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800627e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006282:	e841 2300 	strex	r3, r2, [r1]
 8006286:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800628a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1d9      	bne.n	8006246 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006296:	2b00      	cmp	r3, #0
 8006298:	d013      	beq.n	80062c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800629e:	4a7e      	ldr	r2, [pc, #504]	@ (8006498 <HAL_UART_IRQHandler+0x3e0>)
 80062a0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fd fe42 	bl	8003f30 <HAL_DMA_Abort_IT>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d016      	beq.n	80062e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80062bc:	4610      	mov	r0, r2
 80062be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c0:	e00e      	b.n	80062e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f993 	bl	80065ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c8:	e00a      	b.n	80062e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f98f 	bl	80065ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d0:	e006      	b.n	80062e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f98b 	bl	80065ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80062de:	e175      	b.n	80065cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e0:	bf00      	nop
    return;
 80062e2:	e173      	b.n	80065cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	f040 814f 	bne.w	800658c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f2:	f003 0310 	and.w	r3, r3, #16
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 8148 	beq.w	800658c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006300:	f003 0310 	and.w	r3, r3, #16
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 8141 	beq.w	800658c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800630a:	2300      	movs	r3, #0
 800630c:	60bb      	str	r3, [r7, #8]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	60bb      	str	r3, [r7, #8]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	60bb      	str	r3, [r7, #8]
 800631e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 80b6 	beq.w	800649c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800633c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 8145 	beq.w	80065d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800634a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800634e:	429a      	cmp	r2, r3
 8006350:	f080 813e 	bcs.w	80065d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800635a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	2b20      	cmp	r3, #32
 8006364:	f000 8088 	beq.w	8006478 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	330c      	adds	r3, #12
 800636e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006376:	e853 3f00 	ldrex	r3, [r3]
 800637a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800637e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006382:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006386:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	330c      	adds	r3, #12
 8006390:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006394:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006398:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80063a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80063a4:	e841 2300 	strex	r3, r2, [r1]
 80063a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80063ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1d9      	bne.n	8006368 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3314      	adds	r3, #20
 80063ba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063be:	e853 3f00 	ldrex	r3, [r3]
 80063c2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80063c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063c6:	f023 0301 	bic.w	r3, r3, #1
 80063ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3314      	adds	r3, #20
 80063d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80063d8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80063dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80063e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80063e4:	e841 2300 	strex	r3, r2, [r1]
 80063e8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80063ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e1      	bne.n	80063b4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3314      	adds	r3, #20
 80063f6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063fa:	e853 3f00 	ldrex	r3, [r3]
 80063fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006400:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006406:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3314      	adds	r3, #20
 8006410:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006414:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006416:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800641a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006422:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e3      	bne.n	80063f0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2220      	movs	r2, #32
 800642c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	330c      	adds	r3, #12
 800643c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006446:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006448:	f023 0310 	bic.w	r3, r3, #16
 800644c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	330c      	adds	r3, #12
 8006456:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800645a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800645c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006460:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006462:	e841 2300 	strex	r3, r2, [r1]
 8006466:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006468:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1e3      	bne.n	8006436 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006472:	4618      	mov	r0, r3
 8006474:	f7fd fd21 	bl	8003eba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006486:	b29b      	uxth	r3, r3
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	b29b      	uxth	r3, r3
 800648c:	4619      	mov	r1, r3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f8b6 	bl	8006600 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006494:	e09c      	b.n	80065d0 <HAL_UART_IRQHandler+0x518>
 8006496:	bf00      	nop
 8006498:	0800674d 	.word	0x0800674d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 808e 	beq.w	80065d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80064b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 8089 	beq.w	80065d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	330c      	adds	r3, #12
 80064c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	330c      	adds	r3, #12
 80064e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80064e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80064e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064ee:	e841 2300 	strex	r3, r2, [r1]
 80064f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1e3      	bne.n	80064c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3314      	adds	r3, #20
 8006500:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	623b      	str	r3, [r7, #32]
   return(result);
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	f023 0301 	bic.w	r3, r3, #1
 8006510:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3314      	adds	r3, #20
 800651a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800651e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006520:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800652c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e3      	bne.n	80064fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2220      	movs	r2, #32
 8006536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	330c      	adds	r3, #12
 8006546:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 0310 	bic.w	r3, r3, #16
 8006556:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	330c      	adds	r3, #12
 8006560:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006564:	61fa      	str	r2, [r7, #28]
 8006566:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006568:	69b9      	ldr	r1, [r7, #24]
 800656a:	69fa      	ldr	r2, [r7, #28]
 800656c:	e841 2300 	strex	r3, r2, [r1]
 8006570:	617b      	str	r3, [r7, #20]
   return(result);
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1e3      	bne.n	8006540 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800657e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006582:	4619      	mov	r1, r3
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f83b 	bl	8006600 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800658a:	e023      	b.n	80065d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800658c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006594:	2b00      	cmp	r3, #0
 8006596:	d009      	beq.n	80065ac <HAL_UART_IRQHandler+0x4f4>
 8006598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800659c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f8e5 	bl	8006774 <UART_Transmit_IT>
    return;
 80065aa:	e014      	b.n	80065d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00e      	beq.n	80065d6 <HAL_UART_IRQHandler+0x51e>
 80065b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d008      	beq.n	80065d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f924 	bl	8006812 <UART_EndTransmit_IT>
    return;
 80065ca:	e004      	b.n	80065d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80065cc:	bf00      	nop
 80065ce:	e002      	b.n	80065d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80065d0:	bf00      	nop
 80065d2:	e000      	b.n	80065d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80065d4:	bf00      	nop
  }
}
 80065d6:	37e8      	adds	r7, #232	@ 0xe8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bc80      	pop	{r7}
 80065ec:	4770      	bx	lr

080065ee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065f6:	bf00      	nop
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bc80      	pop	{r7}
 80065fe:	4770      	bx	lr

08006600 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	bc80      	pop	{r7}
 8006614:	4770      	bx	lr

08006616 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	4613      	mov	r3, r2
 8006622:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	88fa      	ldrh	r2, [r7, #6]
 800662e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	88fa      	ldrh	r2, [r7, #6]
 8006634:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2222      	movs	r2, #34	@ 0x22
 8006640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d007      	beq.n	800665c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800665a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	695a      	ldr	r2, [r3, #20]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0201 	orr.w	r2, r2, #1
 800666a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0220 	orr.w	r2, r2, #32
 800667a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	bc80      	pop	{r7}
 8006686:	4770      	bx	lr

08006688 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006688:	b480      	push	{r7}
 800668a:	b095      	sub	sp, #84	@ 0x54
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	330c      	adds	r3, #12
 8006696:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800669a:	e853 3f00 	ldrex	r3, [r3]
 800669e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	330c      	adds	r3, #12
 80066ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80066b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066b8:	e841 2300 	strex	r3, r2, [r1]
 80066bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1e5      	bne.n	8006690 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3314      	adds	r3, #20
 80066ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	e853 3f00 	ldrex	r3, [r3]
 80066d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	f023 0301 	bic.w	r3, r3, #1
 80066da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3314      	adds	r3, #20
 80066e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066ec:	e841 2300 	strex	r3, r2, [r1]
 80066f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1e5      	bne.n	80066c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d119      	bne.n	8006734 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	330c      	adds	r3, #12
 8006706:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	e853 3f00 	ldrex	r3, [r3]
 800670e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	f023 0310 	bic.w	r3, r3, #16
 8006716:	647b      	str	r3, [r7, #68]	@ 0x44
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	330c      	adds	r3, #12
 800671e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006720:	61ba      	str	r2, [r7, #24]
 8006722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006724:	6979      	ldr	r1, [r7, #20]
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	e841 2300 	strex	r3, r2, [r1]
 800672c:	613b      	str	r3, [r7, #16]
   return(result);
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1e5      	bne.n	8006700 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2220      	movs	r2, #32
 8006738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006742:	bf00      	nop
 8006744:	3754      	adds	r7, #84	@ 0x54
 8006746:	46bd      	mov	sp, r7
 8006748:	bc80      	pop	{r7}
 800674a:	4770      	bx	lr

0800674c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006758:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f7ff ff41 	bl	80065ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800676c:	bf00      	nop
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b21      	cmp	r3, #33	@ 0x21
 8006786:	d13e      	bne.n	8006806 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006790:	d114      	bne.n	80067bc <UART_Transmit_IT+0x48>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d110      	bne.n	80067bc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	461a      	mov	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	1c9a      	adds	r2, r3, #2
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	621a      	str	r2, [r3, #32]
 80067ba:	e008      	b.n	80067ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	1c59      	adds	r1, r3, #1
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	6211      	str	r1, [r2, #32]
 80067c6:	781a      	ldrb	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	3b01      	subs	r3, #1
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	4619      	mov	r1, r3
 80067dc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10f      	bne.n	8006802 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68da      	ldr	r2, [r3, #12]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80067f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68da      	ldr	r2, [r3, #12]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006800:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	e000      	b.n	8006808 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006806:	2302      	movs	r3, #2
  }
}
 8006808:	4618      	mov	r0, r3
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	bc80      	pop	{r7}
 8006810:	4770      	bx	lr

08006812 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006828:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2220      	movs	r2, #32
 800682e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7ff fed2 	bl	80065dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b08c      	sub	sp, #48	@ 0x30
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b22      	cmp	r3, #34	@ 0x22
 8006854:	f040 80ae 	bne.w	80069b4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006860:	d117      	bne.n	8006892 <UART_Receive_IT+0x50>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d113      	bne.n	8006892 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800686a:	2300      	movs	r3, #0
 800686c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006872:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	b29b      	uxth	r3, r3
 800687c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006880:	b29a      	uxth	r2, r3
 8006882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006884:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800688a:	1c9a      	adds	r2, r3, #2
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006890:	e026      	b.n	80068e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006896:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006898:	2300      	movs	r3, #0
 800689a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068a4:	d007      	beq.n	80068b6 <UART_Receive_IT+0x74>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10a      	bne.n	80068c4 <UART_Receive_IT+0x82>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d106      	bne.n	80068c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	e008      	b.n	80068d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	3b01      	subs	r3, #1
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	4619      	mov	r1, r3
 80068ee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d15d      	bne.n	80069b0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68da      	ldr	r2, [r3, #12]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 0220 	bic.w	r2, r2, #32
 8006902:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68da      	ldr	r2, [r3, #12]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006912:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695a      	ldr	r2, [r3, #20]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0201 	bic.w	r2, r2, #1
 8006922:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2220      	movs	r2, #32
 8006928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006936:	2b01      	cmp	r3, #1
 8006938:	d135      	bne.n	80069a6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	330c      	adds	r3, #12
 8006946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	e853 3f00 	ldrex	r3, [r3]
 800694e:	613b      	str	r3, [r7, #16]
   return(result);
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f023 0310 	bic.w	r3, r3, #16
 8006956:	627b      	str	r3, [r7, #36]	@ 0x24
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	330c      	adds	r3, #12
 800695e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006960:	623a      	str	r2, [r7, #32]
 8006962:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	69f9      	ldr	r1, [r7, #28]
 8006966:	6a3a      	ldr	r2, [r7, #32]
 8006968:	e841 2300 	strex	r3, r2, [r1]
 800696c:	61bb      	str	r3, [r7, #24]
   return(result);
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e5      	bne.n	8006940 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0310 	and.w	r3, r3, #16
 800697e:	2b10      	cmp	r3, #16
 8006980:	d10a      	bne.n	8006998 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006982:	2300      	movs	r3, #0
 8006984:	60fb      	str	r3, [r7, #12]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	60fb      	str	r3, [r7, #12]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7ff fe2e 	bl	8006600 <HAL_UARTEx_RxEventCallback>
 80069a4:	e002      	b.n	80069ac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7fa fea8 	bl	80016fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069ac:	2300      	movs	r3, #0
 80069ae:	e002      	b.n	80069b6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	e000      	b.n	80069b6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80069b4:	2302      	movs	r3, #2
  }
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3730      	adds	r7, #48	@ 0x30
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
	...

080069c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68da      	ldr	r2, [r3, #12]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689a      	ldr	r2, [r3, #8]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	431a      	orrs	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80069fa:	f023 030c 	bic.w	r3, r3, #12
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6812      	ldr	r2, [r2, #0]
 8006a02:	68b9      	ldr	r1, [r7, #8]
 8006a04:	430b      	orrs	r3, r1
 8006a06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699a      	ldr	r2, [r3, #24]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a2c      	ldr	r2, [pc, #176]	@ (8006ad4 <UART_SetConfig+0x114>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d103      	bne.n	8006a30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006a28:	f7fe f8a6 	bl	8004b78 <HAL_RCC_GetPCLK2Freq>
 8006a2c:	60f8      	str	r0, [r7, #12]
 8006a2e:	e002      	b.n	8006a36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006a30:	f7fe f88e 	bl	8004b50 <HAL_RCC_GetPCLK1Freq>
 8006a34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	009a      	lsls	r2, r3, #2
 8006a40:	441a      	add	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a4c:	4a22      	ldr	r2, [pc, #136]	@ (8006ad8 <UART_SetConfig+0x118>)
 8006a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	0119      	lsls	r1, r3, #4
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	009a      	lsls	r2, r3, #2
 8006a60:	441a      	add	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ad8 <UART_SetConfig+0x118>)
 8006a6e:	fba3 0302 	umull	r0, r3, r3, r2
 8006a72:	095b      	lsrs	r3, r3, #5
 8006a74:	2064      	movs	r0, #100	@ 0x64
 8006a76:	fb00 f303 	mul.w	r3, r0, r3
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	011b      	lsls	r3, r3, #4
 8006a7e:	3332      	adds	r3, #50	@ 0x32
 8006a80:	4a15      	ldr	r2, [pc, #84]	@ (8006ad8 <UART_SetConfig+0x118>)
 8006a82:	fba2 2303 	umull	r2, r3, r2, r3
 8006a86:	095b      	lsrs	r3, r3, #5
 8006a88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a8c:	4419      	add	r1, r3
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	4613      	mov	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	009a      	lsls	r2, r3, #2
 8006a98:	441a      	add	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ad8 <UART_SetConfig+0x118>)
 8006aa6:	fba3 0302 	umull	r0, r3, r3, r2
 8006aaa:	095b      	lsrs	r3, r3, #5
 8006aac:	2064      	movs	r0, #100	@ 0x64
 8006aae:	fb00 f303 	mul.w	r3, r0, r3
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	011b      	lsls	r3, r3, #4
 8006ab6:	3332      	adds	r3, #50	@ 0x32
 8006ab8:	4a07      	ldr	r2, [pc, #28]	@ (8006ad8 <UART_SetConfig+0x118>)
 8006aba:	fba2 2303 	umull	r2, r3, r2, r3
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	f003 020f 	and.w	r2, r3, #15
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	440a      	add	r2, r1
 8006aca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006acc:	bf00      	nop
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	40013800 	.word	0x40013800
 8006ad8:	51eb851f 	.word	0x51eb851f

08006adc <memset>:
 8006adc:	4603      	mov	r3, r0
 8006ade:	4402      	add	r2, r0
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d100      	bne.n	8006ae6 <memset+0xa>
 8006ae4:	4770      	bx	lr
 8006ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8006aea:	e7f9      	b.n	8006ae0 <memset+0x4>

08006aec <__libc_init_array>:
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	2600      	movs	r6, #0
 8006af0:	4d0c      	ldr	r5, [pc, #48]	@ (8006b24 <__libc_init_array+0x38>)
 8006af2:	4c0d      	ldr	r4, [pc, #52]	@ (8006b28 <__libc_init_array+0x3c>)
 8006af4:	1b64      	subs	r4, r4, r5
 8006af6:	10a4      	asrs	r4, r4, #2
 8006af8:	42a6      	cmp	r6, r4
 8006afa:	d109      	bne.n	8006b10 <__libc_init_array+0x24>
 8006afc:	f000 f828 	bl	8006b50 <_init>
 8006b00:	2600      	movs	r6, #0
 8006b02:	4d0a      	ldr	r5, [pc, #40]	@ (8006b2c <__libc_init_array+0x40>)
 8006b04:	4c0a      	ldr	r4, [pc, #40]	@ (8006b30 <__libc_init_array+0x44>)
 8006b06:	1b64      	subs	r4, r4, r5
 8006b08:	10a4      	asrs	r4, r4, #2
 8006b0a:	42a6      	cmp	r6, r4
 8006b0c:	d105      	bne.n	8006b1a <__libc_init_array+0x2e>
 8006b0e:	bd70      	pop	{r4, r5, r6, pc}
 8006b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b14:	4798      	blx	r3
 8006b16:	3601      	adds	r6, #1
 8006b18:	e7ee      	b.n	8006af8 <__libc_init_array+0xc>
 8006b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b1e:	4798      	blx	r3
 8006b20:	3601      	adds	r6, #1
 8006b22:	e7f2      	b.n	8006b0a <__libc_init_array+0x1e>
 8006b24:	08006c0c 	.word	0x08006c0c
 8006b28:	08006c0c 	.word	0x08006c0c
 8006b2c:	08006c0c 	.word	0x08006c0c
 8006b30:	08006c10 	.word	0x08006c10

08006b34 <memcpy>:
 8006b34:	440a      	add	r2, r1
 8006b36:	4291      	cmp	r1, r2
 8006b38:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b3c:	d100      	bne.n	8006b40 <memcpy+0xc>
 8006b3e:	4770      	bx	lr
 8006b40:	b510      	push	{r4, lr}
 8006b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b46:	4291      	cmp	r1, r2
 8006b48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b4c:	d1f9      	bne.n	8006b42 <memcpy+0xe>
 8006b4e:	bd10      	pop	{r4, pc}

08006b50 <_init>:
 8006b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b52:	bf00      	nop
 8006b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b56:	bc08      	pop	{r3}
 8006b58:	469e      	mov	lr, r3
 8006b5a:	4770      	bx	lr

08006b5c <_fini>:
 8006b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5e:	bf00      	nop
 8006b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b62:	bc08      	pop	{r3}
 8006b64:	469e      	mov	lr, r3
 8006b66:	4770      	bx	lr
