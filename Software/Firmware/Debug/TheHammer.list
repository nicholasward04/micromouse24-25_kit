
TheHammer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c2c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08008d38  08008d38  00009d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008da4  08008da4  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000000  08008da4  08008da4  0000a07c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008da4  08008da4  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008da4  08008da4  00009da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008da8  08008da8  00009da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008dac  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d80  20000080  08008e28  0000a080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e00  08008e28  0000ae00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001347a  00000000  00000000  0000a0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ba  00000000  00000000  0001d51f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  00020be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d74  00000000  00000000  00021d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5d5  00000000  00000000  00022aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d0d  00000000  00000000  0003d079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091857  00000000  00000000  00053d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e55dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c44  00000000  00000000  000e5620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ea264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08008d20 	.word	0x08008d20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08008d20 	.word	0x08008d20

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_d2f>:
 8000938:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800093c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000940:	bf24      	itt	cs
 8000942:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000946:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800094a:	d90d      	bls.n	8000968 <__aeabi_d2f+0x30>
 800094c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000950:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000954:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000958:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800095c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000960:	bf08      	it	eq
 8000962:	f020 0001 	biceq.w	r0, r0, #1
 8000966:	4770      	bx	lr
 8000968:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800096c:	d121      	bne.n	80009b2 <__aeabi_d2f+0x7a>
 800096e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000972:	bfbc      	itt	lt
 8000974:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000978:	4770      	bxlt	lr
 800097a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000982:	f1c2 0218 	rsb	r2, r2, #24
 8000986:	f1c2 0c20 	rsb	ip, r2, #32
 800098a:	fa10 f30c 	lsls.w	r3, r0, ip
 800098e:	fa20 f002 	lsr.w	r0, r0, r2
 8000992:	bf18      	it	ne
 8000994:	f040 0001 	orrne.w	r0, r0, #1
 8000998:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a4:	ea40 000c 	orr.w	r0, r0, ip
 80009a8:	fa23 f302 	lsr.w	r3, r3, r2
 80009ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b0:	e7cc      	b.n	800094c <__aeabi_d2f+0x14>
 80009b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009b6:	d107      	bne.n	80009c8 <__aeabi_d2f+0x90>
 80009b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009bc:	bf1e      	ittt	ne
 80009be:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009c2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009c6:	4770      	bxne	lr
 80009c8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <__aeabi_frsub>:
 80009d8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009dc:	e002      	b.n	80009e4 <__addsf3>
 80009de:	bf00      	nop

080009e0 <__aeabi_fsub>:
 80009e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009e4 <__addsf3>:
 80009e4:	0042      	lsls	r2, r0, #1
 80009e6:	bf1f      	itttt	ne
 80009e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009ec:	ea92 0f03 	teqne	r2, r3
 80009f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009f8:	d06a      	beq.n	8000ad0 <__addsf3+0xec>
 80009fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a02:	bfc1      	itttt	gt
 8000a04:	18d2      	addgt	r2, r2, r3
 8000a06:	4041      	eorgt	r1, r0
 8000a08:	4048      	eorgt	r0, r1
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	bfb8      	it	lt
 8000a0e:	425b      	neglt	r3, r3
 8000a10:	2b19      	cmp	r3, #25
 8000a12:	bf88      	it	hi
 8000a14:	4770      	bxhi	lr
 8000a16:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a1a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a1e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a22:	bf18      	it	ne
 8000a24:	4240      	negne	r0, r0
 8000a26:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a2a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a2e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a32:	bf18      	it	ne
 8000a34:	4249      	negne	r1, r1
 8000a36:	ea92 0f03 	teq	r2, r3
 8000a3a:	d03f      	beq.n	8000abc <__addsf3+0xd8>
 8000a3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a40:	fa41 fc03 	asr.w	ip, r1, r3
 8000a44:	eb10 000c 	adds.w	r0, r0, ip
 8000a48:	f1c3 0320 	rsb	r3, r3, #32
 8000a4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a50:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a54:	d502      	bpl.n	8000a5c <__addsf3+0x78>
 8000a56:	4249      	negs	r1, r1
 8000a58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a5c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a60:	d313      	bcc.n	8000a8a <__addsf3+0xa6>
 8000a62:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a66:	d306      	bcc.n	8000a76 <__addsf3+0x92>
 8000a68:	0840      	lsrs	r0, r0, #1
 8000a6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a6e:	f102 0201 	add.w	r2, r2, #1
 8000a72:	2afe      	cmp	r2, #254	@ 0xfe
 8000a74:	d251      	bcs.n	8000b1a <__addsf3+0x136>
 8000a76:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a7e:	bf08      	it	eq
 8000a80:	f020 0001 	biceq.w	r0, r0, #1
 8000a84:	ea40 0003 	orr.w	r0, r0, r3
 8000a88:	4770      	bx	lr
 8000a8a:	0049      	lsls	r1, r1, #1
 8000a8c:	eb40 0000 	adc.w	r0, r0, r0
 8000a90:	3a01      	subs	r2, #1
 8000a92:	bf28      	it	cs
 8000a94:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a98:	d2ed      	bcs.n	8000a76 <__addsf3+0x92>
 8000a9a:	fab0 fc80 	clz	ip, r0
 8000a9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa2:	ebb2 020c 	subs.w	r2, r2, ip
 8000aa6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aaa:	bfaa      	itet	ge
 8000aac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab0:	4252      	neglt	r2, r2
 8000ab2:	4318      	orrge	r0, r3
 8000ab4:	bfbc      	itt	lt
 8000ab6:	40d0      	lsrlt	r0, r2
 8000ab8:	4318      	orrlt	r0, r3
 8000aba:	4770      	bx	lr
 8000abc:	f092 0f00 	teq	r2, #0
 8000ac0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ac4:	bf06      	itte	eq
 8000ac6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000aca:	3201      	addeq	r2, #1
 8000acc:	3b01      	subne	r3, #1
 8000ace:	e7b5      	b.n	8000a3c <__addsf3+0x58>
 8000ad0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ad8:	bf18      	it	ne
 8000ada:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ade:	d021      	beq.n	8000b24 <__addsf3+0x140>
 8000ae0:	ea92 0f03 	teq	r2, r3
 8000ae4:	d004      	beq.n	8000af0 <__addsf3+0x10c>
 8000ae6:	f092 0f00 	teq	r2, #0
 8000aea:	bf08      	it	eq
 8000aec:	4608      	moveq	r0, r1
 8000aee:	4770      	bx	lr
 8000af0:	ea90 0f01 	teq	r0, r1
 8000af4:	bf1c      	itt	ne
 8000af6:	2000      	movne	r0, #0
 8000af8:	4770      	bxne	lr
 8000afa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000afe:	d104      	bne.n	8000b0a <__addsf3+0x126>
 8000b00:	0040      	lsls	r0, r0, #1
 8000b02:	bf28      	it	cs
 8000b04:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b08:	4770      	bx	lr
 8000b0a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b0e:	bf3c      	itt	cc
 8000b10:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b14:	4770      	bxcc	lr
 8000b16:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b1a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b22:	4770      	bx	lr
 8000b24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b28:	bf16      	itet	ne
 8000b2a:	4608      	movne	r0, r1
 8000b2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b30:	4601      	movne	r1, r0
 8000b32:	0242      	lsls	r2, r0, #9
 8000b34:	bf06      	itte	eq
 8000b36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3a:	ea90 0f01 	teqeq	r0, r1
 8000b3e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_ui2f>:
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e004      	b.n	8000b54 <__aeabi_i2f+0x8>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_i2f>:
 8000b4c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b50:	bf48      	it	mi
 8000b52:	4240      	negmi	r0, r0
 8000b54:	ea5f 0c00 	movs.w	ip, r0
 8000b58:	bf08      	it	eq
 8000b5a:	4770      	bxeq	lr
 8000b5c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b60:	4601      	mov	r1, r0
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	e01c      	b.n	8000ba2 <__aeabi_l2f+0x2a>

08000b68 <__aeabi_ul2f>:
 8000b68:	ea50 0201 	orrs.w	r2, r0, r1
 8000b6c:	bf08      	it	eq
 8000b6e:	4770      	bxeq	lr
 8000b70:	f04f 0300 	mov.w	r3, #0
 8000b74:	e00a      	b.n	8000b8c <__aeabi_l2f+0x14>
 8000b76:	bf00      	nop

08000b78 <__aeabi_l2f>:
 8000b78:	ea50 0201 	orrs.w	r2, r0, r1
 8000b7c:	bf08      	it	eq
 8000b7e:	4770      	bxeq	lr
 8000b80:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__aeabi_l2f+0x14>
 8000b86:	4240      	negs	r0, r0
 8000b88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8c:	ea5f 0c01 	movs.w	ip, r1
 8000b90:	bf02      	ittt	eq
 8000b92:	4684      	moveq	ip, r0
 8000b94:	4601      	moveq	r1, r0
 8000b96:	2000      	moveq	r0, #0
 8000b98:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ba2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ba6:	fabc f28c 	clz	r2, ip
 8000baa:	3a08      	subs	r2, #8
 8000bac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb0:	db10      	blt.n	8000bd4 <__aeabi_l2f+0x5c>
 8000bb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb6:	4463      	add	r3, ip
 8000bb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bbc:	f1c2 0220 	rsb	r2, r2, #32
 8000bc0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000bc8:	eb43 0002 	adc.w	r0, r3, r2
 8000bcc:	bf08      	it	eq
 8000bce:	f020 0001 	biceq.w	r0, r0, #1
 8000bd2:	4770      	bx	lr
 8000bd4:	f102 0220 	add.w	r2, r2, #32
 8000bd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bdc:	f1c2 0220 	rsb	r2, r2, #32
 8000be0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be4:	fa21 f202 	lsr.w	r2, r1, r2
 8000be8:	eb43 0002 	adc.w	r0, r3, r2
 8000bec:	bf08      	it	eq
 8000bee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_fmul>:
 8000bf4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c02:	ea92 0f0c 	teqne	r2, ip
 8000c06:	ea93 0f0c 	teqne	r3, ip
 8000c0a:	d06f      	beq.n	8000cec <__aeabi_fmul+0xf8>
 8000c0c:	441a      	add	r2, r3
 8000c0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c12:	0240      	lsls	r0, r0, #9
 8000c14:	bf18      	it	ne
 8000c16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1a:	d01e      	beq.n	8000c5a <__aeabi_fmul+0x66>
 8000c1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c28:	fba0 3101 	umull	r3, r1, r0, r1
 8000c2c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c30:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c34:	bf3e      	ittt	cc
 8000c36:	0049      	lslcc	r1, r1, #1
 8000c38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c3c:	005b      	lslcc	r3, r3, #1
 8000c3e:	ea40 0001 	orr.w	r0, r0, r1
 8000c42:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c46:	2afd      	cmp	r2, #253	@ 0xfd
 8000c48:	d81d      	bhi.n	8000c86 <__aeabi_fmul+0x92>
 8000c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c52:	bf08      	it	eq
 8000c54:	f020 0001 	biceq.w	r0, r0, #1
 8000c58:	4770      	bx	lr
 8000c5a:	f090 0f00 	teq	r0, #0
 8000c5e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c62:	bf08      	it	eq
 8000c64:	0249      	lsleq	r1, r1, #9
 8000c66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c6e:	3a7f      	subs	r2, #127	@ 0x7f
 8000c70:	bfc2      	ittt	gt
 8000c72:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7a:	4770      	bxgt	lr
 8000c7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	3a01      	subs	r2, #1
 8000c86:	dc5d      	bgt.n	8000d44 <__aeabi_fmul+0x150>
 8000c88:	f112 0f19 	cmn.w	r2, #25
 8000c8c:	bfdc      	itt	le
 8000c8e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c92:	4770      	bxle	lr
 8000c94:	f1c2 0200 	rsb	r2, r2, #0
 8000c98:	0041      	lsls	r1, r0, #1
 8000c9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c9e:	f1c2 0220 	rsb	r2, r2, #32
 8000ca2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000caa:	f140 0000 	adc.w	r0, r0, #0
 8000cae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb2:	bf08      	it	eq
 8000cb4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb8:	4770      	bx	lr
 8000cba:	f092 0f00 	teq	r2, #0
 8000cbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cc2:	bf02      	ittt	eq
 8000cc4:	0040      	lsleq	r0, r0, #1
 8000cc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cca:	3a01      	subeq	r2, #1
 8000ccc:	d0f9      	beq.n	8000cc2 <__aeabi_fmul+0xce>
 8000cce:	ea40 000c 	orr.w	r0, r0, ip
 8000cd2:	f093 0f00 	teq	r3, #0
 8000cd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cda:	bf02      	ittt	eq
 8000cdc:	0049      	lsleq	r1, r1, #1
 8000cde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ce2:	3b01      	subeq	r3, #1
 8000ce4:	d0f9      	beq.n	8000cda <__aeabi_fmul+0xe6>
 8000ce6:	ea41 010c 	orr.w	r1, r1, ip
 8000cea:	e78f      	b.n	8000c0c <__aeabi_fmul+0x18>
 8000cec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf0:	ea92 0f0c 	teq	r2, ip
 8000cf4:	bf18      	it	ne
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d00a      	beq.n	8000d12 <__aeabi_fmul+0x11e>
 8000cfc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d00:	bf18      	it	ne
 8000d02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d06:	d1d8      	bne.n	8000cba <__aeabi_fmul+0xc6>
 8000d08:	ea80 0001 	eor.w	r0, r0, r1
 8000d0c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d10:	4770      	bx	lr
 8000d12:	f090 0f00 	teq	r0, #0
 8000d16:	bf17      	itett	ne
 8000d18:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d1c:	4608      	moveq	r0, r1
 8000d1e:	f091 0f00 	teqne	r1, #0
 8000d22:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d26:	d014      	beq.n	8000d52 <__aeabi_fmul+0x15e>
 8000d28:	ea92 0f0c 	teq	r2, ip
 8000d2c:	d101      	bne.n	8000d32 <__aeabi_fmul+0x13e>
 8000d2e:	0242      	lsls	r2, r0, #9
 8000d30:	d10f      	bne.n	8000d52 <__aeabi_fmul+0x15e>
 8000d32:	ea93 0f0c 	teq	r3, ip
 8000d36:	d103      	bne.n	8000d40 <__aeabi_fmul+0x14c>
 8000d38:	024b      	lsls	r3, r1, #9
 8000d3a:	bf18      	it	ne
 8000d3c:	4608      	movne	r0, r1
 8000d3e:	d108      	bne.n	8000d52 <__aeabi_fmul+0x15e>
 8000d40:	ea80 0001 	eor.w	r0, r0, r1
 8000d44:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d50:	4770      	bx	lr
 8000d52:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d56:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_fdiv>:
 8000d5c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d64:	bf1e      	ittt	ne
 8000d66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6a:	ea92 0f0c 	teqne	r2, ip
 8000d6e:	ea93 0f0c 	teqne	r3, ip
 8000d72:	d069      	beq.n	8000e48 <__aeabi_fdiv+0xec>
 8000d74:	eba2 0203 	sub.w	r2, r2, r3
 8000d78:	ea80 0c01 	eor.w	ip, r0, r1
 8000d7c:	0249      	lsls	r1, r1, #9
 8000d7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d82:	d037      	beq.n	8000df4 <__aeabi_fdiv+0x98>
 8000d84:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d94:	428b      	cmp	r3, r1
 8000d96:	bf38      	it	cc
 8000d98:	005b      	lslcc	r3, r3, #1
 8000d9a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d9e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000da2:	428b      	cmp	r3, r1
 8000da4:	bf24      	itt	cs
 8000da6:	1a5b      	subcs	r3, r3, r1
 8000da8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db0:	bf24      	itt	cs
 8000db2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000db6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dbe:	bf24      	itt	cs
 8000dc0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dc8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dcc:	bf24      	itt	cs
 8000dce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dd6:	011b      	lsls	r3, r3, #4
 8000dd8:	bf18      	it	ne
 8000dda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dde:	d1e0      	bne.n	8000da2 <__aeabi_fdiv+0x46>
 8000de0:	2afd      	cmp	r2, #253	@ 0xfd
 8000de2:	f63f af50 	bhi.w	8000c86 <__aeabi_fmul+0x92>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfc:	327f      	adds	r2, #127	@ 0x7f
 8000dfe:	bfc2      	ittt	gt
 8000e00:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e08:	4770      	bxgt	lr
 8000e0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e0e:	f04f 0300 	mov.w	r3, #0
 8000e12:	3a01      	subs	r2, #1
 8000e14:	e737      	b.n	8000c86 <__aeabi_fmul+0x92>
 8000e16:	f092 0f00 	teq	r2, #0
 8000e1a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e1e:	bf02      	ittt	eq
 8000e20:	0040      	lsleq	r0, r0, #1
 8000e22:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e26:	3a01      	subeq	r2, #1
 8000e28:	d0f9      	beq.n	8000e1e <__aeabi_fdiv+0xc2>
 8000e2a:	ea40 000c 	orr.w	r0, r0, ip
 8000e2e:	f093 0f00 	teq	r3, #0
 8000e32:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e36:	bf02      	ittt	eq
 8000e38:	0049      	lsleq	r1, r1, #1
 8000e3a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e3e:	3b01      	subeq	r3, #1
 8000e40:	d0f9      	beq.n	8000e36 <__aeabi_fdiv+0xda>
 8000e42:	ea41 010c 	orr.w	r1, r1, ip
 8000e46:	e795      	b.n	8000d74 <__aeabi_fdiv+0x18>
 8000e48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	d108      	bne.n	8000e64 <__aeabi_fdiv+0x108>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	f47f af7d 	bne.w	8000d52 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	f47f af70 	bne.w	8000d40 <__aeabi_fmul+0x14c>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e776      	b.n	8000d52 <__aeabi_fmul+0x15e>
 8000e64:	ea93 0f0c 	teq	r3, ip
 8000e68:	d104      	bne.n	8000e74 <__aeabi_fdiv+0x118>
 8000e6a:	024b      	lsls	r3, r1, #9
 8000e6c:	f43f af4c 	beq.w	8000d08 <__aeabi_fmul+0x114>
 8000e70:	4608      	mov	r0, r1
 8000e72:	e76e      	b.n	8000d52 <__aeabi_fmul+0x15e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e7e:	d1ca      	bne.n	8000e16 <__aeabi_fdiv+0xba>
 8000e80:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e84:	f47f af5c 	bne.w	8000d40 <__aeabi_fmul+0x14c>
 8000e88:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e8c:	f47f af3c 	bne.w	8000d08 <__aeabi_fmul+0x114>
 8000e90:	e75f      	b.n	8000d52 <__aeabi_fmul+0x15e>
 8000e92:	bf00      	nop

08000e94 <__gesf2>:
 8000e94:	f04f 3cff 	mov.w	ip, #4294967295
 8000e98:	e006      	b.n	8000ea8 <__cmpsf2+0x4>
 8000e9a:	bf00      	nop

08000e9c <__lesf2>:
 8000e9c:	f04f 0c01 	mov.w	ip, #1
 8000ea0:	e002      	b.n	8000ea8 <__cmpsf2+0x4>
 8000ea2:	bf00      	nop

08000ea4 <__cmpsf2>:
 8000ea4:	f04f 0c01 	mov.w	ip, #1
 8000ea8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eb8:	bf18      	it	ne
 8000eba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ebe:	d011      	beq.n	8000ee4 <__cmpsf2+0x40>
 8000ec0:	b001      	add	sp, #4
 8000ec2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ec6:	bf18      	it	ne
 8000ec8:	ea90 0f01 	teqne	r0, r1
 8000ecc:	bf58      	it	pl
 8000ece:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed2:	bf88      	it	hi
 8000ed4:	17c8      	asrhi	r0, r1, #31
 8000ed6:	bf38      	it	cc
 8000ed8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000edc:	bf18      	it	ne
 8000ede:	f040 0001 	orrne.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ee8:	d102      	bne.n	8000ef0 <__cmpsf2+0x4c>
 8000eea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eee:	d105      	bne.n	8000efc <__cmpsf2+0x58>
 8000ef0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef4:	d1e4      	bne.n	8000ec0 <__cmpsf2+0x1c>
 8000ef6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efa:	d0e1      	beq.n	8000ec0 <__cmpsf2+0x1c>
 8000efc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <__aeabi_cfrcmple>:
 8000f04:	4684      	mov	ip, r0
 8000f06:	4608      	mov	r0, r1
 8000f08:	4661      	mov	r1, ip
 8000f0a:	e7ff      	b.n	8000f0c <__aeabi_cfcmpeq>

08000f0c <__aeabi_cfcmpeq>:
 8000f0c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f0e:	f7ff ffc9 	bl	8000ea4 <__cmpsf2>
 8000f12:	2800      	cmp	r0, #0
 8000f14:	bf48      	it	mi
 8000f16:	f110 0f00 	cmnmi.w	r0, #0
 8000f1a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f1c <__aeabi_fcmpeq>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff fff4 	bl	8000f0c <__aeabi_cfcmpeq>
 8000f24:	bf0c      	ite	eq
 8000f26:	2001      	moveq	r0, #1
 8000f28:	2000      	movne	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmplt>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffea 	bl	8000f0c <__aeabi_cfcmpeq>
 8000f38:	bf34      	ite	cc
 8000f3a:	2001      	movcc	r0, #1
 8000f3c:	2000      	movcs	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_fcmple>:
 8000f44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f48:	f7ff ffe0 	bl	8000f0c <__aeabi_cfcmpeq>
 8000f4c:	bf94      	ite	ls
 8000f4e:	2001      	movls	r0, #1
 8000f50:	2000      	movhi	r0, #0
 8000f52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f56:	bf00      	nop

08000f58 <__aeabi_fcmpge>:
 8000f58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f5c:	f7ff ffd2 	bl	8000f04 <__aeabi_cfrcmple>
 8000f60:	bf94      	ite	ls
 8000f62:	2001      	movls	r0, #1
 8000f64:	2000      	movhi	r0, #0
 8000f66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6a:	bf00      	nop

08000f6c <__aeabi_fcmpgt>:
 8000f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f70:	f7ff ffc8 	bl	8000f04 <__aeabi_cfrcmple>
 8000f74:	bf34      	ite	cc
 8000f76:	2001      	movcc	r0, #1
 8000f78:	2000      	movcs	r0, #0
 8000f7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7e:	bf00      	nop

08000f80 <__aeabi_f2uiz>:
 8000f80:	0042      	lsls	r2, r0, #1
 8000f82:	d20e      	bcs.n	8000fa2 <__aeabi_f2uiz+0x22>
 8000f84:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f88:	d30b      	bcc.n	8000fa2 <__aeabi_f2uiz+0x22>
 8000f8a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f8e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f92:	d409      	bmi.n	8000fa8 <__aeabi_f2uiz+0x28>
 8000f94:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f9c:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa0:	4770      	bx	lr
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	4770      	bx	lr
 8000fa8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fac:	d101      	bne.n	8000fb2 <__aeabi_f2uiz+0x32>
 8000fae:	0242      	lsls	r2, r0, #9
 8000fb0:	d102      	bne.n	8000fb8 <__aeabi_f2uiz+0x38>
 8000fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb6:	4770      	bx	lr
 8000fb8:	f04f 0000 	mov.w	r0, #0
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	f6ad 1d2c 	subw	sp, sp, #2348	@ 0x92c
 8000fc6:	f44f 6712 	mov.w	r7, #2336	@ 0x920
 8000fca:	446f      	add	r7, sp
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


  HAL_Init();
 8000fcc:	f003 ff54 	bl	8004e78 <HAL_Init>

  /* USER CODE BEGIN Init */
  LED_Power_Init();
 8000fd0:	f002 ffd8 	bl	8003f84 <LED_Power_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd4:	f000 f88c 	bl	80010f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd8:	f000 faae 	bl	8001538 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fdc:	f000 f8de 	bl	800119c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000fe0:	f000 f958 	bl	8001294 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fe4:	f000 f9d6 	bl	8001394 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fe8:	f000 fa28 	bl	800143c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000fec:	f000 fa7a 	bl	80014e4 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8000ff0:	f000 f912 	bl	8001218 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t startBuff;
  HAL_UART_Receive_IT(&huart1, &startBuff, 1);
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4831      	ldr	r0, [pc, #196]	@ (80010c0 <main+0x100>)
 8000ffc:	f007 f801 	bl	8008002 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001000:	2108      	movs	r1, #8
 8001002:	4830      	ldr	r0, [pc, #192]	@ (80010c4 <main+0x104>)
 8001004:	f005 ffc8 	bl	8006f98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001008:	210c      	movs	r1, #12
 800100a:	482e      	ldr	r0, [pc, #184]	@ (80010c4 <main+0x104>)
 800100c:	f005 ffc4 	bl	8006f98 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001010:	213c      	movs	r1, #60	@ 0x3c
 8001012:	482d      	ldr	r0, [pc, #180]	@ (80010c8 <main+0x108>)
 8001014:	f006 f904 	bl	8007220 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001018:	213c      	movs	r1, #60	@ 0x3c
 800101a:	482c      	ldr	r0, [pc, #176]	@ (80010cc <main+0x10c>)
 800101c:	f006 f900 	bl	8007220 <HAL_TIM_Encoder_Start_IT>

  // Initialize maze and set initial goal cells (center of 16x16 maze)
  Maze_Init(&maze);
 8001020:	482b      	ldr	r0, [pc, #172]	@ (80010d0 <main+0x110>)
 8001022:	f001 fcd1 	bl	80029c8 <Maze_Init>
  Set_Goal_Cell(&maze, 4);
 8001026:	2104      	movs	r1, #4
 8001028:	4829      	ldr	r0, [pc, #164]	@ (80010d0 <main+0x110>)
 800102a:	f001 f9d1 	bl	80023d0 <Set_Goal_Cell>

  // Initialize mouse state to 0
  bzero(&mouse_state, sizeof(mouse_state_t));
 800102e:	4b29      	ldr	r3, [pc, #164]	@ (80010d4 <main+0x114>)
 8001030:	4618      	mov	r0, r3
 8001032:	2320      	movs	r3, #32
 8001034:	461a      	mov	r2, r3
 8001036:	2100      	movs	r1, #0
 8001038:	f007 fdd8 	bl	8008bec <memset>

  Clear_Profile(&forward_profile);
 800103c:	4826      	ldr	r0, [pc, #152]	@ (80010d8 <main+0x118>)
 800103e:	f002 fce5 	bl	8003a0c <Clear_Profile>
  Clear_Profile(&rotational_profile);
 8001042:	4826      	ldr	r0, [pc, #152]	@ (80010dc <main+0x11c>)
 8001044:	f002 fce2 	bl	8003a0c <Clear_Profile>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (armed) {
 8001048:	4b25      	ldr	r3, [pc, #148]	@ (80010e0 <main+0x120>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0fb      	beq.n	8001048 <main+0x88>
		  motor_controller_enabled = true;
 8001050:	4b24      	ldr	r3, [pc, #144]	@ (80010e4 <main+0x124>)
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
		  adjust_steering = true;
 8001056:	4b24      	ldr	r3, [pc, #144]	@ (80010e8 <main+0x128>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
		  switch (mouse_mode) {
 800105c:	4b23      	ldr	r3, [pc, #140]	@ (80010ec <main+0x12c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d006      	beq.n	8001072 <main+0xb2>
 8001064:	2b02      	cmp	r3, #2
 8001066:	dcef      	bgt.n	8001048 <main+0x88>
 8001068:	2b00      	cmp	r3, #0
 800106a:	d015      	beq.n	8001098 <main+0xd8>
 800106c:	2b01      	cmp	r3, #1
 800106e:	d017      	beq.n	80010a0 <main+0xe0>
 8001070:	e024      	b.n	80010bc <main+0xfc>
			  case TEST: // Mode for testing code without having to comment lines out
				  Set_Direction(MOTOR_LEFT, FORWARD);
 8001072:	2100      	movs	r1, #0
 8001074:	2000      	movs	r0, #0
 8001076:	f002 fb45 	bl	8003704 <Set_Direction>
				  Set_Direction(MOTOR_RIGHT, FORWARD);
 800107a:	2100      	movs	r1, #0
 800107c:	2001      	movs	r0, #1
 800107e:	f002 fb41 	bl	8003704 <Set_Direction>
				  Set_PWM(MOTOR_LEFT, 1000);
 8001082:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001086:	2000      	movs	r0, #0
 8001088:	f002 fb18 	bl	80036bc <Set_PWM>
				  Set_PWM(MOTOR_RIGHT, 1000);
 800108c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001090:	2001      	movs	r0, #1
 8001092:	f002 fb13 	bl	80036bc <Set_PWM>
				  break;
 8001096:	e011      	b.n	80010bc <main+0xfc>
			  case SEARCHING:
				  Search_Mode(&maze);
 8001098:	480d      	ldr	r0, [pc, #52]	@ (80010d0 <main+0x110>)
 800109a:	f001 fccf 	bl	8002a3c <Search_Mode>
				  break;
 800109e:	e00d      	b.n	80010bc <main+0xfc>
			  case RACING:
				  Race_Mode(maze);
 80010a0:	4c0b      	ldr	r4, [pc, #44]	@ (80010d0 <main+0x110>)
 80010a2:	4668      	mov	r0, sp
 80010a4:	f104 0310 	add.w	r3, r4, #16
 80010a8:	f640 121c 	movw	r2, #2332	@ 0x91c
 80010ac:	4619      	mov	r1, r3
 80010ae:	f007 fde1 	bl	8008c74 <memcpy>
 80010b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010b6:	f001 ff41 	bl	8002f3c <Race_Mode>
				  break;
 80010ba:	bf00      	nop
	  if (armed) {
 80010bc:	e7c4      	b.n	8001048 <main+0x88>
 80010be:	bf00      	nop
 80010c0:	200001d4 	.word	0x200001d4
 80010c4:	200000fc 	.word	0x200000fc
 80010c8:	2000018c 	.word	0x2000018c
 80010cc:	20000144 	.word	0x20000144
 80010d0:	20000254 	.word	0x20000254
 80010d4:	20000220 	.word	0x20000220
 80010d8:	20000b84 	.word	0x20000b84
 80010dc:	20000bac 	.word	0x20000bac
 80010e0:	20000248 	.word	0x20000248
 80010e4:	20000c6c 	.word	0x20000c6c
 80010e8:	20000c84 	.word	0x20000c84
 80010ec:	20000b80 	.word	0x20000b80

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b094      	sub	sp, #80	@ 0x50
 80010f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010fa:	2228      	movs	r2, #40	@ 0x28
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f007 fd74 	bl	8008bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001120:	2302      	movs	r3, #2
 8001122:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001124:	2301      	movs	r3, #1
 8001126:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001128:	2310      	movs	r3, #16
 800112a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112c:	2302      	movs	r3, #2
 800112e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001130:	2300      	movs	r3, #0
 8001132:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001134:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001138:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800113e:	4618      	mov	r0, r3
 8001140:	f005 f906 	bl	8006350 <HAL_RCC_OscConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800114a:	f000 fad4 	bl	80016f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114e:	230f      	movs	r3, #15
 8001150:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001152:	2302      	movs	r3, #2
 8001154:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	2101      	movs	r1, #1
 8001168:	4618      	mov	r0, r3
 800116a:	f005 fb73 	bl	8006854 <HAL_RCC_ClockConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001174:	f000 fabf 	bl	80016f6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001178:	2302      	movs	r3, #2
 800117a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800117c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001180:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	4618      	mov	r0, r3
 8001186:	f005 fcf3 	bl	8006b70 <HAL_RCCEx_PeriphCLKConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001190:	f000 fab1 	bl	80016f6 <Error_Handler>
  }
}
 8001194:	bf00      	nop
 8001196:	3750      	adds	r7, #80	@ 0x50
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011ac:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <MX_ADC1_Init+0x74>)
 80011ae:	4a19      	ldr	r2, [pc, #100]	@ (8001214 <MX_ADC1_Init+0x78>)
 80011b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011b2:	4b17      	ldr	r3, [pc, #92]	@ (8001210 <MX_ADC1_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011b8:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <MX_ADC1_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011be:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <MX_ADC1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c4:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <MX_ADC1_Init+0x74>)
 80011c6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80011ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011cc:	4b10      	ldr	r3, [pc, #64]	@ (8001210 <MX_ADC1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <MX_ADC1_Init+0x74>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d8:	480d      	ldr	r0, [pc, #52]	@ (8001210 <MX_ADC1_Init+0x74>)
 80011da:	f003 fed3 	bl	8004f84 <HAL_ADC_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80011e4:	f000 fa87 	bl	80016f6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011e8:	2305      	movs	r3, #5
 80011ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ec:	2301      	movs	r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	@ (8001210 <MX_ADC1_Init+0x74>)
 80011fa:	f004 f987 	bl	800550c <HAL_ADC_ConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001204:	f000 fa77 	bl	80016f6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	2000009c 	.word	0x2000009c
 8001214:	40012400 	.word	0x40012400

08001218 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001228:	4b18      	ldr	r3, [pc, #96]	@ (800128c <MX_ADC2_Init+0x74>)
 800122a:	4a19      	ldr	r2, [pc, #100]	@ (8001290 <MX_ADC2_Init+0x78>)
 800122c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800122e:	4b17      	ldr	r3, [pc, #92]	@ (800128c <MX_ADC2_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001234:	4b15      	ldr	r3, [pc, #84]	@ (800128c <MX_ADC2_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800123a:	4b14      	ldr	r3, [pc, #80]	@ (800128c <MX_ADC2_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001240:	4b12      	ldr	r3, [pc, #72]	@ (800128c <MX_ADC2_Init+0x74>)
 8001242:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001246:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001248:	4b10      	ldr	r3, [pc, #64]	@ (800128c <MX_ADC2_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800124e:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <MX_ADC2_Init+0x74>)
 8001250:	2201      	movs	r2, #1
 8001252:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001254:	480d      	ldr	r0, [pc, #52]	@ (800128c <MX_ADC2_Init+0x74>)
 8001256:	f003 fe95 	bl	8004f84 <HAL_ADC_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001260:	f000 fa49 	bl	80016f6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001264:	2301      	movs	r3, #1
 8001266:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001268:	2301      	movs	r3, #1
 800126a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	@ (800128c <MX_ADC2_Init+0x74>)
 8001276:	f004 f949 	bl	800550c <HAL_ADC_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001280:	f000 fa39 	bl	80016f6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200000cc 	.word	0x200000cc
 8001290:	40012800 	.word	0x40012800

08001294 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08e      	sub	sp, #56	@ 0x38
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a8:	f107 0320 	add.w	r3, r7, #32
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
 80012c0:	615a      	str	r2, [r3, #20]
 80012c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012c4:	4b32      	ldr	r3, [pc, #200]	@ (8001390 <MX_TIM2_Init+0xfc>)
 80012c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012cc:	4b30      	ldr	r3, [pc, #192]	@ (8001390 <MX_TIM2_Init+0xfc>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001390 <MX_TIM2_Init+0xfc>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2047;
 80012d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001390 <MX_TIM2_Init+0xfc>)
 80012da:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80012de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001390 <MX_TIM2_Init+0xfc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001390 <MX_TIM2_Init+0xfc>)
 80012e8:	2280      	movs	r2, #128	@ 0x80
 80012ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ec:	4828      	ldr	r0, [pc, #160]	@ (8001390 <MX_TIM2_Init+0xfc>)
 80012ee:	f005 fdab 	bl	8006e48 <HAL_TIM_Base_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80012f8:	f000 f9fd 	bl	80016f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001300:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001302:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001306:	4619      	mov	r1, r3
 8001308:	4821      	ldr	r0, [pc, #132]	@ (8001390 <MX_TIM2_Init+0xfc>)
 800130a:	f006 f9e9 	bl	80076e0 <HAL_TIM_ConfigClockSource>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001314:	f000 f9ef 	bl	80016f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001318:	481d      	ldr	r0, [pc, #116]	@ (8001390 <MX_TIM2_Init+0xfc>)
 800131a:	f005 fde4 	bl	8006ee6 <HAL_TIM_PWM_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001324:	f000 f9e7 	bl	80016f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001330:	f107 0320 	add.w	r3, r7, #32
 8001334:	4619      	mov	r1, r3
 8001336:	4816      	ldr	r0, [pc, #88]	@ (8001390 <MX_TIM2_Init+0xfc>)
 8001338:	f006 fd6e 	bl	8007e18 <HAL_TIMEx_MasterConfigSynchronization>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001342:	f000 f9d8 	bl	80016f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001346:	2360      	movs	r3, #96	@ 0x60
 8001348:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2208      	movs	r2, #8
 800135a:	4619      	mov	r1, r3
 800135c:	480c      	ldr	r0, [pc, #48]	@ (8001390 <MX_TIM2_Init+0xfc>)
 800135e:	f006 f8fd 	bl	800755c <HAL_TIM_PWM_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001368:	f000 f9c5 	bl	80016f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	220c      	movs	r2, #12
 8001370:	4619      	mov	r1, r3
 8001372:	4807      	ldr	r0, [pc, #28]	@ (8001390 <MX_TIM2_Init+0xfc>)
 8001374:	f006 f8f2 	bl	800755c <HAL_TIM_PWM_ConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800137e:	f000 f9ba 	bl	80016f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001382:	4803      	ldr	r0, [pc, #12]	@ (8001390 <MX_TIM2_Init+0xfc>)
 8001384:	f003 fc36 	bl	8004bf4 <HAL_TIM_MspPostInit>

}
 8001388:	bf00      	nop
 800138a:	3738      	adds	r7, #56	@ 0x38
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200000fc 	.word	0x200000fc

08001394 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08c      	sub	sp, #48	@ 0x30
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	2224      	movs	r2, #36	@ 0x24
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f007 fc22 	bl	8008bec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013b0:	4b20      	ldr	r3, [pc, #128]	@ (8001434 <MX_TIM3_Init+0xa0>)
 80013b2:	4a21      	ldr	r2, [pc, #132]	@ (8001438 <MX_TIM3_Init+0xa4>)
 80013b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001434 <MX_TIM3_Init+0xa0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001434 <MX_TIM3_Init+0xa0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001434 <MX_TIM3_Init+0xa0>)
 80013c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001434 <MX_TIM3_Init+0xa0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d0:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <MX_TIM3_Init+0xa0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013d6:	2303      	movs	r3, #3
 80013d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80013da:	2302      	movs	r3, #2
 80013dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013de:	2301      	movs	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80013ea:	2302      	movs	r3, #2
 80013ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013ee:	2301      	movs	r3, #1
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	4619      	mov	r1, r3
 8001400:	480c      	ldr	r0, [pc, #48]	@ (8001434 <MX_TIM3_Init+0xa0>)
 8001402:	f005 fe6b 	bl	80070dc <HAL_TIM_Encoder_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800140c:	f000 f973 	bl	80016f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	4619      	mov	r1, r3
 800141c:	4805      	ldr	r0, [pc, #20]	@ (8001434 <MX_TIM3_Init+0xa0>)
 800141e:	f006 fcfb 	bl	8007e18 <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001428:	f000 f965 	bl	80016f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	3730      	adds	r7, #48	@ 0x30
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000144 	.word	0x20000144
 8001438:	40000400 	.word	0x40000400

0800143c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08c      	sub	sp, #48	@ 0x30
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	2224      	movs	r2, #36	@ 0x24
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f007 fbce 	bl	8008bec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001458:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <MX_TIM4_Init+0xa0>)
 800145a:	4a21      	ldr	r2, [pc, #132]	@ (80014e0 <MX_TIM4_Init+0xa4>)
 800145c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800145e:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <MX_TIM4_Init+0xa0>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <MX_TIM4_Init+0xa0>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800146a:	4b1c      	ldr	r3, [pc, #112]	@ (80014dc <MX_TIM4_Init+0xa0>)
 800146c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001470:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <MX_TIM4_Init+0xa0>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001478:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <MX_TIM4_Init+0xa0>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800147e:	2303      	movs	r3, #3
 8001480:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001482:	2302      	movs	r3, #2
 8001484:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001486:	2301      	movs	r3, #1
 8001488:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001492:	2302      	movs	r3, #2
 8001494:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001496:	2301      	movs	r3, #1
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	4619      	mov	r1, r3
 80014a8:	480c      	ldr	r0, [pc, #48]	@ (80014dc <MX_TIM4_Init+0xa0>)
 80014aa:	f005 fe17 	bl	80070dc <HAL_TIM_Encoder_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80014b4:	f000 f91f 	bl	80016f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	@ (80014dc <MX_TIM4_Init+0xa0>)
 80014c6:	f006 fca7 	bl	8007e18 <HAL_TIMEx_MasterConfigSynchronization>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80014d0:	f000 f911 	bl	80016f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	3730      	adds	r7, #48	@ 0x30
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000018c 	.word	0x2000018c
 80014e0:	40000800 	.word	0x40000800

080014e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	@ (8001534 <MX_USART1_UART_Init+0x50>)
 80014ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 80014f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001508:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 800150a:	220c      	movs	r2, #12
 800150c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150e:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001514:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 800151c:	f006 fcec 	bl	8007ef8 <HAL_UART_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001526:	f000 f8e6 	bl	80016f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200001d4 	.word	0x200001d4
 8001534:	40013800 	.word	0x40013800

08001538 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154c:	4b51      	ldr	r3, [pc, #324]	@ (8001694 <MX_GPIO_Init+0x15c>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a50      	ldr	r2, [pc, #320]	@ (8001694 <MX_GPIO_Init+0x15c>)
 8001552:	f043 0310 	orr.w	r3, r3, #16
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b4e      	ldr	r3, [pc, #312]	@ (8001694 <MX_GPIO_Init+0x15c>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0310 	and.w	r3, r3, #16
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	4b4b      	ldr	r3, [pc, #300]	@ (8001694 <MX_GPIO_Init+0x15c>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	4a4a      	ldr	r2, [pc, #296]	@ (8001694 <MX_GPIO_Init+0x15c>)
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	6193      	str	r3, [r2, #24]
 8001570:	4b48      	ldr	r3, [pc, #288]	@ (8001694 <MX_GPIO_Init+0x15c>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157c:	4b45      	ldr	r3, [pc, #276]	@ (8001694 <MX_GPIO_Init+0x15c>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	4a44      	ldr	r2, [pc, #272]	@ (8001694 <MX_GPIO_Init+0x15c>)
 8001582:	f043 0308 	orr.w	r3, r3, #8
 8001586:	6193      	str	r3, [r2, #24]
 8001588:	4b42      	ldr	r3, [pc, #264]	@ (8001694 <MX_GPIO_Init+0x15c>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Power_GPIO_Port, LED_Power_Pin, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800159a:	483f      	ldr	r0, [pc, #252]	@ (8001698 <MX_GPIO_Init+0x160>)
 800159c:	f004 fe8e 	bl	80062bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMIT_L_Pin|EMIT_R_Pin|EMIT_FR_Pin|MR_FWD_Pin
 80015a0:	2200      	movs	r2, #0
 80015a2:	f64f 5120 	movw	r1, #64800	@ 0xfd20
 80015a6:	483d      	ldr	r0, [pc, #244]	@ (800169c <MX_GPIO_Init+0x164>)
 80015a8:	f004 fe88 	bl	80062bc <HAL_GPIO_WritePin>
                          |ML_FWD_Pin|MR_BWD_Pin|EMIT_FL_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015b2:	483b      	ldr	r0, [pc, #236]	@ (80016a0 <MX_GPIO_Init+0x168>)
 80015b4:	f004 fe82 	bl	80062bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Blue_Pin|LED_Green_Pin, GPIO_PIN_SET);
 80015b8:	2201      	movs	r2, #1
 80015ba:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 80015be:	4838      	ldr	r0, [pc, #224]	@ (80016a0 <MX_GPIO_Init+0x168>)
 80015c0:	f004 fe7c 	bl	80062bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Power_Pin */
  GPIO_InitStruct.Pin = LED_Power_Pin;
 80015c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_Power_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 0310 	add.w	r3, r7, #16
 80015da:	4619      	mov	r1, r3
 80015dc:	482e      	ldr	r0, [pc, #184]	@ (8001698 <MX_GPIO_Init+0x160>)
 80015de:	f004 fce9 	bl	8005fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RACE_SW2_Pin */
  GPIO_InitStruct.Pin = RACE_SW2_Pin;
 80015e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015e8:	4b2e      	ldr	r3, [pc, #184]	@ (80016a4 <MX_GPIO_Init+0x16c>)
 80015ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RACE_SW2_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	4619      	mov	r1, r3
 80015f6:	4828      	ldr	r0, [pc, #160]	@ (8001698 <MX_GPIO_Init+0x160>)
 80015f8:	f004 fcdc 	bl	8005fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_L_Pin EMIT_R_Pin EMIT_FR_Pin MR_FWD_Pin
                           ML_FWD_Pin MR_BWD_Pin EMIT_FL_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = EMIT_L_Pin|EMIT_R_Pin|EMIT_FR_Pin|MR_FWD_Pin
 80015fc:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8001600:	613b      	str	r3, [r7, #16]
                          |ML_FWD_Pin|MR_BWD_Pin|EMIT_FL_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	2301      	movs	r3, #1
 8001604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2302      	movs	r3, #2
 800160c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160e:	f107 0310 	add.w	r3, r7, #16
 8001612:	4619      	mov	r1, r3
 8001614:	4821      	ldr	r0, [pc, #132]	@ (800169c <MX_GPIO_Init+0x164>)
 8001616:	f004 fccd 	bl	8005fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ML_BWD_Pin LED_Red_Pin LED_Blue_Pin LED_Green_Pin */
  GPIO_InitStruct.Pin = ML_BWD_Pin|LED_Red_Pin|LED_Blue_Pin|LED_Green_Pin;
 800161a:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 800161e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001620:	2301      	movs	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2302      	movs	r3, #2
 800162a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	4619      	mov	r1, r3
 8001632:	481b      	ldr	r0, [pc, #108]	@ (80016a0 <MX_GPIO_Init+0x168>)
 8001634:	f004 fcbe 	bl	8005fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARM_SW1_Pin */
  GPIO_InitStruct.Pin = ARM_SW1_Pin;
 8001638:	2310      	movs	r3, #16
 800163a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800163c:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <MX_GPIO_Init+0x16c>)
 800163e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ARM_SW1_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	4619      	mov	r1, r3
 800164a:	4814      	ldr	r0, [pc, #80]	@ (800169c <MX_GPIO_Init+0x164>)
 800164c:	f004 fcb2 	bl	8005fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOADMAZE_SW3_Pin */
  GPIO_InitStruct.Pin = LOADMAZE_SW3_Pin;
 8001650:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LOADMAZE_SW3_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 0310 	add.w	r3, r7, #16
 8001662:	4619      	mov	r1, r3
 8001664:	480d      	ldr	r0, [pc, #52]	@ (800169c <MX_GPIO_Init+0x164>)
 8001666:	f004 fca5 	bl	8005fb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	210f      	movs	r1, #15
 800166e:	200a      	movs	r0, #10
 8001670:	f004 f9b7 	bl	80059e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001674:	200a      	movs	r0, #10
 8001676:	f004 f9d0 	bl	8005a1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	210f      	movs	r1, #15
 800167e:	2028      	movs	r0, #40	@ 0x28
 8001680:	f004 f9af 	bl	80059e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001684:	2028      	movs	r0, #40	@ 0x28
 8001686:	f004 f9c8 	bl	8005a1a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800168a:	bf00      	nop
 800168c:	3720      	adds	r7, #32
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	40011000 	.word	0x40011000
 800169c:	40010c00 	.word	0x40010c00
 80016a0:	40010800 	.word	0x40010800
 80016a4:	10210000 	.word	0x10210000

080016a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ARM_SW1_Pin) {       // Set to arm mode
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	2b10      	cmp	r3, #16
 80016b6:	d102      	bne.n	80016be <HAL_GPIO_EXTI_Callback+0x16>
		ARM_Button();
 80016b8:	f002 fd50 	bl	800415c <ARM_Button>
		RACE_Button();
	}
	else if (GPIO_Pin == LOADMAZE_SW3_Pin) { // Load maze from memory into maze struct
		LOADMAZE_Button();
	}
}
 80016bc:	e00c      	b.n	80016d8 <HAL_GPIO_EXTI_Callback+0x30>
	else if (GPIO_Pin == RACE_SW2_Pin) { // Set to race mode
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016c4:	d102      	bne.n	80016cc <HAL_GPIO_EXTI_Callback+0x24>
		RACE_Button();
 80016c6:	f002 fd65 	bl	8004194 <RACE_Button>
}
 80016ca:	e005      	b.n	80016d8 <HAL_GPIO_EXTI_Callback+0x30>
	else if (GPIO_Pin == LOADMAZE_SW3_Pin) { // Load maze from memory into maze struct
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016d2:	d101      	bne.n	80016d8 <HAL_GPIO_EXTI_Callback+0x30>
		LOADMAZE_Button();
 80016d4:	f002 fd74 	bl	80041c0 <LOADMAZE_Button>
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	UART_Receive_Callback(huart);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f8cb 	bl	8001884 <UART_Receive_Callback>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fa:	b672      	cpsid	i
}
 80016fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016fe:	bf00      	nop
 8001700:	e7fd      	b.n	80016fe <Error_Handler+0x8>
	...

08001704 <Parse_Receive_Data>:
#define READ_BATT   0b0010  // READ BATTERY: Read battery voltage.
#define PULSE_BUZZ  0b0011  // PULSE BUZZER: Play a short noise from the buzzer.
#define START_RUN   0b0100  // START RUN: Start a maze run. For testing purposes only.
#define PAIRED      0b0101  // PAIRED: Send OK response to verify received.

void Parse_Receive_Data(uint8_t rxBuff) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
	uint8_t command = (rxBuff & 0xF0) >> 4;   // Isolate command code
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	73fb      	strb	r3, [r7, #15]
	uint8_t data    = (rxBuff & 0x0F);        // Isolate other data (not used currently)
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	73bb      	strb	r3, [r7, #14]
	(void) data;                              // Temporary to remove warning for unused variable

	switch(command) {
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	2b07      	cmp	r3, #7
 8001720:	d837      	bhi.n	8001792 <Parse_Receive_Data+0x8e>
 8001722:	a201      	add	r2, pc, #4	@ (adr r2, 8001728 <Parse_Receive_Data+0x24>)
 8001724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001728:	08001749 	.word	0x08001749
 800172c:	08001767 	.word	0x08001767
 8001730:	08001777 	.word	0x08001777
 8001734:	08001783 	.word	0x08001783
 8001738:	0800178b 	.word	0x0800178b
 800173c:	08001793 	.word	0x08001793
 8001740:	08001793 	.word	0x08001793
 8001744:	0800176f 	.word	0x0800176f
		case SET_MODE:
			debugMode = (debugMode + 1) % 2;
 8001748:	4b14      	ldr	r3, [pc, #80]	@ (800179c <Parse_Receive_Data+0x98>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	bfb8      	it	lt
 8001756:	425b      	neglt	r3, r3
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b10      	ldr	r3, [pc, #64]	@ (800179c <Parse_Receive_Data+0x98>)
 800175c:	701a      	strb	r2, [r3, #0]
			debugCounter = 0;
 800175e:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <Parse_Receive_Data+0x9c>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
			break;
 8001764:	e016      	b.n	8001794 <Parse_Receive_Data+0x90>
		case HALT_RUN:
			armed = false;
 8001766:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <Parse_Receive_Data+0xa0>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
			break;
 800176c:	e012      	b.n	8001794 <Parse_Receive_Data+0x90>
		case RESUME_RUN:
			HALTED = 0;
 800176e:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <Parse_Receive_Data+0xa4>)
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
			break;
 8001774:	e00e      	b.n	8001794 <Parse_Receive_Data+0x90>
		case READ_BATT:
			HAL_UART_Transmit_IT(&huart1, (uint8_t*)&(mouse_state.battery_voltage), sizeof(double));
 8001776:	2208      	movs	r2, #8
 8001778:	490c      	ldr	r1, [pc, #48]	@ (80017ac <Parse_Receive_Data+0xa8>)
 800177a:	480d      	ldr	r0, [pc, #52]	@ (80017b0 <Parse_Receive_Data+0xac>)
 800177c:	f006 fc0c 	bl	8007f98 <HAL_UART_Transmit_IT>
			break;
 8001780:	e008      	b.n	8001794 <Parse_Receive_Data+0x90>
		case PULSE_BUZZ:
			Pulse_Buzzer(100);
 8001782:	2064      	movs	r0, #100	@ 0x64
 8001784:	f002 fc0a 	bl	8003f9c <Pulse_Buzzer>
			break;
 8001788:	e004      	b.n	8001794 <Parse_Receive_Data+0x90>
		case START_RUN:
			armed = true;
 800178a:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <Parse_Receive_Data+0xa0>)
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
			break;
 8001790:	e000      	b.n	8001794 <Parse_Receive_Data+0x90>
		case PAIRED:
			break;
		default:
			break;
 8001792:	bf00      	nop
	}
}
 8001794:	bf00      	nop
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000240 	.word	0x20000240
 80017a0:	20000241 	.word	0x20000241
 80017a4:	20000248 	.word	0x20000248
 80017a8:	20000bf4 	.word	0x20000bf4
 80017ac:	20000238 	.word	0x20000238
 80017b0:	200001d4 	.word	0x200001d4

080017b4 <Create_Byte_Stream>:

void Create_Byte_Stream(uint8_t txData[PACKET_SIZE]) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	bzero(txData, PACKET_SIZE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	461a      	mov	r2, r3
 80017c0:	2300      	movs	r3, #0
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	6053      	str	r3, [r2, #4]
 80017c6:	6093      	str	r3, [r2, #8]
 80017c8:	60d3      	str	r3, [r2, #12]
 80017ca:	6113      	str	r3, [r2, #16]
 80017cc:	6153      	str	r3, [r2, #20]
 80017ce:	6193      	str	r3, [r2, #24]

	memcpy(txData, "Debug", 5);
 80017d0:	2205      	movs	r2, #5
 80017d2:	4922      	ldr	r1, [pc, #136]	@ (800185c <Create_Byte_Stream+0xa8>)
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f007 fa4d 	bl	8008c74 <memcpy>
	memcpy(txData + 5, &mouse_state.current_cell, sizeof(uint8_t));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3305      	adds	r3, #5
 80017de:	4a20      	ldr	r2, [pc, #128]	@ (8001860 <Create_Byte_Stream+0xac>)
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	701a      	strb	r2, [r3, #0]
	memcpy(txData + 6, &mouse_state.rpm.left_rpm, sizeof(uint16_t));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3306      	adds	r3, #6
 80017e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001860 <Create_Byte_Stream+0xac>)
 80017ea:	8892      	ldrh	r2, [r2, #4]
 80017ec:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 8, &mouse_state.rpm.right_rpm, sizeof(uint16_t));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3308      	adds	r3, #8
 80017f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001860 <Create_Byte_Stream+0xac>)
 80017f4:	88d2      	ldrh	r2, [r2, #6]
 80017f6:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 10, &mouse_state.mouse_direction, sizeof(uint8_t));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	330a      	adds	r3, #10
 80017fc:	4a18      	ldr	r2, [pc, #96]	@ (8001860 <Create_Byte_Stream+0xac>)
 80017fe:	78d2      	ldrb	r2, [r2, #3]
 8001800:	701a      	strb	r2, [r3, #0]
	memset(txData + 11, ((mouse_state.mouse_position[0] << 4) | mouse_state.mouse_position[1]), sizeof(uint8_t));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f103 000b 	add.w	r0, r3, #11
 8001808:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <Create_Byte_Stream+0xac>)
 800180a:	785b      	ldrb	r3, [r3, #1]
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	4a14      	ldr	r2, [pc, #80]	@ (8001860 <Create_Byte_Stream+0xac>)
 8001810:	7892      	ldrb	r2, [r2, #2]
 8001812:	4313      	orrs	r3, r2
 8001814:	2201      	movs	r2, #1
 8001816:	4619      	mov	r1, r3
 8001818:	f007 f9e8 	bl	8008bec <memset>
	memcpy(txData + 12, &mouse_state.battery_voltage, sizeof(double));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f103 010c 	add.w	r1, r3, #12
 8001822:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <Create_Byte_Stream+0xac>)
 8001824:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001828:	600a      	str	r2, [r1, #0]
 800182a:	604b      	str	r3, [r1, #4]
	memcpy(txData + 20, &mouse_state.raw.front_left, sizeof(uint16_t));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3314      	adds	r3, #20
 8001830:	4a0b      	ldr	r2, [pc, #44]	@ (8001860 <Create_Byte_Stream+0xac>)
 8001832:	8912      	ldrh	r2, [r2, #8]
 8001834:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 22, &mouse_state.raw.left, sizeof(uint16_t));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3316      	adds	r3, #22
 800183a:	4a09      	ldr	r2, [pc, #36]	@ (8001860 <Create_Byte_Stream+0xac>)
 800183c:	8952      	ldrh	r2, [r2, #10]
 800183e:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 24, &mouse_state.raw.right, sizeof(uint16_t));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3318      	adds	r3, #24
 8001844:	4a06      	ldr	r2, [pc, #24]	@ (8001860 <Create_Byte_Stream+0xac>)
 8001846:	8992      	ldrh	r2, [r2, #12]
 8001848:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 26, &mouse_state.raw.front_right, sizeof(uint16_t));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	331a      	adds	r3, #26
 800184e:	4a04      	ldr	r2, [pc, #16]	@ (8001860 <Create_Byte_Stream+0xac>)
 8001850:	89d2      	ldrh	r2, [r2, #14]
 8001852:	801a      	strh	r2, [r3, #0]
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	08008d38 	.word	0x08008d38
 8001860:	20000220 	.word	0x20000220

08001864 <Debug_Packet_Send>:

// When mouse in debug mode transmit above data.
//  Also transmit start identifier "Debug". This totals to 28 bytes of data transmitted every 50 ms.
void Debug_Packet_Send() {
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	Create_Byte_Stream(txDebug);                                  // Create byte stream
 8001868:	4804      	ldr	r0, [pc, #16]	@ (800187c <Debug_Packet_Send+0x18>)
 800186a:	f7ff ffa3 	bl	80017b4 <Create_Byte_Stream>
	HAL_UART_Transmit_IT(&huart1, txDebug, sizeof(txDebug));      // Transmit data
 800186e:	221c      	movs	r2, #28
 8001870:	4902      	ldr	r1, [pc, #8]	@ (800187c <Debug_Packet_Send+0x18>)
 8001872:	4803      	ldr	r0, [pc, #12]	@ (8001880 <Debug_Packet_Send+0x1c>)
 8001874:	f006 fb90 	bl	8007f98 <HAL_UART_Transmit_IT>
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000bd8 	.word	0x20000bd8
 8001880:	200001d4 	.word	0x200001d4

08001884 <UART_Receive_Callback>:

void UART_Receive_Callback(UART_HandleTypeDef *huart) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0a      	ldr	r2, [pc, #40]	@ (80018bc <UART_Receive_Callback+0x38>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d10e      	bne.n	80018b4 <UART_Receive_Callback+0x30>
		Parse_Receive_Data(rxData);
 8001896:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <UART_Receive_Callback+0x3c>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ff32 	bl	8001704 <Parse_Receive_Data>
		HAL_UART_Transmit_IT(&huart1, &txData, sizeof(txData));      // Transmit response ACK (0xFF)                          // Parse incoming command
 80018a0:	2201      	movs	r2, #1
 80018a2:	4908      	ldr	r1, [pc, #32]	@ (80018c4 <UART_Receive_Callback+0x40>)
 80018a4:	4808      	ldr	r0, [pc, #32]	@ (80018c8 <UART_Receive_Callback+0x44>)
 80018a6:	f006 fb77 	bl	8007f98 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart1, &rxData, sizeof(rxData));       // Receive incoming command
 80018aa:	2201      	movs	r2, #1
 80018ac:	4904      	ldr	r1, [pc, #16]	@ (80018c0 <UART_Receive_Callback+0x3c>)
 80018ae:	4806      	ldr	r0, [pc, #24]	@ (80018c8 <UART_Receive_Callback+0x44>)
 80018b0:	f006 fba7 	bl	8008002 <HAL_UART_Receive_IT>
	}
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40013800 	.word	0x40013800
 80018c0:	20000bd4 	.word	0x20000bd4
 80018c4:	20000000 	.word	0x20000000
 80018c8:	200001d4 	.word	0x200001d4

080018cc <HAL_TIM_IC_CaptureCallback>:
float mouse_position = 0;

uint32_t last_calculated_time[2] = { 0, 0 }; // { last calculated time left, last calculated time right }
uint32_t last_tick_count[2] = { 0, 0 };

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	uint16_t current_count = __HAL_TIM_GET_COUNTER(htim);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018da:	81fb      	strh	r3, [r7, #14]
	if (htim == &htim4) { // Motor right
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a14      	ldr	r2, [pc, #80]	@ (8001930 <HAL_TIM_IC_CaptureCallback+0x64>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d10d      	bne.n	8001900 <HAL_TIM_IC_CaptureCallback+0x34>
		objective_R -= (int16_t)(current_count - counter_R);
 80018e4:	4b13      	ldr	r3, [pc, #76]	@ (8001934 <HAL_TIM_IC_CaptureCallback+0x68>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a13      	ldr	r2, [pc, #76]	@ (8001938 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80018ea:	8812      	ldrh	r2, [r2, #0]
 80018ec:	89f9      	ldrh	r1, [r7, #14]
 80018ee:	1a8a      	subs	r2, r1, r2
 80018f0:	b292      	uxth	r2, r2
 80018f2:	b212      	sxth	r2, r2
 80018f4:	1a9b      	subs	r3, r3, r2
 80018f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001934 <HAL_TIM_IC_CaptureCallback+0x68>)
 80018f8:	6013      	str	r3, [r2, #0]
		counter_R = current_count;
 80018fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001938 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80018fc:	89fb      	ldrh	r3, [r7, #14]
 80018fe:	8013      	strh	r3, [r2, #0]
	}
	if (htim == &htim3) { // Motor left
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a0e      	ldr	r2, [pc, #56]	@ (800193c <HAL_TIM_IC_CaptureCallback+0x70>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d10d      	bne.n	8001924 <HAL_TIM_IC_CaptureCallback+0x58>
		objective_L -= (int16_t)(current_count - counter_L);
 8001908:	4b0d      	ldr	r3, [pc, #52]	@ (8001940 <HAL_TIM_IC_CaptureCallback+0x74>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0d      	ldr	r2, [pc, #52]	@ (8001944 <HAL_TIM_IC_CaptureCallback+0x78>)
 800190e:	8812      	ldrh	r2, [r2, #0]
 8001910:	89f9      	ldrh	r1, [r7, #14]
 8001912:	1a8a      	subs	r2, r1, r2
 8001914:	b292      	uxth	r2, r2
 8001916:	b212      	sxth	r2, r2
 8001918:	1a9b      	subs	r3, r3, r2
 800191a:	4a09      	ldr	r2, [pc, #36]	@ (8001940 <HAL_TIM_IC_CaptureCallback+0x74>)
 800191c:	6013      	str	r3, [r2, #0]
		counter_L = current_count;
 800191e:	4a09      	ldr	r2, [pc, #36]	@ (8001944 <HAL_TIM_IC_CaptureCallback+0x78>)
 8001920:	89fb      	ldrh	r3, [r7, #14]
 8001922:	8013      	strh	r3, [r2, #0]
	}
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	2000018c 	.word	0x2000018c
 8001934:	20000250 	.word	0x20000250
 8001938:	20000bf8 	.word	0x20000bf8
 800193c:	20000144 	.word	0x20000144
 8001940:	2000024c 	.word	0x2000024c
 8001944:	20000bf6 	.word	0x20000bf6

08001948 <Calculate_RPM>:

// LIKELY WILL HAVE TO CHANGE
uint16_t Calculate_RPM(int32_t current_ticks, uint8_t motor) {
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	70fb      	strb	r3, [r7, #3]
	uint32_t time_difference = global_time - last_calculated_time[motor];
 8001954:	4b20      	ldr	r3, [pc, #128]	@ (80019d8 <Calculate_RPM+0x90>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	4920      	ldr	r1, [pc, #128]	@ (80019dc <Calculate_RPM+0x94>)
 800195c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	60fb      	str	r3, [r7, #12]
	last_calculated_time[motor] = global_time;
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	4a1c      	ldr	r2, [pc, #112]	@ (80019d8 <Calculate_RPM+0x90>)
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	491c      	ldr	r1, [pc, #112]	@ (80019dc <Calculate_RPM+0x94>)
 800196c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	int32_t tick_difference = abs(current_ticks - last_tick_count[motor]);
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	491a      	ldr	r1, [pc, #104]	@ (80019e0 <Calculate_RPM+0x98>)
 8001976:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	bfb8      	it	lt
 8001980:	425b      	neglt	r3, r3
 8001982:	60bb      	str	r3, [r7, #8]
	last_tick_count[motor] = current_ticks;
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	4915      	ldr	r1, [pc, #84]	@ (80019e0 <Calculate_RPM+0x98>)
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return ((MS_PER_SEC * SEC_PER_MIN * tick_difference) / (TICKS_PER_ROTATION * time_difference));
 800198e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001992:	223c      	movs	r2, #60	@ 0x3c
 8001994:	fb02 f303 	mul.w	r3, r2, r3
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	fb02 f303 	mul.w	r3, r2, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff f8d4 	bl	8000b4c <__aeabi_i2f>
 80019a4:	4604      	mov	r4, r0
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f7ff f8cc 	bl	8000b44 <__aeabi_ui2f>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4a0d      	ldr	r2, [pc, #52]	@ (80019e4 <Calculate_RPM+0x9c>)
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff f91e 	bl	8000bf4 <__aeabi_fmul>
 80019b8:	4603      	mov	r3, r0
 80019ba:	4619      	mov	r1, r3
 80019bc:	4620      	mov	r0, r4
 80019be:	f7ff f9cd 	bl	8000d5c <__aeabi_fdiv>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fadb 	bl	8000f80 <__aeabi_f2uiz>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b29b      	uxth	r3, r3
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd90      	pop	{r4, r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000244 	.word	0x20000244
 80019dc:	20000c0c 	.word	0x20000c0c
 80019e0:	20000c14 	.word	0x20000c14
 80019e4:	43b328f6 	.word	0x43b328f6

080019e8 <Update_Encoders>:

void Update_Encoders() {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
	int32_t delta_tick_right = objective_R;
 80019ee:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa4 <Update_Encoders+0xbc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	60fb      	str	r3, [r7, #12]
	int32_t delta_tick_left = objective_L;
 80019f4:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa8 <Update_Encoders+0xc0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	60bb      	str	r3, [r7, #8]
	objective_R = 0;
 80019fa:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa4 <Update_Encoders+0xbc>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
	objective_L = 0;
 8001a00:	4b29      	ldr	r3, [pc, #164]	@ (8001aa8 <Update_Encoders+0xc0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]

	float delta_position_right = delta_tick_right * MM_PER_TICK_LEFT;
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f7ff f8a0 	bl	8000b4c <__aeabi_i2f>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4a27      	ldr	r2, [pc, #156]	@ (8001aac <Update_Encoders+0xc4>)
 8001a10:	4611      	mov	r1, r2
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff f8ee 	bl	8000bf4 <__aeabi_fmul>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	607b      	str	r3, [r7, #4]
	float delta_position_left = delta_tick_left * MM_PER_TICK_RIGHT;
 8001a1c:	68b8      	ldr	r0, [r7, #8]
 8001a1e:	f7ff f895 	bl	8000b4c <__aeabi_i2f>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4a22      	ldr	r2, [pc, #136]	@ (8001ab0 <Update_Encoders+0xc8>)
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff f8e3 	bl	8000bf4 <__aeabi_fmul>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	603b      	str	r3, [r7, #0]
	delta_position_forward = (delta_position_right + delta_position_left) / 2; // average change in position
 8001a32:	6839      	ldr	r1, [r7, #0]
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7fe ffd5 	bl	80009e4 <__addsf3>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff f98b 	bl	8000d5c <__aeabi_fdiv>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab4 <Update_Encoders+0xcc>)
 8001a4c:	601a      	str	r2, [r3, #0]
	mouse_position += delta_position_forward;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <Update_Encoders+0xd0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a18      	ldr	r2, [pc, #96]	@ (8001ab4 <Update_Encoders+0xcc>)
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe ffc3 	bl	80009e4 <__addsf3>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <Update_Encoders+0xd0>)
 8001a64:	601a      	str	r2, [r3, #0]
	delta_position_rotational = (delta_position_right - delta_position_left) * DEG_PER_MM_DIFFERENCE;
 8001a66:	6839      	ldr	r1, [r7, #0]
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7fe ffb9 	bl	80009e0 <__aeabi_fsub>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <Update_Encoders+0xd4>)
 8001a74:	4619      	mov	r1, r3
 8001a76:	4610      	mov	r0, r2
 8001a78:	f7ff f8bc 	bl	8000bf4 <__aeabi_fmul>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <Update_Encoders+0xd8>)
 8001a82:	601a      	str	r2, [r3, #0]
	mouse_angle += delta_position_rotational;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <Update_Encoders+0xdc>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac0 <Update_Encoders+0xd8>)
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe ffa8 	bl	80009e4 <__addsf3>
 8001a94:	4603      	mov	r3, r0
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <Update_Encoders+0xdc>)
 8001a9a:	601a      	str	r2, [r3, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000250 	.word	0x20000250
 8001aa8:	2000024c 	.word	0x2000024c
 8001aac:	3e806647 	.word	0x3e806647
 8001ab0:	3e7bb6c3 	.word	0x3e7bb6c3
 8001ab4:	20000bfc 	.word	0x20000bfc
 8001ab8:	20000c08 	.word	0x20000c08
 8001abc:	3f3ba9a9 	.word	0x3f3ba9a9
 8001ac0:	20000c00 	.word	0x20000c00
 8001ac4:	20000c04 	.word	0x20000c04

08001ac8 <Off_Maze>:
char dir_chars[4] = {'n', 'e', 's', 'w'};
enum DirectionBitmask mask_array[4] = {NORTH_MASK, EAST_MASK, SOUTH_MASK, WEST_MASK};

prev_action_t prev_action = ABOUT_FACE;

bool Off_Maze(int mouse_pos_x, int mouse_pos_y) {
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
    if (mouse_pos_x < 0 || mouse_pos_x > 15 || mouse_pos_y < 0 || mouse_pos_y > 15) {
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	db08      	blt.n	8001aea <Off_Maze+0x22>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b0f      	cmp	r3, #15
 8001adc:	dc05      	bgt.n	8001aea <Off_Maze+0x22>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db02      	blt.n	8001aea <Off_Maze+0x22>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	2b0f      	cmp	r3, #15
 8001ae8:	dd01      	ble.n	8001aee <Off_Maze+0x26>
        return false; // False means a cell is off of the maze
 8001aea:	2300      	movs	r3, #0
 8001aec:	e000      	b.n	8001af0 <Off_Maze+0x28>
    }
    return true;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <Get_Neighbor_Cells>:

param_t fwd_placeholder_1 = { 0 };
param_t fwd_placeholder_2 = { 0 };
param_t rot_placeholder_1 = { 0 };

struct CellList* Get_Neighbor_Cells(struct Maze* maze, struct Coord* pos) {
 8001afa:	b590      	push	{r4, r7, lr}
 8001afc:	b093      	sub	sp, #76	@ 0x4c
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
	struct CellList* cell_list = (struct CellList*)malloc(sizeof(struct CellList));
 8001b04:	2008      	movs	r0, #8
 8001b06:	f006 ffb3 	bl	8008a70 <malloc>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    bool north_cell = false, east_cell = false, south_cell = false, west_cell = false;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001b14:	2300      	movs	r3, #0
 8001b16:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8001b20:	2300      	movs	r3, #0
 8001b22:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t x_coord = pos->x, y_coord = pos->y;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    uint8_t num_cells = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    // If a cell is adjacent to the cell represented by pos, exists in the 16x16 maze, and is not blocked by a wall, add it to the cell list
    if (Off_Maze(x_coord, y_coord+1) && !(maze->cellWalls[y_coord][x_coord] & NORTH_MASK)) { north_cell = true; num_cells++; } // NORTH
 8001b3c:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8001b40:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001b44:	3301      	adds	r3, #1
 8001b46:	4619      	mov	r1, r3
 8001b48:	4610      	mov	r0, r2
 8001b4a:	f7ff ffbd 	bl	8001ac8 <Off_Maze>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d017      	beq.n	8001b84 <Get_Neighbor_Cells+0x8a>
 8001b54:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8001b58:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	0109      	lsls	r1, r1, #4
 8001b60:	440b      	add	r3, r1
 8001b62:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d107      	bne.n	8001b84 <Get_Neighbor_Cells+0x8a>
 8001b74:	2301      	movs	r3, #1
 8001b76:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001b7a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (Off_Maze(x_coord+1, y_coord) && !(maze->cellWalls[y_coord][x_coord] & EAST_MASK)) { east_cell = true; num_cells++; }   // EAST
 8001b84:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001b88:	3301      	adds	r3, #1
 8001b8a:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8001b8e:	4611      	mov	r1, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff99 	bl	8001ac8 <Off_Maze>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d017      	beq.n	8001bcc <Get_Neighbor_Cells+0xd2>
 8001b9c:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8001ba0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	0109      	lsls	r1, r1, #4
 8001ba8:	440b      	add	r3, r1
 8001baa:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d107      	bne.n	8001bcc <Get_Neighbor_Cells+0xd2>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001bc2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (Off_Maze(x_coord, y_coord-1) && !(maze->cellWalls[y_coord][x_coord] & SOUTH_MASK)) { south_cell = true; num_cells++; } // SOUTH
 8001bcc:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8001bd0:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4610      	mov	r0, r2
 8001bda:	f7ff ff75 	bl	8001ac8 <Off_Maze>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d017      	beq.n	8001c14 <Get_Neighbor_Cells+0x11a>
 8001be4:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8001be8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	0109      	lsls	r1, r1, #4
 8001bf0:	440b      	add	r3, r1
 8001bf2:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d107      	bne.n	8001c14 <Get_Neighbor_Cells+0x11a>
 8001c04:	2301      	movs	r3, #1
 8001c06:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8001c0a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001c0e:	3301      	adds	r3, #1
 8001c10:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (Off_Maze(x_coord-1, y_coord) && !(maze->cellWalls[y_coord][x_coord] & WEST_MASK)) { west_cell = true; num_cells++; }   // WEST
 8001c14:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff51 	bl	8001ac8 <Off_Maze>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d017      	beq.n	8001c5c <Get_Neighbor_Cells+0x162>
 8001c2c:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8001c30:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	0109      	lsls	r1, r1, #4
 8001c38:	440b      	add	r3, r1
 8001c3a:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d107      	bne.n	8001c5c <Get_Neighbor_Cells+0x162>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8001c52:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001c56:	3301      	adds	r3, #1
 8001c58:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    cell_list->size = num_cells;
 8001c5c:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8001c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c62:	601a      	str	r2, [r3, #0]
    cell_list->cells = (struct Cell*)malloc(num_cells*sizeof(struct Cell));
 8001c64:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f006 fefd 	bl	8008a70 <malloc>
 8001c76:	4603      	mov	r3, r0
 8001c78:	461a      	mov	r2, r3
 8001c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c7c:	605a      	str	r2, [r3, #4]

    uint8_t i = 0; // Create new cells with appropriate coordinate and direction and add to the cell list if it is not blocked or off the maze
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    if (north_cell) {
 8001c84:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d01e      	beq.n	8001cca <Get_Neighbor_Cells+0x1d0>
    	struct Cell new_cell = {{x_coord, y_coord+1}, NORTH}; // NORTH
 8001c8c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c92:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001c96:	3301      	adds	r3, #1
 8001c98:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        cell_list->cells[i] = new_cell; i++;
 8001ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ca2:	6859      	ldr	r1, [r3, #4]
 8001ca4:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	461c      	mov	r4, r3
 8001cb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cb8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001cbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cc0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    }
    if (east_cell) {
 8001cca:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d01e      	beq.n	8001d10 <Get_Neighbor_Cells+0x216>
    	struct Cell new_cell = {{x_coord+1, y_coord}, EAST};  // EAST
 8001cd2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	623b      	str	r3, [r7, #32]
 8001cda:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        cell_list->cells[i] = new_cell; i++;
 8001ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ce8:	6859      	ldr	r1, [r3, #4]
 8001cea:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8001cee:	4613      	mov	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	461c      	mov	r4, r3
 8001cfa:	f107 0320 	add.w	r3, r7, #32
 8001cfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d06:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    }
    if (south_cell) {
 8001d10:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d01d      	beq.n	8001d54 <Get_Neighbor_Cells+0x25a>
    	struct Cell new_cell = {{x_coord, y_coord-1}, SOUTH}; // SOUTH
 8001d18:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001d22:	3b01      	subs	r3, #1
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	2302      	movs	r3, #2
 8001d28:	773b      	strb	r3, [r7, #28]
        cell_list->cells[i] = new_cell; i++;
 8001d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d2c:	6859      	ldr	r1, [r3, #4]
 8001d2e:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	461c      	mov	r4, r3
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d4a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    }
    if (west_cell) {
 8001d54:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d01d      	beq.n	8001d98 <Get_Neighbor_Cells+0x29e>
    	struct Cell new_cell = {{x_coord-1, y_coord}, WEST}; // WEST
 8001d5c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001d60:	3b01      	subs	r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	743b      	strb	r3, [r7, #16]
        cell_list->cells[i] = new_cell; i++;
 8001d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d70:	6859      	ldr	r1, [r3, #4]
 8001d72:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	461c      	mov	r4, r3
 8001d82:	f107 0308 	add.w	r3, r7, #8
 8001d86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d8e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001d92:	3301      	adds	r3, #1
 8001d94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    }
    return cell_list;
 8001d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	374c      	adds	r7, #76	@ 0x4c
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd90      	pop	{r4, r7, pc}
	...

08001da4 <Scan_Walls>:

uint8_t Scan_Walls(struct Maze* maze) { // Checks wall information based on mouse's current position and updates maze walls. Returns an integer 0-3 depending on # of walls spotted
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
    enum Direction cur_dir = maze->mouse_dir;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	7a1b      	ldrb	r3, [r3, #8]
 8001db0:	75bb      	strb	r3, [r7, #22]
    struct Coord cur_pos = maze->mouse_pos;
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dbc:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t walls_changed = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	75fb      	strb	r3, [r7, #23]

    Poll_Sensors(&mouse_state);
 8001dc4:	48b0      	ldr	r0, [pc, #704]	@ (8002088 <Scan_Walls+0x2e4>)
 8001dc6:	f002 fc37 	bl	8004638 <Poll_Sensors>
    if (Wall_Front()) {
 8001dca:	f002 fc91 	bl	80046f0 <Wall_Front>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80cf 	beq.w	8001f74 <Scan_Walls+0x1d0>
        maze->cellWalls[cur_pos.y][cur_pos.x] |= mask_array[cur_dir];
 8001dd6:	6939      	ldr	r1, [r7, #16]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	0109      	lsls	r1, r1, #4
 8001dde:	440b      	add	r3, r1
 8001de0:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	7dbb      	ldrb	r3, [r7, #22]
 8001dec:	49a7      	ldr	r1, [pc, #668]	@ (800208c <Scan_Walls+0x2e8>)
 8001dee:	5ccb      	ldrb	r3, [r1, r3]
 8001df0:	4619      	mov	r1, r3
 8001df2:	6938      	ldr	r0, [r7, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	0100      	lsls	r0, r0, #4
 8001dfc:	4403      	add	r3, r0
 8001dfe:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	605a      	str	r2, [r3, #4]
        walls_changed += 1;
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	75fb      	strb	r3, [r7, #23]
        switch (cur_dir) { // Update adjacent walls with relevant wall information
 8001e0e:	7dbb      	ldrb	r3, [r7, #22]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	f200 80af 	bhi.w	8001f74 <Scan_Walls+0x1d0>
 8001e16:	a201      	add	r2, pc, #4	@ (adr r2, 8001e1c <Scan_Walls+0x78>)
 8001e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1c:	08001e2d 	.word	0x08001e2d
 8001e20:	08001e7d 	.word	0x08001e7d
 8001e24:	08001ecb 	.word	0x08001ecb
 8001e28:	08001f19 	.word	0x08001f19
            case (NORTH):
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	3301      	adds	r3, #1
 8001e32:	4619      	mov	r1, r3
 8001e34:	4610      	mov	r0, r2
 8001e36:	f7ff fe47 	bl	8001ac8 <Off_Maze>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 8092 	beq.w	8001f66 <Scan_Walls+0x1c2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	1c59      	adds	r1, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	0109      	lsls	r1, r1, #4
 8001e50:	440b      	add	r3, r1
 8001e52:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	1c58      	adds	r0, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0202 	orr.w	r2, r2, #2
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	0100      	lsls	r0, r0, #4
 8001e6e:	4403      	add	r3, r0
 8001e70:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	440b      	add	r3, r1
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	e074      	b.n	8001f66 <Scan_Walls+0x1c2>
            case (EAST):
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fe1f 	bl	8001ac8 <Off_Maze>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d06c      	beq.n	8001f6a <Scan_Walls+0x1c6>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	0109      	lsls	r1, r1, #4
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6858      	ldr	r0, [r3, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	0100      	lsls	r0, r0, #4
 8001ebc:	4403      	add	r3, r0
 8001ebe:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	e04f      	b.n	8001f6a <Scan_Walls+0x1c6>
            case (SOUTH):
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	f7ff fdf8 	bl	8001ac8 <Off_Maze>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d047      	beq.n	8001f6e <Scan_Walls+0x1ca>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	1e59      	subs	r1, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	0109      	lsls	r1, r1, #4
 8001eec:	440b      	add	r3, r1
 8001eee:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	1e58      	subs	r0, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0208 	orr.w	r2, r2, #8
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	0100      	lsls	r0, r0, #4
 8001f0a:	4403      	add	r3, r0
 8001f0c:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	e02a      	b.n	8001f6e <Scan_Walls+0x1ca>
            case (WEST):
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fdd1 	bl	8001ac8 <Off_Maze>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d022      	beq.n	8001f72 <Scan_Walls+0x1ce>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	0109      	lsls	r1, r1, #4
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6858      	ldr	r0, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	f042 0204 	orr.w	r2, r2, #4
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	0100      	lsls	r0, r0, #4
 8001f58:	4403      	add	r3, r0
 8001f5a:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	e005      	b.n	8001f72 <Scan_Walls+0x1ce>
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 8001f66:	bf00      	nop
 8001f68:	e004      	b.n	8001f74 <Scan_Walls+0x1d0>
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 8001f6a:	bf00      	nop
 8001f6c:	e002      	b.n	8001f74 <Scan_Walls+0x1d0>
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 8001f6e:	bf00      	nop
 8001f70:	e000      	b.n	8001f74 <Scan_Walls+0x1d0>
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 8001f72:	bf00      	nop
        }
    }
    if (Wall_Right()) {
 8001f74:	f002 fc18 	bl	80047a8 <Wall_Right>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80dd 	beq.w	800213a <Scan_Walls+0x396>
        maze->cellWalls[cur_pos.y][cur_pos.x] |= mask_array[(cur_dir + 3) % 4];
 8001f80:	6939      	ldr	r1, [r7, #16]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	0109      	lsls	r1, r1, #4
 8001f88:	440b      	add	r3, r1
 8001f8a:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	7dbb      	ldrb	r3, [r7, #22]
 8001f96:	3303      	adds	r3, #3
 8001f98:	4259      	negs	r1, r3
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	f001 0103 	and.w	r1, r1, #3
 8001fa2:	bf58      	it	pl
 8001fa4:	424b      	negpl	r3, r1
 8001fa6:	4939      	ldr	r1, [pc, #228]	@ (800208c <Scan_Walls+0x2e8>)
 8001fa8:	5ccb      	ldrb	r3, [r1, r3]
 8001faa:	4619      	mov	r1, r3
 8001fac:	6938      	ldr	r0, [r7, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	0100      	lsls	r0, r0, #4
 8001fb6:	4403      	add	r3, r0
 8001fb8:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	605a      	str	r2, [r3, #4]
        walls_changed += 1;
 8001fc2:	7dfb      	ldrb	r3, [r7, #23]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	75fb      	strb	r3, [r7, #23]
        switch (cur_dir) {
 8001fc8:	7dbb      	ldrb	r3, [r7, #22]
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	f200 80b5 	bhi.w	800213a <Scan_Walls+0x396>
 8001fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8001fd8 <Scan_Walls+0x234>)
 8001fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd6:	bf00      	nop
 8001fd8:	08001fe9 	.word	0x08001fe9
 8001fdc:	08002039 	.word	0x08002039
 8001fe0:	08002091 	.word	0x08002091
 8001fe4:	080020df 	.word	0x080020df
            case (NORTH):
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fd69 	bl	8001ac8 <Off_Maze>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 8097 	beq.w	800212c <Scan_Walls+0x388>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6859      	ldr	r1, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	3b01      	subs	r3, #1
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	0109      	lsls	r1, r1, #4
 800200c:	440b      	add	r3, r1
 800200e:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6858      	ldr	r0, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3b01      	subs	r3, #1
 8002022:	f042 0204 	orr.w	r2, r2, #4
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	0100      	lsls	r0, r0, #4
 800202a:	4403      	add	r3, r0
 800202c:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	e079      	b.n	800212c <Scan_Walls+0x388>
            case (EAST):
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	3301      	adds	r3, #1
 800203e:	4619      	mov	r1, r3
 8002040:	4610      	mov	r0, r2
 8002042:	f7ff fd41 	bl	8001ac8 <Off_Maze>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d071      	beq.n	8002130 <Scan_Walls+0x38c>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	1c59      	adds	r1, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	0109      	lsls	r1, r1, #4
 800205a:	440b      	add	r3, r1
 800205c:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	1c58      	adds	r0, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0202 	orr.w	r2, r2, #2
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	0100      	lsls	r0, r0, #4
 8002078:	4403      	add	r3, r0
 800207a:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	e054      	b.n	8002130 <Scan_Walls+0x38c>
 8002086:	bf00      	nop
 8002088:	20000220 	.word	0x20000220
 800208c:	20000004 	.word	0x20000004
            case (SOUTH):
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	3301      	adds	r3, #1
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fd15 	bl	8001ac8 <Off_Maze>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d047      	beq.n	8002134 <Scan_Walls+0x390>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	3301      	adds	r3, #1
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	0109      	lsls	r1, r1, #4
 80020b2:	440b      	add	r3, r1
 80020b4:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6858      	ldr	r0, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3301      	adds	r3, #1
 80020c8:	f042 0201 	orr.w	r2, r2, #1
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	0100      	lsls	r0, r0, #4
 80020d0:	4403      	add	r3, r0
 80020d2:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	e02a      	b.n	8002134 <Scan_Walls+0x390>
            case (WEST):
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	4619      	mov	r1, r3
 80020e6:	4610      	mov	r0, r2
 80020e8:	f7ff fcee 	bl	8001ac8 <Off_Maze>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d022      	beq.n	8002138 <Scan_Walls+0x394>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	1e59      	subs	r1, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	0109      	lsls	r1, r1, #4
 8002100:	440b      	add	r3, r1
 8002102:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	1e58      	subs	r0, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0208 	orr.w	r2, r2, #8
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	0100      	lsls	r0, r0, #4
 800211e:	4403      	add	r3, r0
 8002120:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	e005      	b.n	8002138 <Scan_Walls+0x394>
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 800212c:	bf00      	nop
 800212e:	e004      	b.n	800213a <Scan_Walls+0x396>
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 8002130:	bf00      	nop
 8002132:	e002      	b.n	800213a <Scan_Walls+0x396>
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 8002134:	bf00      	nop
 8002136:	e000      	b.n	800213a <Scan_Walls+0x396>
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 8002138:	bf00      	nop
        }
    }
    if (Wall_Left()) {
 800213a:	f002 fb0d 	bl	8004758 <Wall_Left>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80d7 	beq.w	80022f4 <Scan_Walls+0x550>
        maze->cellWalls[cur_pos.y][cur_pos.x] |= mask_array[(cur_dir + 1) % 4];
 8002146:	6939      	ldr	r1, [r7, #16]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	0109      	lsls	r1, r1, #4
 800214e:	440b      	add	r3, r1
 8002150:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	7dbb      	ldrb	r3, [r7, #22]
 800215c:	3301      	adds	r3, #1
 800215e:	4259      	negs	r1, r3
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	f001 0103 	and.w	r1, r1, #3
 8002168:	bf58      	it	pl
 800216a:	424b      	negpl	r3, r1
 800216c:	4964      	ldr	r1, [pc, #400]	@ (8002300 <Scan_Walls+0x55c>)
 800216e:	5ccb      	ldrb	r3, [r1, r3]
 8002170:	4619      	mov	r1, r3
 8002172:	6938      	ldr	r0, [r7, #16]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	430a      	orrs	r2, r1
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	0100      	lsls	r0, r0, #4
 800217c:	4403      	add	r3, r0
 800217e:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	605a      	str	r2, [r3, #4]
        walls_changed += 1;
 8002188:	7dfb      	ldrb	r3, [r7, #23]
 800218a:	3301      	adds	r3, #1
 800218c:	75fb      	strb	r3, [r7, #23]
        switch (cur_dir) {
 800218e:	7dbb      	ldrb	r3, [r7, #22]
 8002190:	2b03      	cmp	r3, #3
 8002192:	f200 80af 	bhi.w	80022f4 <Scan_Walls+0x550>
 8002196:	a201      	add	r2, pc, #4	@ (adr r2, 800219c <Scan_Walls+0x3f8>)
 8002198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219c:	080021ad 	.word	0x080021ad
 80021a0:	080021fd 	.word	0x080021fd
 80021a4:	0800224b 	.word	0x0800224b
 80021a8:	08002299 	.word	0x08002299
            case (NORTH):
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	3301      	adds	r3, #1
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fc87 	bl	8001ac8 <Off_Maze>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8092 	beq.w	80022e6 <Scan_Walls+0x542>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6859      	ldr	r1, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	3301      	adds	r3, #1
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	0109      	lsls	r1, r1, #4
 80021d0:	440b      	add	r3, r1
 80021d2:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6858      	ldr	r0, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	3301      	adds	r3, #1
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	0100      	lsls	r0, r0, #4
 80021ee:	4403      	add	r3, r0
 80021f0:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	e074      	b.n	80022e6 <Scan_Walls+0x542>
            case (EAST):
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	3b01      	subs	r3, #1
 8002202:	4619      	mov	r1, r3
 8002204:	4610      	mov	r0, r2
 8002206:	f7ff fc5f 	bl	8001ac8 <Off_Maze>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d06c      	beq.n	80022ea <Scan_Walls+0x546>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	1e59      	subs	r1, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	0109      	lsls	r1, r1, #4
 800221e:	440b      	add	r3, r1
 8002220:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	1e58      	subs	r0, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0208 	orr.w	r2, r2, #8
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	0100      	lsls	r0, r0, #4
 800223c:	4403      	add	r3, r0
 800223e:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	e04f      	b.n	80022ea <Scan_Walls+0x546>
            case (SOUTH):
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	3b01      	subs	r3, #1
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4611      	mov	r1, r2
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fc38 	bl	8001ac8 <Off_Maze>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d047      	beq.n	80022ee <Scan_Walls+0x54a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6859      	ldr	r1, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3b01      	subs	r3, #1
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	0109      	lsls	r1, r1, #4
 800226c:	440b      	add	r3, r1
 800226e:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6858      	ldr	r0, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3b01      	subs	r3, #1
 8002282:	f042 0204 	orr.w	r2, r2, #4
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	0100      	lsls	r0, r0, #4
 800228a:	4403      	add	r3, r0
 800228c:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	e02a      	b.n	80022ee <Scan_Walls+0x54a>
            case (WEST):
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	3301      	adds	r3, #1
 800229e:	4619      	mov	r1, r3
 80022a0:	4610      	mov	r0, r2
 80022a2:	f7ff fc11 	bl	8001ac8 <Off_Maze>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d022      	beq.n	80022f2 <Scan_Walls+0x54e>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	1c59      	adds	r1, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	0109      	lsls	r1, r1, #4
 80022ba:	440b      	add	r3, r1
 80022bc:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	1c58      	adds	r0, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0202 	orr.w	r2, r2, #2
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	0100      	lsls	r0, r0, #4
 80022d8:	4403      	add	r3, r0
 80022da:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	e005      	b.n	80022f2 <Scan_Walls+0x54e>
                if (Off_Maze(cur_pos.x + 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x + 1] |= WEST_MASK; }  break;
 80022e6:	bf00      	nop
 80022e8:	e004      	b.n	80022f4 <Scan_Walls+0x550>
                if (Off_Maze(cur_pos.x, cur_pos.y - 1)) { maze->cellWalls[maze->mouse_pos.y - 1][maze->mouse_pos.x] |= NORTH_MASK; } break;
 80022ea:	bf00      	nop
 80022ec:	e002      	b.n	80022f4 <Scan_Walls+0x550>
                if (Off_Maze(cur_pos.x - 1, cur_pos.y)) { maze->cellWalls[maze->mouse_pos.y][maze->mouse_pos.x - 1] |= EAST_MASK; }  break;
 80022ee:	bf00      	nop
 80022f0:	e000      	b.n	80022f4 <Scan_Walls+0x550>
                if (Off_Maze(cur_pos.x, cur_pos.y + 1)) { maze->cellWalls[maze->mouse_pos.y + 1][maze->mouse_pos.x] |= SOUTH_MASK; } break;
 80022f2:	bf00      	nop
        }
    }
    return walls_changed;
 80022f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000004 	.word	0x20000004

08002304 <Update_Mouse_Pos>:

void Update_Mouse_Pos(struct Coord *pos, enum Direction dir, struct Maze* maze)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	460b      	mov	r3, r1
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	72fb      	strb	r3, [r7, #11]
	maze->exploredCells[pos->y][pos->x] = true;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	0112      	lsls	r2, r2, #4
 800231e:	440a      	add	r2, r1
 8002320:	4413      	add	r3, r2
 8002322:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]

    if      (dir == NORTH) { pos->y++; }
 800232a:	7afb      	ldrb	r3, [r7, #11]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d105      	bne.n	800233c <Update_Mouse_Pos+0x38>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	e019      	b.n	8002370 <Update_Mouse_Pos+0x6c>
    else if (dir == SOUTH) { pos->y--; }
 800233c:	7afb      	ldrb	r3, [r7, #11]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d105      	bne.n	800234e <Update_Mouse_Pos+0x4a>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	1e5a      	subs	r2, r3, #1
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	e010      	b.n	8002370 <Update_Mouse_Pos+0x6c>
    else if (dir == WEST)  { pos->x--; }
 800234e:	7afb      	ldrb	r3, [r7, #11]
 8002350:	2b03      	cmp	r3, #3
 8002352:	d105      	bne.n	8002360 <Update_Mouse_Pos+0x5c>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	1e5a      	subs	r2, r3, #1
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	e007      	b.n	8002370 <Update_Mouse_Pos+0x6c>
    else if (dir == EAST)  { pos->x++; }
 8002360:	7afb      	ldrb	r3, [r7, #11]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d104      	bne.n	8002370 <Update_Mouse_Pos+0x6c>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	601a      	str	r2, [r3, #0]

    maze->exploredCells[pos->y][pos->x] = true;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	440a      	add	r2, r1
 800237e:	4413      	add	r3, r2
 8002380:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]

    mouse_state.current_cell = maze->cellWalls[pos->y][pos->x];
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	0109      	lsls	r1, r1, #4
 8002394:	440b      	add	r3, r1
 8002396:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	4b0a      	ldr	r3, [pc, #40]	@ (80023cc <Update_Mouse_Pos+0xc8>)
 80023a4:	701a      	strb	r2, [r3, #0]
	mouse_state.mouse_position[0] = (uint8_t)pos->x;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	4b07      	ldr	r3, [pc, #28]	@ (80023cc <Update_Mouse_Pos+0xc8>)
 80023ae:	705a      	strb	r2, [r3, #1]
	mouse_state.mouse_position[1] = (uint8_t)pos->y;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b05      	ldr	r3, [pc, #20]	@ (80023cc <Update_Mouse_Pos+0xc8>)
 80023b8:	709a      	strb	r2, [r3, #2]
	mouse_state.mouse_direction = dir;
 80023ba:	4a04      	ldr	r2, [pc, #16]	@ (80023cc <Update_Mouse_Pos+0xc8>)
 80023bc:	7afb      	ldrb	r3, [r7, #11]
 80023be:	70d3      	strb	r3, [r2, #3]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20000220 	.word	0x20000220

080023d0 <Set_Goal_Cell>:

void Set_Goal_Cell(struct Maze* maze, int num_of_goals) {
 80023d0:	b480      	push	{r7}
 80023d2:	b08d      	sub	sp, #52	@ 0x34
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
    if (num_of_goals == 1) {
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d108      	bne.n	80023f2 <Set_Goal_Cell+0x22>
		maze->goalPos[0] = (struct Coord){0, 0};
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f8c3 2910 	str.w	r2, [r3, #2320]	@ 0x910
    	maze->goalPos[0] = (struct Coord){7, 7};
		maze->goalPos[1] = (struct Coord){7, 8};
		maze->goalPos[2] = (struct Coord){8, 7};
		maze->goalPos[3] = (struct Coord){8, 8};
    }
}
 80023f0:	e022      	b.n	8002438 <Set_Goal_Cell+0x68>
    else if (num_of_goals == 4) {
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d11f      	bne.n	8002438 <Set_Goal_Cell+0x68>
    	maze->goalPos[0] = (struct Coord){7, 7};
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a12      	ldr	r2, [pc, #72]	@ (8002444 <Set_Goal_Cell+0x74>)
 80023fc:	f603 130c 	addw	r3, r3, #2316	@ 0x90c
 8002400:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002404:	e883 0003 	stmia.w	r3, {r0, r1}
		maze->goalPos[1] = (struct Coord){7, 8};
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a0f      	ldr	r2, [pc, #60]	@ (8002448 <Set_Goal_Cell+0x78>)
 800240c:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 8002410:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002414:	e883 0003 	stmia.w	r3, {r0, r1}
		maze->goalPos[2] = (struct Coord){8, 7};
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a0c      	ldr	r2, [pc, #48]	@ (800244c <Set_Goal_Cell+0x7c>)
 800241c:	f603 131c 	addw	r3, r3, #2332	@ 0x91c
 8002420:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002424:	e883 0003 	stmia.w	r3, {r0, r1}
		maze->goalPos[3] = (struct Coord){8, 8};
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a09      	ldr	r2, [pc, #36]	@ (8002450 <Set_Goal_Cell+0x80>)
 800242c:	f603 1324 	addw	r3, r3, #2340	@ 0x924
 8002430:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002434:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8002438:	bf00      	nop
 800243a:	3734      	adds	r7, #52	@ 0x34
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	08008d40 	.word	0x08008d40
 8002448:	08008d48 	.word	0x08008d48
 800244c:	08008d50 	.word	0x08008d50
 8002450:	08008d58 	.word	0x08008d58

08002454 <Floodfill>:

void Floodfill(struct Maze* maze, enum mode_type_t mode) {
 8002454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002458:	b08f      	sub	sp, #60	@ 0x3c
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	460b      	mov	r3, r1
 8002460:	70fb      	strb	r3, [r7, #3]
 8002462:	466b      	mov	r3, sp
 8002464:	461e      	mov	r6, r3
    for (uint8_t y=0; y<16; y++) { for (uint8_t x=0; x<16; x++) { maze->distances[y][x] = MAX_COST; } } // Initialize all maze costs/distances to the maximum = 255
 8002466:	2300      	movs	r3, #0
 8002468:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800246c:	e01f      	b.n	80024ae <Floodfill+0x5a>
 800246e:	2300      	movs	r3, #0
 8002470:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8002474:	e012      	b.n	800249c <Floodfill+0x48>
 8002476:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800247a:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800247e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002482:	4610      	mov	r0, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	0109      	lsls	r1, r1, #4
 8002488:	440b      	add	r3, r1
 800248a:	3302      	adds	r3, #2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	6058      	str	r0, [r3, #4]
 8002492:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002496:	3301      	adds	r3, #1
 8002498:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800249c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80024a0:	2b0f      	cmp	r3, #15
 80024a2:	d9e8      	bls.n	8002476 <Floodfill+0x22>
 80024a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80024a8:	3301      	adds	r3, #1
 80024aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80024ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80024b2:	2b0f      	cmp	r3, #15
 80024b4:	d9db      	bls.n	800246e <Floodfill+0x1a>

    uint8_t goal_count = 4;
 80024b6:	2304      	movs	r3, #4
 80024b8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    if (maze->goalPos[0].x == 0) { goal_count = 1; }                                                    // Check if goal is maze center or start cell
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d102      	bne.n	80024cc <Floodfill+0x78>
 80024c6:	2301      	movs	r3, #1
 80024c8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    struct Coord queue[MAX_COST];                                                                       // Initialize queue
 80024cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024d0:	3b01      	subs	r3, #1
 80024d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2200      	movs	r2, #0
 80024dc:	4698      	mov	r8, r3
 80024de:	4691      	mov	r9, r2
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024ec:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024f0:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	2200      	movs	r2, #0
 80024fc:	461c      	mov	r4, r3
 80024fe:	4615      	mov	r5, r2
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	01ab      	lsls	r3, r5, #6
 800250a:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800250e:	01a2      	lsls	r2, r4, #6
 8002510:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	3307      	adds	r3, #7
 8002518:	08db      	lsrs	r3, r3, #3
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	ebad 0d03 	sub.w	sp, sp, r3
 8002520:	466b      	mov	r3, sp
 8002522:	3303      	adds	r3, #3
 8002524:	089b      	lsrs	r3, r3, #2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t head = 0, tail = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	867b      	strh	r3, [r7, #50]	@ 0x32
 800252e:	2300      	movs	r3, #0
 8002530:	863b      	strh	r3, [r7, #48]	@ 0x30
    for (uint8_t cell = 0; cell < goal_count; cell++) {
 8002532:	2300      	movs	r3, #0
 8002534:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002538:	e02f      	b.n	800259a <Floodfill+0x146>
        maze->distances[maze->goalPos[cell].y][maze->goalPos[cell].x] = 0;                              // Set goal cells to cost/distance minimum = 0
 800253a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	f203 1321 	addw	r3, r3, #289	@ 0x121
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	6899      	ldr	r1, [r3, #8]
 800254a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	f203 1321 	addw	r3, r3, #289	@ 0x121
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	0109      	lsls	r1, r1, #4
 800255e:	440b      	add	r3, r1
 8002560:	3302      	adds	r3, #2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	2200      	movs	r2, #0
 8002568:	605a      	str	r2, [r3, #4]
        queue[tail] = maze->goalPos[cell]; tail++;                                                      // Add goal cells to queue, increment tail
 800256a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800256e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002570:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f202 1221 	addw	r2, r2, #289	@ 0x121
 8002578:	00d2      	lsls	r2, r2, #3
 800257a:	4402      	add	r2, r0
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	440b      	add	r3, r1
 8002580:	3204      	adds	r2, #4
 8002582:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002586:	e883 0003 	stmia.w	r3, {r0, r1}
 800258a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800258c:	3301      	adds	r3, #1
 800258e:	863b      	strh	r3, [r7, #48]	@ 0x30
    for (uint8_t cell = 0; cell < goal_count; cell++) {
 8002590:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002594:	3301      	adds	r3, #1
 8002596:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800259a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800259e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d3c9      	bcc.n	800253a <Floodfill+0xe6>
    }

    struct Coord curr_pos;
    while (head != tail) {
 80025a6:	e0ee      	b.n	8002786 <Floodfill+0x332>
        curr_pos = queue[head];
 80025a8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80025aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025ac:	f107 020c 	add.w	r2, r7, #12
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	440b      	add	r3, r1
 80025b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025b8:	e882 0003 	stmia.w	r2, {r0, r1}
        head++;
 80025bc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80025be:	3301      	adds	r3, #1
 80025c0:	867b      	strh	r3, [r7, #50]	@ 0x32
        uint8_t new_distance = maze->distances[curr_pos.y][curr_pos.x] + 1;                             // Calculate cost for adjacent cells
 80025c2:	6939      	ldr	r1, [r7, #16]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	0109      	lsls	r1, r1, #4
 80025ca:	440b      	add	r3, r1
 80025cc:	3302      	adds	r3, #2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	3301      	adds	r3, #1
 80025d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        struct CellList* neighbors = Get_Neighbor_Cells(maze, &curr_pos);
 80025dc:	f107 030c 	add.w	r3, r7, #12
 80025e0:	4619      	mov	r1, r3
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff fa89 	bl	8001afa <Get_Neighbor_Cells>
 80025e8:	61f8      	str	r0, [r7, #28]
        struct Cell* replacement_array = (struct Cell*)malloc(sizeof(struct Cell) * 4);
 80025ea:	2030      	movs	r0, #48	@ 0x30
 80025ec:	f006 fa40 	bl	8008a70 <malloc>
 80025f0:	4603      	mov	r3, r0
 80025f2:	61bb      	str	r3, [r7, #24]

        if (mode == RACE) {
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d157      	bne.n	80026aa <Floodfill+0x256>
            uint8_t replacement_index = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            uint8_t loop_size = neighbors->size;
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	75fb      	strb	r3, [r7, #23]
            for (uint8_t neighbor = 0; neighbor < loop_size; neighbor++) {
 8002606:	2300      	movs	r3, #0
 8002608:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800260c:	e045      	b.n	800269a <Floodfill+0x246>
                if (!maze->exploredCells[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x]) {
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	6859      	ldr	r1, [r3, #4]
 8002612:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	6858      	ldr	r0, [r3, #4]
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	6859      	ldr	r1, [r3, #4]
 8002626:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	0102      	lsls	r2, r0, #4
 800263a:	440a      	add	r2, r1
 800263c:	4413      	add	r3, r2
 800263e:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	f083 0301 	eor.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <Floodfill+0x206>
                    neighbors->size--;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	1e5a      	subs	r2, r3, #1
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	e01a      	b.n	8002690 <Floodfill+0x23c>
                }
                else {
                    replacement_array[replacement_index] = neighbors->cells[neighbor];
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	6859      	ldr	r1, [r3, #4]
 800265e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4419      	add	r1, r3
 800266c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8002670:	4613      	mov	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	461a      	mov	r2, r3
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	4413      	add	r3, r2
 800267e:	460a      	mov	r2, r1
 8002680:	ca07      	ldmia	r2, {r0, r1, r2}
 8002682:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                    replacement_index++;
 8002686:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800268a:	3301      	adds	r3, #1
 800268c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            for (uint8_t neighbor = 0; neighbor < loop_size; neighbor++) {
 8002690:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002694:	3301      	adds	r3, #1
 8002696:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800269a:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800269e:	7dfb      	ldrb	r3, [r7, #23]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d3b4      	bcc.n	800260e <Floodfill+0x1ba>
                }
            }
            neighbors->cells = replacement_array;
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	605a      	str	r2, [r3, #4]
        }

        for (uint8_t neighbor = 0; neighbor < neighbors->size; neighbor++) {                            // For each neighbor cell, check if its cost/distance is > new distance -- if so, update its value
 80026aa:	2300      	movs	r3, #0
 80026ac:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80026b0:	e055      	b.n	800275e <Floodfill+0x30a>
            if (maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] > new_distance) {
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	6859      	ldr	r1, [r3, #4]
 80026b6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	6859      	ldr	r1, [r3, #4]
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	6858      	ldr	r0, [r3, #4]
 80026ca:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80026ce:	4613      	mov	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4403      	add	r3, r0
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	0109      	lsls	r1, r1, #4
 80026de:	440b      	add	r3, r1
 80026e0:	3302      	adds	r3, #2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80026ec:	429a      	cmp	r2, r3
 80026ee:	dd31      	ble.n	8002754 <Floodfill+0x300>
                maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] = new_distance;
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80026f8:	4613      	mov	r3, r2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	6858      	ldr	r0, [r3, #4]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800270c:	4613      	mov	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	0100      	lsls	r0, r0, #4
 8002720:	4403      	add	r3, r0
 8002722:	3302      	adds	r3, #2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	605a      	str	r2, [r3, #4]
                queue[tail] = neighbors->cells[neighbor].pos; tail++;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	6859      	ldr	r1, [r3, #4]
 800272e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002732:	4613      	mov	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4419      	add	r1, r3
 800273c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800273e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	460a      	mov	r2, r1
 8002746:	e892 0003 	ldmia.w	r2, {r0, r1}
 800274a:	e883 0003 	stmia.w	r3, {r0, r1}
 800274e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002750:	3301      	adds	r3, #1
 8002752:	863b      	strh	r3, [r7, #48]	@ 0x30
        for (uint8_t neighbor = 0; neighbor < neighbors->size; neighbor++) {                            // For each neighbor cell, check if its cost/distance is > new distance -- if so, update its value
 8002754:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002758:	3301      	adds	r3, #1
 800275a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800275e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	dba3      	blt.n	80026b2 <Floodfill+0x25e>
            }
        }
        free(replacement_array);
 800276a:	69b8      	ldr	r0, [r7, #24]
 800276c:	f006 f988 	bl	8008a80 <free>
        if (mode == SEARCH) {
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d104      	bne.n	8002780 <Floodfill+0x32c>
            free(neighbors->cells);
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4618      	mov	r0, r3
 800277c:	f006 f980 	bl	8008a80 <free>
        }
        free(neighbors);
 8002780:	69f8      	ldr	r0, [r7, #28]
 8002782:	f006 f97d 	bl	8008a80 <free>
    while (head != tail) {
 8002786:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8002788:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800278a:	429a      	cmp	r2, r3
 800278c:	f47f af0c 	bne.w	80025a8 <Floodfill+0x154>
 8002790:	46b5      	mov	sp, r6
    }
}
 8002792:	bf00      	nop
 8002794:	373c      	adds	r7, #60	@ 0x3c
 8002796:	46bd      	mov	sp, r7
 8002798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800279c <Best_Cell>:

enum Direction Best_Cell(struct Maze* maze, struct Coord mouse_pos, enum mode_type_t mode) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	@ 0x28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	1d38      	adds	r0, r7, #4
 80027a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80027aa:	70fb      	strb	r3, [r7, #3]
	struct CellList* neighbors = Get_Neighbor_Cells(maze, &mouse_pos);
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	4619      	mov	r1, r3
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7ff f9a2 	bl	8001afa <Get_Neighbor_Cells>
 80027b6:	61f8      	str	r0, [r7, #28]
    struct Cell* replacement_array = (struct Cell*)malloc(sizeof(struct Cell) * 4);
 80027b8:	2030      	movs	r0, #48	@ 0x30
 80027ba:	f006 f959 	bl	8008a70 <malloc>
 80027be:	4603      	mov	r3, r0
 80027c0:	61bb      	str	r3, [r7, #24]

    if (mode == RACE) {
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d157      	bne.n	8002878 <Best_Cell+0xdc>
        uint8_t replacement_index = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        uint8_t loop_size = neighbors->size;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	75fb      	strb	r3, [r7, #23]
        for (uint8_t neighbor = 0; neighbor < loop_size; neighbor++) {
 80027d4:	2300      	movs	r3, #0
 80027d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80027da:	e045      	b.n	8002868 <Best_Cell+0xcc>
            if (!maze->exploredCells[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x]) {
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	6858      	ldr	r0, [r3, #4]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	6859      	ldr	r1, [r3, #4]
 80027f4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68f9      	ldr	r1, [r7, #12]
 8002806:	0102      	lsls	r2, r0, #4
 8002808:	440a      	add	r2, r1
 800280a:	4413      	add	r3, r2
 800280c:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	f083 0301 	eor.w	r3, r3, #1
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <Best_Cell+0x8c>
                neighbors->size--;
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	1e5a      	subs	r2, r3, #1
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	e01a      	b.n	800285e <Best_Cell+0xc2>
            }
            else {
                replacement_array[replacement_index] = neighbors->cells[neighbor];
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	6859      	ldr	r1, [r3, #4]
 800282c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002830:	4613      	mov	r3, r2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4419      	add	r1, r3
 800283a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800283e:	4613      	mov	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	461a      	mov	r2, r3
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	4413      	add	r3, r2
 800284c:	460a      	mov	r2, r1
 800284e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002850:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                replacement_index++;
 8002854:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002858:	3301      	adds	r3, #1
 800285a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for (uint8_t neighbor = 0; neighbor < loop_size; neighbor++) {
 800285e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002862:	3301      	adds	r3, #1
 8002864:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002868:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800286c:	7dfb      	ldrb	r3, [r7, #23]
 800286e:	429a      	cmp	r2, r3
 8002870:	d3b4      	bcc.n	80027dc <Best_Cell+0x40>
            }
        }
        neighbors->cells = replacement_array;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	605a      	str	r2, [r3, #4]
    }

    uint8_t best_cell_index = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t lowest_cost = maze->distances[mouse_pos.y][mouse_pos.x];
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	0109      	lsls	r1, r1, #4
 8002886:	440b      	add	r3, r1
 8002888:	3302      	adds	r3, #2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    for (uint8_t neighbor = 0; neighbor < neighbors->size; neighbor++) {
 8002894:	2300      	movs	r3, #0
 8002896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800289a:	e071      	b.n	8002980 <Best_Cell+0x1e4>
        if ((maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] < lowest_cost) ||  // For each neighbor cell, check if its cost is the lowest seen
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	6859      	ldr	r1, [r3, #4]
 80028a0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80028a4:	4613      	mov	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	6858      	ldr	r0, [r3, #4]
 80028b4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4403      	add	r3, r0
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	0109      	lsls	r1, r1, #4
 80028c8:	440b      	add	r3, r1
 80028ca:	3302      	adds	r3, #2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80028d6:	429a      	cmp	r2, r3
 80028d8:	db2c      	blt.n	8002934 <Best_Cell+0x198>
           ((maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] == lowest_cost) && // Or check cost == lowest and the dir of the cell matches that of the mouse (prioritize forward)
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	6859      	ldr	r1, [r3, #4]
 80028de:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80028e2:	4613      	mov	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	6859      	ldr	r1, [r3, #4]
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	6858      	ldr	r0, [r3, #4]
 80028f2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80028f6:	4613      	mov	r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4403      	add	r3, r0
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	0109      	lsls	r1, r1, #4
 8002906:	440b      	add	r3, r1
 8002908:	3302      	adds	r3, #2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
        if ((maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] < lowest_cost) ||  // For each neighbor cell, check if its cost is the lowest seen
 8002914:	429a      	cmp	r2, r3
 8002916:	d12e      	bne.n	8002976 <Best_Cell+0x1da>
           (maze->mouse_dir == neighbors->cells[neighbor].dir))) {
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	7a19      	ldrb	r1, [r3, #8]
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	6858      	ldr	r0, [r3, #4]
 8002920:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002924:	4613      	mov	r3, r2
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4403      	add	r3, r0
 800292e:	7a1b      	ldrb	r3, [r3, #8]
           ((maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x] == lowest_cost) && // Or check cost == lowest and the dir of the cell matches that of the mouse (prioritize forward)
 8002930:	4299      	cmp	r1, r3
 8002932:	d120      	bne.n	8002976 <Best_Cell+0x1da>
                best_cell_index = neighbor;
 8002934:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002938:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                lowest_cost = maze->distances[neighbors->cells[neighbor].pos.y][neighbors->cells[neighbor].pos.x];  // Update best cell index and lowest cost seen
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	6858      	ldr	r0, [r3, #4]
 8002954:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002958:	4613      	mov	r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4403      	add	r3, r0
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	0109      	lsls	r1, r1, #4
 8002968:	440b      	add	r3, r1
 800296a:	3302      	adds	r3, #2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    for (uint8_t neighbor = 0; neighbor < neighbors->size; neighbor++) {
 8002976:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800297a:	3301      	adds	r3, #1
 800297c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002980:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	db87      	blt.n	800289c <Best_Cell+0x100>
           }
    }
    enum Direction ret_dir = neighbors->cells[best_cell_index].dir;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8002994:	4613      	mov	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	7a1b      	ldrb	r3, [r3, #8]
 80029a0:	75bb      	strb	r3, [r7, #22]
    free(replacement_array);
 80029a2:	69b8      	ldr	r0, [r7, #24]
 80029a4:	f006 f86c 	bl	8008a80 <free>
    if (mode == SEARCH) {
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d104      	bne.n	80029b8 <Best_Cell+0x21c>
        free(neighbors->cells);
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f006 f864 	bl	8008a80 <free>
    }
    free(neighbors);
 80029b8:	69f8      	ldr	r0, [r7, #28]
 80029ba:	f006 f861 	bl	8008a80 <free>

    return ret_dir;                                                                                                 // Return direction of lowest cost cell
 80029be:	7dbb      	ldrb	r3, [r7, #22]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3728      	adds	r7, #40	@ 0x28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <Maze_Init>:

void Maze_Init(struct Maze* maze) {
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
    for (uint8_t y = 0; y < 16; y++) { for (uint8_t x = 0; x < 16; x++) { maze->cellWalls[y][x] = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	75fb      	strb	r3, [r7, #23]
 80029d4:	e020      	b.n	8002a18 <Maze_Init+0x50>
 80029d6:	2300      	movs	r3, #0
 80029d8:	75bb      	strb	r3, [r7, #22]
 80029da:	e017      	b.n	8002a0c <Maze_Init+0x44>
 80029dc:	7df9      	ldrb	r1, [r7, #23]
 80029de:	7dbb      	ldrb	r3, [r7, #22]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	0109      	lsls	r1, r1, #4
 80029e4:	440b      	add	r3, r1
 80029e6:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	2200      	movs	r2, #0
 80029f0:	605a      	str	r2, [r3, #4]
    																	  maze->exploredCells[y][x] = 0; } }        // Initialize all wall/explored values to 0
 80029f2:	7dfa      	ldrb	r2, [r7, #23]
 80029f4:	7dbb      	ldrb	r3, [r7, #22]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	0112      	lsls	r2, r2, #4
 80029fa:	440a      	add	r2, r1
 80029fc:	4413      	add	r3, r2
 80029fe:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
    for (uint8_t y = 0; y < 16; y++) { for (uint8_t x = 0; x < 16; x++) { maze->cellWalls[y][x] = 0;
 8002a06:	7dbb      	ldrb	r3, [r7, #22]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	75bb      	strb	r3, [r7, #22]
 8002a0c:	7dbb      	ldrb	r3, [r7, #22]
 8002a0e:	2b0f      	cmp	r3, #15
 8002a10:	d9e4      	bls.n	80029dc <Maze_Init+0x14>
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
 8002a14:	3301      	adds	r3, #1
 8002a16:	75fb      	strb	r3, [r7, #23]
 8002a18:	7dfb      	ldrb	r3, [r7, #23]
 8002a1a:	2b0f      	cmp	r3, #15
 8002a1c:	d9db      	bls.n	80029d6 <Maze_Init+0xe>
    maze->mouse_dir = NORTH;                                                                                        // Mouse starting direction/pos always NORTH/{0,0}
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	721a      	strb	r2, [r3, #8]
    maze->mouse_pos = (struct Coord){0,0};
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	605a      	str	r2, [r3, #4]
}
 8002a30:	bf00      	nop
 8002a32:	371c      	adds	r7, #28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr
	...

08002a3c <Search_Mode>:

void Search_Mode(struct Maze* maze) {
 8002a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a3e:	b099      	sub	sp, #100	@ 0x64
 8002a40:	af0e      	add	r7, sp, #56	@ 0x38
 8002a42:	61f8      	str	r0, [r7, #28]
	disable_adc = true;
 8002a44:	4b9f      	ldr	r3, [pc, #636]	@ (8002cc4 <Search_Mode+0x288>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
	Scan_Walls(maze);
 8002a4a:	69f8      	ldr	r0, [r7, #28]
 8002a4c:	f7ff f9aa 	bl	8001da4 <Scan_Walls>
	disable_adc = false;
 8002a50:	4b9c      	ldr	r3, [pc, #624]	@ (8002cc4 <Search_Mode+0x288>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
	Floodfill(maze, SEARCHING);
 8002a56:	2100      	movs	r1, #0
 8002a58:	69f8      	ldr	r0, [r7, #28]
 8002a5a:	f7ff fcfb 	bl	8002454 <Floodfill>

	enum Direction best_dir = Best_Cell(maze, maze->mouse_pos, SEARCHING);
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	2300      	movs	r3, #0
 8002a62:	ca06      	ldmia	r2, {r1, r2}
 8002a64:	69f8      	ldr	r0, [r7, #28]
 8002a66:	f7ff fe99 	bl	800279c <Best_Cell>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (best_dir == (enum Direction)((maze->mouse_dir + 3) % 4)) { // Right Turn
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	7a1b      	ldrb	r3, [r3, #8]
 8002a74:	3303      	adds	r3, #3
 8002a76:	425a      	negs	r2, r3
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	f002 0203 	and.w	r2, r2, #3
 8002a80:	bf58      	it	pl
 8002a82:	4253      	negpl	r3, r2
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d146      	bne.n	8002b1c <Search_Mode+0xe0>
		#ifndef SMOOTH_TURNS
			rot_placeholder_1 = Parameter_Packer(RIGHT_TURN_DEG, SEARCH_SPEED_ROT_MAX, 0, SEARCH_ACCELERATION, false);
 8002a8e:	498e      	ldr	r1, [pc, #568]	@ (8002cc8 <Search_Mode+0x28c>)
 8002a90:	4c8e      	ldr	r4, [pc, #568]	@ (8002ccc <Search_Mode+0x290>)
 8002a92:	4b8f      	ldr	r3, [pc, #572]	@ (8002cd0 <Search_Mode+0x294>)
 8002a94:	4d8f      	ldr	r5, [pc, #572]	@ (8002cd4 <Search_Mode+0x298>)
 8002a96:	4638      	mov	r0, r7
 8002a98:	2200      	movs	r2, #0
 8002a9a:	9201      	str	r2, [sp, #4]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	4622      	mov	r2, r4
 8002aa4:	f001 f942 	bl	8003d2c <Parameter_Packer>
 8002aa8:	463c      	mov	r4, r7
 8002aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	602b      	str	r3, [r5, #0]
			fwd_placeholder_1 = Parameter_Packer(CELL_TO_CENTER_MM, SEARCH_SPEED_FWD_MAX, 0, SEARCH_ACCELERATION, true);
 8002ab2:	4989      	ldr	r1, [pc, #548]	@ (8002cd8 <Search_Mode+0x29c>)
 8002ab4:	4c85      	ldr	r4, [pc, #532]	@ (8002ccc <Search_Mode+0x290>)
 8002ab6:	4b86      	ldr	r3, [pc, #536]	@ (8002cd0 <Search_Mode+0x294>)
 8002ab8:	4d88      	ldr	r5, [pc, #544]	@ (8002cdc <Search_Mode+0x2a0>)
 8002aba:	4638      	mov	r0, r7
 8002abc:	2201      	movs	r2, #1
 8002abe:	9201      	str	r2, [sp, #4]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	4622      	mov	r2, r4
 8002ac8:	f001 f930 	bl	8003d2c <Parameter_Packer>
 8002acc:	463c      	mov	r4, r7
 8002ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad2:	6823      	ldr	r3, [r4, #0]
 8002ad4:	602b      	str	r3, [r5, #0]
			Turn_Container(fwd_placeholder_1, rot_placeholder_1, &forward_profile, &rotational_profile);
 8002ad6:	4e81      	ldr	r6, [pc, #516]	@ (8002cdc <Search_Mode+0x2a0>)
 8002ad8:	4b81      	ldr	r3, [pc, #516]	@ (8002ce0 <Search_Mode+0x2a4>)
 8002ada:	9307      	str	r3, [sp, #28]
 8002adc:	4b81      	ldr	r3, [pc, #516]	@ (8002ce4 <Search_Mode+0x2a8>)
 8002ade:	9306      	str	r3, [sp, #24]
 8002ae0:	4b7c      	ldr	r3, [pc, #496]	@ (8002cd4 <Search_Mode+0x298>)
 8002ae2:	ac01      	add	r4, sp, #4
 8002ae4:	461d      	mov	r5, r3
 8002ae6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aea:	682b      	ldr	r3, [r5, #0]
 8002aec:	6023      	str	r3, [r4, #0]
 8002aee:	6933      	ldr	r3, [r6, #16]
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002af6:	f001 f867 	bl	8003bc8 <Turn_Container>
		#else
			rot_placeholder_1 = Parameter_Packer(RIGHT_TURN_DEG, SEARCH_SPEED_ROT_SMOOTH_MAX, 0, SEARCH_ACCELERATION, false);
			fwd_placeholder_1 = Parameter_Packer(SMOOTH_TURN_FWD_MM, SEARCH_SPEED_FWD_SMOOTH_MAX, SEARCH_SPEED_FWD_SMOOTH_MAX, SEARCH_ACCELERATION, true);
			Smooth_Turn_Container(fwd_placeholder_1, rot_placeholder_1, &forward_profile, &rotational_profile);
		#endif
			maze->mouse_dir = (enum Direction)((maze->mouse_dir + 3) % 4);
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	7a1b      	ldrb	r3, [r3, #8]
 8002afe:	3303      	adds	r3, #3
 8002b00:	425a      	negs	r2, r3
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	f002 0203 	and.w	r2, r2, #3
 8002b0a:	bf58      	it	pl
 8002b0c:	4253      	negpl	r3, r2
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	721a      	strb	r2, [r3, #8]
			prev_action = RIGHT_TURN;
 8002b14:	4b74      	ldr	r3, [pc, #464]	@ (8002ce8 <Search_Mode+0x2ac>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	701a      	strb	r2, [r3, #0]
 8002b1a:	e121      	b.n	8002d60 <Search_Mode+0x324>
		}
	else if (best_dir == (enum Direction)((maze->mouse_dir + 1) % 4)) { // Left Turn
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	7a1b      	ldrb	r3, [r3, #8]
 8002b20:	3301      	adds	r3, #1
 8002b22:	425a      	negs	r2, r3
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	f002 0203 	and.w	r2, r2, #3
 8002b2c:	bf58      	it	pl
 8002b2e:	4253      	negpl	r3, r2
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d146      	bne.n	8002bc8 <Search_Mode+0x18c>
		#ifndef SMOOTH_TURNS
			rot_placeholder_1 = Parameter_Packer(LEFT_TURN_DEG, SEARCH_SPEED_ROT_MAX, 0, SEARCH_ACCELERATION, false);
 8002b3a:	496c      	ldr	r1, [pc, #432]	@ (8002cec <Search_Mode+0x2b0>)
 8002b3c:	4c63      	ldr	r4, [pc, #396]	@ (8002ccc <Search_Mode+0x290>)
 8002b3e:	4b64      	ldr	r3, [pc, #400]	@ (8002cd0 <Search_Mode+0x294>)
 8002b40:	4d64      	ldr	r5, [pc, #400]	@ (8002cd4 <Search_Mode+0x298>)
 8002b42:	4638      	mov	r0, r7
 8002b44:	2200      	movs	r2, #0
 8002b46:	9201      	str	r2, [sp, #4]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	4622      	mov	r2, r4
 8002b50:	f001 f8ec 	bl	8003d2c <Parameter_Packer>
 8002b54:	463c      	mov	r4, r7
 8002b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b5a:	6823      	ldr	r3, [r4, #0]
 8002b5c:	602b      	str	r3, [r5, #0]
			fwd_placeholder_1 = Parameter_Packer(CELL_TO_CENTER_MM, SEARCH_SPEED_FWD_MAX, 0, SEARCH_ACCELERATION, true);
 8002b5e:	495e      	ldr	r1, [pc, #376]	@ (8002cd8 <Search_Mode+0x29c>)
 8002b60:	4c5a      	ldr	r4, [pc, #360]	@ (8002ccc <Search_Mode+0x290>)
 8002b62:	4b5b      	ldr	r3, [pc, #364]	@ (8002cd0 <Search_Mode+0x294>)
 8002b64:	4d5d      	ldr	r5, [pc, #372]	@ (8002cdc <Search_Mode+0x2a0>)
 8002b66:	4638      	mov	r0, r7
 8002b68:	2201      	movs	r2, #1
 8002b6a:	9201      	str	r2, [sp, #4]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	4622      	mov	r2, r4
 8002b74:	f001 f8da 	bl	8003d2c <Parameter_Packer>
 8002b78:	463c      	mov	r4, r7
 8002b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	602b      	str	r3, [r5, #0]
			Turn_Container(fwd_placeholder_1, rot_placeholder_1, &forward_profile, &rotational_profile);
 8002b82:	4e56      	ldr	r6, [pc, #344]	@ (8002cdc <Search_Mode+0x2a0>)
 8002b84:	4b56      	ldr	r3, [pc, #344]	@ (8002ce0 <Search_Mode+0x2a4>)
 8002b86:	9307      	str	r3, [sp, #28]
 8002b88:	4b56      	ldr	r3, [pc, #344]	@ (8002ce4 <Search_Mode+0x2a8>)
 8002b8a:	9306      	str	r3, [sp, #24]
 8002b8c:	4b51      	ldr	r3, [pc, #324]	@ (8002cd4 <Search_Mode+0x298>)
 8002b8e:	ac01      	add	r4, sp, #4
 8002b90:	461d      	mov	r5, r3
 8002b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b96:	682b      	ldr	r3, [r5, #0]
 8002b98:	6023      	str	r3, [r4, #0]
 8002b9a:	6933      	ldr	r3, [r6, #16]
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002ba2:	f001 f811 	bl	8003bc8 <Turn_Container>
		#else
			rot_placeholder_1 = Parameter_Packer(LEFT_TURN_DEG, SEARCH_SPEED_ROT_SMOOTH_MAX, 0, SEARCH_ACCELERATION, false);
			fwd_placeholder_1 = Parameter_Packer(SMOOTH_TURN_FWD_MM, SEARCH_SPEED_FWD_SMOOTH_MAX, SEARCH_SPEED_FWD_SMOOTH_MAX, SEARCH_ACCELERATION, true);
			Smooth_Turn_Container(fwd_placeholder_1, rot_placeholder_1, &forward_profile, &rotational_profile);
		#endif
			maze->mouse_dir = (enum Direction)((maze->mouse_dir + 1) % 4);
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	7a1b      	ldrb	r3, [r3, #8]
 8002baa:	3301      	adds	r3, #1
 8002bac:	425a      	negs	r2, r3
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	f002 0203 	and.w	r2, r2, #3
 8002bb6:	bf58      	it	pl
 8002bb8:	4253      	negpl	r3, r2
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	721a      	strb	r2, [r3, #8]
			prev_action = LEFT_TURN;
 8002bc0:	4b49      	ldr	r3, [pc, #292]	@ (8002ce8 <Search_Mode+0x2ac>)
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	701a      	strb	r2, [r3, #0]
 8002bc6:	e0cb      	b.n	8002d60 <Search_Mode+0x324>
		}
	else if (best_dir == (enum Direction)((maze->mouse_dir + 2) % 4)) { // About turn
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	7a1b      	ldrb	r3, [r3, #8]
 8002bcc:	3302      	adds	r3, #2
 8002bce:	425a      	negs	r2, r3
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	f002 0203 	and.w	r2, r2, #3
 8002bd8:	bf58      	it	pl
 8002bda:	4253      	negpl	r3, r2
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002be2:	429a      	cmp	r2, r3
 8002be4:	f040 80bc 	bne.w	8002d60 <Search_Mode+0x324>
		rot_placeholder_1 = Parameter_Packer(ABOUT_TURN_DEG, SEARCH_SPEED_ROT_MAX, 0, SEARCH_ACCELERATION, false);
 8002be8:	4941      	ldr	r1, [pc, #260]	@ (8002cf0 <Search_Mode+0x2b4>)
 8002bea:	4c38      	ldr	r4, [pc, #224]	@ (8002ccc <Search_Mode+0x290>)
 8002bec:	4b38      	ldr	r3, [pc, #224]	@ (8002cd0 <Search_Mode+0x294>)
 8002bee:	4d39      	ldr	r5, [pc, #228]	@ (8002cd4 <Search_Mode+0x298>)
 8002bf0:	4638      	mov	r0, r7
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	9201      	str	r2, [sp, #4]
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	4622      	mov	r2, r4
 8002bfe:	f001 f895 	bl	8003d2c <Parameter_Packer>
 8002c02:	463c      	mov	r4, r7
 8002c04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	602b      	str	r3, [r5, #0]
		if (wall_front && !just_reached_goal) { // Back up into wall to realign, continue from there
 8002c0c:	4b39      	ldr	r3, [pc, #228]	@ (8002cf4 <Search_Mode+0x2b8>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d077      	beq.n	8002d04 <Search_Mode+0x2c8>
 8002c14:	4b38      	ldr	r3, [pc, #224]	@ (8002cf8 <Search_Mode+0x2bc>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	f083 0301 	eor.w	r3, r3, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d070      	beq.n	8002d04 <Search_Mode+0x2c8>
			fwd_placeholder_1 = Parameter_Packer(CELL_TO_CENTER_MM, SEARCH_SPEED_FWD_MAX, 0, SEARCH_ACCELERATION, true);
 8002c22:	492d      	ldr	r1, [pc, #180]	@ (8002cd8 <Search_Mode+0x29c>)
 8002c24:	4c29      	ldr	r4, [pc, #164]	@ (8002ccc <Search_Mode+0x290>)
 8002c26:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd0 <Search_Mode+0x294>)
 8002c28:	4d2c      	ldr	r5, [pc, #176]	@ (8002cdc <Search_Mode+0x2a0>)
 8002c2a:	4638      	mov	r0, r7
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	9201      	str	r2, [sp, #4]
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	4622      	mov	r2, r4
 8002c38:	f001 f878 	bl	8003d2c <Parameter_Packer>
 8002c3c:	463c      	mov	r4, r7
 8002c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	602b      	str	r3, [r5, #0]
			fwd_placeholder_2 = Parameter_Packer(CENTER_TO_WALL_REVERSE_MM, SEARCH_SPEED_FWD_MAX, 0, SEARCH_ACCELERATION, true);
 8002c46:	492d      	ldr	r1, [pc, #180]	@ (8002cfc <Search_Mode+0x2c0>)
 8002c48:	4c20      	ldr	r4, [pc, #128]	@ (8002ccc <Search_Mode+0x290>)
 8002c4a:	4b21      	ldr	r3, [pc, #132]	@ (8002cd0 <Search_Mode+0x294>)
 8002c4c:	4d2c      	ldr	r5, [pc, #176]	@ (8002d00 <Search_Mode+0x2c4>)
 8002c4e:	4638      	mov	r0, r7
 8002c50:	2201      	movs	r2, #1
 8002c52:	9201      	str	r2, [sp, #4]
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	4622      	mov	r2, r4
 8002c5c:	f001 f866 	bl	8003d2c <Parameter_Packer>
 8002c60:	463c      	mov	r4, r7
 8002c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	602b      	str	r3, [r5, #0]
			About_Face_Container(fwd_placeholder_1, fwd_placeholder_2, rot_placeholder_1, &forward_profile, &rotational_profile, true);
 8002c6a:	4e1c      	ldr	r6, [pc, #112]	@ (8002cdc <Search_Mode+0x2a0>)
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	930d      	str	r3, [sp, #52]	@ 0x34
 8002c70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce0 <Search_Mode+0x2a4>)
 8002c72:	930c      	str	r3, [sp, #48]	@ 0x30
 8002c74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce4 <Search_Mode+0x2a8>)
 8002c76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002c78:	4b16      	ldr	r3, [pc, #88]	@ (8002cd4 <Search_Mode+0x298>)
 8002c7a:	ac06      	add	r4, sp, #24
 8002c7c:	461d      	mov	r5, r3
 8002c7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c82:	682b      	ldr	r3, [r5, #0]
 8002c84:	6023      	str	r3, [r4, #0]
 8002c86:	4b1e      	ldr	r3, [pc, #120]	@ (8002d00 <Search_Mode+0x2c4>)
 8002c88:	ac01      	add	r4, sp, #4
 8002c8a:	461d      	mov	r5, r3
 8002c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c90:	682b      	ldr	r3, [r5, #0]
 8002c92:	6023      	str	r3, [r4, #0]
 8002c94:	6933      	ldr	r3, [r6, #16]
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002c9c:	f000 ffe4 	bl	8003c68 <About_Face_Container>
			maze->mouse_dir = (enum Direction)((maze->mouse_dir + 2) % 4);
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	7a1b      	ldrb	r3, [r3, #8]
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	425a      	negs	r2, r3
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	f002 0203 	and.w	r2, r2, #3
 8002cb0:	bf58      	it	pl
 8002cb2:	4253      	negpl	r3, r2
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	721a      	strb	r2, [r3, #8]
			prev_action = ABOUT_FACE;
 8002cba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce8 <Search_Mode+0x2ac>)
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	701a      	strb	r2, [r3, #0]
 8002cc0:	e04e      	b.n	8002d60 <Search_Mode+0x324>
 8002cc2:	bf00      	nop
 8002cc4:	20000c1c 	.word	0x20000c1c
 8002cc8:	42b40000 	.word	0x42b40000
 8002ccc:	44160000 	.word	0x44160000
 8002cd0:	451c4000 	.word	0x451c4000
 8002cd4:	20000c48 	.word	0x20000c48
 8002cd8:	42990000 	.word	0x42990000
 8002cdc:	20000c20 	.word	0x20000c20
 8002ce0:	20000bac 	.word	0x20000bac
 8002ce4:	20000b84 	.word	0x20000b84
 8002ce8:	20000008 	.word	0x20000008
 8002cec:	c2b80000 	.word	0xc2b80000
 8002cf0:	43390000 	.word	0x43390000
 8002cf4:	20000c7c 	.word	0x20000c7c
 8002cf8:	20000c1d 	.word	0x20000c1d
 8002cfc:	c2bd0000 	.word	0xc2bd0000
 8002d00:	20000c34 	.word	0x20000c34
		}
		else { // If no wall, simply turn 180 degrees
			About_Face_Container(fwd_placeholder_1, fwd_placeholder_2, rot_placeholder_1, &forward_profile, &rotational_profile, false);
 8002d04:	4e7d      	ldr	r6, [pc, #500]	@ (8002efc <Search_Mode+0x4c0>)
 8002d06:	2300      	movs	r3, #0
 8002d08:	930d      	str	r3, [sp, #52]	@ 0x34
 8002d0a:	4b7d      	ldr	r3, [pc, #500]	@ (8002f00 <Search_Mode+0x4c4>)
 8002d0c:	930c      	str	r3, [sp, #48]	@ 0x30
 8002d0e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f04 <Search_Mode+0x4c8>)
 8002d10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002d12:	4b7d      	ldr	r3, [pc, #500]	@ (8002f08 <Search_Mode+0x4cc>)
 8002d14:	ac06      	add	r4, sp, #24
 8002d16:	461d      	mov	r5, r3
 8002d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d1c:	682b      	ldr	r3, [r5, #0]
 8002d1e:	6023      	str	r3, [r4, #0]
 8002d20:	4b7a      	ldr	r3, [pc, #488]	@ (8002f0c <Search_Mode+0x4d0>)
 8002d22:	ac01      	add	r4, sp, #4
 8002d24:	461d      	mov	r5, r3
 8002d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d2a:	682b      	ldr	r3, [r5, #0]
 8002d2c:	6023      	str	r3, [r4, #0]
 8002d2e:	6933      	ldr	r3, [r6, #16]
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002d36:	f000 ff97 	bl	8003c68 <About_Face_Container>
			maze->mouse_dir = (enum Direction)((maze->mouse_dir + 2) % 4);
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	7a1b      	ldrb	r3, [r3, #8]
 8002d3e:	3302      	adds	r3, #2
 8002d40:	425a      	negs	r2, r3
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	f002 0203 	and.w	r2, r2, #3
 8002d4a:	bf58      	it	pl
 8002d4c:	4253      	negpl	r3, r2
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	721a      	strb	r2, [r3, #8]
			prev_action = NONE;
 8002d54:	4b6e      	ldr	r3, [pc, #440]	@ (8002f10 <Search_Mode+0x4d4>)
 8002d56:	2204      	movs	r2, #4
 8002d58:	701a      	strb	r2, [r3, #0]
			just_reached_goal = false;
 8002d5a:	4b6e      	ldr	r3, [pc, #440]	@ (8002f14 <Search_Mode+0x4d8>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (prev_action == FORWARD_DRIVE) { // Normal forward movement
 8002d60:	4b6b      	ldr	r3, [pc, #428]	@ (8002f10 <Search_Mode+0x4d4>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d11b      	bne.n	8002da0 <Search_Mode+0x364>
		fwd_placeholder_1 = Parameter_Packer(CELL_TO_CELL_MM, SEARCH_SPEED_FWD_MAX, SEARCH_SPEED_FWD_MAX, SEARCH_ACCELERATION, true);
 8002d68:	496b      	ldr	r1, [pc, #428]	@ (8002f18 <Search_Mode+0x4dc>)
 8002d6a:	4c6c      	ldr	r4, [pc, #432]	@ (8002f1c <Search_Mode+0x4e0>)
 8002d6c:	4d6b      	ldr	r5, [pc, #428]	@ (8002f1c <Search_Mode+0x4e0>)
 8002d6e:	4b6c      	ldr	r3, [pc, #432]	@ (8002f20 <Search_Mode+0x4e4>)
 8002d70:	4e62      	ldr	r6, [pc, #392]	@ (8002efc <Search_Mode+0x4c0>)
 8002d72:	4638      	mov	r0, r7
 8002d74:	2201      	movs	r2, #1
 8002d76:	9201      	str	r2, [sp, #4]
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	462b      	mov	r3, r5
 8002d7c:	4622      	mov	r2, r4
 8002d7e:	f000 ffd5 	bl	8003d2c <Parameter_Packer>
 8002d82:	4635      	mov	r5, r6
 8002d84:	463c      	mov	r4, r7
 8002d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d8a:	6823      	ldr	r3, [r4, #0]
 8002d8c:	602b      	str	r3, [r5, #0]
		Profile_Container(fwd_placeholder_1, &forward_profile);
 8002d8e:	4b5b      	ldr	r3, [pc, #364]	@ (8002efc <Search_Mode+0x4c0>)
 8002d90:	4a5c      	ldr	r2, [pc, #368]	@ (8002f04 <Search_Mode+0x4c8>)
 8002d92:	9201      	str	r2, [sp, #4]
 8002d94:	691a      	ldr	r2, [r3, #16]
 8002d96:	9200      	str	r2, [sp, #0]
 8002d98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d9a:	f000 fedf 	bl	8003b5c <Profile_Container>
 8002d9e:	e01e      	b.n	8002dde <Search_Mode+0x3a2>
	}
	else if (prev_action == ABOUT_FACE){ // Distance to travel is less than after a forward movement or turn
 8002da0:	4b5b      	ldr	r3, [pc, #364]	@ (8002f10 <Search_Mode+0x4d4>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d11a      	bne.n	8002dde <Search_Mode+0x3a2>
		fwd_placeholder_1 = Parameter_Packer(BACK_ON_WALL_TO_CELL_MM, SEARCH_SPEED_FWD_MAX, SEARCH_SPEED_FWD_MAX, SEARCH_ACCELERATION, true);
 8002da8:	495e      	ldr	r1, [pc, #376]	@ (8002f24 <Search_Mode+0x4e8>)
 8002daa:	4c5c      	ldr	r4, [pc, #368]	@ (8002f1c <Search_Mode+0x4e0>)
 8002dac:	4d5b      	ldr	r5, [pc, #364]	@ (8002f1c <Search_Mode+0x4e0>)
 8002dae:	4b5c      	ldr	r3, [pc, #368]	@ (8002f20 <Search_Mode+0x4e4>)
 8002db0:	4e52      	ldr	r6, [pc, #328]	@ (8002efc <Search_Mode+0x4c0>)
 8002db2:	4638      	mov	r0, r7
 8002db4:	2201      	movs	r2, #1
 8002db6:	9201      	str	r2, [sp, #4]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	462b      	mov	r3, r5
 8002dbc:	4622      	mov	r2, r4
 8002dbe:	f000 ffb5 	bl	8003d2c <Parameter_Packer>
 8002dc2:	4635      	mov	r5, r6
 8002dc4:	463c      	mov	r4, r7
 8002dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dca:	6823      	ldr	r3, [r4, #0]
 8002dcc:	602b      	str	r3, [r5, #0]
		Profile_Container(fwd_placeholder_1, &forward_profile);
 8002dce:	4b4b      	ldr	r3, [pc, #300]	@ (8002efc <Search_Mode+0x4c0>)
 8002dd0:	4a4c      	ldr	r2, [pc, #304]	@ (8002f04 <Search_Mode+0x4c8>)
 8002dd2:	9201      	str	r2, [sp, #4]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	9200      	str	r2, [sp, #0]
 8002dd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dda:	f000 febf 	bl	8003b5c <Profile_Container>
	}
	else { // On a turn don't make any additional movement

	}

	prev_action = FORWARD_DRIVE;
 8002dde:	4b4c      	ldr	r3, [pc, #304]	@ (8002f10 <Search_Mode+0x4d4>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]

	Update_Mouse_Pos(&maze->mouse_pos, maze->mouse_dir, maze);
 8002de4:	69f8      	ldr	r0, [r7, #28]
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	7a1b      	ldrb	r3, [r3, #8]
 8002dea:	69fa      	ldr	r2, [r7, #28]
 8002dec:	4619      	mov	r1, r3
 8002dee:	f7ff fa89 	bl	8002304 <Update_Mouse_Pos>

	// Check if mouse is in goal, if so change goal back to start location
	if (maze->distances[maze->mouse_pos.y][maze->mouse_pos.x] == 0) {
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	6859      	ldr	r1, [r3, #4]
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	0109      	lsls	r1, r1, #4
 8002dfe:	440b      	add	r3, r1
 8002e00:	3302      	adds	r3, #2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d172      	bne.n	8002ef2 <Search_Mode+0x4b6>
		if (!((maze->goalPos[0].x == 0) && (maze->goalPos[0].y == 0))) {
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d104      	bne.n	8002e20 <Search_Mode+0x3e4>
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f8d3 3910 	ldr.w	r3, [r3, #2320]	@ 0x910
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d007      	beq.n	8002e30 <Search_Mode+0x3f4>
			Set_Goal_Cell(maze, 1); // Change goal cell back to origin
 8002e20:	2101      	movs	r1, #1
 8002e22:	69f8      	ldr	r0, [r7, #28]
 8002e24:	f7ff fad4 	bl	80023d0 <Set_Goal_Cell>

			// Save maze to flash memory
			Save_Maze_To_Flash(maze);
 8002e28:	69f8      	ldr	r0, [r7, #28]
 8002e2a:	f001 f93b 	bl	80040a4 <Save_Maze_To_Flash>
			armed = false;
			motor_controller_enabled = false;
		}
	}

}
 8002e2e:	e060      	b.n	8002ef2 <Search_Mode+0x4b6>
			rot_placeholder_1 = Parameter_Packer(ABOUT_TURN_DEG, SEARCH_SPEED_ROT_MAX, 0, SEARCH_ACCELERATION, false);
 8002e30:	493d      	ldr	r1, [pc, #244]	@ (8002f28 <Search_Mode+0x4ec>)
 8002e32:	4c3a      	ldr	r4, [pc, #232]	@ (8002f1c <Search_Mode+0x4e0>)
 8002e34:	4b3a      	ldr	r3, [pc, #232]	@ (8002f20 <Search_Mode+0x4e4>)
 8002e36:	4d34      	ldr	r5, [pc, #208]	@ (8002f08 <Search_Mode+0x4cc>)
 8002e38:	4638      	mov	r0, r7
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	9201      	str	r2, [sp, #4]
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	4622      	mov	r2, r4
 8002e46:	f000 ff71 	bl	8003d2c <Parameter_Packer>
 8002e4a:	463c      	mov	r4, r7
 8002e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e50:	6823      	ldr	r3, [r4, #0]
 8002e52:	602b      	str	r3, [r5, #0]
			fwd_placeholder_1 = Parameter_Packer(CELL_TO_CENTER_MM, SEARCH_SPEED_FWD_MAX, 0, SEARCH_ACCELERATION, true);
 8002e54:	4935      	ldr	r1, [pc, #212]	@ (8002f2c <Search_Mode+0x4f0>)
 8002e56:	4c31      	ldr	r4, [pc, #196]	@ (8002f1c <Search_Mode+0x4e0>)
 8002e58:	4b31      	ldr	r3, [pc, #196]	@ (8002f20 <Search_Mode+0x4e4>)
 8002e5a:	4d28      	ldr	r5, [pc, #160]	@ (8002efc <Search_Mode+0x4c0>)
 8002e5c:	4638      	mov	r0, r7
 8002e5e:	2201      	movs	r2, #1
 8002e60:	9201      	str	r2, [sp, #4]
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	4622      	mov	r2, r4
 8002e6a:	f000 ff5f 	bl	8003d2c <Parameter_Packer>
 8002e6e:	463c      	mov	r4, r7
 8002e70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e74:	6823      	ldr	r3, [r4, #0]
 8002e76:	602b      	str	r3, [r5, #0]
			fwd_placeholder_2 = Parameter_Packer(CENTER_TO_WALL_REVERSE_MM, SEARCH_SPEED_FWD_MAX, 0, SEARCH_ACCELERATION, true);
 8002e78:	492d      	ldr	r1, [pc, #180]	@ (8002f30 <Search_Mode+0x4f4>)
 8002e7a:	4c28      	ldr	r4, [pc, #160]	@ (8002f1c <Search_Mode+0x4e0>)
 8002e7c:	4b28      	ldr	r3, [pc, #160]	@ (8002f20 <Search_Mode+0x4e4>)
 8002e7e:	4d23      	ldr	r5, [pc, #140]	@ (8002f0c <Search_Mode+0x4d0>)
 8002e80:	4638      	mov	r0, r7
 8002e82:	2201      	movs	r2, #1
 8002e84:	9201      	str	r2, [sp, #4]
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	4622      	mov	r2, r4
 8002e8e:	f000 ff4d 	bl	8003d2c <Parameter_Packer>
 8002e92:	463c      	mov	r4, r7
 8002e94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	602b      	str	r3, [r5, #0]
			About_Face_Container(fwd_placeholder_1, fwd_placeholder_2, rot_placeholder_1, &forward_profile, &rotational_profile, true);
 8002e9c:	4e17      	ldr	r6, [pc, #92]	@ (8002efc <Search_Mode+0x4c0>)
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	930d      	str	r3, [sp, #52]	@ 0x34
 8002ea2:	4b17      	ldr	r3, [pc, #92]	@ (8002f00 <Search_Mode+0x4c4>)
 8002ea4:	930c      	str	r3, [sp, #48]	@ 0x30
 8002ea6:	4b17      	ldr	r3, [pc, #92]	@ (8002f04 <Search_Mode+0x4c8>)
 8002ea8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002eaa:	4b17      	ldr	r3, [pc, #92]	@ (8002f08 <Search_Mode+0x4cc>)
 8002eac:	ac06      	add	r4, sp, #24
 8002eae:	461d      	mov	r5, r3
 8002eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002eb4:	682b      	ldr	r3, [r5, #0]
 8002eb6:	6023      	str	r3, [r4, #0]
 8002eb8:	4b14      	ldr	r3, [pc, #80]	@ (8002f0c <Search_Mode+0x4d0>)
 8002eba:	ac01      	add	r4, sp, #4
 8002ebc:	461d      	mov	r5, r3
 8002ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ec2:	682b      	ldr	r3, [r5, #0]
 8002ec4:	6023      	str	r3, [r4, #0]
 8002ec6:	6933      	ldr	r3, [r6, #16]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002ece:	f000 fecb 	bl	8003c68 <About_Face_Container>
			maze->mouse_dir = NORTH;
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	721a      	strb	r2, [r3, #8]
			prev_action = ABOUT_FACE;
 8002ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f10 <Search_Mode+0x4d4>)
 8002eda:	2203      	movs	r2, #3
 8002edc:	701a      	strb	r2, [r3, #0]
			Set_Goal_Cell(maze, 4); // Change goal cell back to center of maze
 8002ede:	2104      	movs	r1, #4
 8002ee0:	69f8      	ldr	r0, [r7, #28]
 8002ee2:	f7ff fa75 	bl	80023d0 <Set_Goal_Cell>
			armed = false;
 8002ee6:	4b13      	ldr	r3, [pc, #76]	@ (8002f34 <Search_Mode+0x4f8>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
			motor_controller_enabled = false;
 8002eec:	4b12      	ldr	r3, [pc, #72]	@ (8002f38 <Search_Mode+0x4fc>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
}
 8002ef2:	bf00      	nop
 8002ef4:	372c      	adds	r7, #44	@ 0x2c
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000c20 	.word	0x20000c20
 8002f00:	20000bac 	.word	0x20000bac
 8002f04:	20000b84 	.word	0x20000b84
 8002f08:	20000c48 	.word	0x20000c48
 8002f0c:	20000c34 	.word	0x20000c34
 8002f10:	20000008 	.word	0x20000008
 8002f14:	20000c1d 	.word	0x20000c1d
 8002f18:	43280000 	.word	0x43280000
 8002f1c:	44160000 	.word	0x44160000
 8002f20:	451c4000 	.word	0x451c4000
 8002f24:	43018873 	.word	0x43018873
 8002f28:	43390000 	.word	0x43390000
 8002f2c:	42990000 	.word	0x42990000
 8002f30:	c2bd0000 	.word	0xc2bd0000
 8002f34:	20000248 	.word	0x20000248
 8002f38:	20000c6c 	.word	0x20000c6c

08002f3c <Race_Mode>:

void Race_Mode(struct Maze maze) {
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f42:	f5ad 5d24 	sub.w	sp, sp, #10496	@ 0x2900
 8002f46:	b08c      	sub	sp, #48	@ 0x30
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	f507 5425 	add.w	r4, r7, #10560	@ 0x2940
 8002f4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Floodfill(&maze, RACE);
 8002f52:	2101      	movs	r1, #1
 8002f54:	f507 5025 	add.w	r0, r7, #10560	@ 0x2940
 8002f58:	f7ff fa7c 	bl	8002454 <Floodfill>

    uint16_t prelim_motions_length = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8002f62:	f102 0226 	add.w	r2, r2, #38	@ 0x26
 8002f66:	8013      	strh	r3, [r2, #0]
    enum motion_type_t prelim_motion_queue[256];

    Set_Goal_Cell(&maze, 4);
 8002f68:	2104      	movs	r1, #4
 8002f6a:	f507 5025 	add.w	r0, r7, #10560	@ 0x2940
 8002f6e:	f7ff fa2f 	bl	80023d0 <Set_Goal_Cell>
    while (true) {
        enum Direction best_dir = Best_Cell(&maze, maze.mouse_pos, RACE);
 8002f72:	2301      	movs	r3, #1
 8002f74:	f507 5225 	add.w	r2, r7, #10560	@ 0x2940
 8002f78:	ca06      	ldmia	r2, {r1, r2}
 8002f7a:	f507 5025 	add.w	r0, r7, #10560	@ 0x2940
 8002f7e:	f7ff fc0d 	bl	800279c <Best_Cell>
 8002f82:	4603      	mov	r3, r0
 8002f84:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8002f88:	f102 021d 	add.w	r2, r2, #29
 8002f8c:	7013      	strb	r3, [r2, #0]

        if (best_dir == (enum Direction)((maze.mouse_dir + 3) % 4)) {       // Right turn
 8002f8e:	f507 5325 	add.w	r3, r7, #10560	@ 0x2940
 8002f92:	f103 0308 	add.w	r3, r3, #8
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	3303      	adds	r3, #3
 8002f9a:	425a      	negs	r2, r3
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	f002 0203 	and.w	r2, r2, #3
 8002fa4:	bf58      	it	pl
 8002fa6:	4253      	negpl	r3, r2
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8002fae:	f102 021d 	add.w	r2, r2, #29
 8002fb2:	7812      	ldrb	r2, [r2, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d120      	bne.n	8002ffa <Race_Mode+0xbe>
            prelim_motion_queue[prelim_motions_length] = TURN_RIGHT;
 8002fb8:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8002fbc:	f103 0326 	add.w	r3, r3, #38	@ 0x26
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8002fc6:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002fca:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002fce:	2101      	movs	r1, #1
 8002fd0:	54d1      	strb	r1, [r2, r3]
            maze.mouse_dir = (enum Direction)((maze.mouse_dir + 3) % 4);
 8002fd2:	f507 5325 	add.w	r3, r7, #10560	@ 0x2940
 8002fd6:	f103 0308 	add.w	r3, r3, #8
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	3303      	adds	r3, #3
 8002fde:	425a      	negs	r2, r3
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	f002 0203 	and.w	r2, r2, #3
 8002fe8:	bf58      	it	pl
 8002fea:	4253      	negpl	r3, r2
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	f507 5225 	add.w	r2, r7, #10560	@ 0x2940
 8002ff2:	f102 0208 	add.w	r2, r2, #8
 8002ff6:	7013      	strb	r3, [r2, #0]
 8002ff8:	e042      	b.n	8003080 <Race_Mode+0x144>
        }
        else if (best_dir == (enum Direction)((maze.mouse_dir + 1) % 4)) {  // Left turn
 8002ffa:	f507 5325 	add.w	r3, r7, #10560	@ 0x2940
 8002ffe:	f103 0308 	add.w	r3, r3, #8
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	3301      	adds	r3, #1
 8003006:	425a      	negs	r2, r3
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	f002 0203 	and.w	r2, r2, #3
 8003010:	bf58      	it	pl
 8003012:	4253      	negpl	r3, r2
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 800301a:	f102 021d 	add.w	r2, r2, #29
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d120      	bne.n	8003066 <Race_Mode+0x12a>
            prelim_motion_queue[prelim_motions_length] = TURN_LEFT;
 8003024:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003028:	f103 0326 	add.w	r3, r3, #38	@ 0x26
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8003032:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8003036:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800303a:	2102      	movs	r1, #2
 800303c:	54d1      	strb	r1, [r2, r3]
            maze.mouse_dir = (enum Direction)((maze.mouse_dir + 1) % 4);
 800303e:	f507 5325 	add.w	r3, r7, #10560	@ 0x2940
 8003042:	f103 0308 	add.w	r3, r3, #8
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	3301      	adds	r3, #1
 800304a:	425a      	negs	r2, r3
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	f002 0203 	and.w	r2, r2, #3
 8003054:	bf58      	it	pl
 8003056:	4253      	negpl	r3, r2
 8003058:	b2db      	uxtb	r3, r3
 800305a:	f507 5225 	add.w	r2, r7, #10560	@ 0x2940
 800305e:	f102 0208 	add.w	r2, r2, #8
 8003062:	7013      	strb	r3, [r2, #0]
 8003064:	e00c      	b.n	8003080 <Race_Mode+0x144>
        }
        else {
            prelim_motion_queue[prelim_motions_length] = FORWARD_ONE_CELL;
 8003066:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800306a:	f103 0326 	add.w	r3, r3, #38	@ 0x26
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8003074:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8003078:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800307c:	2100      	movs	r1, #0
 800307e:	54d1      	strb	r1, [r2, r3]
        }

        prelim_motions_length++;
 8003080:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003084:	f103 0326 	add.w	r3, r3, #38	@ 0x26
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	3301      	adds	r3, #1
 800308c:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8003090:	f102 0226 	add.w	r2, r2, #38	@ 0x26
 8003094:	8013      	strh	r3, [r2, #0]
        Update_Mouse_Pos(&maze.mouse_pos, maze.mouse_dir, &maze);
 8003096:	f507 5325 	add.w	r3, r7, #10560	@ 0x2940
 800309a:	f103 0308 	add.w	r3, r3, #8
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	f507 5225 	add.w	r2, r7, #10560	@ 0x2940
 80030a4:	4619      	mov	r1, r3
 80030a6:	f507 5025 	add.w	r0, r7, #10560	@ 0x2940
 80030aa:	f7ff f92b 	bl	8002304 <Update_Mouse_Pos>

        if (maze.distances[maze.mouse_pos.y][maze.mouse_pos.x] == 0) {    // Check if mouse has reached the goal position, if so break
 80030ae:	f507 5325 	add.w	r3, r7, #10560	@ 0x2940
 80030b2:	f103 0304 	add.w	r3, r3, #4
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	f507 5325 	add.w	r3, r7, #10560	@ 0x2940
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	0112      	lsls	r2, r2, #4
 80030c0:	4413      	add	r3, r2
 80030c2:	3302      	adds	r3, #2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	f503 5325 	add.w	r3, r3, #10560	@ 0x2940
 80030ca:	443b      	add	r3, r7
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d000      	beq.n	80030d4 <Race_Mode+0x198>
    while (true) {
 80030d2:	e74e      	b.n	8002f72 <Race_Mode+0x36>
            break;
 80030d4:	bf00      	nop
        }
    }

    uint16_t total_params = 0;
 80030d6:	2300      	movs	r3, #0
 80030d8:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 80030dc:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80030e0:	8013      	strh	r3, [r2, #0]
	param_t param_list[512] = { 0 };
 80030e2:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80030e6:	f6a3 130c 	subw	r3, r3, #2316	@ 0x90c
 80030ea:	4618      	mov	r0, r3
 80030ec:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80030f0:	461a      	mov	r2, r3
 80030f2:	2100      	movs	r1, #0
 80030f4:	f005 fd7a 	bl	8008bec <memset>
	bool back_to_wall = true;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 80030fe:	f102 0223 	add.w	r2, r2, #35	@ 0x23
 8003102:	7013      	strb	r3, [r2, #0]
    // Combine indivudal motions into larger profiles
    for (uint16_t curr_motion = 0; curr_motion < prelim_motions_length; curr_motion++) {
 8003104:	2300      	movs	r3, #0
 8003106:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 800310a:	f102 0220 	add.w	r2, r2, #32
 800310e:	8013      	strh	r3, [r2, #0]
 8003110:	e1e0      	b.n	80034d4 <Race_Mode+0x598>
        switch (prelim_motion_queue[curr_motion]) {
 8003112:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003116:	f103 0320 	add.w	r3, r3, #32
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8003120:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8003124:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003128:	5cd3      	ldrb	r3, [r2, r3]
 800312a:	2b02      	cmp	r3, #2
 800312c:	f000 812c 	beq.w	8003388 <Race_Mode+0x44c>
 8003130:	2b02      	cmp	r3, #2
 8003132:	f300 81c4 	bgt.w	80034be <Race_Mode+0x582>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <Race_Mode+0x204>
 800313a:	2b01      	cmp	r3, #1
 800313c:	d07b      	beq.n	8003236 <Race_Mode+0x2fa>
 800313e:	e1be      	b.n	80034be <Race_Mode+0x582>
            case FORWARD_ONE_CELL:
            	param_list[total_params].acceleration = RACE_ACCELERATION;
 8003140:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003144:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003148:	881a      	ldrh	r2, [r3, #0]
 800314a:	4888      	ldr	r0, [pc, #544]	@ (800336c <Race_Mode+0x430>)
 800314c:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 8003150:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	330c      	adds	r3, #12
 8003160:	6018      	str	r0, [r3, #0]
				param_list[total_params].max_speed = RACE_SPEED_FWD_MAX;
 8003162:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003166:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800316a:	881a      	ldrh	r2, [r3, #0]
 800316c:	4880      	ldr	r0, [pc, #512]	@ (8003370 <Race_Mode+0x434>)
 800316e:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 8003172:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	3304      	adds	r3, #4
 8003182:	6018      	str	r0, [r3, #0]
            	if (back_to_wall) { // For start cell in maze
 8003184:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003188:	f103 0323 	add.w	r3, r3, #35	@ 0x23
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d02b      	beq.n	80031ea <Race_Mode+0x2ae>
            		param_list[total_params].distance += BACK_ON_WALL_TO_CELL_MM;
 8003192:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003196:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800319a:	881a      	ldrh	r2, [r3, #0]
 800319c:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80031a0:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a70      	ldr	r2, [pc, #448]	@ (8003374 <Race_Mode+0x438>)
 80031b2:	f507 5124 	add.w	r1, r7, #10496	@ 0x2900
 80031b6:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 80031ba:	880c      	ldrh	r4, [r1, #0]
 80031bc:	4611      	mov	r1, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd fc10 	bl	80009e4 <__addsf3>
 80031c4:	4603      	mov	r3, r0
 80031c6:	4619      	mov	r1, r3
 80031c8:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80031cc:	f6a3 120c 	subw	r2, r3, #2316	@ 0x90c
 80031d0:	4623      	mov	r3, r4
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4423      	add	r3, r4
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	6019      	str	r1, [r3, #0]
            		back_to_wall = false;
 80031dc:	2300      	movs	r3, #0
 80031de:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 80031e2:	f102 0223 	add.w	r2, r2, #35	@ 0x23
 80031e6:	7013      	strb	r3, [r2, #0]
            	}
            	else {
            		param_list[total_params].distance += CELL_TO_CELL_MM;
            	}
                break;
 80031e8:	e169      	b.n	80034be <Race_Mode+0x582>
            		param_list[total_params].distance += CELL_TO_CELL_MM;
 80031ea:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80031ee:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80031f2:	881a      	ldrh	r2, [r3, #0]
 80031f4:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80031f8:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a5b      	ldr	r2, [pc, #364]	@ (8003378 <Race_Mode+0x43c>)
 800320a:	f507 5124 	add.w	r1, r7, #10496	@ 0x2900
 800320e:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 8003212:	880c      	ldrh	r4, [r1, #0]
 8003214:	4611      	mov	r1, r2
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd fbe4 	bl	80009e4 <__addsf3>
 800321c:	4603      	mov	r3, r0
 800321e:	4619      	mov	r1, r3
 8003220:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 8003224:	f6a3 120c 	subw	r2, r3, #2316	@ 0x90c
 8003228:	4623      	mov	r3, r4
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4423      	add	r3, r4
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	6019      	str	r1, [r3, #0]
                break;
 8003234:	e143      	b.n	80034be <Race_Mode+0x582>
            case TURN_RIGHT:
				#ifndef SMOOTH_TURNS
            		// No smooth turns
					param_list[total_params].end_speed = 0;
 8003236:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800323a:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800323e:	881a      	ldrh	r2, [r3, #0]
 8003240:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 8003244:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	3308      	adds	r3, #8
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
					param_list[total_params].distance += CELL_TO_CENTER_MM;
 800325a:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800325e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003262:	881a      	ldrh	r2, [r3, #0]
 8003264:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 8003268:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a40      	ldr	r2, [pc, #256]	@ (800337c <Race_Mode+0x440>)
 800327a:	f507 5124 	add.w	r1, r7, #10496	@ 0x2900
 800327e:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 8003282:	880c      	ldrh	r4, [r1, #0]
 8003284:	4611      	mov	r1, r2
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd fbac 	bl	80009e4 <__addsf3>
 800328c:	4603      	mov	r3, r0
 800328e:	4619      	mov	r1, r3
 8003290:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 8003294:	f6a3 120c 	subw	r2, r3, #2316	@ 0x90c
 8003298:	4623      	mov	r3, r4
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4423      	add	r3, r4
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	6019      	str	r1, [r3, #0]

					total_params++;
 80032a4:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80032a8:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	3301      	adds	r3, #1
 80032b0:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 80032b4:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80032b8:	8013      	strh	r3, [r2, #0]

					// Add rotational parameters for turn
					param_list[total_params] = Parameter_Packer(RIGHT_TURN_DEG, RACE_SPEED_ROT_MAX, 0, RACE_ACCELERATION, false);
 80032ba:	4d31      	ldr	r5, [pc, #196]	@ (8003380 <Race_Mode+0x444>)
 80032bc:	4e31      	ldr	r6, [pc, #196]	@ (8003384 <Race_Mode+0x448>)
 80032be:	4c2b      	ldr	r4, [pc, #172]	@ (800336c <Race_Mode+0x430>)
 80032c0:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80032c4:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80032c8:	881a      	ldrh	r2, [r3, #0]
 80032ca:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80032ce:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	eb01 0803 	add.w	r8, r1, r3
 80032de:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80032e2:	3828      	subs	r0, #40	@ 0x28
 80032e4:	2300      	movs	r3, #0
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	9400      	str	r4, [sp, #0]
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	4632      	mov	r2, r6
 80032f0:	4629      	mov	r1, r5
 80032f2:	f000 fd1b 	bl	8003d2c <Parameter_Packer>
 80032f6:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80032fa:	f6a3 1328 	subw	r3, r3, #2344	@ 0x928
 80032fe:	4644      	mov	r4, r8
 8003300:	461d      	mov	r5, r3
 8003302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003306:	682b      	ldr	r3, [r5, #0]
 8003308:	6023      	str	r3, [r4, #0]
					total_params++;
 800330a:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800330e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	3301      	adds	r3, #1
 8003316:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 800331a:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800331e:	8013      	strh	r3, [r2, #0]

					// Start new forward profile for intial movement
					param_list[total_params].distance += CELL_TO_CENTER_MM;
 8003320:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003324:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003328:	881a      	ldrh	r2, [r3, #0]
 800332a:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 800332e:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a0f      	ldr	r2, [pc, #60]	@ (800337c <Race_Mode+0x440>)
 8003340:	f507 5124 	add.w	r1, r7, #10496	@ 0x2900
 8003344:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 8003348:	880c      	ldrh	r4, [r1, #0]
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f7fd fb49 	bl	80009e4 <__addsf3>
 8003352:	4603      	mov	r3, r0
 8003354:	4619      	mov	r1, r3
 8003356:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 800335a:	f6a3 120c 	subw	r2, r3, #2316	@ 0x90c
 800335e:	4623      	mov	r3, r4
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4423      	add	r3, r4
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	6019      	str	r1, [r3, #0]
            		param_list[total_params] = Parameter_Packer(RIGHT_TURN_DEG, RACE_SPEED_ROT_SMOOTH_MAX, 0, RACE_ACCELERATION, false);
            		total_params++;
            		param_list[total_params] = Parameter_Packer(SMOOTH_TURN_FWD_MM, RACE_SPEED_FWD_SMOOTH_MAX, RACE_SPEED_FWD_SMOOTH_MAX, RACE_ACCELERATION, false);
            		total_params++;
				#endif
                break;
 800336a:	e0a8      	b.n	80034be <Race_Mode+0x582>
 800336c:	451c4000 	.word	0x451c4000
 8003370:	442f0000 	.word	0x442f0000
 8003374:	43018873 	.word	0x43018873
 8003378:	43280000 	.word	0x43280000
 800337c:	42990000 	.word	0x42990000
 8003380:	42b40000 	.word	0x42b40000
 8003384:	43fa0000 	.word	0x43fa0000
            case TURN_LEFT:
				#ifndef SMOOTH_TURNS
            		// No smooth turns
					param_list[total_params].end_speed = 0;
 8003388:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800338c:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003390:	881a      	ldrh	r2, [r3, #0]
 8003392:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 8003396:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	3308      	adds	r3, #8
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
					param_list[total_params].distance += CELL_TO_CENTER_MM;
 80033ac:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80033b0:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80033b4:	881a      	ldrh	r2, [r3, #0]
 80033b6:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80033ba:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a7f      	ldr	r2, [pc, #508]	@ (80035c8 <Race_Mode+0x68c>)
 80033cc:	f507 5124 	add.w	r1, r7, #10496	@ 0x2900
 80033d0:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 80033d4:	880c      	ldrh	r4, [r1, #0]
 80033d6:	4611      	mov	r1, r2
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fd fb03 	bl	80009e4 <__addsf3>
 80033de:	4603      	mov	r3, r0
 80033e0:	4619      	mov	r1, r3
 80033e2:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80033e6:	f6a3 120c 	subw	r2, r3, #2316	@ 0x90c
 80033ea:	4623      	mov	r3, r4
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4423      	add	r3, r4
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	6019      	str	r1, [r3, #0]

					total_params++;
 80033f6:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80033fa:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	3301      	adds	r3, #1
 8003402:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8003406:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800340a:	8013      	strh	r3, [r2, #0]

					// Add rotational parameters for turn
					param_list[total_params] = Parameter_Packer(LEFT_TURN_DEG, RACE_SPEED_ROT_MAX, 0, RACE_ACCELERATION, false);
 800340c:	4d6f      	ldr	r5, [pc, #444]	@ (80035cc <Race_Mode+0x690>)
 800340e:	4e70      	ldr	r6, [pc, #448]	@ (80035d0 <Race_Mode+0x694>)
 8003410:	4c70      	ldr	r4, [pc, #448]	@ (80035d4 <Race_Mode+0x698>)
 8003412:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003416:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800341a:	881a      	ldrh	r2, [r3, #0]
 800341c:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 8003420:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	eb01 0803 	add.w	r8, r1, r3
 8003430:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003434:	3828      	subs	r0, #40	@ 0x28
 8003436:	2300      	movs	r3, #0
 8003438:	9301      	str	r3, [sp, #4]
 800343a:	9400      	str	r4, [sp, #0]
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	4632      	mov	r2, r6
 8003442:	4629      	mov	r1, r5
 8003444:	f000 fc72 	bl	8003d2c <Parameter_Packer>
 8003448:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 800344c:	f6a3 1328 	subw	r3, r3, #2344	@ 0x928
 8003450:	4644      	mov	r4, r8
 8003452:	461d      	mov	r5, r3
 8003454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003458:	682b      	ldr	r3, [r5, #0]
 800345a:	6023      	str	r3, [r4, #0]
					total_params++;
 800345c:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003460:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	3301      	adds	r3, #1
 8003468:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 800346c:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8003470:	8013      	strh	r3, [r2, #0]

					// Start new forward profile for intial movement
					param_list[total_params].distance += CELL_TO_CENTER_MM;
 8003472:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003476:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800347a:	881a      	ldrh	r2, [r3, #0]
 800347c:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 8003480:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a4d      	ldr	r2, [pc, #308]	@ (80035c8 <Race_Mode+0x68c>)
 8003492:	f507 5124 	add.w	r1, r7, #10496	@ 0x2900
 8003496:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 800349a:	880c      	ldrh	r4, [r1, #0]
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fd faa0 	bl	80009e4 <__addsf3>
 80034a4:	4603      	mov	r3, r0
 80034a6:	4619      	mov	r1, r3
 80034a8:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80034ac:	f6a3 120c 	subw	r2, r3, #2316	@ 0x90c
 80034b0:	4623      	mov	r3, r4
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4423      	add	r3, r4
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	6019      	str	r1, [r3, #0]
            		param_list[total_params] = Parameter_Packer(LEFT_TURN_DEG, RACE_SPEED_ROT_SMOOTH_MAX, 0, RACE_ACCELERATION, false);
            		total_params++;
            		param_list[total_params] = Parameter_Packer(SMOOTH_TURN_FWD_MM, RACE_SPEED_FWD_SMOOTH_MAX, RACE_SPEED_FWD_SMOOTH_MAX, RACE_ACCELERATION, false);
            		total_params++;
				#endif
                break;
 80034bc:	bf00      	nop
    for (uint16_t curr_motion = 0; curr_motion < prelim_motions_length; curr_motion++) {
 80034be:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80034c2:	f103 0320 	add.w	r3, r3, #32
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	3301      	adds	r3, #1
 80034ca:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 80034ce:	f102 0220 	add.w	r2, r2, #32
 80034d2:	8013      	strh	r3, [r2, #0]
 80034d4:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80034d8:	f103 0320 	add.w	r3, r3, #32
 80034dc:	881a      	ldrh	r2, [r3, #0]
 80034de:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80034e2:	f103 0326 	add.w	r3, r3, #38	@ 0x26
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	f4ff ae12 	bcc.w	8003112 <Race_Mode+0x1d6>
        }
    }

    // Execute motions according to parameter list
    uint16_t param = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 80034f4:	f102 021e 	add.w	r2, r2, #30
 80034f8:	8013      	strh	r3, [r2, #0]
    while (param < (total_params + 1)) {
 80034fa:	e047      	b.n	800358c <Race_Mode+0x650>
    	if (param_list[param].forward) { // Forward
 80034fc:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003500:	f103 031e 	add.w	r3, r3, #30
 8003504:	881a      	ldrh	r2, [r3, #0]
 8003506:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 800350a:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	3310      	adds	r3, #16
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d015      	beq.n	800354c <Race_Mode+0x610>
    		Profile_Container(param_list[param], &forward_profile);
 8003520:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003524:	f103 031e 	add.w	r3, r3, #30
 8003528:	881a      	ldrh	r2, [r3, #0]
 800352a:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 800352e:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	4a26      	ldr	r2, [pc, #152]	@ (80035d8 <Race_Mode+0x69c>)
 800353e:	9201      	str	r2, [sp, #4]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	9200      	str	r2, [sp, #0]
 8003544:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003546:	f000 fb09 	bl	8003b5c <Profile_Container>
 800354a:	e014      	b.n	8003576 <Race_Mode+0x63a>
    	}
    	else { // Rotational
			#ifndef SMOOTH_TURNS
    			Profile_Container(param_list[param], &rotational_profile);
 800354c:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003550:	f103 031e 	add.w	r3, r3, #30
 8003554:	881a      	ldrh	r2, [r3, #0]
 8003556:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 800355a:	f6a3 110c 	subw	r1, r3, #2316	@ 0x90c
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	4a1c      	ldr	r2, [pc, #112]	@ (80035dc <Race_Mode+0x6a0>)
 800356a:	9201      	str	r2, [sp, #4]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	9200      	str	r2, [sp, #0]
 8003570:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003572:	f000 faf3 	bl	8003b5c <Profile_Container>
			#else // Use 2 parameters from list on smooth turns
    			Smooth_Turn_Container(param_list[param], param_list[param+1], &forward_profile, &rotational_profile);
    			param++;
			#endif
    	}
    	param++;
 8003576:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800357a:	f103 031e 	add.w	r3, r3, #30
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	f507 5224 	add.w	r2, r7, #10496	@ 0x2900
 8003586:	f102 021e 	add.w	r2, r2, #30
 800358a:	8013      	strh	r3, [r2, #0]
    while (param < (total_params + 1)) {
 800358c:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8003590:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003594:	881a      	ldrh	r2, [r3, #0]
 8003596:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800359a:	f103 031e 	add.w	r3, r3, #30
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d2ab      	bcs.n	80034fc <Race_Mode+0x5c0>
    }

    armed = false;
 80035a4:	4b0e      	ldr	r3, [pc, #56]	@ (80035e0 <Race_Mode+0x6a4>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	701a      	strb	r2, [r3, #0]
    motor_controller_enabled = false;
 80035aa:	4b0e      	ldr	r3, [pc, #56]	@ (80035e4 <Race_Mode+0x6a8>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]

    Complete_Stop();
 80035b0:	f000 f926 	bl	8003800 <Complete_Stop>
}
 80035b4:	bf00      	nop
 80035b6:	f507 5724 	add.w	r7, r7, #10496	@ 0x2900
 80035ba:	3728      	adds	r7, #40	@ 0x28
 80035bc:	46bd      	mov	sp, r7
 80035be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035c2:	b004      	add	sp, #16
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	42990000 	.word	0x42990000
 80035cc:	c2b80000 	.word	0xc2b80000
 80035d0:	43fa0000 	.word	0x43fa0000
 80035d4:	451c4000 	.word	0x451c4000
 80035d8:	20000b84 	.word	0x20000b84
 80035dc:	20000bac 	.word	0x20000bac
 80035e0:	20000248 	.word	0x20000248
 80035e4:	20000c6c 	.word	0x20000c6c

080035e8 <Set_Motor_Volts>:
float motor_left_previous_speed = 0;
float motor_right_previous_speed = 0;

bool motor_controller_enabled = false;

void Set_Motor_Volts(motor_t motor, float voltage_to_translate) {
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	6039      	str	r1, [r7, #0]
 80035f2:	71fb      	strb	r3, [r7, #7]
	voltage_to_translate = voltage_to_translate > MAX_MOTOR_VOLTAGE ? MAX_MOTOR_VOLTAGE : voltage_to_translate;
 80035f4:	4b2f      	ldr	r3, [pc, #188]	@ (80036b4 <Set_Motor_Volts+0xcc>)
 80035f6:	4619      	mov	r1, r3
 80035f8:	6838      	ldr	r0, [r7, #0]
 80035fa:	f7fd fcb7 	bl	8000f6c <__aeabi_fcmpgt>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <Set_Motor_Volts+0x20>
 8003604:	4b2b      	ldr	r3, [pc, #172]	@ (80036b4 <Set_Motor_Volts+0xcc>)
 8003606:	e000      	b.n	800360a <Set_Motor_Volts+0x22>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	603b      	str	r3, [r7, #0]
	voltage_to_translate = voltage_to_translate < -MAX_MOTOR_VOLTAGE ? -MAX_MOTOR_VOLTAGE : voltage_to_translate;
 800360c:	4b29      	ldr	r3, [pc, #164]	@ (80036b4 <Set_Motor_Volts+0xcc>)
 800360e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003612:	4619      	mov	r1, r3
 8003614:	6838      	ldr	r0, [r7, #0]
 8003616:	f7fd fc8b 	bl	8000f30 <__aeabi_fcmplt>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <Set_Motor_Volts+0x40>
 8003620:	4b24      	ldr	r3, [pc, #144]	@ (80036b4 <Set_Motor_Volts+0xcc>)
 8003622:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003626:	e000      	b.n	800362a <Set_Motor_Volts+0x42>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	603b      	str	r3, [r7, #0]

	int counter_period = MAX_PWM * (voltage_to_translate + Calculate_Battery_Bias(voltage_to_translate)) / mouse_state.battery_voltage;
 800362c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003630:	4618      	mov	r0, r3
 8003632:	f7fd fa8b 	bl	8000b4c <__aeabi_i2f>
 8003636:	4604      	mov	r4, r0
 8003638:	6838      	ldr	r0, [r7, #0]
 800363a:	f000 fcdd 	bl	8003ff8 <Calculate_Battery_Bias>
 800363e:	4603      	mov	r3, r0
 8003640:	6839      	ldr	r1, [r7, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7fd f9ce 	bl	80009e4 <__addsf3>
 8003648:	4603      	mov	r3, r0
 800364a:	4619      	mov	r1, r3
 800364c:	4620      	mov	r0, r4
 800364e:	f7fd fad1 	bl	8000bf4 <__aeabi_fmul>
 8003652:	4603      	mov	r3, r0
 8003654:	4618      	mov	r0, r3
 8003656:	f7fc fedd 	bl	8000414 <__aeabi_f2d>
 800365a:	4b17      	ldr	r3, [pc, #92]	@ (80036b8 <Set_Motor_Volts+0xd0>)
 800365c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003660:	f7fd f85a 	bl	8000718 <__aeabi_ddiv>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4610      	mov	r0, r2
 800366a:	4619      	mov	r1, r3
 800366c:	f7fd f93c 	bl	80008e8 <__aeabi_d2iz>
 8003670:	4603      	mov	r3, r0
 8003672:	60fb      	str	r3, [r7, #12]
	if (counter_period < 0) {
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	da08      	bge.n	800368c <Set_Motor_Volts+0xa4>
		Set_Direction(motor, REVERSE);
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	2101      	movs	r1, #1
 800367e:	4618      	mov	r0, r3
 8003680:	f000 f840 	bl	8003704 <Set_Direction>
		counter_period = -counter_period;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	425b      	negs	r3, r3
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	e007      	b.n	800369c <Set_Motor_Volts+0xb4>
	}
	else if (counter_period > 0) {
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	dd04      	ble.n	800369c <Set_Motor_Volts+0xb4>
		Set_Direction(motor, FORWARD);
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	2100      	movs	r1, #0
 8003696:	4618      	mov	r0, r3
 8003698:	f000 f834 	bl	8003704 <Set_Direction>
	}

	Set_PWM(motor, counter_period);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	b29a      	uxth	r2, r3
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	4611      	mov	r1, r2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 f809 	bl	80036bc <Set_PWM>
}
 80036aa:	bf00      	nop
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd90      	pop	{r4, r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40c00000 	.word	0x40c00000
 80036b8:	20000220 	.word	0x20000220

080036bc <Set_PWM>:

void Set_PWM(motor_t motor, uint16_t counter_period) {
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	460a      	mov	r2, r1
 80036c6:	71fb      	strb	r3, [r7, #7]
 80036c8:	4613      	mov	r3, r2
 80036ca:	80bb      	strh	r3, [r7, #4]
	// Software limit for motor voltage ~6V
	counter_period = counter_period > PWM_LIMIT ? PWM_LIMIT: counter_period;
 80036cc:	f240 52c1 	movw	r2, #1473	@ 0x5c1
 80036d0:	88bb      	ldrh	r3, [r7, #4]
 80036d2:	4293      	cmp	r3, r2
 80036d4:	bf28      	it	cs
 80036d6:	4613      	movcs	r3, r2
 80036d8:	80bb      	strh	r3, [r7, #4]
	switch(motor) {
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <Set_PWM+0x2a>
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d005      	beq.n	80036f0 <Set_PWM+0x34>
			break;
		case MOTOR_RIGHT:
			TIM2->CCR3 = counter_period;
			break;
	}
}
 80036e4:	e009      	b.n	80036fa <Set_PWM+0x3e>
			TIM2->CCR4 = counter_period;
 80036e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80036ea:	88bb      	ldrh	r3, [r7, #4]
 80036ec:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 80036ee:	e004      	b.n	80036fa <Set_PWM+0x3e>
			TIM2->CCR3 = counter_period;
 80036f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80036f4:	88bb      	ldrh	r3, [r7, #4]
 80036f6:	63d3      	str	r3, [r2, #60]	@ 0x3c
			break;
 80036f8:	bf00      	nop
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <Set_Direction>:

void Set_Direction(motor_t motor, motor_direction_t direction) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	460a      	mov	r2, r1
 800370e:	71fb      	strb	r3, [r7, #7]
 8003710:	4613      	mov	r3, r2
 8003712:	71bb      	strb	r3, [r7, #6]
	switch(motor) {
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <Set_Direction+0x1c>
 800371a:	2b01      	cmp	r3, #1
 800371c:	d032      	beq.n	8003784 <Set_Direction+0x80>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
					break;
			}
			break;
	}
}
 800371e:	e066      	b.n	80037ee <Set_Direction+0xea>
			switch(direction) {
 8003720:	79bb      	ldrb	r3, [r7, #6]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d020      	beq.n	8003768 <Set_Direction+0x64>
 8003726:	2b02      	cmp	r3, #2
 8003728:	dc5e      	bgt.n	80037e8 <Set_Direction+0xe4>
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <Set_Direction+0x30>
 800372e:	2b01      	cmp	r3, #1
 8003730:	d00d      	beq.n	800374e <Set_Direction+0x4a>
			break;
 8003732:	e059      	b.n	80037e8 <Set_Direction+0xe4>
					HAL_GPIO_WritePin(ML_FWD_GPIO_Port,  ML_FWD_Pin, 1);
 8003734:	2201      	movs	r2, #1
 8003736:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800373a:	482f      	ldr	r0, [pc, #188]	@ (80037f8 <Set_Direction+0xf4>)
 800373c:	f002 fdbe 	bl	80062bc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 8003740:	2200      	movs	r2, #0
 8003742:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003746:	482d      	ldr	r0, [pc, #180]	@ (80037fc <Set_Direction+0xf8>)
 8003748:	f002 fdb8 	bl	80062bc <HAL_GPIO_WritePin>
					break;
 800374c:	e019      	b.n	8003782 <Set_Direction+0x7e>
					HAL_GPIO_WritePin(ML_FWD_GPIO_Port,  ML_FWD_Pin, 0);
 800374e:	2200      	movs	r2, #0
 8003750:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003754:	4828      	ldr	r0, [pc, #160]	@ (80037f8 <Set_Direction+0xf4>)
 8003756:	f002 fdb1 	bl	80062bc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 1);
 800375a:	2201      	movs	r2, #1
 800375c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003760:	4826      	ldr	r0, [pc, #152]	@ (80037fc <Set_Direction+0xf8>)
 8003762:	f002 fdab 	bl	80062bc <HAL_GPIO_WritePin>
					break;
 8003766:	e00c      	b.n	8003782 <Set_Direction+0x7e>
					HAL_GPIO_WritePin(ML_FWD_GPIO_Port,  ML_FWD_Pin, 0);
 8003768:	2200      	movs	r2, #0
 800376a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800376e:	4822      	ldr	r0, [pc, #136]	@ (80037f8 <Set_Direction+0xf4>)
 8003770:	f002 fda4 	bl	80062bc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 8003774:	2200      	movs	r2, #0
 8003776:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800377a:	4820      	ldr	r0, [pc, #128]	@ (80037fc <Set_Direction+0xf8>)
 800377c:	f002 fd9e 	bl	80062bc <HAL_GPIO_WritePin>
					break;
 8003780:	bf00      	nop
			break;
 8003782:	e031      	b.n	80037e8 <Set_Direction+0xe4>
			switch(direction) {
 8003784:	79bb      	ldrb	r3, [r7, #6]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d020      	beq.n	80037cc <Set_Direction+0xc8>
 800378a:	2b02      	cmp	r3, #2
 800378c:	dc2e      	bgt.n	80037ec <Set_Direction+0xe8>
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <Set_Direction+0x94>
 8003792:	2b01      	cmp	r3, #1
 8003794:	d00d      	beq.n	80037b2 <Set_Direction+0xae>
			break;
 8003796:	e029      	b.n	80037ec <Set_Direction+0xe8>
					HAL_GPIO_WritePin(MR_FWD_GPIO_Port,  MR_FWD_Pin, 1);
 8003798:	2201      	movs	r2, #1
 800379a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800379e:	4816      	ldr	r0, [pc, #88]	@ (80037f8 <Set_Direction+0xf4>)
 80037a0:	f002 fd8c 	bl	80062bc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
 80037a4:	2200      	movs	r2, #0
 80037a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037aa:	4813      	ldr	r0, [pc, #76]	@ (80037f8 <Set_Direction+0xf4>)
 80037ac:	f002 fd86 	bl	80062bc <HAL_GPIO_WritePin>
					break;
 80037b0:	e019      	b.n	80037e6 <Set_Direction+0xe2>
					HAL_GPIO_WritePin(MR_FWD_GPIO_Port,  MR_FWD_Pin, 0);
 80037b2:	2200      	movs	r2, #0
 80037b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037b8:	480f      	ldr	r0, [pc, #60]	@ (80037f8 <Set_Direction+0xf4>)
 80037ba:	f002 fd7f 	bl	80062bc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 1);
 80037be:	2201      	movs	r2, #1
 80037c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037c4:	480c      	ldr	r0, [pc, #48]	@ (80037f8 <Set_Direction+0xf4>)
 80037c6:	f002 fd79 	bl	80062bc <HAL_GPIO_WritePin>
					break;
 80037ca:	e00c      	b.n	80037e6 <Set_Direction+0xe2>
					HAL_GPIO_WritePin(MR_FWD_GPIO_Port,  MR_FWD_Pin, 0);
 80037cc:	2200      	movs	r2, #0
 80037ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037d2:	4809      	ldr	r0, [pc, #36]	@ (80037f8 <Set_Direction+0xf4>)
 80037d4:	f002 fd72 	bl	80062bc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
 80037d8:	2200      	movs	r2, #0
 80037da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037de:	4806      	ldr	r0, [pc, #24]	@ (80037f8 <Set_Direction+0xf4>)
 80037e0:	f002 fd6c 	bl	80062bc <HAL_GPIO_WritePin>
					break;
 80037e4:	bf00      	nop
			break;
 80037e6:	e001      	b.n	80037ec <Set_Direction+0xe8>
			break;
 80037e8:	bf00      	nop
 80037ea:	e000      	b.n	80037ee <Set_Direction+0xea>
			break;
 80037ec:	bf00      	nop
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40010c00 	.word	0x40010c00
 80037fc:	40010800 	.word	0x40010800

08003800 <Complete_Stop>:

void Complete_Stop() {
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
	Set_Direction(MOTOR_LEFT, BRAKE);
 8003804:	2102      	movs	r1, #2
 8003806:	2000      	movs	r0, #0
 8003808:	f7ff ff7c 	bl	8003704 <Set_Direction>
	Set_Direction(MOTOR_RIGHT, BRAKE);
 800380c:	2102      	movs	r1, #2
 800380e:	2001      	movs	r0, #1
 8003810:	f7ff ff78 	bl	8003704 <Set_Direction>

	Set_PWM(MOTOR_LEFT, 0);
 8003814:	2100      	movs	r1, #0
 8003816:	2000      	movs	r0, #0
 8003818:	f7ff ff50 	bl	80036bc <Set_PWM>
	Set_PWM(MOTOR_RIGHT, 0);
 800381c:	2100      	movs	r1, #0
 800381e:	2001      	movs	r0, #1
 8003820:	f7ff ff4c 	bl	80036bc <Set_PWM>

	motor_controller_enabled = false;
 8003824:	4b02      	ldr	r3, [pc, #8]	@ (8003830 <Complete_Stop+0x30>)
 8003826:	2200      	movs	r2, #0
 8003828:	701a      	strb	r2, [r3, #0]
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000c6c 	.word	0x20000c6c

08003834 <Position_Controller>:

float Position_Controller(float velocity) {
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
	float increment = velocity * SYSTICK_INTERVAL;
 800383c:	4b1f      	ldr	r3, [pc, #124]	@ (80038bc <Position_Controller+0x88>)
 800383e:	4619      	mov	r1, r3
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7fd f9d7 	bl	8000bf4 <__aeabi_fmul>
 8003846:	4603      	mov	r3, r0
 8003848:	60fb      	str	r3, [r7, #12]
	forward_error += increment - delta_position_forward;
 800384a:	4b1d      	ldr	r3, [pc, #116]	@ (80038c0 <Position_Controller+0x8c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4619      	mov	r1, r3
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f7fd f8c5 	bl	80009e0 <__aeabi_fsub>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	4b1a      	ldr	r3, [pc, #104]	@ (80038c4 <Position_Controller+0x90>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4619      	mov	r1, r3
 8003860:	4610      	mov	r0, r2
 8003862:	f7fd f8bf 	bl	80009e4 <__addsf3>
 8003866:	4603      	mov	r3, r0
 8003868:	461a      	mov	r2, r3
 800386a:	4b16      	ldr	r3, [pc, #88]	@ (80038c4 <Position_Controller+0x90>)
 800386c:	601a      	str	r2, [r3, #0]
	float forward_error_difference = forward_error - previous_forward_error;
 800386e:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <Position_Controller+0x90>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a15      	ldr	r2, [pc, #84]	@ (80038c8 <Position_Controller+0x94>)
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	4611      	mov	r1, r2
 8003878:	4618      	mov	r0, r3
 800387a:	f7fd f8b1 	bl	80009e0 <__aeabi_fsub>
 800387e:	4603      	mov	r3, r0
 8003880:	60bb      	str	r3, [r7, #8]
	previous_forward_error = forward_error;
 8003882:	4b10      	ldr	r3, [pc, #64]	@ (80038c4 <Position_Controller+0x90>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a10      	ldr	r2, [pc, #64]	@ (80038c8 <Position_Controller+0x94>)
 8003888:	6013      	str	r3, [r2, #0]

	return FWD_KP * forward_error + FWD_KD * forward_error_difference;
 800388a:	4a10      	ldr	r2, [pc, #64]	@ (80038cc <Position_Controller+0x98>)
 800388c:	4b0d      	ldr	r3, [pc, #52]	@ (80038c4 <Position_Controller+0x90>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f7fd f9ae 	bl	8000bf4 <__aeabi_fmul>
 8003898:	4603      	mov	r3, r0
 800389a:	461c      	mov	r4, r3
 800389c:	4b0c      	ldr	r3, [pc, #48]	@ (80038d0 <Position_Controller+0x9c>)
 800389e:	68b9      	ldr	r1, [r7, #8]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fd f9a7 	bl	8000bf4 <__aeabi_fmul>
 80038a6:	4603      	mov	r3, r0
 80038a8:	4619      	mov	r1, r3
 80038aa:	4620      	mov	r0, r4
 80038ac:	f7fd f89a 	bl	80009e4 <__addsf3>
 80038b0:	4603      	mov	r3, r0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd90      	pop	{r4, r7, pc}
 80038ba:	bf00      	nop
 80038bc:	3b03126f 	.word	0x3b03126f
 80038c0:	20000bfc 	.word	0x20000bfc
 80038c4:	20000c5c 	.word	0x20000c5c
 80038c8:	20000c60 	.word	0x20000c60
 80038cc:	3f9f6cf2 	.word	0x3f9f6cf2
 80038d0:	4159e619 	.word	0x4159e619

080038d4 <Rotational_Controller>:

float Rotational_Controller(float steering_adjustment, float omega) {
 80038d4:	b590      	push	{r4, r7, lr}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
	float increment = omega * SYSTICK_INTERVAL;
 80038de:	4b24      	ldr	r3, [pc, #144]	@ (8003970 <Rotational_Controller+0x9c>)
 80038e0:	4619      	mov	r1, r3
 80038e2:	6838      	ldr	r0, [r7, #0]
 80038e4:	f7fd f986 	bl	8000bf4 <__aeabi_fmul>
 80038e8:	4603      	mov	r3, r0
 80038ea:	60fb      	str	r3, [r7, #12]
	rotational_error += increment - delta_position_rotational;
 80038ec:	4b21      	ldr	r3, [pc, #132]	@ (8003974 <Rotational_Controller+0xa0>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4619      	mov	r1, r3
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f7fd f874 	bl	80009e0 <__aeabi_fsub>
 80038f8:	4603      	mov	r3, r0
 80038fa:	461a      	mov	r2, r3
 80038fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003978 <Rotational_Controller+0xa4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4619      	mov	r1, r3
 8003902:	4610      	mov	r0, r2
 8003904:	f7fd f86e 	bl	80009e4 <__addsf3>
 8003908:	4603      	mov	r3, r0
 800390a:	461a      	mov	r2, r3
 800390c:	4b1a      	ldr	r3, [pc, #104]	@ (8003978 <Rotational_Controller+0xa4>)
 800390e:	601a      	str	r2, [r3, #0]
	rotational_error += steering_adjustment;
 8003910:	4b19      	ldr	r3, [pc, #100]	@ (8003978 <Rotational_Controller+0xa4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	4618      	mov	r0, r3
 8003918:	f7fd f864 	bl	80009e4 <__addsf3>
 800391c:	4603      	mov	r3, r0
 800391e:	461a      	mov	r2, r3
 8003920:	4b15      	ldr	r3, [pc, #84]	@ (8003978 <Rotational_Controller+0xa4>)
 8003922:	601a      	str	r2, [r3, #0]
	float rotational_error_difference = rotational_error - previous_rotational_error;
 8003924:	4b14      	ldr	r3, [pc, #80]	@ (8003978 <Rotational_Controller+0xa4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a14      	ldr	r2, [pc, #80]	@ (800397c <Rotational_Controller+0xa8>)
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	4611      	mov	r1, r2
 800392e:	4618      	mov	r0, r3
 8003930:	f7fd f856 	bl	80009e0 <__aeabi_fsub>
 8003934:	4603      	mov	r3, r0
 8003936:	60bb      	str	r3, [r7, #8]
	previous_rotational_error = rotational_error;
 8003938:	4b0f      	ldr	r3, [pc, #60]	@ (8003978 <Rotational_Controller+0xa4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a0f      	ldr	r2, [pc, #60]	@ (800397c <Rotational_Controller+0xa8>)
 800393e:	6013      	str	r3, [r2, #0]

	return ROT_KP * rotational_error + ROT_KD * rotational_error_difference;
 8003940:	4a0f      	ldr	r2, [pc, #60]	@ (8003980 <Rotational_Controller+0xac>)
 8003942:	4b0d      	ldr	r3, [pc, #52]	@ (8003978 <Rotational_Controller+0xa4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4619      	mov	r1, r3
 8003948:	4610      	mov	r0, r2
 800394a:	f7fd f953 	bl	8000bf4 <__aeabi_fmul>
 800394e:	4603      	mov	r3, r0
 8003950:	461c      	mov	r4, r3
 8003952:	4b0c      	ldr	r3, [pc, #48]	@ (8003984 <Rotational_Controller+0xb0>)
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	4618      	mov	r0, r3
 8003958:	f7fd f94c 	bl	8000bf4 <__aeabi_fmul>
 800395c:	4603      	mov	r3, r0
 800395e:	4619      	mov	r1, r3
 8003960:	4620      	mov	r0, r4
 8003962:	f7fd f83f 	bl	80009e4 <__addsf3>
 8003966:	4603      	mov	r3, r0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	bd90      	pop	{r4, r7, pc}
 8003970:	3b03126f 	.word	0x3b03126f
 8003974:	20000c00 	.word	0x20000c00
 8003978:	20000c64 	.word	0x20000c64
 800397c:	20000c68 	.word	0x20000c68
 8003980:	3f754525 	.word	0x3f754525
 8003984:	41279d4f 	.word	0x41279d4f

08003988 <Update_Motors>:

void Update_Motors(float velocity, float omega, float steering_adjustment) {
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
	steering_adjustment = rotational_profile.state == IDLE || rotational_profile.state == COMPLETE ? steering_adjustment : 0;
 8003994:	4b1b      	ldr	r3, [pc, #108]	@ (8003a04 <Update_Motors+0x7c>)
 8003996:	7d1b      	ldrb	r3, [r3, #20]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <Update_Motors+0x1c>
 800399c:	4b19      	ldr	r3, [pc, #100]	@ (8003a04 <Update_Motors+0x7c>)
 800399e:	7d1b      	ldrb	r3, [r3, #20]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d101      	bne.n	80039a8 <Update_Motors+0x20>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	e001      	b.n	80039ac <Update_Motors+0x24>
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	607b      	str	r3, [r7, #4]

	float position_output = Position_Controller(velocity);
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f7ff ff40 	bl	8003834 <Position_Controller>
 80039b4:	61f8      	str	r0, [r7, #28]
	float rotational_output = Rotational_Controller(steering_adjustment, omega);
 80039b6:	68b9      	ldr	r1, [r7, #8]
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff ff8b 	bl	80038d4 <Rotational_Controller>
 80039be:	61b8      	str	r0, [r7, #24]

	float motor_left_voltage = 0;
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
	float motor_right_voltage = 0;
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	613b      	str	r3, [r7, #16]
	motor_left_voltage = position_output - rotational_output;
 80039cc:	69b9      	ldr	r1, [r7, #24]
 80039ce:	69f8      	ldr	r0, [r7, #28]
 80039d0:	f7fd f806 	bl	80009e0 <__aeabi_fsub>
 80039d4:	4603      	mov	r3, r0
 80039d6:	617b      	str	r3, [r7, #20]
	motor_right_voltage = position_output + rotational_output;
 80039d8:	69b9      	ldr	r1, [r7, #24]
 80039da:	69f8      	ldr	r0, [r7, #28]
 80039dc:	f7fd f802 	bl	80009e4 <__addsf3>
 80039e0:	4603      	mov	r3, r0
 80039e2:	613b      	str	r3, [r7, #16]

	if (motor_controller_enabled) {
 80039e4:	4b08      	ldr	r3, [pc, #32]	@ (8003a08 <Update_Motors+0x80>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d007      	beq.n	80039fc <Update_Motors+0x74>
		Set_Motor_Volts(MOTOR_LEFT, motor_left_voltage);
 80039ec:	6979      	ldr	r1, [r7, #20]
 80039ee:	2000      	movs	r0, #0
 80039f0:	f7ff fdfa 	bl	80035e8 <Set_Motor_Volts>
		Set_Motor_Volts(MOTOR_RIGHT, motor_right_voltage);
 80039f4:	6939      	ldr	r1, [r7, #16]
 80039f6:	2001      	movs	r0, #1
 80039f8:	f7ff fdf6 	bl	80035e8 <Set_Motor_Volts>
	}
}
 80039fc:	bf00      	nop
 80039fe:	3720      	adds	r7, #32
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20000bac 	.word	0x20000bac
 8003a08:	20000c6c 	.word	0x20000c6c

08003a0c <Clear_Profile>:

extern uint16_t wall_front_thresh;
extern uint16_t wall_left_thresh;
extern uint16_t wall_right_thresh;

void Clear_Profile(profile_t* profile) {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
	bzero(profile, sizeof(profile_t));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4618      	mov	r0, r3
 8003a18:	2328      	movs	r3, #40	@ 0x28
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	f005 f8e5 	bl	8008bec <memset>
	profile->state = IDLE; // Should be handled above, just make sure it's IDLE
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	751a      	strb	r2, [r3, #20]
	profile->direction = 1;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003a2e:	bf00      	nop
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <Start_Profile>:

void Start_Profile(param_t parameters, profile_t* profile) {
 8003a38:	b084      	sub	sp, #16
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	f107 0c08 	add.w	ip, r7, #8
 8003a42:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (parameters.distance < 0) {
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f04f 0100 	mov.w	r1, #0
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fd fa6f 	bl	8000f30 <__aeabi_fcmplt>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d007      	beq.n	8003a68 <Start_Profile+0x30>
		profile->direction = -1;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a5e:	625a      	str	r2, [r3, #36]	@ 0x24
		parameters.distance *= -1;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003a66:	60bb      	str	r3, [r7, #8]
	}
	if (parameters.distance < 1.0) {
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fd fa5e 	bl	8000f30 <__aeabi_fcmplt>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <Start_Profile+0x4a>
		profile->state = COMPLETE;
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	751a      	strb	r2, [r3, #20]
		return;
 8003a80:	e063      	b.n	8003b4a <Start_Profile+0x112>
	}
	if (parameters.end_speed > parameters.max_speed) {
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4611      	mov	r1, r2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fd fa6f 	bl	8000f6c <__aeabi_fcmpgt>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <Start_Profile+0x60>
		parameters.end_speed = parameters.max_speed;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	613b      	str	r3, [r7, #16]
	}

	profile->position = 0;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	61da      	str	r2, [r3, #28]
	profile->parameters.distance -= profile == &forward_profile ? on_completion_error_forward : 0;
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	492b      	ldr	r1, [pc, #172]	@ (8003b54 <Start_Profile+0x11c>)
 8003aa8:	428b      	cmp	r3, r1
 8003aaa:	d102      	bne.n	8003ab2 <Start_Profile+0x7a>
 8003aac:	4b2a      	ldr	r3, [pc, #168]	@ (8003b58 <Start_Profile+0x120>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	e001      	b.n	8003ab6 <Start_Profile+0x7e>
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4610      	mov	r0, r2
 8003aba:	f7fc ff91 	bl	80009e0 <__aeabi_fsub>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	601a      	str	r2, [r3, #0]
	parameters.max_speed = profile->direction * fabsf(parameters.max_speed);
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fd f83e 	bl	8000b4c <__aeabi_i2f>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4610      	mov	r0, r2
 8003adc:	f7fd f88a 	bl	8000bf4 <__aeabi_fmul>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	60fb      	str	r3, [r7, #12]
	parameters.end_speed = profile->direction * fabsf(parameters.end_speed);
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fd f82f 	bl	8000b4c <__aeabi_i2f>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003af6:	4619      	mov	r1, r3
 8003af8:	4610      	mov	r0, r2
 8003afa:	f7fd f87b 	bl	8000bf4 <__aeabi_fmul>
 8003afe:	4603      	mov	r3, r0
 8003b00:	613b      	str	r3, [r7, #16]
	parameters.acceleration = fabsf(parameters.acceleration);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b08:	617b      	str	r3, [r7, #20]
	memcpy(&(profile->parameters), &parameters, sizeof(param_t));
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	2214      	movs	r2, #20
 8003b0e:	f107 0108 	add.w	r1, r7, #8
 8003b12:	4618      	mov	r0, r3
 8003b14:	f005 f8ae 	bl	8008c74 <memcpy>
	profile->inverse_acceleration = parameters.acceleration >= 1 ? (1.0f / parameters.acceleration) : 1.0;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fd fa1a 	bl	8000f58 <__aeabi_fcmpge>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d008      	beq.n	8003b3c <Start_Profile+0x104>
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003b32:	f7fd f913 	bl	8000d5c <__aeabi_fdiv>
 8003b36:	4603      	mov	r3, r0
 8003b38:	461a      	mov	r2, r3
 8003b3a:	e001      	b.n	8003b40 <Start_Profile+0x108>
 8003b3c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	621a      	str	r2, [r3, #32]

	profile->state = ACCELERATING;
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2201      	movs	r2, #1
 8003b48:	751a      	strb	r2, [r3, #20]
}
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b50:	b004      	add	sp, #16
 8003b52:	4770      	bx	lr
 8003b54:	20000b84 	.word	0x20000b84
 8003b58:	20000c70 	.word	0x20000c70

08003b5c <Profile_Container>:

void Profile_Container(param_t parameters, profile_t* profile) {
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af02      	add	r7, sp, #8
 8003b64:	f107 0c10 	add.w	ip, r7, #16
 8003b68:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float original_position = mouse_position;
 8003b6c:	4b14      	ldr	r3, [pc, #80]	@ (8003bc0 <Profile_Container+0x64>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	607b      	str	r3, [r7, #4]
	Start_Profile(parameters, profile);
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	9301      	str	r3, [sp, #4]
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	f107 0310 	add.w	r3, r7, #16
 8003b7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b80:	f7ff ff5a 	bl	8003a38 <Start_Profile>
	while (profile->state != COMPLETE);
 8003b84:	bf00      	nop
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	7d1b      	ldrb	r3, [r3, #20]
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d1fb      	bne.n	8003b86 <Profile_Container+0x2a>
	float delta_position = mouse_position - original_position;
 8003b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc0 <Profile_Container+0x64>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fc ff23 	bl	80009e0 <__aeabi_fsub>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	603b      	str	r3, [r7, #0]
	on_completion_error_forward = parameters.distance - delta_position;
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	6839      	ldr	r1, [r7, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fc ff1c 	bl	80009e0 <__aeabi_fsub>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	461a      	mov	r2, r3
 8003bac:	4b05      	ldr	r3, [pc, #20]	@ (8003bc4 <Profile_Container+0x68>)
 8003bae:	601a      	str	r2, [r3, #0]
}
 8003bb0:	bf00      	nop
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bba:	b004      	add	sp, #16
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20000c08 	.word	0x20000c08
 8003bc4:	20000c70 	.word	0x20000c70

08003bc8 <Turn_Container>:

void Turn_Container(param_t fwd_parameters, param_t rot_parameters, profile_t* fwd_profile, profile_t* rot_profile) {
 8003bc8:	b084      	sub	sp, #16
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af02      	add	r7, sp, #8
 8003bd0:	f107 0c08 	add.w	ip, r7, #8
 8003bd4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    Profile_Container(fwd_parameters, fwd_profile);
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	f107 0308 	add.w	r3, r7, #8
 8003be4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003be6:	f7ff ffb9 	bl	8003b5c <Profile_Container>
    adjust_steering = false;
 8003bea:	4b1b      	ldr	r3, [pc, #108]	@ (8003c58 <Turn_Container+0x90>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
    Clear_Profile(fwd_profile);
 8003bf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bf2:	f7ff ff0b 	bl	8003a0c <Clear_Profile>
    Clear_Profile(rot_profile);
 8003bf6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003bf8:	f7ff ff08 	bl	8003a0c <Clear_Profile>
    Profile_Container(rot_parameters, rot_profile);
 8003bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bfe:	9301      	str	r3, [sp, #4]
 8003c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	f107 031c 	add.w	r3, r7, #28
 8003c08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c0a:	f7ff ffa7 	bl	8003b5c <Profile_Container>
    Clear_Profile(rot_profile);
 8003c0e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003c10:	f7ff fefc 	bl	8003a0c <Clear_Profile>
    fwd_parameters.end_speed = fwd_parameters.max_speed;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	613b      	str	r3, [r7, #16]
    fwd_parameters.distance += 7;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4910      	ldr	r1, [pc, #64]	@ (8003c5c <Turn_Container+0x94>)
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fc fee1 	bl	80009e4 <__addsf3>
 8003c22:	4603      	mov	r3, r0
 8003c24:	60bb      	str	r3, [r7, #8]
    adjust_steering = true;
 8003c26:	4b0c      	ldr	r3, [pc, #48]	@ (8003c58 <Turn_Container+0x90>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	701a      	strb	r2, [r3, #0]
    STEERING_ADJUSTMENT_LIMIT = 0.1;
 8003c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c60 <Turn_Container+0x98>)
 8003c2e:	4a0d      	ldr	r2, [pc, #52]	@ (8003c64 <Turn_Container+0x9c>)
 8003c30:	601a      	str	r2, [r3, #0]
    Profile_Container(fwd_parameters, fwd_profile);
 8003c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c34:	9301      	str	r3, [sp, #4]
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	f107 0308 	add.w	r3, r7, #8
 8003c3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c40:	f7ff ff8c 	bl	8003b5c <Profile_Container>
    STEERING_ADJUSTMENT_LIMIT = 0.1;
 8003c44:	4b06      	ldr	r3, [pc, #24]	@ (8003c60 <Turn_Container+0x98>)
 8003c46:	4a07      	ldr	r2, [pc, #28]	@ (8003c64 <Turn_Container+0x9c>)
 8003c48:	601a      	str	r2, [r3, #0]
}
 8003c4a:	bf00      	nop
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c52:	b004      	add	sp, #16
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	20000c84 	.word	0x20000c84
 8003c5c:	40e00000 	.word	0x40e00000
 8003c60:	2000000c 	.word	0x2000000c
 8003c64:	3dcccccd 	.word	0x3dcccccd

08003c68 <About_Face_Container>:
	adjust_steering = true;
	fwd_parameters.distance = 40;
	Profile_Container(fwd_parameters, fwd_profile);
}

void About_Face_Container(param_t fwd_parameters, param_t rev_parameters, param_t rot_parameters, profile_t* fwd_profile, profile_t* rot_profile, bool wall_realignment) {
 8003c68:	b084      	sub	sp, #16
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b082      	sub	sp, #8
 8003c6e:	af02      	add	r7, sp, #8
 8003c70:	f107 0c08 	add.w	ip, r7, #8
 8003c74:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (wall_realignment) { // Back up into existing wall
 8003c78:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d031      	beq.n	8003ce4 <About_Face_Container+0x7c>
		Profile_Container(fwd_parameters, fwd_profile);
 8003c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c82:	9301      	str	r3, [sp, #4]
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	f107 0308 	add.w	r3, r7, #8
 8003c8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c8e:	f7ff ff65 	bl	8003b5c <Profile_Container>
		adjust_steering = false;
 8003c92:	4b25      	ldr	r3, [pc, #148]	@ (8003d28 <About_Face_Container+0xc0>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
		Profile_Container(rot_parameters, rot_profile);
 8003c98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c9a:	9301      	str	r3, [sp, #4]
 8003c9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003ca4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ca6:	f7ff ff59 	bl	8003b5c <Profile_Container>
		Clear_Profile(rot_profile);
 8003caa:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003cac:	f7ff feae 	bl	8003a0c <Clear_Profile>
		Profile_Container(rev_parameters, fwd_profile);
 8003cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cb2:	9301      	str	r3, [sp, #4]
 8003cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	f107 031c 	add.w	r3, r7, #28
 8003cbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cbe:	f7ff ff4d 	bl	8003b5c <Profile_Container>
		fwd_profile->direction *= -1;
 8003cc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc6:	425a      	negs	r2, r3
 8003cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cca:	625a      	str	r2, [r3, #36]	@ 0x24
		fwd_profile->position = 0;
 8003ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	61da      	str	r2, [r3, #28]
		HAL_Delay(500);
 8003cd4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003cd8:	f001 f930 	bl	8004f3c <HAL_Delay>
		adjust_steering = true;
 8003cdc:	4b12      	ldr	r3, [pc, #72]	@ (8003d28 <About_Face_Container+0xc0>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	701a      	strb	r2, [r3, #0]
		Profile_Container(rot_parameters, rot_profile);
		Clear_Profile(rot_profile);
		HAL_Delay(500);
		adjust_steering = true;
	}
}
 8003ce2:	e01b      	b.n	8003d1c <About_Face_Container+0xb4>
		adjust_steering = false;
 8003ce4:	4b10      	ldr	r3, [pc, #64]	@ (8003d28 <About_Face_Container+0xc0>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	701a      	strb	r2, [r3, #0]
		Clear_Profile(rot_profile);
 8003cea:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003cec:	f7ff fe8e 	bl	8003a0c <Clear_Profile>
		Clear_Profile(fwd_profile);
 8003cf0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003cf2:	f7ff fe8b 	bl	8003a0c <Clear_Profile>
		Profile_Container(rot_parameters, rot_profile);
 8003cf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cf8:	9301      	str	r3, [sp, #4]
 8003cfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003d02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d04:	f7ff ff2a 	bl	8003b5c <Profile_Container>
		Clear_Profile(rot_profile);
 8003d08:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003d0a:	f7ff fe7f 	bl	8003a0c <Clear_Profile>
		HAL_Delay(500);
 8003d0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003d12:	f001 f913 	bl	8004f3c <HAL_Delay>
		adjust_steering = true;
 8003d16:	4b04      	ldr	r3, [pc, #16]	@ (8003d28 <About_Face_Container+0xc0>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	701a      	strb	r2, [r3, #0]
}
 8003d1c:	bf00      	nop
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d24:	b004      	add	sp, #16
 8003d26:	4770      	bx	lr
 8003d28:	20000c84 	.word	0x20000c84

08003d2c <Parameter_Packer>:

param_t Parameter_Packer(float distance, float max_speed, float end_speed, float acceleration, bool forward) {
 8003d2c:	b4b0      	push	{r4, r5, r7}
 8003d2e:	b08b      	sub	sp, #44	@ 0x2c
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	603b      	str	r3, [r7, #0]
	param_t return_parameters = {
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	61bb      	str	r3, [r7, #24]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	61fb      	str	r3, [r7, #28]
 8003d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d48:	623b      	str	r3, [r7, #32]
 8003d4a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8003d4e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			.end_speed = end_speed,
			.acceleration = acceleration,
			.forward = forward
	};

	return return_parameters;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	461d      	mov	r5, r3
 8003d56:	f107 0414 	add.w	r4, r7, #20
 8003d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	602b      	str	r3, [r5, #0]
}
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	372c      	adds	r7, #44	@ 0x2c
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bcb0      	pop	{r4, r5, r7}
 8003d6a:	4770      	bx	lr

08003d6c <Calculate_Braking_Distance>:

float Calculate_Braking_Distance(float current_speed, float end_speed, float inverse_acceleration) {
 8003d6c:	b5b0      	push	{r4, r5, r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
	return fabsf(current_speed * current_speed - end_speed * end_speed) * 0.5 * inverse_acceleration;
 8003d78:	68f9      	ldr	r1, [r7, #12]
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f7fc ff3a 	bl	8000bf4 <__aeabi_fmul>
 8003d80:	4603      	mov	r3, r0
 8003d82:	461c      	mov	r4, r3
 8003d84:	68b9      	ldr	r1, [r7, #8]
 8003d86:	68b8      	ldr	r0, [r7, #8]
 8003d88:	f7fc ff34 	bl	8000bf4 <__aeabi_fmul>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	4619      	mov	r1, r3
 8003d90:	4620      	mov	r0, r4
 8003d92:	f7fc fe25 	bl	80009e0 <__aeabi_fsub>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fc fb39 	bl	8000414 <__aeabi_f2d>
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	4b0d      	ldr	r3, [pc, #52]	@ (8003ddc <Calculate_Braking_Distance+0x70>)
 8003da8:	f7fc fb8c 	bl	80004c4 <__aeabi_dmul>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4614      	mov	r4, r2
 8003db2:	461d      	mov	r5, r3
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7fc fb2d 	bl	8000414 <__aeabi_f2d>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	4629      	mov	r1, r5
 8003dc2:	f7fc fb7f 	bl	80004c4 <__aeabi_dmul>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4610      	mov	r0, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f7fc fdb3 	bl	8000938 <__aeabi_d2f>
 8003dd2:	4603      	mov	r3, r0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bdb0      	pop	{r4, r5, r7, pc}
 8003ddc:	3fe00000 	.word	0x3fe00000

08003de0 <Update_Profile>:

void Update_Profile(profile_t* profile) {
 8003de0:	b590      	push	{r4, r7, lr}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	if (profile->state == IDLE || profile->state == COMPLETE) {
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	7d1b      	ldrb	r3, [r3, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80c1 	beq.w	8003f74 <Update_Profile+0x194>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	7d1b      	ldrb	r3, [r3, #20]
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	f000 80bc 	beq.w	8003f74 <Update_Profile+0x194>
		return;
	}

	float delta_v = profile->parameters.acceleration * SYSTICK_INTERVAL;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	4a5e      	ldr	r2, [pc, #376]	@ (8003f7c <Update_Profile+0x19c>)
 8003e02:	6812      	ldr	r2, [r2, #0]
 8003e04:	4611      	mov	r1, r2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fc fef4 	bl	8000bf4 <__aeabi_fmul>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	617b      	str	r3, [r7, #20]
	float remaining_distance = fabsf(profile->parameters.distance) - fabsf(profile->position);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e20:	4619      	mov	r1, r3
 8003e22:	4610      	mov	r0, r2
 8003e24:	f7fc fddc 	bl	80009e0 <__aeabi_fsub>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	613b      	str	r3, [r7, #16]
	if (profile->state == ACCELERATING) {
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	7d1b      	ldrb	r3, [r3, #20]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d130      	bne.n	8003e96 <Update_Profile+0xb6>
		float braking_distance = Calculate_Braking_Distance(profile->speed, profile->parameters.end_speed, profile->inverse_acceleration);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6998      	ldr	r0, [r3, #24]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6899      	ldr	r1, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	461a      	mov	r2, r3
 8003e42:	f7ff ff93 	bl	8003d6c <Calculate_Braking_Distance>
 8003e46:	60f8      	str	r0, [r7, #12]
		if (remaining_distance < braking_distance) {
 8003e48:	68f9      	ldr	r1, [r7, #12]
 8003e4a:	6938      	ldr	r0, [r7, #16]
 8003e4c:	f7fd f870 	bl	8000f30 <__aeabi_fcmplt>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d01f      	beq.n	8003e96 <Update_Profile+0xb6>
			profile->state = BRAKING;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2202      	movs	r2, #2
 8003e5a:	751a      	strb	r2, [r3, #20]
			if (profile->parameters.end_speed == 0) {
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f04f 0100 	mov.w	r1, #0
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fd f859 	bl	8000f1c <__aeabi_fcmpeq>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00e      	beq.n	8003e8e <Update_Profile+0xae>
				profile->parameters.max_speed = profile->direction * 5.0f;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fc fe69 	bl	8000b4c <__aeabi_i2f>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	4940      	ldr	r1, [pc, #256]	@ (8003f80 <Update_Profile+0x1a0>)
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fc feb8 	bl	8000bf4 <__aeabi_fmul>
 8003e84:	4603      	mov	r3, r0
 8003e86:	461a      	mov	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	605a      	str	r2, [r3, #4]
 8003e8c:	e003      	b.n	8003e96 <Update_Profile+0xb6>
			}
			else {
				profile->parameters.max_speed = profile->parameters.end_speed;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	605a      	str	r2, [r3, #4]
			}
		}
	}

	if (profile->speed < profile->parameters.max_speed) {
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	f7fd f845 	bl	8000f30 <__aeabi_fcmplt>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d018      	beq.n	8003ede <Update_Profile+0xfe>
		profile->speed += delta_v;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	6979      	ldr	r1, [r7, #20]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fc fd96 	bl	80009e4 <__addsf3>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	461a      	mov	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	619a      	str	r2, [r3, #24]
		if (profile->speed > profile->parameters.max_speed) {
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699a      	ldr	r2, [r3, #24]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	f7fd f84e 	bl	8000f6c <__aeabi_fcmpgt>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <Update_Profile+0xfe>
			profile->speed = profile->parameters.max_speed;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	619a      	str	r2, [r3, #24]
		}
	}
	if (profile->speed > profile->parameters.max_speed) {
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4610      	mov	r0, r2
 8003eea:	f7fd f83f 	bl	8000f6c <__aeabi_fcmpgt>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d018      	beq.n	8003f26 <Update_Profile+0x146>
		profile->speed -= delta_v;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	6979      	ldr	r1, [r7, #20]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fc fd70 	bl	80009e0 <__aeabi_fsub>
 8003f00:	4603      	mov	r3, r0
 8003f02:	461a      	mov	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	619a      	str	r2, [r3, #24]
		if (profile->speed < profile->parameters.max_speed) {
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699a      	ldr	r2, [r3, #24]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4619      	mov	r1, r3
 8003f12:	4610      	mov	r0, r2
 8003f14:	f7fd f80c 	bl	8000f30 <__aeabi_fcmplt>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <Update_Profile+0x146>
			profile->speed = profile->parameters.max_speed;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	619a      	str	r2, [r3, #24]
		}
	}

	profile->position += profile->speed * SYSTICK_INTERVAL;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69dc      	ldr	r4, [r3, #28]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	4a13      	ldr	r2, [pc, #76]	@ (8003f7c <Update_Profile+0x19c>)
 8003f30:	6812      	ldr	r2, [r2, #0]
 8003f32:	4611      	mov	r1, r2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fc fe5d 	bl	8000bf4 <__aeabi_fmul>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4620      	mov	r0, r4
 8003f40:	f7fc fd50 	bl	80009e4 <__addsf3>
 8003f44:	4603      	mov	r3, r0
 8003f46:	461a      	mov	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	61da      	str	r2, [r3, #28]
	if (profile->state != COMPLETE && remaining_distance < 0.125) {
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	7d1b      	ldrb	r3, [r3, #20]
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d010      	beq.n	8003f76 <Update_Profile+0x196>
 8003f54:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8003f58:	6938      	ldr	r0, [r7, #16]
 8003f5a:	f7fc ffe9 	bl	8000f30 <__aeabi_fcmplt>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <Update_Profile+0x196>
		profile->state = COMPLETE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2203      	movs	r2, #3
 8003f68:	751a      	strb	r2, [r3, #20]
		profile->parameters.max_speed = profile->parameters.end_speed;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	e000      	b.n	8003f76 <Update_Profile+0x196>
		return;
 8003f74:	bf00      	nop
	}
}
 8003f76:	371c      	adds	r7, #28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd90      	pop	{r4, r7, pc}
 8003f7c:	08008d60 	.word	0x08008d60
 8003f80:	40a00000 	.word	0x40a00000

08003f84 <LED_Power_Init>:
const float ADC_MAX_READING = 4096.0;
const float ADC_REFERENCE_V = 3.3;

const float BATTERY_MULTIPLIER = (ADC_REFERENCE_V / ADC_MAX_READING / DIVIDER_RATIO);

void LED_Power_Init() {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Power_GPIO_Port, LED_Power_Pin);
 8003f88:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003f8c:	4802      	ldr	r0, [pc, #8]	@ (8003f98 <LED_Power_Init+0x14>)
 8003f8e:	f002 f9ad 	bl	80062ec <HAL_GPIO_TogglePin>
}
 8003f92:	bf00      	nop
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40011000 	.word	0x40011000

08003f9c <Pulse_Buzzer>:
void Reset_Buffers(uint8_t rxBuff, uint8_t txBuff) {
	rxBuff = 0;
	txBuff = 0;
}

void Pulse_Buzzer(uint16_t delay) {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003fac:	4804      	ldr	r0, [pc, #16]	@ (8003fc0 <Pulse_Buzzer+0x24>)
 8003fae:	f002 f985 	bl	80062bc <HAL_GPIO_WritePin>
	buzzerDelay = delay;
 8003fb2:	4a04      	ldr	r2, [pc, #16]	@ (8003fc4 <Pulse_Buzzer+0x28>)
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	8013      	strh	r3, [r2, #0]
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40010c00 	.word	0x40010c00
 8003fc4:	20000c74 	.word	0x20000c74

08003fc8 <LED_Red_Toggle>:

void LED_Red_Toggle() {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 8003fcc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003fd0:	4802      	ldr	r0, [pc, #8]	@ (8003fdc <LED_Red_Toggle+0x14>)
 8003fd2:	f002 f98b 	bl	80062ec <HAL_GPIO_TogglePin>
}
 8003fd6:	bf00      	nop
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40010800 	.word	0x40010800

08003fe0 <LED_Blue_Set>:

void LED_Blue_Toggle() {
	HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
}

void LED_Blue_Set() {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003fea:	4802      	ldr	r0, [pc, #8]	@ (8003ff4 <LED_Blue_Set+0x14>)
 8003fec:	f002 f966 	bl	80062bc <HAL_GPIO_WritePin>
}
 8003ff0:	bf00      	nop
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40010800 	.word	0x40010800

08003ff8 <Calculate_Battery_Bias>:

float Calculate_Battery_Bias(float commanded_voltage) {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
	return (BATTERY_BIAS_SLOPE * commanded_voltage + BATTERY_BIAS_OFFSET) / BATTERY_RATIO;
 8004000:	4b0b      	ldr	r3, [pc, #44]	@ (8004030 <Calculate_Battery_Bias+0x38>)
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4618      	mov	r0, r3
 8004006:	f7fc fdf5 	bl	8000bf4 <__aeabi_fmul>
 800400a:	4603      	mov	r3, r0
 800400c:	461a      	mov	r2, r3
 800400e:	4b09      	ldr	r3, [pc, #36]	@ (8004034 <Calculate_Battery_Bias+0x3c>)
 8004010:	4619      	mov	r1, r3
 8004012:	4610      	mov	r0, r2
 8004014:	f7fc fce6 	bl	80009e4 <__addsf3>
 8004018:	4603      	mov	r3, r0
 800401a:	461a      	mov	r2, r3
 800401c:	4b06      	ldr	r3, [pc, #24]	@ (8004038 <Calculate_Battery_Bias+0x40>)
 800401e:	4619      	mov	r1, r3
 8004020:	4610      	mov	r0, r2
 8004022:	f7fc fe9b 	bl	8000d5c <__aeabi_fdiv>
 8004026:	4603      	mov	r3, r0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	3d9b089a 	.word	0x3d9b089a
 8004034:	3cbb98c8 	.word	0x3cbb98c8
 8004038:	3f69ba5e 	.word	0x3f69ba5e

0800403c <Read_Battery>:

double Read_Battery() {
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 8004042:	4815      	ldr	r0, [pc, #84]	@ (8004098 <Read_Battery+0x5c>)
 8004044:	f001 f876 	bl	8005134 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8004048:	f04f 31ff 	mov.w	r1, #4294967295
 800404c:	4812      	ldr	r0, [pc, #72]	@ (8004098 <Read_Battery+0x5c>)
 800404e:	f001 f94b 	bl	80052e8 <HAL_ADC_PollForConversion>
	uint16_t raw_adc = HAL_ADC_GetValue(&hadc2);
 8004052:	4811      	ldr	r0, [pc, #68]	@ (8004098 <Read_Battery+0x5c>)
 8004054:	f001 fa4e 	bl	80054f4 <HAL_ADC_GetValue>
 8004058:	4603      	mov	r3, r0
 800405a:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc2);
 800405c:	480e      	ldr	r0, [pc, #56]	@ (8004098 <Read_Battery+0x5c>)
 800405e:	f001 f917 	bl	8005290 <HAL_ADC_Stop>

	return raw_adc * BATTERY_MULTIPLIER + 1.0;
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	4618      	mov	r0, r3
 8004066:	f7fc fd71 	bl	8000b4c <__aeabi_i2f>
 800406a:	4603      	mov	r3, r0
 800406c:	4a0b      	ldr	r2, [pc, #44]	@ (800409c <Read_Battery+0x60>)
 800406e:	4611      	mov	r1, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f7fc fdbf 	bl	8000bf4 <__aeabi_fmul>
 8004076:	4603      	mov	r3, r0
 8004078:	4618      	mov	r0, r3
 800407a:	f7fc f9cb 	bl	8000414 <__aeabi_f2d>
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	4b07      	ldr	r3, [pc, #28]	@ (80040a0 <Read_Battery+0x64>)
 8004084:	f7fc f868 	bl	8000158 <__adddf3>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
}
 800408c:	4610      	mov	r0, r2
 800408e:	4619      	mov	r1, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	200000cc 	.word	0x200000cc
 800409c:	3b1e6666 	.word	0x3b1e6666
 80040a0:	3ff00000 	.word	0x3ff00000

080040a4 <Save_Maze_To_Flash>:

void Save_Maze_To_Flash(struct Maze* maze) {
 80040a4:	b5b0      	push	{r4, r5, r7, lr}
 80040a6:	b08a      	sub	sp, #40	@ 0x28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 80040ac:	f001 fdf2 	bl	8005c94 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef erase_init;
	uint32_t page_error = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	60bb      	str	r3, [r7, #8]

	erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60fb      	str	r3, [r7, #12]
	erase_init.PageAddress = MAZE_ADDRESS;
 80040b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004134 <Save_Maze_To_Flash+0x90>)
 80040ba:	617b      	str	r3, [r7, #20]
	erase_init.NbPages = NUM_PAGES;
 80040bc:	2303      	movs	r3, #3
 80040be:	61bb      	str	r3, [r7, #24]

	if (HAL_FLASHEx_Erase(&erase_init, &page_error) != HAL_OK) {
 80040c0:	f107 0208 	add.w	r2, r7, #8
 80040c4:	f107 030c 	add.w	r3, r7, #12
 80040c8:	4611      	mov	r1, r2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 feca 	bl	8005e64 <HAL_FLASHEx_Erase>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <Save_Maze_To_Flash+0x38>
		HAL_FLASH_Lock();
 80040d6:	f001 fe03 	bl	8005ce0 <HAL_FLASH_Lock>
		return;
 80040da:	e028      	b.n	800412e <Save_Maze_To_Flash+0x8a>
	}

	uint16_t *data = (uint16_t*) maze;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	623b      	str	r3, [r7, #32]
	size_t num_half_words = sizeof(struct Maze) / 2;
 80040e0:	f240 4396 	movw	r3, #1174	@ 0x496
 80040e4:	61fb      	str	r3, [r7, #28]

	for (size_t i = 0; i < num_half_words; i++) {
 80040e6:	2300      	movs	r3, #0
 80040e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ea:	e01a      	b.n	8004122 <Save_Maze_To_Flash+0x7e>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, MAZE_ADDRESS + (i * 2), data[i]) != HAL_OK) {
 80040ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	4a10      	ldr	r2, [pc, #64]	@ (8004134 <Save_Maze_To_Flash+0x90>)
 80040f2:	1899      	adds	r1, r3, r2
 80040f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	6a3a      	ldr	r2, [r7, #32]
 80040fa:	4413      	add	r3, r2
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2200      	movs	r2, #0
 8004102:	461c      	mov	r4, r3
 8004104:	4615      	mov	r5, r2
 8004106:	4622      	mov	r2, r4
 8004108:	462b      	mov	r3, r5
 800410a:	2001      	movs	r0, #1
 800410c:	f001 fd52 	bl	8005bb4 <HAL_FLASH_Program>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <Save_Maze_To_Flash+0x78>
			HAL_FLASH_Lock();
 8004116:	f001 fde3 	bl	8005ce0 <HAL_FLASH_Lock>
			return;
 800411a:	e008      	b.n	800412e <Save_Maze_To_Flash+0x8a>
	for (size_t i = 0; i < num_half_words; i++) {
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	3301      	adds	r3, #1
 8004120:	627b      	str	r3, [r7, #36]	@ 0x24
 8004122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	429a      	cmp	r2, r3
 8004128:	d3e0      	bcc.n	80040ec <Save_Maze_To_Flash+0x48>
		}
	}

	HAL_FLASH_Lock();
 800412a:	f001 fdd9 	bl	8005ce0 <HAL_FLASH_Lock>
}
 800412e:	3728      	adds	r7, #40	@ 0x28
 8004130:	46bd      	mov	sp, r7
 8004132:	bdb0      	pop	{r4, r5, r7, pc}
 8004134:	0800f800 	.word	0x0800f800

08004138 <Load_Maze_From_Flash>:

void Load_Maze_From_Flash(struct Maze* maze) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
	uint8_t* read_maze = (uint8_t*)MAZE_ADDRESS;
 8004140:	4b05      	ldr	r3, [pc, #20]	@ (8004158 <Load_Maze_From_Flash+0x20>)
 8004142:	60fb      	str	r3, [r7, #12]
	memcpy(maze, read_maze, sizeof(struct Maze));
 8004144:	f640 122c 	movw	r2, #2348	@ 0x92c
 8004148:	68f9      	ldr	r1, [r7, #12]
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f004 fd92 	bl	8008c74 <memcpy>
}
 8004150:	bf00      	nop
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	0800f800 	.word	0x0800f800

0800415c <ARM_Button>:

void ARM_Button() { // Top Button (closest to wheel)
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
	for (uint8_t i=0; i < 5; i++) {
 8004162:	2300      	movs	r3, #0
 8004164:	71fb      	strb	r3, [r7, #7]
 8004166:	e008      	b.n	800417a <ARM_Button+0x1e>
		LED_Red_Toggle();
 8004168:	f7ff ff2e 	bl	8003fc8 <LED_Red_Toggle>
		HAL_Delay(500);
 800416c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004170:	f000 fee4 	bl	8004f3c <HAL_Delay>
	for (uint8_t i=0; i < 5; i++) {
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	3301      	adds	r3, #1
 8004178:	71fb      	strb	r3, [r7, #7]
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	2b04      	cmp	r3, #4
 800417e:	d9f3      	bls.n	8004168 <ARM_Button+0xc>
	}
	armed = true;
 8004180:	4b03      	ldr	r3, [pc, #12]	@ (8004190 <ARM_Button+0x34>)
 8004182:	2201      	movs	r2, #1
 8004184:	701a      	strb	r2, [r3, #0]
}
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000248 	.word	0x20000248

08004194 <RACE_Button>:

void RACE_Button() { // Middle button
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
	#define SMOOTH_TURNS
	switch (mouse_mode) {
 8004198:	4b08      	ldr	r3, [pc, #32]	@ (80041bc <RACE_Button+0x28>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <RACE_Button+0x12>
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d002      	beq.n	80041aa <RACE_Button+0x16>
			break;
		case RACING:
//			mouse_mode = SEARCHING;
			break;
		default:
			return;
 80041a4:	e008      	b.n	80041b8 <RACE_Button+0x24>
			break;
 80041a6:	bf00      	nop
 80041a8:	e000      	b.n	80041ac <RACE_Button+0x18>
			break;
 80041aa:	bf00      	nop
	}

	LED_Blue_Set();
 80041ac:	f7ff ff18 	bl	8003fe0 <LED_Blue_Set>
	HAL_Delay(1000);
 80041b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80041b4:	f000 fec2 	bl	8004f3c <HAL_Delay>
}
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20000b80 	.word	0x20000b80

080041c0 <LOADMAZE_Button>:

void LOADMAZE_Button() { // Bottom button
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
	Load_Maze_From_Flash(&maze);
 80041c4:	480a      	ldr	r0, [pc, #40]	@ (80041f0 <LOADMAZE_Button+0x30>)
 80041c6:	f7ff ffb7 	bl	8004138 <Load_Maze_From_Flash>

	Set_Goal_Cell(&maze, 4);
 80041ca:	2104      	movs	r1, #4
 80041cc:	4808      	ldr	r0, [pc, #32]	@ (80041f0 <LOADMAZE_Button+0x30>)
 80041ce:	f7fe f8ff 	bl	80023d0 <Set_Goal_Cell>
	maze.mouse_dir = NORTH;
 80041d2:	4b07      	ldr	r3, [pc, #28]	@ (80041f0 <LOADMAZE_Button+0x30>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	721a      	strb	r2, [r3, #8]
	maze.mouse_pos.x = 0;
 80041d8:	4b05      	ldr	r3, [pc, #20]	@ (80041f0 <LOADMAZE_Button+0x30>)
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
	maze.mouse_pos.y = 0;
 80041de:	4b04      	ldr	r3, [pc, #16]	@ (80041f0 <LOADMAZE_Button+0x30>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	605a      	str	r2, [r3, #4]
	HAL_Delay(1000);
 80041e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80041e8:	f000 fea8 	bl	8004f3c <HAL_Delay>
}
 80041ec:	bf00      	nop
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	20000254 	.word	0x20000254

080041f4 <Systick>:
extern float steering_adjustment;
extern bool disable_adc;

uint32_t time_last_updated_ms = 0;

void Systick() {
 80041f4:	b5b0      	push	{r4, r5, r7, lr}
 80041f6:	af00      	add	r7, sp, #0
	global_time = HAL_GetTick();
 80041f8:	f000 fe96 	bl	8004f28 <HAL_GetTick>
 80041fc:	4603      	mov	r3, r0
 80041fe:	4a2b      	ldr	r2, [pc, #172]	@ (80042ac <Systick+0xb8>)
 8004200:	6013      	str	r3, [r2, #0]

	Debug_Mode();
 8004202:	f000 f865 	bl	80042d0 <Debug_Mode>
	Buzzer_Check();
 8004206:	f000 f8a1 	bl	800434c <Buzzer_Check>

	if (global_time > time_last_updated_ms + (SYSTICK_INTERVAL * 1000)) {
 800420a:	4b28      	ldr	r3, [pc, #160]	@ (80042ac <Systick+0xb8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7fc fc98 	bl	8000b44 <__aeabi_ui2f>
 8004214:	4604      	mov	r4, r0
 8004216:	4b26      	ldr	r3, [pc, #152]	@ (80042b0 <Systick+0xbc>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7fc fc92 	bl	8000b44 <__aeabi_ui2f>
 8004220:	4605      	mov	r5, r0
 8004222:	4b24      	ldr	r3, [pc, #144]	@ (80042b4 <Systick+0xc0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4924      	ldr	r1, [pc, #144]	@ (80042b8 <Systick+0xc4>)
 8004228:	4618      	mov	r0, r3
 800422a:	f7fc fce3 	bl	8000bf4 <__aeabi_fmul>
 800422e:	4603      	mov	r3, r0
 8004230:	4619      	mov	r1, r3
 8004232:	4628      	mov	r0, r5
 8004234:	f7fc fbd6 	bl	80009e4 <__addsf3>
 8004238:	4603      	mov	r3, r0
 800423a:	4619      	mov	r1, r3
 800423c:	4620      	mov	r0, r4
 800423e:	f7fc fe95 	bl	8000f6c <__aeabi_fcmpgt>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d100      	bne.n	800424a <Systick+0x56>
		// Update motor voltages
		Update_Motors(forward_profile.speed, rotational_profile.speed, steering_adjustment);

		time_last_updated_ms = global_time;
	}
}
 8004248:	e02d      	b.n	80042a6 <Systick+0xb2>
		Update_Encoders();
 800424a:	f7fd fbcd 	bl	80019e8 <Update_Encoders>
		Update_Profile(&forward_profile);
 800424e:	481b      	ldr	r0, [pc, #108]	@ (80042bc <Systick+0xc8>)
 8004250:	f7ff fdc6 	bl	8003de0 <Update_Profile>
		Update_Profile(&rotational_profile);
 8004254:	481a      	ldr	r0, [pc, #104]	@ (80042c0 <Systick+0xcc>)
 8004256:	f7ff fdc3 	bl	8003de0 <Update_Profile>
		if (!disable_adc) {
 800425a:	4b1a      	ldr	r3, [pc, #104]	@ (80042c4 <Systick+0xd0>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	f083 0301 	eor.w	r3, r3, #1
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d008      	beq.n	800427a <Systick+0x86>
			Poll_Sensors(&mouse_state);
 8004268:	4817      	ldr	r0, [pc, #92]	@ (80042c8 <Systick+0xd4>)
 800426a:	f000 f9e5 	bl	8004638 <Poll_Sensors>
			Wall_Front();
 800426e:	f000 fa3f 	bl	80046f0 <Wall_Front>
			Wall_Left();
 8004272:	f000 fa71 	bl	8004758 <Wall_Left>
			Wall_Right();
 8004276:	f000 fa97 	bl	80047a8 <Wall_Right>
		Calculate_Error();
 800427a:	f000 fb23 	bl	80048c4 <Calculate_Error>
		mouse_state.battery_voltage = Read_Battery();
 800427e:	f7ff fedd 	bl	800403c <Read_Battery>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4910      	ldr	r1, [pc, #64]	@ (80042c8 <Systick+0xd4>)
 8004288:	e9c1 2306 	strd	r2, r3, [r1, #24]
		Update_Motors(forward_profile.speed, rotational_profile.speed, steering_adjustment);
 800428c:	4b0b      	ldr	r3, [pc, #44]	@ (80042bc <Systick+0xc8>)
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	4a0b      	ldr	r2, [pc, #44]	@ (80042c0 <Systick+0xcc>)
 8004292:	6991      	ldr	r1, [r2, #24]
 8004294:	4a0d      	ldr	r2, [pc, #52]	@ (80042cc <Systick+0xd8>)
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fb75 	bl	8003988 <Update_Motors>
		time_last_updated_ms = global_time;
 800429e:	4b03      	ldr	r3, [pc, #12]	@ (80042ac <Systick+0xb8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a03      	ldr	r2, [pc, #12]	@ (80042b0 <Systick+0xbc>)
 80042a4:	6013      	str	r3, [r2, #0]
}
 80042a6:	bf00      	nop
 80042a8:	bdb0      	pop	{r4, r5, r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000244 	.word	0x20000244
 80042b0:	20000c78 	.word	0x20000c78
 80042b4:	08008d60 	.word	0x08008d60
 80042b8:	447a0000 	.word	0x447a0000
 80042bc:	20000b84 	.word	0x20000b84
 80042c0:	20000bac 	.word	0x20000bac
 80042c4:	20000c1c 	.word	0x20000c1c
 80042c8:	20000220 	.word	0x20000220
 80042cc:	20000c88 	.word	0x20000c88

080042d0 <Debug_Mode>:

void Debug_Mode() {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
	if (debugMode) {
 80042d4:	4b17      	ldr	r3, [pc, #92]	@ (8004334 <Debug_Mode+0x64>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d029      	beq.n	8004330 <Debug_Mode+0x60>
		debugCounter = (debugCounter + 1) % DEBUG_PERIOD;
 80042dc:	4b16      	ldr	r3, [pc, #88]	@ (8004338 <Debug_Mode+0x68>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	3301      	adds	r3, #1
 80042e2:	4a16      	ldr	r2, [pc, #88]	@ (800433c <Debug_Mode+0x6c>)
 80042e4:	fb82 1203 	smull	r1, r2, r2, r3
 80042e8:	1111      	asrs	r1, r2, #4
 80042ea:	17da      	asrs	r2, r3, #31
 80042ec:	1a8a      	subs	r2, r1, r2
 80042ee:	2132      	movs	r1, #50	@ 0x32
 80042f0:	fb01 f202 	mul.w	r2, r1, r2
 80042f4:	1a9a      	subs	r2, r3, r2
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004338 <Debug_Mode+0x68>)
 80042fa:	701a      	strb	r2, [r3, #0]
		if (debugCounter == 0) {
 80042fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004338 <Debug_Mode+0x68>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d115      	bne.n	8004330 <Debug_Mode+0x60>
			mouse_state.rpm.left_rpm = Calculate_RPM(objective_L, MOTOR_LEFT);
 8004304:	4b0e      	ldr	r3, [pc, #56]	@ (8004340 <Debug_Mode+0x70>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2100      	movs	r1, #0
 800430a:	4618      	mov	r0, r3
 800430c:	f7fd fb1c 	bl	8001948 <Calculate_RPM>
 8004310:	4603      	mov	r3, r0
 8004312:	461a      	mov	r2, r3
 8004314:	4b0b      	ldr	r3, [pc, #44]	@ (8004344 <Debug_Mode+0x74>)
 8004316:	809a      	strh	r2, [r3, #4]
			mouse_state.rpm.right_rpm  = Calculate_RPM(objective_R, MOTOR_RIGHT);
 8004318:	4b0b      	ldr	r3, [pc, #44]	@ (8004348 <Debug_Mode+0x78>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2101      	movs	r1, #1
 800431e:	4618      	mov	r0, r3
 8004320:	f7fd fb12 	bl	8001948 <Calculate_RPM>
 8004324:	4603      	mov	r3, r0
 8004326:	461a      	mov	r2, r3
 8004328:	4b06      	ldr	r3, [pc, #24]	@ (8004344 <Debug_Mode+0x74>)
 800432a:	80da      	strh	r2, [r3, #6]

			Debug_Packet_Send();
 800432c:	f7fd fa9a 	bl	8001864 <Debug_Packet_Send>
		}
	}
}
 8004330:	bf00      	nop
 8004332:	bd80      	pop	{r7, pc}
 8004334:	20000240 	.word	0x20000240
 8004338:	20000241 	.word	0x20000241
 800433c:	51eb851f 	.word	0x51eb851f
 8004340:	2000024c 	.word	0x2000024c
 8004344:	20000220 	.word	0x20000220
 8004348:	20000250 	.word	0x20000250

0800434c <Buzzer_Check>:

void Buzzer_Check() {
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
	if (buzzerDelay > 0) {
 8004350:	4b0a      	ldr	r3, [pc, #40]	@ (800437c <Buzzer_Check+0x30>)
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d007      	beq.n	800436a <Buzzer_Check+0x1e>
		buzzerDelay--;
 800435a:	4b08      	ldr	r3, [pc, #32]	@ (800437c <Buzzer_Check+0x30>)
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	4b05      	ldr	r3, [pc, #20]	@ (800437c <Buzzer_Check+0x30>)
 8004366:	801a      	strh	r2, [r3, #0]
	}
	else {
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
	}
}
 8004368:	e005      	b.n	8004376 <Buzzer_Check+0x2a>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800436a:	2200      	movs	r2, #0
 800436c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004370:	4803      	ldr	r0, [pc, #12]	@ (8004380 <Buzzer_Check+0x34>)
 8004372:	f001 ffa3 	bl	80062bc <HAL_GPIO_WritePin>
}
 8004376:	bf00      	nop
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000c74 	.word	0x20000c74
 8004380:	40010c00 	.word	0x40010c00

08004384 <ADC1_Select_CH9>:

float previous_error = 0;
bool adjust_steering = false;
float steering_adjustment = 0;

static void ADC1_Select_CH9(void) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800438a:	1d3b      	adds	r3, r7, #4
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	605a      	str	r2, [r3, #4]
 8004392:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_9;
 8004394:	2309      	movs	r3, #9
 8004396:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004398:	2301      	movs	r3, #1
 800439a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800439c:	2301      	movs	r3, #1
 800439e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel (&hadc1, &sConfig) != HAL_OK) {
 80043a0:	1d3b      	adds	r3, r7, #4
 80043a2:	4619      	mov	r1, r3
 80043a4:	4805      	ldr	r0, [pc, #20]	@ (80043bc <ADC1_Select_CH9+0x38>)
 80043a6:	f001 f8b1 	bl	800550c <HAL_ADC_ConfigChannel>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <ADC1_Select_CH9+0x30>
		Error_Handler();
 80043b0:	f7fd f9a1 	bl	80016f6 <Error_Handler>
	}
}
 80043b4:	bf00      	nop
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	2000009c 	.word	0x2000009c

080043c0 <ADC1_Select_CH8>:

static void ADC1_Select_CH8(void) {
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80043c6:	1d3b      	adds	r3, r7, #4
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	605a      	str	r2, [r3, #4]
 80043ce:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_8;
 80043d0:	2308      	movs	r3, #8
 80043d2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80043d4:	2301      	movs	r3, #1
 80043d6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80043d8:	2301      	movs	r3, #1
 80043da:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80043dc:	1d3b      	adds	r3, r7, #4
 80043de:	4619      	mov	r1, r3
 80043e0:	4805      	ldr	r0, [pc, #20]	@ (80043f8 <ADC1_Select_CH8+0x38>)
 80043e2:	f001 f893 	bl	800550c <HAL_ADC_ConfigChannel>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <ADC1_Select_CH8+0x30>
		Error_Handler();
 80043ec:	f7fd f983 	bl	80016f6 <Error_Handler>
	}
}
 80043f0:	bf00      	nop
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	2000009c 	.word	0x2000009c

080043fc <ADC1_Select_CH5>:

static void ADC1_Select_CH5(void) {
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8004402:	1d3b      	adds	r3, r7, #4
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	605a      	str	r2, [r3, #4]
 800440a:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_5;
 800440c:	2305      	movs	r3, #5
 800440e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004410:	2301      	movs	r3, #1
 8004412:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8004414:	2301      	movs	r3, #1
 8004416:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8004418:	1d3b      	adds	r3, r7, #4
 800441a:	4619      	mov	r1, r3
 800441c:	4805      	ldr	r0, [pc, #20]	@ (8004434 <ADC1_Select_CH5+0x38>)
 800441e:	f001 f875 	bl	800550c <HAL_ADC_ConfigChannel>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <ADC1_Select_CH5+0x30>
		Error_Handler();
 8004428:	f7fd f965 	bl	80016f6 <Error_Handler>
	}
}
 800442c:	bf00      	nop
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	2000009c 	.word	0x2000009c

08004438 <ADC1_Select_CH4>:

static void ADC1_Select_CH4(void) {
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800443e:	1d3b      	adds	r3, r7, #4
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	605a      	str	r2, [r3, #4]
 8004446:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_4;
 8004448:	2304      	movs	r3, #4
 800444a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800444c:	2301      	movs	r3, #1
 800444e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8004450:	2301      	movs	r3, #1
 8004452:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel (&hadc1, &sConfig) != HAL_OK) {
 8004454:	1d3b      	adds	r3, r7, #4
 8004456:	4619      	mov	r1, r3
 8004458:	4805      	ldr	r0, [pc, #20]	@ (8004470 <ADC1_Select_CH4+0x38>)
 800445a:	f001 f857 	bl	800550c <HAL_ADC_ConfigChannel>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <ADC1_Select_CH4+0x30>
		Error_Handler();
 8004464:	f7fd f947 	bl	80016f6 <Error_Handler>
	}
}
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	2000009c 	.word	0x2000009c

08004474 <Measure_Dist>:

uint16_t Measure_Dist(dist_t dist) { // Poll raw IR sensors
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef* emitter_port;
	uint16_t emitter_pin;

	switch(dist) {
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	2b03      	cmp	r3, #3
 8004482:	d82a      	bhi.n	80044da <Measure_Dist+0x66>
 8004484:	a201      	add	r2, pc, #4	@ (adr r2, 800448c <Measure_Dist+0x18>)
 8004486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448a:	bf00      	nop
 800448c:	0800449d 	.word	0x0800449d
 8004490:	080044ab 	.word	0x080044ab
 8004494:	080044bb 	.word	0x080044bb
 8004498:	080044cb 	.word	0x080044cb
	case DIST_FL:
		emitter_port = EMIT_FL_GPIO_Port;
 800449c:	4b20      	ldr	r3, [pc, #128]	@ (8004520 <Measure_Dist+0xac>)
 800449e:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_FL_Pin;
 80044a0:	2320      	movs	r3, #32
 80044a2:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH4();
 80044a4:	f7ff ffc8 	bl	8004438 <ADC1_Select_CH4>
		break;
 80044a8:	e018      	b.n	80044dc <Measure_Dist+0x68>
	case DIST_L:
		emitter_port = EMIT_L_GPIO_Port;
 80044aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004520 <Measure_Dist+0xac>)
 80044ac:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_L_Pin;
 80044ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044b2:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH5();
 80044b4:	f7ff ffa2 	bl	80043fc <ADC1_Select_CH5>
		break;
 80044b8:	e010      	b.n	80044dc <Measure_Dist+0x68>
	case DIST_R:
		emitter_port = EMIT_R_GPIO_Port;
 80044ba:	4b19      	ldr	r3, [pc, #100]	@ (8004520 <Measure_Dist+0xac>)
 80044bc:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_R_Pin;
 80044be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80044c2:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH8();
 80044c4:	f7ff ff7c 	bl	80043c0 <ADC1_Select_CH8>
		break;
 80044c8:	e008      	b.n	80044dc <Measure_Dist+0x68>
	case DIST_FR:
		emitter_port = EMIT_FR_GPIO_Port;
 80044ca:	4b15      	ldr	r3, [pc, #84]	@ (8004520 <Measure_Dist+0xac>)
 80044cc:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_FR_Pin;
 80044ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044d2:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH9();
 80044d4:	f7ff ff56 	bl	8004384 <ADC1_Select_CH9>
		break;
 80044d8:	e000      	b.n	80044dc <Measure_Dist+0x68>
	default:
		break;
 80044da:	bf00      	nop
	}
	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_SET);
 80044dc:	897b      	ldrh	r3, [r7, #10]
 80044de:	2201      	movs	r2, #1
 80044e0:	4619      	mov	r1, r3
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f001 feea 	bl	80062bc <HAL_GPIO_WritePin>

	HAL_ADC_Start(&hadc1);
 80044e8:	480e      	ldr	r0, [pc, #56]	@ (8004524 <Measure_Dist+0xb0>)
 80044ea:	f000 fe23 	bl	8005134 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80044ee:	f04f 31ff 	mov.w	r1, #4294967295
 80044f2:	480c      	ldr	r0, [pc, #48]	@ (8004524 <Measure_Dist+0xb0>)
 80044f4:	f000 fef8 	bl	80052e8 <HAL_ADC_PollForConversion>
	uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 80044f8:	480a      	ldr	r0, [pc, #40]	@ (8004524 <Measure_Dist+0xb0>)
 80044fa:	f000 fffb 	bl	80054f4 <HAL_ADC_GetValue>
 80044fe:	4603      	mov	r3, r0
 8004500:	813b      	strh	r3, [r7, #8]
	HAL_ADC_Stop(&hadc1);
 8004502:	4808      	ldr	r0, [pc, #32]	@ (8004524 <Measure_Dist+0xb0>)
 8004504:	f000 fec4 	bl	8005290 <HAL_ADC_Stop>

	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_RESET);
 8004508:	897b      	ldrh	r3, [r7, #10]
 800450a:	2200      	movs	r2, #0
 800450c:	4619      	mov	r1, r3
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f001 fed4 	bl	80062bc <HAL_GPIO_WritePin>

	return adc_val;
 8004514:	893b      	ldrh	r3, [r7, #8]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	40010c00 	.word	0x40010c00
 8004524:	2000009c 	.word	0x2000009c

08004528 <Calibrate_Readings>:

void Calibrate_Readings(mouse_state_t* mouse_state) { // Normalize raw IR values
 8004528:	b590      	push	{r4, r7, lr}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
	mouse_state->cal.front_left  = 200 * ((float)mouse_state->raw.front_left / (float)translation_FL);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	891b      	ldrh	r3, [r3, #8]
 8004534:	4618      	mov	r0, r3
 8004536:	f7fc fb05 	bl	8000b44 <__aeabi_ui2f>
 800453a:	4604      	mov	r4, r0
 800453c:	4b38      	ldr	r3, [pc, #224]	@ (8004620 <Calibrate_Readings+0xf8>)
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	4618      	mov	r0, r3
 8004542:	f7fc faff 	bl	8000b44 <__aeabi_ui2f>
 8004546:	4603      	mov	r3, r0
 8004548:	4619      	mov	r1, r3
 800454a:	4620      	mov	r0, r4
 800454c:	f7fc fc06 	bl	8000d5c <__aeabi_fdiv>
 8004550:	4603      	mov	r3, r0
 8004552:	4934      	ldr	r1, [pc, #208]	@ (8004624 <Calibrate_Readings+0xfc>)
 8004554:	4618      	mov	r0, r3
 8004556:	f7fc fb4d 	bl	8000bf4 <__aeabi_fmul>
 800455a:	4603      	mov	r3, r0
 800455c:	4618      	mov	r0, r3
 800455e:	f7fc fd0f 	bl	8000f80 <__aeabi_f2uiz>
 8004562:	4603      	mov	r3, r0
 8004564:	b29a      	uxth	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	821a      	strh	r2, [r3, #16]
	mouse_state->cal.left        = 100 * ((float)mouse_state->raw.left / (float)translation_L);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	895b      	ldrh	r3, [r3, #10]
 800456e:	4618      	mov	r0, r3
 8004570:	f7fc fae8 	bl	8000b44 <__aeabi_ui2f>
 8004574:	4604      	mov	r4, r0
 8004576:	4b2c      	ldr	r3, [pc, #176]	@ (8004628 <Calibrate_Readings+0x100>)
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f7fc fae2 	bl	8000b44 <__aeabi_ui2f>
 8004580:	4603      	mov	r3, r0
 8004582:	4619      	mov	r1, r3
 8004584:	4620      	mov	r0, r4
 8004586:	f7fc fbe9 	bl	8000d5c <__aeabi_fdiv>
 800458a:	4603      	mov	r3, r0
 800458c:	4927      	ldr	r1, [pc, #156]	@ (800462c <Calibrate_Readings+0x104>)
 800458e:	4618      	mov	r0, r3
 8004590:	f7fc fb30 	bl	8000bf4 <__aeabi_fmul>
 8004594:	4603      	mov	r3, r0
 8004596:	4618      	mov	r0, r3
 8004598:	f7fc fcf2 	bl	8000f80 <__aeabi_f2uiz>
 800459c:	4603      	mov	r3, r0
 800459e:	b29a      	uxth	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	825a      	strh	r2, [r3, #18]
	mouse_state->cal.right       = 100 * ((float)mouse_state->raw.right / (float)translation_R);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	899b      	ldrh	r3, [r3, #12]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fc facb 	bl	8000b44 <__aeabi_ui2f>
 80045ae:	4604      	mov	r4, r0
 80045b0:	4b1f      	ldr	r3, [pc, #124]	@ (8004630 <Calibrate_Readings+0x108>)
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fc fac5 	bl	8000b44 <__aeabi_ui2f>
 80045ba:	4603      	mov	r3, r0
 80045bc:	4619      	mov	r1, r3
 80045be:	4620      	mov	r0, r4
 80045c0:	f7fc fbcc 	bl	8000d5c <__aeabi_fdiv>
 80045c4:	4603      	mov	r3, r0
 80045c6:	4919      	ldr	r1, [pc, #100]	@ (800462c <Calibrate_Readings+0x104>)
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fc fb13 	bl	8000bf4 <__aeabi_fmul>
 80045ce:	4603      	mov	r3, r0
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fc fcd5 	bl	8000f80 <__aeabi_f2uiz>
 80045d6:	4603      	mov	r3, r0
 80045d8:	b29a      	uxth	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	829a      	strh	r2, [r3, #20]
	mouse_state->cal.front_right = 200 * ((float)mouse_state->raw.front_right / (float)translation_FR);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	89db      	ldrh	r3, [r3, #14]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fc faae 	bl	8000b44 <__aeabi_ui2f>
 80045e8:	4604      	mov	r4, r0
 80045ea:	4b12      	ldr	r3, [pc, #72]	@ (8004634 <Calibrate_Readings+0x10c>)
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fc faa8 	bl	8000b44 <__aeabi_ui2f>
 80045f4:	4603      	mov	r3, r0
 80045f6:	4619      	mov	r1, r3
 80045f8:	4620      	mov	r0, r4
 80045fa:	f7fc fbaf 	bl	8000d5c <__aeabi_fdiv>
 80045fe:	4603      	mov	r3, r0
 8004600:	4908      	ldr	r1, [pc, #32]	@ (8004624 <Calibrate_Readings+0xfc>)
 8004602:	4618      	mov	r0, r3
 8004604:	f7fc faf6 	bl	8000bf4 <__aeabi_fmul>
 8004608:	4603      	mov	r3, r0
 800460a:	4618      	mov	r0, r3
 800460c:	f7fc fcb8 	bl	8000f80 <__aeabi_f2uiz>
 8004610:	4603      	mov	r3, r0
 8004612:	b29a      	uxth	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	82da      	strh	r2, [r3, #22]
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	bd90      	pop	{r4, r7, pc}
 8004620:	20000010 	.word	0x20000010
 8004624:	43480000 	.word	0x43480000
 8004628:	20000012 	.word	0x20000012
 800462c:	42c80000 	.word	0x42c80000
 8004630:	20000014 	.word	0x20000014
 8004634:	20000016 	.word	0x20000016

08004638 <Poll_Sensors>:

void Poll_Sensors(mouse_state_t* mouse_state){ // Gather all raw IR values
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
	const uint8_t NUM_POLLS = 5;
 8004640:	2305      	movs	r3, #5
 8004642:	73bb      	strb	r3, [r7, #14]
	uint16_t front_left_total = 0;
 8004644:	2300      	movs	r3, #0
 8004646:	82fb      	strh	r3, [r7, #22]
	uint16_t left_total = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	82bb      	strh	r3, [r7, #20]
	uint16_t right_total = 0;
 800464c:	2300      	movs	r3, #0
 800464e:	827b      	strh	r3, [r7, #18]
	uint16_t front_right_total = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	823b      	strh	r3, [r7, #16]
	for (uint8_t i = 0; i < NUM_POLLS; ++i) {
 8004654:	2300      	movs	r3, #0
 8004656:	73fb      	strb	r3, [r7, #15]
 8004658:	e022      	b.n	80046a0 <Poll_Sensors+0x68>
		front_left_total += Measure_Dist(DIST_FL);
 800465a:	2000      	movs	r0, #0
 800465c:	f7ff ff0a 	bl	8004474 <Measure_Dist>
 8004660:	4603      	mov	r3, r0
 8004662:	461a      	mov	r2, r3
 8004664:	8afb      	ldrh	r3, [r7, #22]
 8004666:	4413      	add	r3, r2
 8004668:	82fb      	strh	r3, [r7, #22]
		left_total += Measure_Dist(DIST_L);
 800466a:	2001      	movs	r0, #1
 800466c:	f7ff ff02 	bl	8004474 <Measure_Dist>
 8004670:	4603      	mov	r3, r0
 8004672:	461a      	mov	r2, r3
 8004674:	8abb      	ldrh	r3, [r7, #20]
 8004676:	4413      	add	r3, r2
 8004678:	82bb      	strh	r3, [r7, #20]
		right_total += Measure_Dist(DIST_R);
 800467a:	2002      	movs	r0, #2
 800467c:	f7ff fefa 	bl	8004474 <Measure_Dist>
 8004680:	4603      	mov	r3, r0
 8004682:	461a      	mov	r2, r3
 8004684:	8a7b      	ldrh	r3, [r7, #18]
 8004686:	4413      	add	r3, r2
 8004688:	827b      	strh	r3, [r7, #18]
		front_right_total += Measure_Dist(DIST_FR);
 800468a:	2003      	movs	r0, #3
 800468c:	f7ff fef2 	bl	8004474 <Measure_Dist>
 8004690:	4603      	mov	r3, r0
 8004692:	461a      	mov	r2, r3
 8004694:	8a3b      	ldrh	r3, [r7, #16]
 8004696:	4413      	add	r3, r2
 8004698:	823b      	strh	r3, [r7, #16]
	for (uint8_t i = 0; i < NUM_POLLS; ++i) {
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	3301      	adds	r3, #1
 800469e:	73fb      	strb	r3, [r7, #15]
 80046a0:	7bfa      	ldrb	r2, [r7, #15]
 80046a2:	7bbb      	ldrb	r3, [r7, #14]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d3d8      	bcc.n	800465a <Poll_Sensors+0x22>
	}

	mouse_state->raw.front_left =  front_left_total / NUM_POLLS;
 80046a8:	8afa      	ldrh	r2, [r7, #22]
 80046aa:	7bbb      	ldrb	r3, [r7, #14]
 80046ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	811a      	strh	r2, [r3, #8]
	mouse_state->raw.left = left_total / NUM_POLLS;
 80046b6:	8aba      	ldrh	r2, [r7, #20]
 80046b8:	7bbb      	ldrb	r3, [r7, #14]
 80046ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80046be:	b29a      	uxth	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	815a      	strh	r2, [r3, #10]
	mouse_state->raw.right = right_total / NUM_POLLS;
 80046c4:	8a7a      	ldrh	r2, [r7, #18]
 80046c6:	7bbb      	ldrb	r3, [r7, #14]
 80046c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	819a      	strh	r2, [r3, #12]
	mouse_state->raw.front_right =  front_right_total / NUM_POLLS;
 80046d2:	8a3a      	ldrh	r2, [r7, #16]
 80046d4:	7bbb      	ldrb	r3, [r7, #14]
 80046d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80046da:	b29a      	uxth	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	81da      	strh	r2, [r3, #14]

	Calibrate_Readings(mouse_state);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7ff ff21 	bl	8004528 <Calibrate_Readings>
}
 80046e6:	bf00      	nop
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <Wall_Front>:

bool Wall_Front() {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
	uint16_t front_avg = (mouse_state.cal.front_left + mouse_state.cal.front_right) / 2;
 80046f6:	4b14      	ldr	r3, [pc, #80]	@ (8004748 <Wall_Front+0x58>)
 80046f8:	8a1b      	ldrh	r3, [r3, #16]
 80046fa:	461a      	mov	r2, r3
 80046fc:	4b12      	ldr	r3, [pc, #72]	@ (8004748 <Wall_Front+0x58>)
 80046fe:	8adb      	ldrh	r3, [r3, #22]
 8004700:	4413      	add	r3, r2
 8004702:	0fda      	lsrs	r2, r3, #31
 8004704:	4413      	add	r3, r2
 8004706:	105b      	asrs	r3, r3, #1
 8004708:	80fb      	strh	r3, [r7, #6]
	if (front_avg > wall_front_thresh) {
 800470a:	4b10      	ldr	r3, [pc, #64]	@ (800474c <Wall_Front+0x5c>)
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	88fa      	ldrh	r2, [r7, #6]
 8004710:	429a      	cmp	r2, r3
 8004712:	d909      	bls.n	8004728 <Wall_Front+0x38>
		wall_front = true;
 8004714:	4b0e      	ldr	r3, [pc, #56]	@ (8004750 <Wall_Front+0x60>)
 8004716:	2201      	movs	r2, #1
 8004718:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 800471a:	2200      	movs	r2, #0
 800471c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004720:	480c      	ldr	r0, [pc, #48]	@ (8004754 <Wall_Front+0x64>)
 8004722:	f001 fdcb 	bl	80062bc <HAL_GPIO_WritePin>
 8004726:	e008      	b.n	800473a <Wall_Front+0x4a>

	}
	else {
		wall_front = false;
 8004728:	4b09      	ldr	r3, [pc, #36]	@ (8004750 <Wall_Front+0x60>)
 800472a:	2200      	movs	r2, #0
 800472c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 800472e:	2201      	movs	r2, #1
 8004730:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004734:	4807      	ldr	r0, [pc, #28]	@ (8004754 <Wall_Front+0x64>)
 8004736:	f001 fdc1 	bl	80062bc <HAL_GPIO_WritePin>
	}
	return wall_front;
 800473a:	4b05      	ldr	r3, [pc, #20]	@ (8004750 <Wall_Front+0x60>)
 800473c:	781b      	ldrb	r3, [r3, #0]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000220 	.word	0x20000220
 800474c:	20000018 	.word	0x20000018
 8004750:	20000c7c 	.word	0x20000c7c
 8004754:	40010800 	.word	0x40010800

08004758 <Wall_Left>:

bool Wall_Left() {
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
	if (mouse_state.cal.left > wall_left_thresh) {
 800475c:	4b0e      	ldr	r3, [pc, #56]	@ (8004798 <Wall_Left+0x40>)
 800475e:	8a5a      	ldrh	r2, [r3, #18]
 8004760:	4b0e      	ldr	r3, [pc, #56]	@ (800479c <Wall_Left+0x44>)
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	429a      	cmp	r2, r3
 8004766:	d909      	bls.n	800477c <Wall_Left+0x24>
		wall_left = true;
 8004768:	4b0d      	ldr	r3, [pc, #52]	@ (80047a0 <Wall_Left+0x48>)
 800476a:	2201      	movs	r2, #1
 800476c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 800476e:	2200      	movs	r2, #0
 8004770:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004774:	480b      	ldr	r0, [pc, #44]	@ (80047a4 <Wall_Left+0x4c>)
 8004776:	f001 fda1 	bl	80062bc <HAL_GPIO_WritePin>
 800477a:	e008      	b.n	800478e <Wall_Left+0x36>
	}
	else {
		wall_left = false;
 800477c:	4b08      	ldr	r3, [pc, #32]	@ (80047a0 <Wall_Left+0x48>)
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 8004782:	2201      	movs	r2, #1
 8004784:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004788:	4806      	ldr	r0, [pc, #24]	@ (80047a4 <Wall_Left+0x4c>)
 800478a:	f001 fd97 	bl	80062bc <HAL_GPIO_WritePin>
	}
	return wall_left;
 800478e:	4b04      	ldr	r3, [pc, #16]	@ (80047a0 <Wall_Left+0x48>)
 8004790:	781b      	ldrb	r3, [r3, #0]
}
 8004792:	4618      	mov	r0, r3
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	20000220 	.word	0x20000220
 800479c:	2000001a 	.word	0x2000001a
 80047a0:	20000c7d 	.word	0x20000c7d
 80047a4:	40010800 	.word	0x40010800

080047a8 <Wall_Right>:

bool Wall_Right() {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
	if (mouse_state.cal.right > wall_right_thresh) {
 80047ac:	4b0e      	ldr	r3, [pc, #56]	@ (80047e8 <Wall_Right+0x40>)
 80047ae:	8a9a      	ldrh	r2, [r3, #20]
 80047b0:	4b0e      	ldr	r3, [pc, #56]	@ (80047ec <Wall_Right+0x44>)
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d909      	bls.n	80047cc <Wall_Right+0x24>
		wall_right = true;
 80047b8:	4b0d      	ldr	r3, [pc, #52]	@ (80047f0 <Wall_Right+0x48>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 80047be:	2200      	movs	r2, #0
 80047c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80047c4:	480b      	ldr	r0, [pc, #44]	@ (80047f4 <Wall_Right+0x4c>)
 80047c6:	f001 fd79 	bl	80062bc <HAL_GPIO_WritePin>
 80047ca:	e008      	b.n	80047de <Wall_Right+0x36>

	}
	else {
		wall_right = false;
 80047cc:	4b08      	ldr	r3, [pc, #32]	@ (80047f0 <Wall_Right+0x48>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 80047d2:	2201      	movs	r2, #1
 80047d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80047d8:	4806      	ldr	r0, [pc, #24]	@ (80047f4 <Wall_Right+0x4c>)
 80047da:	f001 fd6f 	bl	80062bc <HAL_GPIO_WritePin>
	}
	return wall_right;
 80047de:	4b04      	ldr	r3, [pc, #16]	@ (80047f0 <Wall_Right+0x48>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000220 	.word	0x20000220
 80047ec:	2000001c 	.word	0x2000001c
 80047f0:	20000c7e 	.word	0x20000c7e
 80047f4:	40010800 	.word	0x40010800

080047f8 <Calculate_Steering_Adjustment>:

void Calculate_Steering_Adjustment(int error) {
 80047f8:	b590      	push	{r4, r7, lr}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
	float adjustment = IR_KP * error + IR_KD * (error - previous_error);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7fc f9a3 	bl	8000b4c <__aeabi_i2f>
 8004806:	4603      	mov	r3, r0
 8004808:	4a28      	ldr	r2, [pc, #160]	@ (80048ac <Calculate_Steering_Adjustment+0xb4>)
 800480a:	4611      	mov	r1, r2
 800480c:	4618      	mov	r0, r3
 800480e:	f7fc f9f1 	bl	8000bf4 <__aeabi_fmul>
 8004812:	4603      	mov	r3, r0
 8004814:	461c      	mov	r4, r3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7fc f998 	bl	8000b4c <__aeabi_i2f>
 800481c:	4602      	mov	r2, r0
 800481e:	4b24      	ldr	r3, [pc, #144]	@ (80048b0 <Calculate_Steering_Adjustment+0xb8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4619      	mov	r1, r3
 8004824:	4610      	mov	r0, r2
 8004826:	f7fc f8db 	bl	80009e0 <__aeabi_fsub>
 800482a:	4603      	mov	r3, r0
 800482c:	461a      	mov	r2, r3
 800482e:	4b21      	ldr	r3, [pc, #132]	@ (80048b4 <Calculate_Steering_Adjustment+0xbc>)
 8004830:	4619      	mov	r1, r3
 8004832:	4610      	mov	r0, r2
 8004834:	f7fc f9de 	bl	8000bf4 <__aeabi_fmul>
 8004838:	4603      	mov	r3, r0
 800483a:	4619      	mov	r1, r3
 800483c:	4620      	mov	r0, r4
 800483e:	f7fc f8d1 	bl	80009e4 <__addsf3>
 8004842:	4603      	mov	r3, r0
 8004844:	60fb      	str	r3, [r7, #12]

	adjustment = adjustment > STEERING_ADJUSTMENT_LIMIT ? STEERING_ADJUSTMENT_LIMIT: adjustment;
 8004846:	4b1c      	ldr	r3, [pc, #112]	@ (80048b8 <Calculate_Steering_Adjustment+0xc0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4619      	mov	r1, r3
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f7fc fb8d 	bl	8000f6c <__aeabi_fcmpgt>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <Calculate_Steering_Adjustment+0x66>
 8004858:	4b17      	ldr	r3, [pc, #92]	@ (80048b8 <Calculate_Steering_Adjustment+0xc0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	e000      	b.n	8004860 <Calculate_Steering_Adjustment+0x68>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	60fb      	str	r3, [r7, #12]
	adjustment = adjustment < -STEERING_ADJUSTMENT_LIMIT ? -STEERING_ADJUSTMENT_LIMIT: adjustment;
 8004862:	4b15      	ldr	r3, [pc, #84]	@ (80048b8 <Calculate_Steering_Adjustment+0xc0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800486a:	4619      	mov	r1, r3
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f7fc fb5f 	bl	8000f30 <__aeabi_fcmplt>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d004      	beq.n	8004882 <Calculate_Steering_Adjustment+0x8a>
 8004878:	4b0f      	ldr	r3, [pc, #60]	@ (80048b8 <Calculate_Steering_Adjustment+0xc0>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004880:	e000      	b.n	8004884 <Calculate_Steering_Adjustment+0x8c>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	60fb      	str	r3, [r7, #12]

	steering_adjustment = rotational_profile.state == COMPLETE || rotational_profile.state == IDLE ? adjustment : 0;
 8004886:	4b0d      	ldr	r3, [pc, #52]	@ (80048bc <Calculate_Steering_Adjustment+0xc4>)
 8004888:	7d1b      	ldrb	r3, [r3, #20]
 800488a:	2b03      	cmp	r3, #3
 800488c:	d003      	beq.n	8004896 <Calculate_Steering_Adjustment+0x9e>
 800488e:	4b0b      	ldr	r3, [pc, #44]	@ (80048bc <Calculate_Steering_Adjustment+0xc4>)
 8004890:	7d1b      	ldrb	r3, [r3, #20]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <Calculate_Steering_Adjustment+0xa2>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	e001      	b.n	800489e <Calculate_Steering_Adjustment+0xa6>
 800489a:	f04f 0300 	mov.w	r3, #0
 800489e:	4a08      	ldr	r2, [pc, #32]	@ (80048c0 <Calculate_Steering_Adjustment+0xc8>)
 80048a0:	6013      	str	r3, [r2, #0]
}
 80048a2:	bf00      	nop
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd90      	pop	{r4, r7, pc}
 80048aa:	bf00      	nop
 80048ac:	3c03126f 	.word	0x3c03126f
 80048b0:	20000c80 	.word	0x20000c80
 80048b4:	3f4ccccd 	.word	0x3f4ccccd
 80048b8:	2000000c 	.word	0x2000000c
 80048bc:	20000bac 	.word	0x20000bac
 80048c0:	20000c88 	.word	0x20000c88

080048c4 <Calculate_Error>:

void Calculate_Error() {
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
	int error = 0;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
	int right_error = 100 - mouse_state.cal.right;
 80048ce:	4b20      	ldr	r3, [pc, #128]	@ (8004950 <Calculate_Error+0x8c>)
 80048d0:	8a9b      	ldrh	r3, [r3, #20]
 80048d2:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80048d6:	60bb      	str	r3, [r7, #8]
	int left_error = 100 - mouse_state.cal.left;
 80048d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004950 <Calculate_Error+0x8c>)
 80048da:	8a5b      	ldrh	r3, [r3, #18]
 80048dc:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80048e0:	607b      	str	r3, [r7, #4]

	if (adjust_steering && ((mouse_state.cal.front_left + mouse_state.cal.front_left) / 2) < FRONT_WALL_LIMIT) {
 80048e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004954 <Calculate_Error+0x90>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d024      	beq.n	8004934 <Calculate_Error+0x70>
 80048ea:	4b19      	ldr	r3, [pc, #100]	@ (8004950 <Calculate_Error+0x8c>)
 80048ec:	8a1b      	ldrh	r3, [r3, #16]
 80048ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d21e      	bcs.n	8004934 <Calculate_Error+0x70>
		if (wall_left && wall_right) {
 80048f6:	4b18      	ldr	r3, [pc, #96]	@ (8004958 <Calculate_Error+0x94>)
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d008      	beq.n	8004910 <Calculate_Error+0x4c>
 80048fe:	4b17      	ldr	r3, [pc, #92]	@ (800495c <Calculate_Error+0x98>)
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d004      	beq.n	8004910 <Calculate_Error+0x4c>
			error = right_error - left_error;
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	e011      	b.n	8004934 <Calculate_Error+0x70>
		}
		else if (wall_left) {
 8004910:	4b11      	ldr	r3, [pc, #68]	@ (8004958 <Calculate_Error+0x94>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d006      	beq.n	8004926 <Calculate_Error+0x62>
			error = -2 * left_error;
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	4613      	mov	r3, r2
 800491c:	07db      	lsls	r3, r3, #31
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	e006      	b.n	8004934 <Calculate_Error+0x70>
		}
		else if (wall_right) {
 8004926:	4b0d      	ldr	r3, [pc, #52]	@ (800495c <Calculate_Error+0x98>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <Calculate_Error+0x70>
			error = 2 * right_error;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	60fb      	str	r3, [r7, #12]
		}
	}

	Calculate_Steering_Adjustment(error);
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f7ff ff5f 	bl	80047f8 <Calculate_Steering_Adjustment>

	previous_error = error;
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f7fc f906 	bl	8000b4c <__aeabi_i2f>
 8004940:	4603      	mov	r3, r0
 8004942:	4a07      	ldr	r2, [pc, #28]	@ (8004960 <Calculate_Error+0x9c>)
 8004944:	6013      	str	r3, [r2, #0]
}
 8004946:	bf00      	nop
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20000220 	.word	0x20000220
 8004954:	20000c84 	.word	0x20000c84
 8004958:	20000c7d 	.word	0x20000c7d
 800495c:	20000c7e 	.word	0x20000c7e
 8004960:	20000c80 	.word	0x20000c80

08004964 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800496a:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <HAL_MspInit+0x5c>)
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	4a14      	ldr	r2, [pc, #80]	@ (80049c0 <HAL_MspInit+0x5c>)
 8004970:	f043 0301 	orr.w	r3, r3, #1
 8004974:	6193      	str	r3, [r2, #24]
 8004976:	4b12      	ldr	r3, [pc, #72]	@ (80049c0 <HAL_MspInit+0x5c>)
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	60bb      	str	r3, [r7, #8]
 8004980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004982:	4b0f      	ldr	r3, [pc, #60]	@ (80049c0 <HAL_MspInit+0x5c>)
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	4a0e      	ldr	r2, [pc, #56]	@ (80049c0 <HAL_MspInit+0x5c>)
 8004988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800498c:	61d3      	str	r3, [r2, #28]
 800498e:	4b0c      	ldr	r3, [pc, #48]	@ (80049c0 <HAL_MspInit+0x5c>)
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004996:	607b      	str	r3, [r7, #4]
 8004998:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800499a:	4b0a      	ldr	r3, [pc, #40]	@ (80049c4 <HAL_MspInit+0x60>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	4a04      	ldr	r2, [pc, #16]	@ (80049c4 <HAL_MspInit+0x60>)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049b6:	bf00      	nop
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr
 80049c0:	40021000 	.word	0x40021000
 80049c4:	40010000 	.word	0x40010000

080049c8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08c      	sub	sp, #48	@ 0x30
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049d0:	f107 0320 	add.w	r3, r7, #32
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	605a      	str	r2, [r3, #4]
 80049da:	609a      	str	r2, [r3, #8]
 80049dc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a33      	ldr	r2, [pc, #204]	@ (8004ab0 <HAL_ADC_MspInit+0xe8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d138      	bne.n	8004a5a <HAL_ADC_MspInit+0x92>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80049e8:	4b32      	ldr	r3, [pc, #200]	@ (8004ab4 <HAL_ADC_MspInit+0xec>)
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	4a31      	ldr	r2, [pc, #196]	@ (8004ab4 <HAL_ADC_MspInit+0xec>)
 80049ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049f2:	6193      	str	r3, [r2, #24]
 80049f4:	4b2f      	ldr	r3, [pc, #188]	@ (8004ab4 <HAL_ADC_MspInit+0xec>)
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049fc:	61fb      	str	r3, [r7, #28]
 80049fe:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a00:	4b2c      	ldr	r3, [pc, #176]	@ (8004ab4 <HAL_ADC_MspInit+0xec>)
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	4a2b      	ldr	r2, [pc, #172]	@ (8004ab4 <HAL_ADC_MspInit+0xec>)
 8004a06:	f043 0304 	orr.w	r3, r3, #4
 8004a0a:	6193      	str	r3, [r2, #24]
 8004a0c:	4b29      	ldr	r3, [pc, #164]	@ (8004ab4 <HAL_ADC_MspInit+0xec>)
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a18:	4b26      	ldr	r3, [pc, #152]	@ (8004ab4 <HAL_ADC_MspInit+0xec>)
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	4a25      	ldr	r2, [pc, #148]	@ (8004ab4 <HAL_ADC_MspInit+0xec>)
 8004a1e:	f043 0308 	orr.w	r3, r3, #8
 8004a22:	6193      	str	r3, [r2, #24]
 8004a24:	4b23      	ldr	r3, [pc, #140]	@ (8004ab4 <HAL_ADC_MspInit+0xec>)
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	697b      	ldr	r3, [r7, #20]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RECIV_FL_Pin|RECIV_L_Pin;
 8004a30:	2330      	movs	r3, #48	@ 0x30
 8004a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a34:	2303      	movs	r3, #3
 8004a36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a38:	f107 0320 	add.w	r3, r7, #32
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	481e      	ldr	r0, [pc, #120]	@ (8004ab8 <HAL_ADC_MspInit+0xf0>)
 8004a40:	f001 fab8 	bl	8005fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RECIV_R_Pin|RECIV_FR_Pin;
 8004a44:	2303      	movs	r3, #3
 8004a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a4c:	f107 0320 	add.w	r3, r7, #32
 8004a50:	4619      	mov	r1, r3
 8004a52:	481a      	ldr	r0, [pc, #104]	@ (8004abc <HAL_ADC_MspInit+0xf4>)
 8004a54:	f001 faae 	bl	8005fb4 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004a58:	e026      	b.n	8004aa8 <HAL_ADC_MspInit+0xe0>
  else if(hadc->Instance==ADC2)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a18      	ldr	r2, [pc, #96]	@ (8004ac0 <HAL_ADC_MspInit+0xf8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d121      	bne.n	8004aa8 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004a64:	4b13      	ldr	r3, [pc, #76]	@ (8004ab4 <HAL_ADC_MspInit+0xec>)
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	4a12      	ldr	r2, [pc, #72]	@ (8004ab4 <HAL_ADC_MspInit+0xec>)
 8004a6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a6e:	6193      	str	r3, [r2, #24]
 8004a70:	4b10      	ldr	r3, [pc, #64]	@ (8004ab4 <HAL_ADC_MspInit+0xec>)
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab4 <HAL_ADC_MspInit+0xec>)
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	4a0c      	ldr	r2, [pc, #48]	@ (8004ab4 <HAL_ADC_MspInit+0xec>)
 8004a82:	f043 0304 	orr.w	r3, r3, #4
 8004a86:	6193      	str	r3, [r2, #24]
 8004a88:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab4 <HAL_ADC_MspInit+0xec>)
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_METER_Pin;
 8004a94:	2302      	movs	r3, #2
 8004a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(V_METER_GPIO_Port, &GPIO_InitStruct);
 8004a9c:	f107 0320 	add.w	r3, r7, #32
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4805      	ldr	r0, [pc, #20]	@ (8004ab8 <HAL_ADC_MspInit+0xf0>)
 8004aa4:	f001 fa86 	bl	8005fb4 <HAL_GPIO_Init>
}
 8004aa8:	bf00      	nop
 8004aaa:	3730      	adds	r7, #48	@ 0x30
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40012400 	.word	0x40012400
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	40010800 	.word	0x40010800
 8004abc:	40010c00 	.word	0x40010c00
 8004ac0:	40012800 	.word	0x40012800

08004ac4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad4:	d10b      	bne.n	8004aee <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ad6:	4b08      	ldr	r3, [pc, #32]	@ (8004af8 <HAL_TIM_Base_MspInit+0x34>)
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	4a07      	ldr	r2, [pc, #28]	@ (8004af8 <HAL_TIM_Base_MspInit+0x34>)
 8004adc:	f043 0301 	orr.w	r3, r3, #1
 8004ae0:	61d3      	str	r3, [r2, #28]
 8004ae2:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <HAL_TIM_Base_MspInit+0x34>)
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	40021000 	.word	0x40021000

08004afc <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08a      	sub	sp, #40	@ 0x28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b04:	f107 0318 	add.w	r3, r7, #24
 8004b08:	2200      	movs	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	605a      	str	r2, [r3, #4]
 8004b0e:	609a      	str	r2, [r3, #8]
 8004b10:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a32      	ldr	r2, [pc, #200]	@ (8004be0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d12c      	bne.n	8004b76 <HAL_TIM_Encoder_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004b1c:	4b31      	ldr	r3, [pc, #196]	@ (8004be4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	4a30      	ldr	r2, [pc, #192]	@ (8004be4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b22:	f043 0302 	orr.w	r3, r3, #2
 8004b26:	61d3      	str	r3, [r2, #28]
 8004b28:	4b2e      	ldr	r3, [pc, #184]	@ (8004be4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	617b      	str	r3, [r7, #20]
 8004b32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b34:	4b2b      	ldr	r3, [pc, #172]	@ (8004be4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	4a2a      	ldr	r2, [pc, #168]	@ (8004be4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b3a:	f043 0304 	orr.w	r3, r3, #4
 8004b3e:	6193      	str	r3, [r2, #24]
 8004b40:	4b28      	ldr	r3, [pc, #160]	@ (8004be4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ML_ENC_A_Pin|ML_ENC_B_Pin;
 8004b4c:	23c0      	movs	r3, #192	@ 0xc0
 8004b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b50:	2300      	movs	r3, #0
 8004b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b54:	2300      	movs	r3, #0
 8004b56:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b58:	f107 0318 	add.w	r3, r7, #24
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4822      	ldr	r0, [pc, #136]	@ (8004be8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004b60:	f001 fa28 	bl	8005fb4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004b64:	2200      	movs	r2, #0
 8004b66:	2100      	movs	r1, #0
 8004b68:	201d      	movs	r0, #29
 8004b6a:	f000 ff3a 	bl	80059e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004b6e:	201d      	movs	r0, #29
 8004b70:	f000 ff53 	bl	8005a1a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004b74:	e030      	b.n	8004bd8 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8004bec <HAL_TIM_Encoder_MspInit+0xf0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d12b      	bne.n	8004bd8 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004b80:	4b18      	ldr	r3, [pc, #96]	@ (8004be4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	4a17      	ldr	r2, [pc, #92]	@ (8004be4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b86:	f043 0304 	orr.w	r3, r3, #4
 8004b8a:	61d3      	str	r3, [r2, #28]
 8004b8c:	4b15      	ldr	r3, [pc, #84]	@ (8004be4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b98:	4b12      	ldr	r3, [pc, #72]	@ (8004be4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	4a11      	ldr	r2, [pc, #68]	@ (8004be4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004b9e:	f043 0308 	orr.w	r3, r3, #8
 8004ba2:	6193      	str	r3, [r2, #24]
 8004ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8004be4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	f003 0308 	and.w	r3, r3, #8
 8004bac:	60bb      	str	r3, [r7, #8]
 8004bae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MR_ENC_B_Pin|MR_ENC_A_Pin;
 8004bb0:	23c0      	movs	r3, #192	@ 0xc0
 8004bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bbc:	f107 0318 	add.w	r3, r7, #24
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	480b      	ldr	r0, [pc, #44]	@ (8004bf0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004bc4:	f001 f9f6 	bl	8005fb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2100      	movs	r1, #0
 8004bcc:	201e      	movs	r0, #30
 8004bce:	f000 ff08 	bl	80059e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004bd2:	201e      	movs	r0, #30
 8004bd4:	f000 ff21 	bl	8005a1a <HAL_NVIC_EnableIRQ>
}
 8004bd8:	bf00      	nop
 8004bda:	3728      	adds	r7, #40	@ 0x28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40021000 	.word	0x40021000
 8004be8:	40010800 	.word	0x40010800
 8004bec:	40000800 	.word	0x40000800
 8004bf0:	40010c00 	.word	0x40010c00

08004bf4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bfc:	f107 0310 	add.w	r3, r7, #16
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	605a      	str	r2, [r3, #4]
 8004c06:	609a      	str	r2, [r3, #8]
 8004c08:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c12:	d117      	bne.n	8004c44 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c14:	4b0d      	ldr	r3, [pc, #52]	@ (8004c4c <HAL_TIM_MspPostInit+0x58>)
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	4a0c      	ldr	r2, [pc, #48]	@ (8004c4c <HAL_TIM_MspPostInit+0x58>)
 8004c1a:	f043 0304 	orr.w	r3, r3, #4
 8004c1e:	6193      	str	r3, [r2, #24]
 8004c20:	4b0a      	ldr	r3, [pc, #40]	@ (8004c4c <HAL_TIM_MspPostInit+0x58>)
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ML_PWM_Pin|MR_PWM_Pin;
 8004c2c:	230c      	movs	r3, #12
 8004c2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c30:	2302      	movs	r3, #2
 8004c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c34:	2302      	movs	r3, #2
 8004c36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c38:	f107 0310 	add.w	r3, r7, #16
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4804      	ldr	r0, [pc, #16]	@ (8004c50 <HAL_TIM_MspPostInit+0x5c>)
 8004c40:	f001 f9b8 	bl	8005fb4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004c44:	bf00      	nop
 8004c46:	3720      	adds	r7, #32
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	40010800 	.word	0x40010800

08004c54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c5c:	f107 0310 	add.w	r3, r7, #16
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	605a      	str	r2, [r3, #4]
 8004c66:	609a      	str	r2, [r3, #8]
 8004c68:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a20      	ldr	r2, [pc, #128]	@ (8004cf0 <HAL_UART_MspInit+0x9c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d139      	bne.n	8004ce8 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c74:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf4 <HAL_UART_MspInit+0xa0>)
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf4 <HAL_UART_MspInit+0xa0>)
 8004c7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c7e:	6193      	str	r3, [r2, #24]
 8004c80:	4b1c      	ldr	r3, [pc, #112]	@ (8004cf4 <HAL_UART_MspInit+0xa0>)
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c88:	60fb      	str	r3, [r7, #12]
 8004c8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c8c:	4b19      	ldr	r3, [pc, #100]	@ (8004cf4 <HAL_UART_MspInit+0xa0>)
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	4a18      	ldr	r2, [pc, #96]	@ (8004cf4 <HAL_UART_MspInit+0xa0>)
 8004c92:	f043 0304 	orr.w	r3, r3, #4
 8004c96:	6193      	str	r3, [r2, #24]
 8004c98:	4b16      	ldr	r3, [pc, #88]	@ (8004cf4 <HAL_UART_MspInit+0xa0>)
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	60bb      	str	r3, [r7, #8]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ca4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ca8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004caa:	2302      	movs	r3, #2
 8004cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cb2:	f107 0310 	add.w	r3, r7, #16
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	480f      	ldr	r0, [pc, #60]	@ (8004cf8 <HAL_UART_MspInit+0xa4>)
 8004cba:	f001 f97b 	bl	8005fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004cbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ccc:	f107 0310 	add.w	r3, r7, #16
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4809      	ldr	r0, [pc, #36]	@ (8004cf8 <HAL_UART_MspInit+0xa4>)
 8004cd4:	f001 f96e 	bl	8005fb4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2100      	movs	r1, #0
 8004cdc:	2025      	movs	r0, #37	@ 0x25
 8004cde:	f000 fe80 	bl	80059e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004ce2:	2025      	movs	r0, #37	@ 0x25
 8004ce4:	f000 fe99 	bl	8005a1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8004ce8:	bf00      	nop
 8004cea:	3720      	adds	r7, #32
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40013800 	.word	0x40013800
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	40010800 	.word	0x40010800

08004cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d00:	bf00      	nop
 8004d02:	e7fd      	b.n	8004d00 <NMI_Handler+0x4>

08004d04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d08:	bf00      	nop
 8004d0a:	e7fd      	b.n	8004d08 <HardFault_Handler+0x4>

08004d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d10:	bf00      	nop
 8004d12:	e7fd      	b.n	8004d10 <MemManage_Handler+0x4>

08004d14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d18:	bf00      	nop
 8004d1a:	e7fd      	b.n	8004d18 <BusFault_Handler+0x4>

08004d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d20:	bf00      	nop
 8004d22:	e7fd      	b.n	8004d20 <UsageFault_Handler+0x4>

08004d24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d28:	bf00      	nop
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bc80      	pop	{r7}
 8004d2e:	4770      	bx	lr

08004d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d34:	bf00      	nop
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr

08004d3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d40:	bf00      	nop
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bc80      	pop	{r7}
 8004d46:	4770      	bx	lr

08004d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d4c:	f000 f8da 	bl	8004f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Systick();
 8004d50:	f7ff fa50 	bl	80041f4 <Systick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004d54:	bf00      	nop
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ARM_SW1_Pin);
 8004d5c:	2010      	movs	r0, #16
 8004d5e:	f001 fadf 	bl	8006320 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004d62:	bf00      	nop
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004d6c:	4802      	ldr	r0, [pc, #8]	@ (8004d78 <TIM3_IRQHandler+0x10>)
 8004d6e:	f002 fb05 	bl	800737c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004d72:	bf00      	nop
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000144 	.word	0x20000144

08004d7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004d80:	4802      	ldr	r0, [pc, #8]	@ (8004d8c <TIM4_IRQHandler+0x10>)
 8004d82:	f002 fafb 	bl	800737c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004d86:	bf00      	nop
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	2000018c 	.word	0x2000018c

08004d90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004d94:	4802      	ldr	r0, [pc, #8]	@ (8004da0 <USART1_IRQHandler+0x10>)
 8004d96:	f003 f959 	bl	800804c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004d9a:	bf00      	nop
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	200001d4 	.word	0x200001d4

08004da4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RACE_SW2_Pin);
 8004da8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004dac:	f001 fab8 	bl	8006320 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004db0:	bf00      	nop
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004dbc:	4a14      	ldr	r2, [pc, #80]	@ (8004e10 <_sbrk+0x5c>)
 8004dbe:	4b15      	ldr	r3, [pc, #84]	@ (8004e14 <_sbrk+0x60>)
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004dc8:	4b13      	ldr	r3, [pc, #76]	@ (8004e18 <_sbrk+0x64>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d102      	bne.n	8004dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004dd0:	4b11      	ldr	r3, [pc, #68]	@ (8004e18 <_sbrk+0x64>)
 8004dd2:	4a12      	ldr	r2, [pc, #72]	@ (8004e1c <_sbrk+0x68>)
 8004dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004dd6:	4b10      	ldr	r3, [pc, #64]	@ (8004e18 <_sbrk+0x64>)
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4413      	add	r3, r2
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d207      	bcs.n	8004df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004de4:	f003 ff1a 	bl	8008c1c <__errno>
 8004de8:	4603      	mov	r3, r0
 8004dea:	220c      	movs	r2, #12
 8004dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004dee:	f04f 33ff 	mov.w	r3, #4294967295
 8004df2:	e009      	b.n	8004e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004df4:	4b08      	ldr	r3, [pc, #32]	@ (8004e18 <_sbrk+0x64>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004dfa:	4b07      	ldr	r3, [pc, #28]	@ (8004e18 <_sbrk+0x64>)
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4413      	add	r3, r2
 8004e02:	4a05      	ldr	r2, [pc, #20]	@ (8004e18 <_sbrk+0x64>)
 8004e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e06:	68fb      	ldr	r3, [r7, #12]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	20005000 	.word	0x20005000
 8004e14:	00000400 	.word	0x00000400
 8004e18:	20000c8c 	.word	0x20000c8c
 8004e1c:	20000e00 	.word	0x20000e00

08004e20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e24:	bf00      	nop
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bc80      	pop	{r7}
 8004e2a:	4770      	bx	lr

08004e2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004e2c:	f7ff fff8 	bl	8004e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004e30:	480b      	ldr	r0, [pc, #44]	@ (8004e60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004e32:	490c      	ldr	r1, [pc, #48]	@ (8004e64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004e34:	4a0c      	ldr	r2, [pc, #48]	@ (8004e68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e38:	e002      	b.n	8004e40 <LoopCopyDataInit>

08004e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e3e:	3304      	adds	r3, #4

08004e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e44:	d3f9      	bcc.n	8004e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e46:	4a09      	ldr	r2, [pc, #36]	@ (8004e6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004e48:	4c09      	ldr	r4, [pc, #36]	@ (8004e70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e4c:	e001      	b.n	8004e52 <LoopFillZerobss>

08004e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e50:	3204      	adds	r2, #4

08004e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e54:	d3fb      	bcc.n	8004e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e56:	f003 fee7 	bl	8008c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004e5a:	f7fc f8b1 	bl	8000fc0 <main>
  bx lr
 8004e5e:	4770      	bx	lr
  ldr r0, =_sdata
 8004e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e64:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8004e68:	08008dac 	.word	0x08008dac
  ldr r2, =_sbss
 8004e6c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8004e70:	20000e00 	.word	0x20000e00

08004e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004e74:	e7fe      	b.n	8004e74 <ADC1_2_IRQHandler>
	...

08004e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e7c:	4b08      	ldr	r3, [pc, #32]	@ (8004ea0 <HAL_Init+0x28>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a07      	ldr	r2, [pc, #28]	@ (8004ea0 <HAL_Init+0x28>)
 8004e82:	f043 0310 	orr.w	r3, r3, #16
 8004e86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e88:	2003      	movs	r0, #3
 8004e8a:	f000 fd9f 	bl	80059cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e8e:	200e      	movs	r0, #14
 8004e90:	f000 f808 	bl	8004ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e94:	f7ff fd66 	bl	8004964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40022000 	.word	0x40022000

08004ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004eac:	4b12      	ldr	r3, [pc, #72]	@ (8004ef8 <HAL_InitTick+0x54>)
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	4b12      	ldr	r3, [pc, #72]	@ (8004efc <HAL_InitTick+0x58>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fdb7 	bl	8005a36 <HAL_SYSTICK_Config>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e00e      	b.n	8004ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b0f      	cmp	r3, #15
 8004ed6:	d80a      	bhi.n	8004eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ed8:	2200      	movs	r2, #0
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee0:	f000 fd7f 	bl	80059e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ee4:	4a06      	ldr	r2, [pc, #24]	@ (8004f00 <HAL_InitTick+0x5c>)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	e000      	b.n	8004ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	20000020 	.word	0x20000020
 8004efc:	20000028 	.word	0x20000028
 8004f00:	20000024 	.word	0x20000024

08004f04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f08:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <HAL_IncTick+0x1c>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	4b05      	ldr	r3, [pc, #20]	@ (8004f24 <HAL_IncTick+0x20>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4413      	add	r3, r2
 8004f14:	4a03      	ldr	r2, [pc, #12]	@ (8004f24 <HAL_IncTick+0x20>)
 8004f16:	6013      	str	r3, [r2, #0]
}
 8004f18:	bf00      	nop
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr
 8004f20:	20000028 	.word	0x20000028
 8004f24:	20000c90 	.word	0x20000c90

08004f28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8004f2c:	4b02      	ldr	r3, [pc, #8]	@ (8004f38 <HAL_GetTick+0x10>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr
 8004f38:	20000c90 	.word	0x20000c90

08004f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f44:	f7ff fff0 	bl	8004f28 <HAL_GetTick>
 8004f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f54:	d005      	beq.n	8004f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f56:	4b0a      	ldr	r3, [pc, #40]	@ (8004f80 <HAL_Delay+0x44>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4413      	add	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f62:	bf00      	nop
 8004f64:	f7ff ffe0 	bl	8004f28 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d8f7      	bhi.n	8004f64 <HAL_Delay+0x28>
  {
  }
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20000028 	.word	0x20000028

08004f84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e0be      	b.n	8005124 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d109      	bne.n	8004fc8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff fd00 	bl	80049c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 fbf1 	bl	80057b0 <ADC_ConversionStop_Disable>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd6:	f003 0310 	and.w	r3, r3, #16
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f040 8099 	bne.w	8005112 <HAL_ADC_Init+0x18e>
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f040 8095 	bne.w	8005112 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004ff0:	f023 0302 	bic.w	r3, r3, #2
 8004ff4:	f043 0202 	orr.w	r2, r3, #2
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005004:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	7b1b      	ldrb	r3, [r3, #12]
 800500a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800500c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	4313      	orrs	r3, r2
 8005012:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800501c:	d003      	beq.n	8005026 <HAL_ADC_Init+0xa2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d102      	bne.n	800502c <HAL_ADC_Init+0xa8>
 8005026:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800502a:	e000      	b.n	800502e <HAL_ADC_Init+0xaa>
 800502c:	2300      	movs	r3, #0
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	7d1b      	ldrb	r3, [r3, #20]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d119      	bne.n	8005070 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	7b1b      	ldrb	r3, [r3, #12]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d109      	bne.n	8005058 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	3b01      	subs	r3, #1
 800504a:	035a      	lsls	r2, r3, #13
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005054:	613b      	str	r3, [r7, #16]
 8005056:	e00b      	b.n	8005070 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505c:	f043 0220 	orr.w	r2, r3, #32
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005068:	f043 0201 	orr.w	r2, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	430a      	orrs	r2, r1
 8005082:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	4b28      	ldr	r3, [pc, #160]	@ (800512c <HAL_ADC_Init+0x1a8>)
 800508c:	4013      	ands	r3, r2
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6812      	ldr	r2, [r2, #0]
 8005092:	68b9      	ldr	r1, [r7, #8]
 8005094:	430b      	orrs	r3, r1
 8005096:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050a0:	d003      	beq.n	80050aa <HAL_ADC_Init+0x126>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d104      	bne.n	80050b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	051b      	lsls	r3, r3, #20
 80050b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ba:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	4b18      	ldr	r3, [pc, #96]	@ (8005130 <HAL_ADC_Init+0x1ac>)
 80050d0:	4013      	ands	r3, r2
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d10b      	bne.n	80050f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e2:	f023 0303 	bic.w	r3, r3, #3
 80050e6:	f043 0201 	orr.w	r2, r3, #1
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80050ee:	e018      	b.n	8005122 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f4:	f023 0312 	bic.w	r3, r3, #18
 80050f8:	f043 0210 	orr.w	r2, r3, #16
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005104:	f043 0201 	orr.w	r2, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005110:	e007      	b.n	8005122 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005116:	f043 0210 	orr.w	r2, r3, #16
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005122:	7dfb      	ldrb	r3, [r7, #23]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	ffe1f7fd 	.word	0xffe1f7fd
 8005130:	ff1f0efe 	.word	0xff1f0efe

08005134 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005146:	2b01      	cmp	r3, #1
 8005148:	d101      	bne.n	800514e <HAL_ADC_Start+0x1a>
 800514a:	2302      	movs	r3, #2
 800514c:	e098      	b.n	8005280 <HAL_ADC_Start+0x14c>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fad0 	bl	80056fc <ADC_Enable>
 800515c:	4603      	mov	r3, r0
 800515e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b00      	cmp	r3, #0
 8005164:	f040 8087 	bne.w	8005276 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005170:	f023 0301 	bic.w	r3, r3, #1
 8005174:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a41      	ldr	r2, [pc, #260]	@ (8005288 <HAL_ADC_Start+0x154>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d105      	bne.n	8005192 <HAL_ADC_Start+0x5e>
 8005186:	4b41      	ldr	r3, [pc, #260]	@ (800528c <HAL_ADC_Start+0x158>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d115      	bne.n	80051be <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005196:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d026      	beq.n	80051fa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80051b4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80051bc:	e01d      	b.n	80051fa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a2f      	ldr	r2, [pc, #188]	@ (800528c <HAL_ADC_Start+0x158>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d004      	beq.n	80051de <HAL_ADC_Start+0xaa>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a2b      	ldr	r2, [pc, #172]	@ (8005288 <HAL_ADC_Start+0x154>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d10d      	bne.n	80051fa <HAL_ADC_Start+0xc6>
 80051de:	4b2b      	ldr	r3, [pc, #172]	@ (800528c <HAL_ADC_Start+0x158>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d007      	beq.n	80051fa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80051f2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d006      	beq.n	8005214 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520a:	f023 0206 	bic.w	r2, r3, #6
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005212:	e002      	b.n	800521a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f06f 0202 	mvn.w	r2, #2
 800522a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005236:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800523a:	d113      	bne.n	8005264 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005240:	4a11      	ldr	r2, [pc, #68]	@ (8005288 <HAL_ADC_Start+0x154>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d105      	bne.n	8005252 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005246:	4b11      	ldr	r3, [pc, #68]	@ (800528c <HAL_ADC_Start+0x158>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800524e:	2b00      	cmp	r3, #0
 8005250:	d108      	bne.n	8005264 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8005260:	609a      	str	r2, [r3, #8]
 8005262:	e00c      	b.n	800527e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005272:	609a      	str	r2, [r3, #8]
 8005274:	e003      	b.n	800527e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800527e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40012800 	.word	0x40012800
 800528c:	40012400 	.word	0x40012400

08005290 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005298:	2300      	movs	r3, #0
 800529a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <HAL_ADC_Stop+0x1a>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e01a      	b.n	80052e0 <HAL_ADC_Stop+0x50>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fa7c 	bl	80057b0 <ADC_ConversionStop_Disable>
 80052b8:	4603      	mov	r3, r0
 80052ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d109      	bne.n	80052d6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80052ca:	f023 0301 	bic.w	r3, r3, #1
 80052ce:	f043 0201 	orr.w	r2, r3, #1
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80052de:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80052e8:	b590      	push	{r4, r7, lr}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80052fe:	f7ff fe13 	bl	8004f28 <HAL_GetTick>
 8005302:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00b      	beq.n	800532a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005316:	f043 0220 	orr.w	r2, r3, #32
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e0d3      	b.n	80054d2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005334:	2b00      	cmp	r3, #0
 8005336:	d131      	bne.n	800539c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005342:	2b00      	cmp	r3, #0
 8005344:	d12a      	bne.n	800539c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005346:	e021      	b.n	800538c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534e:	d01d      	beq.n	800538c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d007      	beq.n	8005366 <HAL_ADC_PollForConversion+0x7e>
 8005356:	f7ff fde7 	bl	8004f28 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d212      	bcs.n	800538c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10b      	bne.n	800538c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005378:	f043 0204 	orr.w	r2, r3, #4
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e0a2      	b.n	80054d2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0d6      	beq.n	8005348 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800539a:	e070      	b.n	800547e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800539c:	4b4f      	ldr	r3, [pc, #316]	@ (80054dc <HAL_ADC_PollForConversion+0x1f4>)
 800539e:	681c      	ldr	r4, [r3, #0]
 80053a0:	2002      	movs	r0, #2
 80053a2:	f001 fc9b 	bl	8006cdc <HAL_RCCEx_GetPeriphCLKFreq>
 80053a6:	4603      	mov	r3, r0
 80053a8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6919      	ldr	r1, [r3, #16]
 80053b2:	4b4b      	ldr	r3, [pc, #300]	@ (80054e0 <HAL_ADC_PollForConversion+0x1f8>)
 80053b4:	400b      	ands	r3, r1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d118      	bne.n	80053ec <HAL_ADC_PollForConversion+0x104>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68d9      	ldr	r1, [r3, #12]
 80053c0:	4b48      	ldr	r3, [pc, #288]	@ (80054e4 <HAL_ADC_PollForConversion+0x1fc>)
 80053c2:	400b      	ands	r3, r1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d111      	bne.n	80053ec <HAL_ADC_PollForConversion+0x104>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6919      	ldr	r1, [r3, #16]
 80053ce:	4b46      	ldr	r3, [pc, #280]	@ (80054e8 <HAL_ADC_PollForConversion+0x200>)
 80053d0:	400b      	ands	r3, r1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d108      	bne.n	80053e8 <HAL_ADC_PollForConversion+0x100>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68d9      	ldr	r1, [r3, #12]
 80053dc:	4b43      	ldr	r3, [pc, #268]	@ (80054ec <HAL_ADC_PollForConversion+0x204>)
 80053de:	400b      	ands	r3, r1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <HAL_ADC_PollForConversion+0x100>
 80053e4:	2314      	movs	r3, #20
 80053e6:	e020      	b.n	800542a <HAL_ADC_PollForConversion+0x142>
 80053e8:	2329      	movs	r3, #41	@ 0x29
 80053ea:	e01e      	b.n	800542a <HAL_ADC_PollForConversion+0x142>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6919      	ldr	r1, [r3, #16]
 80053f2:	4b3d      	ldr	r3, [pc, #244]	@ (80054e8 <HAL_ADC_PollForConversion+0x200>)
 80053f4:	400b      	ands	r3, r1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <HAL_ADC_PollForConversion+0x120>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68d9      	ldr	r1, [r3, #12]
 8005400:	4b3a      	ldr	r3, [pc, #232]	@ (80054ec <HAL_ADC_PollForConversion+0x204>)
 8005402:	400b      	ands	r3, r1
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00d      	beq.n	8005424 <HAL_ADC_PollForConversion+0x13c>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6919      	ldr	r1, [r3, #16]
 800540e:	4b38      	ldr	r3, [pc, #224]	@ (80054f0 <HAL_ADC_PollForConversion+0x208>)
 8005410:	400b      	ands	r3, r1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d108      	bne.n	8005428 <HAL_ADC_PollForConversion+0x140>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68d9      	ldr	r1, [r3, #12]
 800541c:	4b34      	ldr	r3, [pc, #208]	@ (80054f0 <HAL_ADC_PollForConversion+0x208>)
 800541e:	400b      	ands	r3, r1
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <HAL_ADC_PollForConversion+0x140>
 8005424:	2354      	movs	r3, #84	@ 0x54
 8005426:	e000      	b.n	800542a <HAL_ADC_PollForConversion+0x142>
 8005428:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800542a:	fb02 f303 	mul.w	r3, r2, r3
 800542e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005430:	e021      	b.n	8005476 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005438:	d01a      	beq.n	8005470 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d007      	beq.n	8005450 <HAL_ADC_PollForConversion+0x168>
 8005440:	f7ff fd72 	bl	8004f28 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d20f      	bcs.n	8005470 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	429a      	cmp	r2, r3
 8005456:	d90b      	bls.n	8005470 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545c:	f043 0204 	orr.w	r2, r3, #4
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e030      	b.n	80054d2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3301      	adds	r3, #1
 8005474:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	429a      	cmp	r2, r3
 800547c:	d8d9      	bhi.n	8005432 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f06f 0212 	mvn.w	r2, #18
 8005486:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800549e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80054a2:	d115      	bne.n	80054d0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d111      	bne.n	80054d0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d105      	bne.n	80054d0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c8:	f043 0201 	orr.w	r2, r3, #1
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd90      	pop	{r4, r7, pc}
 80054da:	bf00      	nop
 80054dc:	20000020 	.word	0x20000020
 80054e0:	24924924 	.word	0x24924924
 80054e4:	00924924 	.word	0x00924924
 80054e8:	12492492 	.word	0x12492492
 80054ec:	00492492 	.word	0x00492492
 80054f0:	00249249 	.word	0x00249249

080054f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005502:	4618      	mov	r0, r3
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	bc80      	pop	{r7}
 800550a:	4770      	bx	lr

0800550c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005524:	2b01      	cmp	r3, #1
 8005526:	d101      	bne.n	800552c <HAL_ADC_ConfigChannel+0x20>
 8005528:	2302      	movs	r3, #2
 800552a:	e0dc      	b.n	80056e6 <HAL_ADC_ConfigChannel+0x1da>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b06      	cmp	r3, #6
 800553a:	d81c      	bhi.n	8005576 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	4613      	mov	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	3b05      	subs	r3, #5
 800554e:	221f      	movs	r2, #31
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	43db      	mvns	r3, r3
 8005556:	4019      	ands	r1, r3
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	6818      	ldr	r0, [r3, #0]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	4613      	mov	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	3b05      	subs	r3, #5
 8005568:	fa00 f203 	lsl.w	r2, r0, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	635a      	str	r2, [r3, #52]	@ 0x34
 8005574:	e03c      	b.n	80055f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2b0c      	cmp	r3, #12
 800557c:	d81c      	bhi.n	80055b8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	4613      	mov	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	3b23      	subs	r3, #35	@ 0x23
 8005590:	221f      	movs	r2, #31
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	43db      	mvns	r3, r3
 8005598:	4019      	ands	r1, r3
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	4613      	mov	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	3b23      	subs	r3, #35	@ 0x23
 80055aa:	fa00 f203 	lsl.w	r2, r0, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80055b6:	e01b      	b.n	80055f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	3b41      	subs	r3, #65	@ 0x41
 80055ca:	221f      	movs	r2, #31
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	43db      	mvns	r3, r3
 80055d2:	4019      	ands	r1, r3
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	6818      	ldr	r0, [r3, #0]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	4613      	mov	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	3b41      	subs	r3, #65	@ 0x41
 80055e4:	fa00 f203 	lsl.w	r2, r0, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b09      	cmp	r3, #9
 80055f6:	d91c      	bls.n	8005632 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68d9      	ldr	r1, [r3, #12]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	4613      	mov	r3, r2
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	4413      	add	r3, r2
 8005608:	3b1e      	subs	r3, #30
 800560a:	2207      	movs	r2, #7
 800560c:	fa02 f303 	lsl.w	r3, r2, r3
 8005610:	43db      	mvns	r3, r3
 8005612:	4019      	ands	r1, r3
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	6898      	ldr	r0, [r3, #8]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	4613      	mov	r3, r2
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	4413      	add	r3, r2
 8005622:	3b1e      	subs	r3, #30
 8005624:	fa00 f203 	lsl.w	r2, r0, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	60da      	str	r2, [r3, #12]
 8005630:	e019      	b.n	8005666 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6919      	ldr	r1, [r3, #16]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	4613      	mov	r3, r2
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	4413      	add	r3, r2
 8005642:	2207      	movs	r2, #7
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	43db      	mvns	r3, r3
 800564a:	4019      	ands	r1, r3
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	6898      	ldr	r0, [r3, #8]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	4613      	mov	r3, r2
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	4413      	add	r3, r2
 800565a:	fa00 f203 	lsl.w	r2, r0, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b10      	cmp	r3, #16
 800566c:	d003      	beq.n	8005676 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005672:	2b11      	cmp	r3, #17
 8005674:	d132      	bne.n	80056dc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a1d      	ldr	r2, [pc, #116]	@ (80056f0 <HAL_ADC_ConfigChannel+0x1e4>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d125      	bne.n	80056cc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d126      	bne.n	80056dc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800569c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b10      	cmp	r3, #16
 80056a4:	d11a      	bne.n	80056dc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80056a6:	4b13      	ldr	r3, [pc, #76]	@ (80056f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a13      	ldr	r2, [pc, #76]	@ (80056f8 <HAL_ADC_ConfigChannel+0x1ec>)
 80056ac:	fba2 2303 	umull	r2, r3, r2, r3
 80056b0:	0c9a      	lsrs	r2, r3, #18
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80056bc:	e002      	b.n	80056c4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	3b01      	subs	r3, #1
 80056c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1f9      	bne.n	80056be <HAL_ADC_ConfigChannel+0x1b2>
 80056ca:	e007      	b.n	80056dc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d0:	f043 0220 	orr.w	r2, r3, #32
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bc80      	pop	{r7}
 80056ee:	4770      	bx	lr
 80056f0:	40012400 	.word	0x40012400
 80056f4:	20000020 	.word	0x20000020
 80056f8:	431bde83 	.word	0x431bde83

080056fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b01      	cmp	r3, #1
 8005718:	d040      	beq.n	800579c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f042 0201 	orr.w	r2, r2, #1
 8005728:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800572a:	4b1f      	ldr	r3, [pc, #124]	@ (80057a8 <ADC_Enable+0xac>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a1f      	ldr	r2, [pc, #124]	@ (80057ac <ADC_Enable+0xb0>)
 8005730:	fba2 2303 	umull	r2, r3, r2, r3
 8005734:	0c9b      	lsrs	r3, r3, #18
 8005736:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005738:	e002      	b.n	8005740 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	3b01      	subs	r3, #1
 800573e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1f9      	bne.n	800573a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005746:	f7ff fbef 	bl	8004f28 <HAL_GetTick>
 800574a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800574c:	e01f      	b.n	800578e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800574e:	f7ff fbeb 	bl	8004f28 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d918      	bls.n	800578e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b01      	cmp	r3, #1
 8005768:	d011      	beq.n	800578e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576e:	f043 0210 	orr.w	r2, r3, #16
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577a:	f043 0201 	orr.w	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e007      	b.n	800579e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b01      	cmp	r3, #1
 800579a:	d1d8      	bne.n	800574e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20000020 	.word	0x20000020
 80057ac:	431bde83 	.word	0x431bde83

080057b0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d12e      	bne.n	8005828 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0201 	bic.w	r2, r2, #1
 80057d8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80057da:	f7ff fba5 	bl	8004f28 <HAL_GetTick>
 80057de:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80057e0:	e01b      	b.n	800581a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80057e2:	f7ff fba1 	bl	8004f28 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d914      	bls.n	800581a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d10d      	bne.n	800581a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005802:	f043 0210 	orr.w	r2, r3, #16
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580e:	f043 0201 	orr.w	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e007      	b.n	800582a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b01      	cmp	r3, #1
 8005826:	d0dc      	beq.n	80057e2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
	...

08005834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005844:	4b0c      	ldr	r3, [pc, #48]	@ (8005878 <__NVIC_SetPriorityGrouping+0x44>)
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005850:	4013      	ands	r3, r2
 8005852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800585c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005866:	4a04      	ldr	r2, [pc, #16]	@ (8005878 <__NVIC_SetPriorityGrouping+0x44>)
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	60d3      	str	r3, [r2, #12]
}
 800586c:	bf00      	nop
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	bc80      	pop	{r7}
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	e000ed00 	.word	0xe000ed00

0800587c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005880:	4b04      	ldr	r3, [pc, #16]	@ (8005894 <__NVIC_GetPriorityGrouping+0x18>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	0a1b      	lsrs	r3, r3, #8
 8005886:	f003 0307 	and.w	r3, r3, #7
}
 800588a:	4618      	mov	r0, r3
 800588c:	46bd      	mov	sp, r7
 800588e:	bc80      	pop	{r7}
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	e000ed00 	.word	0xe000ed00

08005898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	db0b      	blt.n	80058c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	f003 021f 	and.w	r2, r3, #31
 80058b0:	4906      	ldr	r1, [pc, #24]	@ (80058cc <__NVIC_EnableIRQ+0x34>)
 80058b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	2001      	movs	r0, #1
 80058ba:	fa00 f202 	lsl.w	r2, r0, r2
 80058be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80058c2:	bf00      	nop
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr
 80058cc:	e000e100 	.word	0xe000e100

080058d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	4603      	mov	r3, r0
 80058d8:	6039      	str	r1, [r7, #0]
 80058da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	db0a      	blt.n	80058fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	490c      	ldr	r1, [pc, #48]	@ (800591c <__NVIC_SetPriority+0x4c>)
 80058ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ee:	0112      	lsls	r2, r2, #4
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	440b      	add	r3, r1
 80058f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058f8:	e00a      	b.n	8005910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	4908      	ldr	r1, [pc, #32]	@ (8005920 <__NVIC_SetPriority+0x50>)
 8005900:	79fb      	ldrb	r3, [r7, #7]
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	3b04      	subs	r3, #4
 8005908:	0112      	lsls	r2, r2, #4
 800590a:	b2d2      	uxtb	r2, r2
 800590c:	440b      	add	r3, r1
 800590e:	761a      	strb	r2, [r3, #24]
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	bc80      	pop	{r7}
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	e000e100 	.word	0xe000e100
 8005920:	e000ed00 	.word	0xe000ed00

08005924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005924:	b480      	push	{r7}
 8005926:	b089      	sub	sp, #36	@ 0x24
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	f1c3 0307 	rsb	r3, r3, #7
 800593e:	2b04      	cmp	r3, #4
 8005940:	bf28      	it	cs
 8005942:	2304      	movcs	r3, #4
 8005944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	3304      	adds	r3, #4
 800594a:	2b06      	cmp	r3, #6
 800594c:	d902      	bls.n	8005954 <NVIC_EncodePriority+0x30>
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	3b03      	subs	r3, #3
 8005952:	e000      	b.n	8005956 <NVIC_EncodePriority+0x32>
 8005954:	2300      	movs	r3, #0
 8005956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005958:	f04f 32ff 	mov.w	r2, #4294967295
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	43da      	mvns	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	401a      	ands	r2, r3
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800596c:	f04f 31ff 	mov.w	r1, #4294967295
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	fa01 f303 	lsl.w	r3, r1, r3
 8005976:	43d9      	mvns	r1, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800597c:	4313      	orrs	r3, r2
         );
}
 800597e:	4618      	mov	r0, r3
 8005980:	3724      	adds	r7, #36	@ 0x24
 8005982:	46bd      	mov	sp, r7
 8005984:	bc80      	pop	{r7}
 8005986:	4770      	bx	lr

08005988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3b01      	subs	r3, #1
 8005994:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005998:	d301      	bcc.n	800599e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800599a:	2301      	movs	r3, #1
 800599c:	e00f      	b.n	80059be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800599e:	4a0a      	ldr	r2, [pc, #40]	@ (80059c8 <SysTick_Config+0x40>)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	3b01      	subs	r3, #1
 80059a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059a6:	210f      	movs	r1, #15
 80059a8:	f04f 30ff 	mov.w	r0, #4294967295
 80059ac:	f7ff ff90 	bl	80058d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059b0:	4b05      	ldr	r3, [pc, #20]	@ (80059c8 <SysTick_Config+0x40>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059b6:	4b04      	ldr	r3, [pc, #16]	@ (80059c8 <SysTick_Config+0x40>)
 80059b8:	2207      	movs	r2, #7
 80059ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	e000e010 	.word	0xe000e010

080059cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f7ff ff2d 	bl	8005834 <__NVIC_SetPriorityGrouping>
}
 80059da:	bf00      	nop
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b086      	sub	sp, #24
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	4603      	mov	r3, r0
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	607a      	str	r2, [r7, #4]
 80059ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059f4:	f7ff ff42 	bl	800587c <__NVIC_GetPriorityGrouping>
 80059f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	68b9      	ldr	r1, [r7, #8]
 80059fe:	6978      	ldr	r0, [r7, #20]
 8005a00:	f7ff ff90 	bl	8005924 <NVIC_EncodePriority>
 8005a04:	4602      	mov	r2, r0
 8005a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff ff5f 	bl	80058d0 <__NVIC_SetPriority>
}
 8005a12:	bf00      	nop
 8005a14:	3718      	adds	r7, #24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b082      	sub	sp, #8
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	4603      	mov	r3, r0
 8005a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff ff35 	bl	8005898 <__NVIC_EnableIRQ>
}
 8005a2e:	bf00      	nop
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b082      	sub	sp, #8
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff ffa2 	bl	8005988 <SysTick_Config>
 8005a44:	4603      	mov	r3, r0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b085      	sub	sp, #20
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d008      	beq.n	8005a78 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2204      	movs	r2, #4
 8005a6a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e020      	b.n	8005aba <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f022 020e 	bic.w	r2, r2, #14
 8005a86:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0201 	bic.w	r2, r2, #1
 8005a96:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8005aa6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bc80      	pop	{r7}
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d005      	beq.n	8005ae8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2204      	movs	r2, #4
 8005ae0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	73fb      	strb	r3, [r7, #15]
 8005ae6:	e051      	b.n	8005b8c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 020e 	bic.w	r2, r2, #14
 8005af6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0201 	bic.w	r2, r2, #1
 8005b06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a22      	ldr	r2, [pc, #136]	@ (8005b98 <HAL_DMA_Abort_IT+0xd4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d029      	beq.n	8005b66 <HAL_DMA_Abort_IT+0xa2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a21      	ldr	r2, [pc, #132]	@ (8005b9c <HAL_DMA_Abort_IT+0xd8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d022      	beq.n	8005b62 <HAL_DMA_Abort_IT+0x9e>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a1f      	ldr	r2, [pc, #124]	@ (8005ba0 <HAL_DMA_Abort_IT+0xdc>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d01a      	beq.n	8005b5c <HAL_DMA_Abort_IT+0x98>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ba4 <HAL_DMA_Abort_IT+0xe0>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d012      	beq.n	8005b56 <HAL_DMA_Abort_IT+0x92>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba8 <HAL_DMA_Abort_IT+0xe4>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00a      	beq.n	8005b50 <HAL_DMA_Abort_IT+0x8c>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8005bac <HAL_DMA_Abort_IT+0xe8>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d102      	bne.n	8005b4a <HAL_DMA_Abort_IT+0x86>
 8005b44:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005b48:	e00e      	b.n	8005b68 <HAL_DMA_Abort_IT+0xa4>
 8005b4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b4e:	e00b      	b.n	8005b68 <HAL_DMA_Abort_IT+0xa4>
 8005b50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005b54:	e008      	b.n	8005b68 <HAL_DMA_Abort_IT+0xa4>
 8005b56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b5a:	e005      	b.n	8005b68 <HAL_DMA_Abort_IT+0xa4>
 8005b5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b60:	e002      	b.n	8005b68 <HAL_DMA_Abort_IT+0xa4>
 8005b62:	2310      	movs	r3, #16
 8005b64:	e000      	b.n	8005b68 <HAL_DMA_Abort_IT+0xa4>
 8005b66:	2301      	movs	r3, #1
 8005b68:	4a11      	ldr	r2, [pc, #68]	@ (8005bb0 <HAL_DMA_Abort_IT+0xec>)
 8005b6a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	4798      	blx	r3
    } 
  }
  return status;
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	40020008 	.word	0x40020008
 8005b9c:	4002001c 	.word	0x4002001c
 8005ba0:	40020030 	.word	0x40020030
 8005ba4:	40020044 	.word	0x40020044
 8005ba8:	40020058 	.word	0x40020058
 8005bac:	4002006c 	.word	0x4002006c
 8005bb0:	40020000 	.word	0x40020000

08005bb4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005bce:	4b2f      	ldr	r3, [pc, #188]	@ (8005c8c <HAL_FLASH_Program+0xd8>)
 8005bd0:	7e1b      	ldrb	r3, [r3, #24]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d101      	bne.n	8005bda <HAL_FLASH_Program+0x26>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e054      	b.n	8005c84 <HAL_FLASH_Program+0xd0>
 8005bda:	4b2c      	ldr	r3, [pc, #176]	@ (8005c8c <HAL_FLASH_Program+0xd8>)
 8005bdc:	2201      	movs	r2, #1
 8005bde:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005be0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005be4:	f000 f8a8 	bl	8005d38 <FLASH_WaitForLastOperation>
 8005be8:	4603      	mov	r3, r0
 8005bea:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8005bec:	7dfb      	ldrb	r3, [r7, #23]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d144      	bne.n	8005c7c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d102      	bne.n	8005bfe <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	757b      	strb	r3, [r7, #21]
 8005bfc:	e007      	b.n	8005c0e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d102      	bne.n	8005c0a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005c04:	2302      	movs	r3, #2
 8005c06:	757b      	strb	r3, [r7, #21]
 8005c08:	e001      	b.n	8005c0e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8005c0a:	2304      	movs	r3, #4
 8005c0c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8005c0e:	2300      	movs	r3, #0
 8005c10:	75bb      	strb	r3, [r7, #22]
 8005c12:	e02d      	b.n	8005c70 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005c14:	7dbb      	ldrb	r3, [r7, #22]
 8005c16:	005a      	lsls	r2, r3, #1
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	eb02 0c03 	add.w	ip, r2, r3
 8005c1e:	7dbb      	ldrb	r3, [r7, #22]
 8005c20:	0119      	lsls	r1, r3, #4
 8005c22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c26:	f1c1 0620 	rsb	r6, r1, #32
 8005c2a:	f1a1 0020 	sub.w	r0, r1, #32
 8005c2e:	fa22 f401 	lsr.w	r4, r2, r1
 8005c32:	fa03 f606 	lsl.w	r6, r3, r6
 8005c36:	4334      	orrs	r4, r6
 8005c38:	fa23 f000 	lsr.w	r0, r3, r0
 8005c3c:	4304      	orrs	r4, r0
 8005c3e:	fa23 f501 	lsr.w	r5, r3, r1
 8005c42:	b2a3      	uxth	r3, r4
 8005c44:	4619      	mov	r1, r3
 8005c46:	4660      	mov	r0, ip
 8005c48:	f000 f85a 	bl	8005d00 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005c4c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005c50:	f000 f872 	bl	8005d38 <FLASH_WaitForLastOperation>
 8005c54:	4603      	mov	r3, r0
 8005c56:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005c58:	4b0d      	ldr	r3, [pc, #52]	@ (8005c90 <HAL_FLASH_Program+0xdc>)
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	4a0c      	ldr	r2, [pc, #48]	@ (8005c90 <HAL_FLASH_Program+0xdc>)
 8005c5e:	f023 0301 	bic.w	r3, r3, #1
 8005c62:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8005c64:	7dfb      	ldrb	r3, [r7, #23]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d107      	bne.n	8005c7a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8005c6a:	7dbb      	ldrb	r3, [r7, #22]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	75bb      	strb	r3, [r7, #22]
 8005c70:	7dba      	ldrb	r2, [r7, #22]
 8005c72:	7d7b      	ldrb	r3, [r7, #21]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d3cd      	bcc.n	8005c14 <HAL_FLASH_Program+0x60>
 8005c78:	e000      	b.n	8005c7c <HAL_FLASH_Program+0xc8>
      {
        break;
 8005c7a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005c7c:	4b03      	ldr	r3, [pc, #12]	@ (8005c8c <HAL_FLASH_Program+0xd8>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	761a      	strb	r2, [r3, #24]

  return status;
 8005c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	371c      	adds	r7, #28
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c8c:	20000c98 	.word	0x20000c98
 8005c90:	40022000 	.word	0x40022000

08005c94 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005cd4 <HAL_FLASH_Unlock+0x40>)
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00d      	beq.n	8005cc6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005caa:	4b0a      	ldr	r3, [pc, #40]	@ (8005cd4 <HAL_FLASH_Unlock+0x40>)
 8005cac:	4a0a      	ldr	r2, [pc, #40]	@ (8005cd8 <HAL_FLASH_Unlock+0x44>)
 8005cae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005cb0:	4b08      	ldr	r3, [pc, #32]	@ (8005cd4 <HAL_FLASH_Unlock+0x40>)
 8005cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8005cdc <HAL_FLASH_Unlock+0x48>)
 8005cb4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005cb6:	4b07      	ldr	r3, [pc, #28]	@ (8005cd4 <HAL_FLASH_Unlock+0x40>)
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8005cc6:	79fb      	ldrb	r3, [r7, #7]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bc80      	pop	{r7}
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40022000 	.word	0x40022000
 8005cd8:	45670123 	.word	0x45670123
 8005cdc:	cdef89ab 	.word	0xcdef89ab

08005ce0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005ce4:	4b05      	ldr	r3, [pc, #20]	@ (8005cfc <HAL_FLASH_Lock+0x1c>)
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	4a04      	ldr	r2, [pc, #16]	@ (8005cfc <HAL_FLASH_Lock+0x1c>)
 8005cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cee:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bc80      	pop	{r7}
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40022000 	.word	0x40022000

08005d00 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005d0c:	4b08      	ldr	r3, [pc, #32]	@ (8005d30 <FLASH_Program_HalfWord+0x30>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005d12:	4b08      	ldr	r3, [pc, #32]	@ (8005d34 <FLASH_Program_HalfWord+0x34>)
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	4a07      	ldr	r2, [pc, #28]	@ (8005d34 <FLASH_Program_HalfWord+0x34>)
 8005d18:	f043 0301 	orr.w	r3, r3, #1
 8005d1c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	887a      	ldrh	r2, [r7, #2]
 8005d22:	801a      	strh	r2, [r3, #0]
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc80      	pop	{r7}
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	20000c98 	.word	0x20000c98
 8005d34:	40022000 	.word	0x40022000

08005d38 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005d40:	f7ff f8f2 	bl	8004f28 <HAL_GetTick>
 8005d44:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005d46:	e010      	b.n	8005d6a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4e:	d00c      	beq.n	8005d6a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d007      	beq.n	8005d66 <FLASH_WaitForLastOperation+0x2e>
 8005d56:	f7ff f8e7 	bl	8004f28 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d201      	bcs.n	8005d6a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e025      	b.n	8005db6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005d6a:	4b15      	ldr	r3, [pc, #84]	@ (8005dc0 <FLASH_WaitForLastOperation+0x88>)
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e8      	bne.n	8005d48 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005d76:	4b12      	ldr	r3, [pc, #72]	@ (8005dc0 <FLASH_WaitForLastOperation+0x88>)
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005d82:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc0 <FLASH_WaitForLastOperation+0x88>)
 8005d84:	2220      	movs	r2, #32
 8005d86:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005d88:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc0 <FLASH_WaitForLastOperation+0x88>)
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f003 0310 	and.w	r3, r3, #16
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10b      	bne.n	8005dac <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005d94:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc0 <FLASH_WaitForLastOperation+0x88>)
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d105      	bne.n	8005dac <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005da0:	4b07      	ldr	r3, [pc, #28]	@ (8005dc0 <FLASH_WaitForLastOperation+0x88>)
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005dac:	f000 f80a 	bl	8005dc4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e000      	b.n	8005db6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	40022000 	.word	0x40022000

08005dc4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005dce:	4b23      	ldr	r3, [pc, #140]	@ (8005e5c <FLASH_SetErrorCode+0x98>)
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f003 0310 	and.w	r3, r3, #16
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d009      	beq.n	8005dee <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005dda:	4b21      	ldr	r3, [pc, #132]	@ (8005e60 <FLASH_SetErrorCode+0x9c>)
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	f043 0302 	orr.w	r3, r3, #2
 8005de2:	4a1f      	ldr	r2, [pc, #124]	@ (8005e60 <FLASH_SetErrorCode+0x9c>)
 8005de4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f043 0310 	orr.w	r3, r3, #16
 8005dec:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005dee:	4b1b      	ldr	r3, [pc, #108]	@ (8005e5c <FLASH_SetErrorCode+0x98>)
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f003 0304 	and.w	r3, r3, #4
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d009      	beq.n	8005e0e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005dfa:	4b19      	ldr	r3, [pc, #100]	@ (8005e60 <FLASH_SetErrorCode+0x9c>)
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	f043 0301 	orr.w	r3, r3, #1
 8005e02:	4a17      	ldr	r2, [pc, #92]	@ (8005e60 <FLASH_SetErrorCode+0x9c>)
 8005e04:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f043 0304 	orr.w	r3, r3, #4
 8005e0c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005e0e:	4b13      	ldr	r3, [pc, #76]	@ (8005e5c <FLASH_SetErrorCode+0x98>)
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00b      	beq.n	8005e32 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8005e1a:	4b11      	ldr	r3, [pc, #68]	@ (8005e60 <FLASH_SetErrorCode+0x9c>)
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	f043 0304 	orr.w	r3, r3, #4
 8005e22:	4a0f      	ldr	r2, [pc, #60]	@ (8005e60 <FLASH_SetErrorCode+0x9c>)
 8005e24:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005e26:	4b0d      	ldr	r3, [pc, #52]	@ (8005e5c <FLASH_SetErrorCode+0x98>)
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8005e5c <FLASH_SetErrorCode+0x98>)
 8005e2c:	f023 0301 	bic.w	r3, r3, #1
 8005e30:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f240 1201 	movw	r2, #257	@ 0x101
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d106      	bne.n	8005e4a <FLASH_SetErrorCode+0x86>
 8005e3c:	4b07      	ldr	r3, [pc, #28]	@ (8005e5c <FLASH_SetErrorCode+0x98>)
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	4a06      	ldr	r2, [pc, #24]	@ (8005e5c <FLASH_SetErrorCode+0x98>)
 8005e42:	f023 0301 	bic.w	r3, r3, #1
 8005e46:	61d3      	str	r3, [r2, #28]
}  
 8005e48:	e002      	b.n	8005e50 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005e4a:	4a04      	ldr	r2, [pc, #16]	@ (8005e5c <FLASH_SetErrorCode+0x98>)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	60d3      	str	r3, [r2, #12]
}  
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bc80      	pop	{r7}
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	40022000 	.word	0x40022000
 8005e60:	20000c98 	.word	0x20000c98

08005e64 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005e76:	4b2f      	ldr	r3, [pc, #188]	@ (8005f34 <HAL_FLASHEx_Erase+0xd0>)
 8005e78:	7e1b      	ldrb	r3, [r3, #24]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d101      	bne.n	8005e82 <HAL_FLASHEx_Erase+0x1e>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	e053      	b.n	8005f2a <HAL_FLASHEx_Erase+0xc6>
 8005e82:	4b2c      	ldr	r3, [pc, #176]	@ (8005f34 <HAL_FLASHEx_Erase+0xd0>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d116      	bne.n	8005ebe <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005e90:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005e94:	f7ff ff50 	bl	8005d38 <FLASH_WaitForLastOperation>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d141      	bne.n	8005f22 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8005e9e:	2001      	movs	r0, #1
 8005ea0:	f000 f84c 	bl	8005f3c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ea4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005ea8:	f7ff ff46 	bl	8005d38 <FLASH_WaitForLastOperation>
 8005eac:	4603      	mov	r3, r0
 8005eae:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005eb0:	4b21      	ldr	r3, [pc, #132]	@ (8005f38 <HAL_FLASHEx_Erase+0xd4>)
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	4a20      	ldr	r2, [pc, #128]	@ (8005f38 <HAL_FLASHEx_Erase+0xd4>)
 8005eb6:	f023 0304 	bic.w	r3, r3, #4
 8005eba:	6113      	str	r3, [r2, #16]
 8005ebc:	e031      	b.n	8005f22 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005ebe:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005ec2:	f7ff ff39 	bl	8005d38 <FLASH_WaitForLastOperation>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d12a      	bne.n	8005f22 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	60bb      	str	r3, [r7, #8]
 8005eda:	e019      	b.n	8005f10 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8005edc:	68b8      	ldr	r0, [r7, #8]
 8005ede:	f000 f849 	bl	8005f74 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ee2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005ee6:	f7ff ff27 	bl	8005d38 <FLASH_WaitForLastOperation>
 8005eea:	4603      	mov	r3, r0
 8005eec:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005eee:	4b12      	ldr	r3, [pc, #72]	@ (8005f38 <HAL_FLASHEx_Erase+0xd4>)
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	4a11      	ldr	r2, [pc, #68]	@ (8005f38 <HAL_FLASHEx_Erase+0xd4>)
 8005ef4:	f023 0302 	bic.w	r3, r3, #2
 8005ef8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	601a      	str	r2, [r3, #0]
            break;
 8005f06:	e00c      	b.n	8005f22 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f0e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	029a      	lsls	r2, r3, #10
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d3dc      	bcc.n	8005edc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005f22:	4b04      	ldr	r3, [pc, #16]	@ (8005f34 <HAL_FLASHEx_Erase+0xd0>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	761a      	strb	r2, [r3, #24]

  return status;
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20000c98 	.word	0x20000c98
 8005f38:	40022000 	.word	0x40022000

08005f3c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005f44:	4b09      	ldr	r3, [pc, #36]	@ (8005f6c <FLASH_MassErase+0x30>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005f4a:	4b09      	ldr	r3, [pc, #36]	@ (8005f70 <FLASH_MassErase+0x34>)
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	4a08      	ldr	r2, [pc, #32]	@ (8005f70 <FLASH_MassErase+0x34>)
 8005f50:	f043 0304 	orr.w	r3, r3, #4
 8005f54:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005f56:	4b06      	ldr	r3, [pc, #24]	@ (8005f70 <FLASH_MassErase+0x34>)
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	4a05      	ldr	r2, [pc, #20]	@ (8005f70 <FLASH_MassErase+0x34>)
 8005f5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f60:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bc80      	pop	{r7}
 8005f6a:	4770      	bx	lr
 8005f6c:	20000c98 	.word	0x20000c98
 8005f70:	40022000 	.word	0x40022000

08005f74 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005fac <FLASH_PageErase+0x38>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005f82:	4b0b      	ldr	r3, [pc, #44]	@ (8005fb0 <FLASH_PageErase+0x3c>)
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	4a0a      	ldr	r2, [pc, #40]	@ (8005fb0 <FLASH_PageErase+0x3c>)
 8005f88:	f043 0302 	orr.w	r3, r3, #2
 8005f8c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005f8e:	4a08      	ldr	r2, [pc, #32]	@ (8005fb0 <FLASH_PageErase+0x3c>)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005f94:	4b06      	ldr	r3, [pc, #24]	@ (8005fb0 <FLASH_PageErase+0x3c>)
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	4a05      	ldr	r2, [pc, #20]	@ (8005fb0 <FLASH_PageErase+0x3c>)
 8005f9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f9e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bc80      	pop	{r7}
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	20000c98 	.word	0x20000c98
 8005fb0:	40022000 	.word	0x40022000

08005fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b08b      	sub	sp, #44	@ 0x2c
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fc6:	e169      	b.n	800629c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005fc8:	2201      	movs	r2, #1
 8005fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	4013      	ands	r3, r2
 8005fda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	f040 8158 	bne.w	8006296 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	4a9a      	ldr	r2, [pc, #616]	@ (8006254 <HAL_GPIO_Init+0x2a0>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d05e      	beq.n	80060ae <HAL_GPIO_Init+0xfa>
 8005ff0:	4a98      	ldr	r2, [pc, #608]	@ (8006254 <HAL_GPIO_Init+0x2a0>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d875      	bhi.n	80060e2 <HAL_GPIO_Init+0x12e>
 8005ff6:	4a98      	ldr	r2, [pc, #608]	@ (8006258 <HAL_GPIO_Init+0x2a4>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d058      	beq.n	80060ae <HAL_GPIO_Init+0xfa>
 8005ffc:	4a96      	ldr	r2, [pc, #600]	@ (8006258 <HAL_GPIO_Init+0x2a4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d86f      	bhi.n	80060e2 <HAL_GPIO_Init+0x12e>
 8006002:	4a96      	ldr	r2, [pc, #600]	@ (800625c <HAL_GPIO_Init+0x2a8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d052      	beq.n	80060ae <HAL_GPIO_Init+0xfa>
 8006008:	4a94      	ldr	r2, [pc, #592]	@ (800625c <HAL_GPIO_Init+0x2a8>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d869      	bhi.n	80060e2 <HAL_GPIO_Init+0x12e>
 800600e:	4a94      	ldr	r2, [pc, #592]	@ (8006260 <HAL_GPIO_Init+0x2ac>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d04c      	beq.n	80060ae <HAL_GPIO_Init+0xfa>
 8006014:	4a92      	ldr	r2, [pc, #584]	@ (8006260 <HAL_GPIO_Init+0x2ac>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d863      	bhi.n	80060e2 <HAL_GPIO_Init+0x12e>
 800601a:	4a92      	ldr	r2, [pc, #584]	@ (8006264 <HAL_GPIO_Init+0x2b0>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d046      	beq.n	80060ae <HAL_GPIO_Init+0xfa>
 8006020:	4a90      	ldr	r2, [pc, #576]	@ (8006264 <HAL_GPIO_Init+0x2b0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d85d      	bhi.n	80060e2 <HAL_GPIO_Init+0x12e>
 8006026:	2b12      	cmp	r3, #18
 8006028:	d82a      	bhi.n	8006080 <HAL_GPIO_Init+0xcc>
 800602a:	2b12      	cmp	r3, #18
 800602c:	d859      	bhi.n	80060e2 <HAL_GPIO_Init+0x12e>
 800602e:	a201      	add	r2, pc, #4	@ (adr r2, 8006034 <HAL_GPIO_Init+0x80>)
 8006030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006034:	080060af 	.word	0x080060af
 8006038:	08006089 	.word	0x08006089
 800603c:	0800609b 	.word	0x0800609b
 8006040:	080060dd 	.word	0x080060dd
 8006044:	080060e3 	.word	0x080060e3
 8006048:	080060e3 	.word	0x080060e3
 800604c:	080060e3 	.word	0x080060e3
 8006050:	080060e3 	.word	0x080060e3
 8006054:	080060e3 	.word	0x080060e3
 8006058:	080060e3 	.word	0x080060e3
 800605c:	080060e3 	.word	0x080060e3
 8006060:	080060e3 	.word	0x080060e3
 8006064:	080060e3 	.word	0x080060e3
 8006068:	080060e3 	.word	0x080060e3
 800606c:	080060e3 	.word	0x080060e3
 8006070:	080060e3 	.word	0x080060e3
 8006074:	080060e3 	.word	0x080060e3
 8006078:	08006091 	.word	0x08006091
 800607c:	080060a5 	.word	0x080060a5
 8006080:	4a79      	ldr	r2, [pc, #484]	@ (8006268 <HAL_GPIO_Init+0x2b4>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d013      	beq.n	80060ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006086:	e02c      	b.n	80060e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	623b      	str	r3, [r7, #32]
          break;
 800608e:	e029      	b.n	80060e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	3304      	adds	r3, #4
 8006096:	623b      	str	r3, [r7, #32]
          break;
 8006098:	e024      	b.n	80060e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	3308      	adds	r3, #8
 80060a0:	623b      	str	r3, [r7, #32]
          break;
 80060a2:	e01f      	b.n	80060e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	330c      	adds	r3, #12
 80060aa:	623b      	str	r3, [r7, #32]
          break;
 80060ac:	e01a      	b.n	80060e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d102      	bne.n	80060bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80060b6:	2304      	movs	r3, #4
 80060b8:	623b      	str	r3, [r7, #32]
          break;
 80060ba:	e013      	b.n	80060e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d105      	bne.n	80060d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80060c4:	2308      	movs	r3, #8
 80060c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	611a      	str	r2, [r3, #16]
          break;
 80060ce:	e009      	b.n	80060e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80060d0:	2308      	movs	r3, #8
 80060d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	615a      	str	r2, [r3, #20]
          break;
 80060da:	e003      	b.n	80060e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80060dc:	2300      	movs	r3, #0
 80060de:	623b      	str	r3, [r7, #32]
          break;
 80060e0:	e000      	b.n	80060e4 <HAL_GPIO_Init+0x130>
          break;
 80060e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	2bff      	cmp	r3, #255	@ 0xff
 80060e8:	d801      	bhi.n	80060ee <HAL_GPIO_Init+0x13a>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	e001      	b.n	80060f2 <HAL_GPIO_Init+0x13e>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	3304      	adds	r3, #4
 80060f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	2bff      	cmp	r3, #255	@ 0xff
 80060f8:	d802      	bhi.n	8006100 <HAL_GPIO_Init+0x14c>
 80060fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	e002      	b.n	8006106 <HAL_GPIO_Init+0x152>
 8006100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006102:	3b08      	subs	r3, #8
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	210f      	movs	r1, #15
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	fa01 f303 	lsl.w	r3, r1, r3
 8006114:	43db      	mvns	r3, r3
 8006116:	401a      	ands	r2, r3
 8006118:	6a39      	ldr	r1, [r7, #32]
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	fa01 f303 	lsl.w	r3, r1, r3
 8006120:	431a      	orrs	r2, r3
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 80b1 	beq.w	8006296 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006134:	4b4d      	ldr	r3, [pc, #308]	@ (800626c <HAL_GPIO_Init+0x2b8>)
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	4a4c      	ldr	r2, [pc, #304]	@ (800626c <HAL_GPIO_Init+0x2b8>)
 800613a:	f043 0301 	orr.w	r3, r3, #1
 800613e:	6193      	str	r3, [r2, #24]
 8006140:	4b4a      	ldr	r3, [pc, #296]	@ (800626c <HAL_GPIO_Init+0x2b8>)
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	60bb      	str	r3, [r7, #8]
 800614a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800614c:	4a48      	ldr	r2, [pc, #288]	@ (8006270 <HAL_GPIO_Init+0x2bc>)
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006150:	089b      	lsrs	r3, r3, #2
 8006152:	3302      	adds	r3, #2
 8006154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006158:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800615a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615c:	f003 0303 	and.w	r3, r3, #3
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	220f      	movs	r2, #15
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	43db      	mvns	r3, r3
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	4013      	ands	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a40      	ldr	r2, [pc, #256]	@ (8006274 <HAL_GPIO_Init+0x2c0>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d013      	beq.n	80061a0 <HAL_GPIO_Init+0x1ec>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a3f      	ldr	r2, [pc, #252]	@ (8006278 <HAL_GPIO_Init+0x2c4>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00d      	beq.n	800619c <HAL_GPIO_Init+0x1e8>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a3e      	ldr	r2, [pc, #248]	@ (800627c <HAL_GPIO_Init+0x2c8>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d007      	beq.n	8006198 <HAL_GPIO_Init+0x1e4>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a3d      	ldr	r2, [pc, #244]	@ (8006280 <HAL_GPIO_Init+0x2cc>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d101      	bne.n	8006194 <HAL_GPIO_Init+0x1e0>
 8006190:	2303      	movs	r3, #3
 8006192:	e006      	b.n	80061a2 <HAL_GPIO_Init+0x1ee>
 8006194:	2304      	movs	r3, #4
 8006196:	e004      	b.n	80061a2 <HAL_GPIO_Init+0x1ee>
 8006198:	2302      	movs	r3, #2
 800619a:	e002      	b.n	80061a2 <HAL_GPIO_Init+0x1ee>
 800619c:	2301      	movs	r3, #1
 800619e:	e000      	b.n	80061a2 <HAL_GPIO_Init+0x1ee>
 80061a0:	2300      	movs	r3, #0
 80061a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061a4:	f002 0203 	and.w	r2, r2, #3
 80061a8:	0092      	lsls	r2, r2, #2
 80061aa:	4093      	lsls	r3, r2
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80061b2:	492f      	ldr	r1, [pc, #188]	@ (8006270 <HAL_GPIO_Init+0x2bc>)
 80061b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b6:	089b      	lsrs	r3, r3, #2
 80061b8:	3302      	adds	r3, #2
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d006      	beq.n	80061da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80061cc:	4b2d      	ldr	r3, [pc, #180]	@ (8006284 <HAL_GPIO_Init+0x2d0>)
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	492c      	ldr	r1, [pc, #176]	@ (8006284 <HAL_GPIO_Init+0x2d0>)
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	608b      	str	r3, [r1, #8]
 80061d8:	e006      	b.n	80061e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80061da:	4b2a      	ldr	r3, [pc, #168]	@ (8006284 <HAL_GPIO_Init+0x2d0>)
 80061dc:	689a      	ldr	r2, [r3, #8]
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	43db      	mvns	r3, r3
 80061e2:	4928      	ldr	r1, [pc, #160]	@ (8006284 <HAL_GPIO_Init+0x2d0>)
 80061e4:	4013      	ands	r3, r2
 80061e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d006      	beq.n	8006202 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80061f4:	4b23      	ldr	r3, [pc, #140]	@ (8006284 <HAL_GPIO_Init+0x2d0>)
 80061f6:	68da      	ldr	r2, [r3, #12]
 80061f8:	4922      	ldr	r1, [pc, #136]	@ (8006284 <HAL_GPIO_Init+0x2d0>)
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60cb      	str	r3, [r1, #12]
 8006200:	e006      	b.n	8006210 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006202:	4b20      	ldr	r3, [pc, #128]	@ (8006284 <HAL_GPIO_Init+0x2d0>)
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	43db      	mvns	r3, r3
 800620a:	491e      	ldr	r1, [pc, #120]	@ (8006284 <HAL_GPIO_Init+0x2d0>)
 800620c:	4013      	ands	r3, r2
 800620e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d006      	beq.n	800622a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800621c:	4b19      	ldr	r3, [pc, #100]	@ (8006284 <HAL_GPIO_Init+0x2d0>)
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	4918      	ldr	r1, [pc, #96]	@ (8006284 <HAL_GPIO_Init+0x2d0>)
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	4313      	orrs	r3, r2
 8006226:	604b      	str	r3, [r1, #4]
 8006228:	e006      	b.n	8006238 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800622a:	4b16      	ldr	r3, [pc, #88]	@ (8006284 <HAL_GPIO_Init+0x2d0>)
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	43db      	mvns	r3, r3
 8006232:	4914      	ldr	r1, [pc, #80]	@ (8006284 <HAL_GPIO_Init+0x2d0>)
 8006234:	4013      	ands	r3, r2
 8006236:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d021      	beq.n	8006288 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006244:	4b0f      	ldr	r3, [pc, #60]	@ (8006284 <HAL_GPIO_Init+0x2d0>)
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	490e      	ldr	r1, [pc, #56]	@ (8006284 <HAL_GPIO_Init+0x2d0>)
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	4313      	orrs	r3, r2
 800624e:	600b      	str	r3, [r1, #0]
 8006250:	e021      	b.n	8006296 <HAL_GPIO_Init+0x2e2>
 8006252:	bf00      	nop
 8006254:	10320000 	.word	0x10320000
 8006258:	10310000 	.word	0x10310000
 800625c:	10220000 	.word	0x10220000
 8006260:	10210000 	.word	0x10210000
 8006264:	10120000 	.word	0x10120000
 8006268:	10110000 	.word	0x10110000
 800626c:	40021000 	.word	0x40021000
 8006270:	40010000 	.word	0x40010000
 8006274:	40010800 	.word	0x40010800
 8006278:	40010c00 	.word	0x40010c00
 800627c:	40011000 	.word	0x40011000
 8006280:	40011400 	.word	0x40011400
 8006284:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006288:	4b0b      	ldr	r3, [pc, #44]	@ (80062b8 <HAL_GPIO_Init+0x304>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	43db      	mvns	r3, r3
 8006290:	4909      	ldr	r1, [pc, #36]	@ (80062b8 <HAL_GPIO_Init+0x304>)
 8006292:	4013      	ands	r3, r2
 8006294:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006298:	3301      	adds	r3, #1
 800629a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a2:	fa22 f303 	lsr.w	r3, r2, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f47f ae8e 	bne.w	8005fc8 <HAL_GPIO_Init+0x14>
  }
}
 80062ac:	bf00      	nop
 80062ae:	bf00      	nop
 80062b0:	372c      	adds	r7, #44	@ 0x2c
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bc80      	pop	{r7}
 80062b6:	4770      	bx	lr
 80062b8:	40010400 	.word	0x40010400

080062bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	460b      	mov	r3, r1
 80062c6:	807b      	strh	r3, [r7, #2]
 80062c8:	4613      	mov	r3, r2
 80062ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80062cc:	787b      	ldrb	r3, [r7, #1]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062d2:	887a      	ldrh	r2, [r7, #2]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80062d8:	e003      	b.n	80062e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80062da:	887b      	ldrh	r3, [r7, #2]
 80062dc:	041a      	lsls	r2, r3, #16
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	611a      	str	r2, [r3, #16]
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bc80      	pop	{r7}
 80062ea:	4770      	bx	lr

080062ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	460b      	mov	r3, r1
 80062f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80062fe:	887a      	ldrh	r2, [r7, #2]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4013      	ands	r3, r2
 8006304:	041a      	lsls	r2, r3, #16
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	43d9      	mvns	r1, r3
 800630a:	887b      	ldrh	r3, [r7, #2]
 800630c:	400b      	ands	r3, r1
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	611a      	str	r2, [r3, #16]
}
 8006314:	bf00      	nop
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	bc80      	pop	{r7}
 800631c:	4770      	bx	lr
	...

08006320 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	4603      	mov	r3, r0
 8006328:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800632a:	4b08      	ldr	r3, [pc, #32]	@ (800634c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800632c:	695a      	ldr	r2, [r3, #20]
 800632e:	88fb      	ldrh	r3, [r7, #6]
 8006330:	4013      	ands	r3, r2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d006      	beq.n	8006344 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006336:	4a05      	ldr	r2, [pc, #20]	@ (800634c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006338:	88fb      	ldrh	r3, [r7, #6]
 800633a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800633c:	88fb      	ldrh	r3, [r7, #6]
 800633e:	4618      	mov	r0, r3
 8006340:	f7fb f9b2 	bl	80016a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006344:	bf00      	nop
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	40010400 	.word	0x40010400

08006350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e272      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 8087 	beq.w	800647e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006370:	4b92      	ldr	r3, [pc, #584]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f003 030c 	and.w	r3, r3, #12
 8006378:	2b04      	cmp	r3, #4
 800637a:	d00c      	beq.n	8006396 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800637c:	4b8f      	ldr	r3, [pc, #572]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f003 030c 	and.w	r3, r3, #12
 8006384:	2b08      	cmp	r3, #8
 8006386:	d112      	bne.n	80063ae <HAL_RCC_OscConfig+0x5e>
 8006388:	4b8c      	ldr	r3, [pc, #560]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006394:	d10b      	bne.n	80063ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006396:	4b89      	ldr	r3, [pc, #548]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d06c      	beq.n	800647c <HAL_RCC_OscConfig+0x12c>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d168      	bne.n	800647c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e24c      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063b6:	d106      	bne.n	80063c6 <HAL_RCC_OscConfig+0x76>
 80063b8:	4b80      	ldr	r3, [pc, #512]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a7f      	ldr	r2, [pc, #508]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 80063be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063c2:	6013      	str	r3, [r2, #0]
 80063c4:	e02e      	b.n	8006424 <HAL_RCC_OscConfig+0xd4>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10c      	bne.n	80063e8 <HAL_RCC_OscConfig+0x98>
 80063ce:	4b7b      	ldr	r3, [pc, #492]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a7a      	ldr	r2, [pc, #488]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 80063d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	4b78      	ldr	r3, [pc, #480]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a77      	ldr	r2, [pc, #476]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 80063e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	e01d      	b.n	8006424 <HAL_RCC_OscConfig+0xd4>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063f0:	d10c      	bne.n	800640c <HAL_RCC_OscConfig+0xbc>
 80063f2:	4b72      	ldr	r3, [pc, #456]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a71      	ldr	r2, [pc, #452]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 80063f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	4b6f      	ldr	r3, [pc, #444]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a6e      	ldr	r2, [pc, #440]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	e00b      	b.n	8006424 <HAL_RCC_OscConfig+0xd4>
 800640c:	4b6b      	ldr	r3, [pc, #428]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a6a      	ldr	r2, [pc, #424]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006416:	6013      	str	r3, [r2, #0]
 8006418:	4b68      	ldr	r3, [pc, #416]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a67      	ldr	r2, [pc, #412]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 800641e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006422:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d013      	beq.n	8006454 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800642c:	f7fe fd7c 	bl	8004f28 <HAL_GetTick>
 8006430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006432:	e008      	b.n	8006446 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006434:	f7fe fd78 	bl	8004f28 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b64      	cmp	r3, #100	@ 0x64
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e200      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006446:	4b5d      	ldr	r3, [pc, #372]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d0f0      	beq.n	8006434 <HAL_RCC_OscConfig+0xe4>
 8006452:	e014      	b.n	800647e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006454:	f7fe fd68 	bl	8004f28 <HAL_GetTick>
 8006458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800645a:	e008      	b.n	800646e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800645c:	f7fe fd64 	bl	8004f28 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b64      	cmp	r3, #100	@ 0x64
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e1ec      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800646e:	4b53      	ldr	r3, [pc, #332]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1f0      	bne.n	800645c <HAL_RCC_OscConfig+0x10c>
 800647a:	e000      	b.n	800647e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800647c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d063      	beq.n	8006552 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800648a:	4b4c      	ldr	r3, [pc, #304]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f003 030c 	and.w	r3, r3, #12
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00b      	beq.n	80064ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006496:	4b49      	ldr	r3, [pc, #292]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f003 030c 	and.w	r3, r3, #12
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d11c      	bne.n	80064dc <HAL_RCC_OscConfig+0x18c>
 80064a2:	4b46      	ldr	r3, [pc, #280]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d116      	bne.n	80064dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ae:	4b43      	ldr	r3, [pc, #268]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d005      	beq.n	80064c6 <HAL_RCC_OscConfig+0x176>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d001      	beq.n	80064c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e1c0      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064c6:	4b3d      	ldr	r3, [pc, #244]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	4939      	ldr	r1, [pc, #228]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064da:	e03a      	b.n	8006552 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d020      	beq.n	8006526 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064e4:	4b36      	ldr	r3, [pc, #216]	@ (80065c0 <HAL_RCC_OscConfig+0x270>)
 80064e6:	2201      	movs	r2, #1
 80064e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ea:	f7fe fd1d 	bl	8004f28 <HAL_GetTick>
 80064ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064f2:	f7fe fd19 	bl	8004f28 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e1a1      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006504:	4b2d      	ldr	r3, [pc, #180]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d0f0      	beq.n	80064f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006510:	4b2a      	ldr	r3, [pc, #168]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	4927      	ldr	r1, [pc, #156]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006520:	4313      	orrs	r3, r2
 8006522:	600b      	str	r3, [r1, #0]
 8006524:	e015      	b.n	8006552 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006526:	4b26      	ldr	r3, [pc, #152]	@ (80065c0 <HAL_RCC_OscConfig+0x270>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800652c:	f7fe fcfc 	bl	8004f28 <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006532:	e008      	b.n	8006546 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006534:	f7fe fcf8 	bl	8004f28 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e180      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006546:	4b1d      	ldr	r3, [pc, #116]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1f0      	bne.n	8006534 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d03a      	beq.n	80065d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d019      	beq.n	800659a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006566:	4b17      	ldr	r3, [pc, #92]	@ (80065c4 <HAL_RCC_OscConfig+0x274>)
 8006568:	2201      	movs	r2, #1
 800656a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800656c:	f7fe fcdc 	bl	8004f28 <HAL_GetTick>
 8006570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006572:	e008      	b.n	8006586 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006574:	f7fe fcd8 	bl	8004f28 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e160      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006586:	4b0d      	ldr	r3, [pc, #52]	@ (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0f0      	beq.n	8006574 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006592:	2001      	movs	r0, #1
 8006594:	f000 face 	bl	8006b34 <RCC_Delay>
 8006598:	e01c      	b.n	80065d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800659a:	4b0a      	ldr	r3, [pc, #40]	@ (80065c4 <HAL_RCC_OscConfig+0x274>)
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065a0:	f7fe fcc2 	bl	8004f28 <HAL_GetTick>
 80065a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065a6:	e00f      	b.n	80065c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065a8:	f7fe fcbe 	bl	8004f28 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d908      	bls.n	80065c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e146      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
 80065ba:	bf00      	nop
 80065bc:	40021000 	.word	0x40021000
 80065c0:	42420000 	.word	0x42420000
 80065c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065c8:	4b92      	ldr	r3, [pc, #584]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80065ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e9      	bne.n	80065a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 80a6 	beq.w	800672e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065e2:	2300      	movs	r3, #0
 80065e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065e6:	4b8b      	ldr	r3, [pc, #556]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10d      	bne.n	800660e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065f2:	4b88      	ldr	r3, [pc, #544]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	4a87      	ldr	r2, [pc, #540]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80065f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065fc:	61d3      	str	r3, [r2, #28]
 80065fe:	4b85      	ldr	r3, [pc, #532]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006606:	60bb      	str	r3, [r7, #8]
 8006608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800660a:	2301      	movs	r3, #1
 800660c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800660e:	4b82      	ldr	r3, [pc, #520]	@ (8006818 <HAL_RCC_OscConfig+0x4c8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006616:	2b00      	cmp	r3, #0
 8006618:	d118      	bne.n	800664c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800661a:	4b7f      	ldr	r3, [pc, #508]	@ (8006818 <HAL_RCC_OscConfig+0x4c8>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a7e      	ldr	r2, [pc, #504]	@ (8006818 <HAL_RCC_OscConfig+0x4c8>)
 8006620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006626:	f7fe fc7f 	bl	8004f28 <HAL_GetTick>
 800662a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800662c:	e008      	b.n	8006640 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800662e:	f7fe fc7b 	bl	8004f28 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b64      	cmp	r3, #100	@ 0x64
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e103      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006640:	4b75      	ldr	r3, [pc, #468]	@ (8006818 <HAL_RCC_OscConfig+0x4c8>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0f0      	beq.n	800662e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d106      	bne.n	8006662 <HAL_RCC_OscConfig+0x312>
 8006654:	4b6f      	ldr	r3, [pc, #444]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	4a6e      	ldr	r2, [pc, #440]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 800665a:	f043 0301 	orr.w	r3, r3, #1
 800665e:	6213      	str	r3, [r2, #32]
 8006660:	e02d      	b.n	80066be <HAL_RCC_OscConfig+0x36e>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10c      	bne.n	8006684 <HAL_RCC_OscConfig+0x334>
 800666a:	4b6a      	ldr	r3, [pc, #424]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	4a69      	ldr	r2, [pc, #420]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006670:	f023 0301 	bic.w	r3, r3, #1
 8006674:	6213      	str	r3, [r2, #32]
 8006676:	4b67      	ldr	r3, [pc, #412]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	4a66      	ldr	r2, [pc, #408]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 800667c:	f023 0304 	bic.w	r3, r3, #4
 8006680:	6213      	str	r3, [r2, #32]
 8006682:	e01c      	b.n	80066be <HAL_RCC_OscConfig+0x36e>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	2b05      	cmp	r3, #5
 800668a:	d10c      	bne.n	80066a6 <HAL_RCC_OscConfig+0x356>
 800668c:	4b61      	ldr	r3, [pc, #388]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	4a60      	ldr	r2, [pc, #384]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006692:	f043 0304 	orr.w	r3, r3, #4
 8006696:	6213      	str	r3, [r2, #32]
 8006698:	4b5e      	ldr	r3, [pc, #376]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	4a5d      	ldr	r2, [pc, #372]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 800669e:	f043 0301 	orr.w	r3, r3, #1
 80066a2:	6213      	str	r3, [r2, #32]
 80066a4:	e00b      	b.n	80066be <HAL_RCC_OscConfig+0x36e>
 80066a6:	4b5b      	ldr	r3, [pc, #364]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	4a5a      	ldr	r2, [pc, #360]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80066ac:	f023 0301 	bic.w	r3, r3, #1
 80066b0:	6213      	str	r3, [r2, #32]
 80066b2:	4b58      	ldr	r3, [pc, #352]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	4a57      	ldr	r2, [pc, #348]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80066b8:	f023 0304 	bic.w	r3, r3, #4
 80066bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d015      	beq.n	80066f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066c6:	f7fe fc2f 	bl	8004f28 <HAL_GetTick>
 80066ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066cc:	e00a      	b.n	80066e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ce:	f7fe fc2b 	bl	8004f28 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066dc:	4293      	cmp	r3, r2
 80066de:	d901      	bls.n	80066e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e0b1      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066e4:	4b4b      	ldr	r3, [pc, #300]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0ee      	beq.n	80066ce <HAL_RCC_OscConfig+0x37e>
 80066f0:	e014      	b.n	800671c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066f2:	f7fe fc19 	bl	8004f28 <HAL_GetTick>
 80066f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066f8:	e00a      	b.n	8006710 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066fa:	f7fe fc15 	bl	8004f28 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006708:	4293      	cmp	r3, r2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e09b      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006710:	4b40      	ldr	r3, [pc, #256]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1ee      	bne.n	80066fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800671c:	7dfb      	ldrb	r3, [r7, #23]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d105      	bne.n	800672e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006722:	4b3c      	ldr	r3, [pc, #240]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	4a3b      	ldr	r2, [pc, #236]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006728:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800672c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 8087 	beq.w	8006846 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006738:	4b36      	ldr	r3, [pc, #216]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f003 030c 	and.w	r3, r3, #12
 8006740:	2b08      	cmp	r3, #8
 8006742:	d061      	beq.n	8006808 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	2b02      	cmp	r3, #2
 800674a:	d146      	bne.n	80067da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800674c:	4b33      	ldr	r3, [pc, #204]	@ (800681c <HAL_RCC_OscConfig+0x4cc>)
 800674e:	2200      	movs	r2, #0
 8006750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006752:	f7fe fbe9 	bl	8004f28 <HAL_GetTick>
 8006756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006758:	e008      	b.n	800676c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800675a:	f7fe fbe5 	bl	8004f28 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	2b02      	cmp	r3, #2
 8006766:	d901      	bls.n	800676c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e06d      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800676c:	4b29      	ldr	r3, [pc, #164]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1f0      	bne.n	800675a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006780:	d108      	bne.n	8006794 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006782:	4b24      	ldr	r3, [pc, #144]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	4921      	ldr	r1, [pc, #132]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006790:	4313      	orrs	r3, r2
 8006792:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006794:	4b1f      	ldr	r3, [pc, #124]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a19      	ldr	r1, [r3, #32]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a4:	430b      	orrs	r3, r1
 80067a6:	491b      	ldr	r1, [pc, #108]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067ac:	4b1b      	ldr	r3, [pc, #108]	@ (800681c <HAL_RCC_OscConfig+0x4cc>)
 80067ae:	2201      	movs	r2, #1
 80067b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b2:	f7fe fbb9 	bl	8004f28 <HAL_GetTick>
 80067b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067b8:	e008      	b.n	80067cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ba:	f7fe fbb5 	bl	8004f28 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d901      	bls.n	80067cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e03d      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067cc:	4b11      	ldr	r3, [pc, #68]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d0f0      	beq.n	80067ba <HAL_RCC_OscConfig+0x46a>
 80067d8:	e035      	b.n	8006846 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067da:	4b10      	ldr	r3, [pc, #64]	@ (800681c <HAL_RCC_OscConfig+0x4cc>)
 80067dc:	2200      	movs	r2, #0
 80067de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e0:	f7fe fba2 	bl	8004f28 <HAL_GetTick>
 80067e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067e6:	e008      	b.n	80067fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067e8:	f7fe fb9e 	bl	8004f28 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e026      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067fa:	4b06      	ldr	r3, [pc, #24]	@ (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1f0      	bne.n	80067e8 <HAL_RCC_OscConfig+0x498>
 8006806:	e01e      	b.n	8006846 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d107      	bne.n	8006820 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e019      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
 8006814:	40021000 	.word	0x40021000
 8006818:	40007000 	.word	0x40007000
 800681c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006820:	4b0b      	ldr	r3, [pc, #44]	@ (8006850 <HAL_RCC_OscConfig+0x500>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	429a      	cmp	r2, r3
 8006832:	d106      	bne.n	8006842 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800683e:	429a      	cmp	r2, r3
 8006840:	d001      	beq.n	8006846 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e000      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	40021000 	.word	0x40021000

08006854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e0d0      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006868:	4b6a      	ldr	r3, [pc, #424]	@ (8006a14 <HAL_RCC_ClockConfig+0x1c0>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0307 	and.w	r3, r3, #7
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	429a      	cmp	r2, r3
 8006874:	d910      	bls.n	8006898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006876:	4b67      	ldr	r3, [pc, #412]	@ (8006a14 <HAL_RCC_ClockConfig+0x1c0>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f023 0207 	bic.w	r2, r3, #7
 800687e:	4965      	ldr	r1, [pc, #404]	@ (8006a14 <HAL_RCC_ClockConfig+0x1c0>)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	4313      	orrs	r3, r2
 8006884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006886:	4b63      	ldr	r3, [pc, #396]	@ (8006a14 <HAL_RCC_ClockConfig+0x1c0>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0307 	and.w	r3, r3, #7
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d001      	beq.n	8006898 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e0b8      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d020      	beq.n	80068e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0304 	and.w	r3, r3, #4
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d005      	beq.n	80068bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068b0:	4b59      	ldr	r3, [pc, #356]	@ (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	4a58      	ldr	r2, [pc, #352]	@ (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80068b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80068ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0308 	and.w	r3, r3, #8
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d005      	beq.n	80068d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068c8:	4b53      	ldr	r3, [pc, #332]	@ (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	4a52      	ldr	r2, [pc, #328]	@ (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80068ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80068d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068d4:	4b50      	ldr	r3, [pc, #320]	@ (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	494d      	ldr	r1, [pc, #308]	@ (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d040      	beq.n	8006974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d107      	bne.n	800690a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068fa:	4b47      	ldr	r3, [pc, #284]	@ (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d115      	bne.n	8006932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e07f      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2b02      	cmp	r3, #2
 8006910:	d107      	bne.n	8006922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006912:	4b41      	ldr	r3, [pc, #260]	@ (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d109      	bne.n	8006932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e073      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006922:	4b3d      	ldr	r3, [pc, #244]	@ (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e06b      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006932:	4b39      	ldr	r3, [pc, #228]	@ (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f023 0203 	bic.w	r2, r3, #3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	4936      	ldr	r1, [pc, #216]	@ (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 8006940:	4313      	orrs	r3, r2
 8006942:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006944:	f7fe faf0 	bl	8004f28 <HAL_GetTick>
 8006948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800694a:	e00a      	b.n	8006962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800694c:	f7fe faec 	bl	8004f28 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800695a:	4293      	cmp	r3, r2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e053      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006962:	4b2d      	ldr	r3, [pc, #180]	@ (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f003 020c 	and.w	r2, r3, #12
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	429a      	cmp	r2, r3
 8006972:	d1eb      	bne.n	800694c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006974:	4b27      	ldr	r3, [pc, #156]	@ (8006a14 <HAL_RCC_ClockConfig+0x1c0>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d210      	bcs.n	80069a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006982:	4b24      	ldr	r3, [pc, #144]	@ (8006a14 <HAL_RCC_ClockConfig+0x1c0>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f023 0207 	bic.w	r2, r3, #7
 800698a:	4922      	ldr	r1, [pc, #136]	@ (8006a14 <HAL_RCC_ClockConfig+0x1c0>)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	4313      	orrs	r3, r2
 8006990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006992:	4b20      	ldr	r3, [pc, #128]	@ (8006a14 <HAL_RCC_ClockConfig+0x1c0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	429a      	cmp	r2, r3
 800699e:	d001      	beq.n	80069a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e032      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d008      	beq.n	80069c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069b0:	4b19      	ldr	r3, [pc, #100]	@ (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	4916      	ldr	r1, [pc, #88]	@ (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d009      	beq.n	80069e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80069ce:	4b12      	ldr	r3, [pc, #72]	@ (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	00db      	lsls	r3, r3, #3
 80069dc:	490e      	ldr	r1, [pc, #56]	@ (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069e2:	f000 f821 	bl	8006a28 <HAL_RCC_GetSysClockFreq>
 80069e6:	4602      	mov	r2, r0
 80069e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	091b      	lsrs	r3, r3, #4
 80069ee:	f003 030f 	and.w	r3, r3, #15
 80069f2:	490a      	ldr	r1, [pc, #40]	@ (8006a1c <HAL_RCC_ClockConfig+0x1c8>)
 80069f4:	5ccb      	ldrb	r3, [r1, r3]
 80069f6:	fa22 f303 	lsr.w	r3, r2, r3
 80069fa:	4a09      	ldr	r2, [pc, #36]	@ (8006a20 <HAL_RCC_ClockConfig+0x1cc>)
 80069fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80069fe:	4b09      	ldr	r3, [pc, #36]	@ (8006a24 <HAL_RCC_ClockConfig+0x1d0>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fe fa4e 	bl	8004ea4 <HAL_InitTick>

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	40022000 	.word	0x40022000
 8006a18:	40021000 	.word	0x40021000
 8006a1c:	08008d64 	.word	0x08008d64
 8006a20:	20000020 	.word	0x20000020
 8006a24:	20000024 	.word	0x20000024

08006a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	2300      	movs	r3, #0
 8006a34:	60bb      	str	r3, [r7, #8]
 8006a36:	2300      	movs	r3, #0
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a42:	4b1e      	ldr	r3, [pc, #120]	@ (8006abc <HAL_RCC_GetSysClockFreq+0x94>)
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f003 030c 	and.w	r3, r3, #12
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	d002      	beq.n	8006a58 <HAL_RCC_GetSysClockFreq+0x30>
 8006a52:	2b08      	cmp	r3, #8
 8006a54:	d003      	beq.n	8006a5e <HAL_RCC_GetSysClockFreq+0x36>
 8006a56:	e027      	b.n	8006aa8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a58:	4b19      	ldr	r3, [pc, #100]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8006a5a:	613b      	str	r3, [r7, #16]
      break;
 8006a5c:	e027      	b.n	8006aae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	0c9b      	lsrs	r3, r3, #18
 8006a62:	f003 030f 	and.w	r3, r3, #15
 8006a66:	4a17      	ldr	r2, [pc, #92]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006a68:	5cd3      	ldrb	r3, [r2, r3]
 8006a6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d010      	beq.n	8006a98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006a76:	4b11      	ldr	r3, [pc, #68]	@ (8006abc <HAL_RCC_GetSysClockFreq+0x94>)
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	0c5b      	lsrs	r3, r3, #17
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	4a11      	ldr	r2, [pc, #68]	@ (8006ac8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006a82:	5cd3      	ldrb	r3, [r2, r3]
 8006a84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a0d      	ldr	r2, [pc, #52]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8006a8a:	fb03 f202 	mul.w	r2, r3, r2
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	e004      	b.n	8006aa2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8006acc <HAL_RCC_GetSysClockFreq+0xa4>)
 8006a9c:	fb02 f303 	mul.w	r3, r2, r3
 8006aa0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	613b      	str	r3, [r7, #16]
      break;
 8006aa6:	e002      	b.n	8006aae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006aa8:	4b05      	ldr	r3, [pc, #20]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8006aaa:	613b      	str	r3, [r7, #16]
      break;
 8006aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006aae:	693b      	ldr	r3, [r7, #16]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	371c      	adds	r7, #28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bc80      	pop	{r7}
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	40021000 	.word	0x40021000
 8006ac0:	007a1200 	.word	0x007a1200
 8006ac4:	08008d7c 	.word	0x08008d7c
 8006ac8:	08008d8c 	.word	0x08008d8c
 8006acc:	003d0900 	.word	0x003d0900

08006ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ad4:	4b02      	ldr	r3, [pc, #8]	@ (8006ae0 <HAL_RCC_GetHCLKFreq+0x10>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bc80      	pop	{r7}
 8006ade:	4770      	bx	lr
 8006ae0:	20000020 	.word	0x20000020

08006ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ae8:	f7ff fff2 	bl	8006ad0 <HAL_RCC_GetHCLKFreq>
 8006aec:	4602      	mov	r2, r0
 8006aee:	4b05      	ldr	r3, [pc, #20]	@ (8006b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	0a1b      	lsrs	r3, r3, #8
 8006af4:	f003 0307 	and.w	r3, r3, #7
 8006af8:	4903      	ldr	r1, [pc, #12]	@ (8006b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006afa:	5ccb      	ldrb	r3, [r1, r3]
 8006afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	40021000 	.word	0x40021000
 8006b08:	08008d74 	.word	0x08008d74

08006b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b10:	f7ff ffde 	bl	8006ad0 <HAL_RCC_GetHCLKFreq>
 8006b14:	4602      	mov	r2, r0
 8006b16:	4b05      	ldr	r3, [pc, #20]	@ (8006b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	0adb      	lsrs	r3, r3, #11
 8006b1c:	f003 0307 	and.w	r3, r3, #7
 8006b20:	4903      	ldr	r1, [pc, #12]	@ (8006b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b22:	5ccb      	ldrb	r3, [r1, r3]
 8006b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	40021000 	.word	0x40021000
 8006b30:	08008d74 	.word	0x08008d74

08006b34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b68 <RCC_Delay+0x34>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a0a      	ldr	r2, [pc, #40]	@ (8006b6c <RCC_Delay+0x38>)
 8006b42:	fba2 2303 	umull	r2, r3, r2, r3
 8006b46:	0a5b      	lsrs	r3, r3, #9
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	fb02 f303 	mul.w	r3, r2, r3
 8006b4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006b50:	bf00      	nop
  }
  while (Delay --);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	1e5a      	subs	r2, r3, #1
 8006b56:	60fa      	str	r2, [r7, #12]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1f9      	bne.n	8006b50 <RCC_Delay+0x1c>
}
 8006b5c:	bf00      	nop
 8006b5e:	bf00      	nop
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bc80      	pop	{r7}
 8006b66:	4770      	bx	lr
 8006b68:	20000020 	.word	0x20000020
 8006b6c:	10624dd3 	.word	0x10624dd3

08006b70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	613b      	str	r3, [r7, #16]
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d07d      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b90:	4b4f      	ldr	r3, [pc, #316]	@ (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b92:	69db      	ldr	r3, [r3, #28]
 8006b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10d      	bne.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b9c:	4b4c      	ldr	r3, [pc, #304]	@ (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	4a4b      	ldr	r2, [pc, #300]	@ (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ba2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ba6:	61d3      	str	r3, [r2, #28]
 8006ba8:	4b49      	ldr	r3, [pc, #292]	@ (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bb0:	60bb      	str	r3, [r7, #8]
 8006bb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bb8:	4b46      	ldr	r3, [pc, #280]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d118      	bne.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bc4:	4b43      	ldr	r3, [pc, #268]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a42      	ldr	r2, [pc, #264]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bd0:	f7fe f9aa 	bl	8004f28 <HAL_GetTick>
 8006bd4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bd6:	e008      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bd8:	f7fe f9a6 	bl	8004f28 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	2b64      	cmp	r3, #100	@ 0x64
 8006be4:	d901      	bls.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e06d      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bea:	4b3a      	ldr	r3, [pc, #232]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d0f0      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bf6:	4b36      	ldr	r3, [pc, #216]	@ (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bfe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d02e      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d027      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c14:	4b2e      	ldr	r3, [pc, #184]	@ (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c1e:	4b2e      	ldr	r3, [pc, #184]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c20:	2201      	movs	r2, #1
 8006c22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c24:	4b2c      	ldr	r3, [pc, #176]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006c2a:	4a29      	ldr	r2, [pc, #164]	@ (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d014      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c3a:	f7fe f975 	bl	8004f28 <HAL_GetTick>
 8006c3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c40:	e00a      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c42:	f7fe f971 	bl	8004f28 <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d901      	bls.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e036      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c58:	4b1d      	ldr	r3, [pc, #116]	@ (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d0ee      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c64:	4b1a      	ldr	r3, [pc, #104]	@ (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	4917      	ldr	r1, [pc, #92]	@ (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d105      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c7c:	4b14      	ldr	r3, [pc, #80]	@ (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	4a13      	ldr	r2, [pc, #76]	@ (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d008      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c94:	4b0e      	ldr	r3, [pc, #56]	@ (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	490b      	ldr	r1, [pc, #44]	@ (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0310 	and.w	r3, r3, #16
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d008      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cb2:	4b07      	ldr	r3, [pc, #28]	@ (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	4904      	ldr	r1, [pc, #16]	@ (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	40021000 	.word	0x40021000
 8006cd4:	40007000 	.word	0x40007000
 8006cd8:	42420440 	.word	0x42420440

08006cdc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b088      	sub	sp, #32
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	617b      	str	r3, [r7, #20]
 8006ce8:	2300      	movs	r3, #0
 8006cea:	61fb      	str	r3, [r7, #28]
 8006cec:	2300      	movs	r3, #0
 8006cee:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b10      	cmp	r3, #16
 8006cfc:	d00a      	beq.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b10      	cmp	r3, #16
 8006d02:	f200 808a 	bhi.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d045      	beq.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d075      	beq.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006d12:	e082      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8006d14:	4b46      	ldr	r3, [pc, #280]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006d1a:	4b45      	ldr	r3, [pc, #276]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d07b      	beq.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	0c9b      	lsrs	r3, r3, #18
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	4a41      	ldr	r2, [pc, #260]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8006d30:	5cd3      	ldrb	r3, [r2, r3]
 8006d32:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d015      	beq.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d3e:	4b3c      	ldr	r3, [pc, #240]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	0c5b      	lsrs	r3, r3, #17
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	4a3b      	ldr	r2, [pc, #236]	@ (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8006d4a:	5cd3      	ldrb	r3, [r2, r3]
 8006d4c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00d      	beq.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006d58:	4a38      	ldr	r2, [pc, #224]	@ (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	fb02 f303 	mul.w	r3, r2, r3
 8006d66:	61fb      	str	r3, [r7, #28]
 8006d68:	e004      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	4a34      	ldr	r2, [pc, #208]	@ (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8006d6e:	fb02 f303 	mul.w	r3, r2, r3
 8006d72:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006d74:	4b2e      	ldr	r3, [pc, #184]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d80:	d102      	bne.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	61bb      	str	r3, [r7, #24]
      break;
 8006d86:	e04a      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	005b      	lsls	r3, r3, #1
 8006d8c:	4a2d      	ldr	r2, [pc, #180]	@ (8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d92:	085b      	lsrs	r3, r3, #1
 8006d94:	61bb      	str	r3, [r7, #24]
      break;
 8006d96:	e042      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8006d98:	4b25      	ldr	r3, [pc, #148]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006da4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006da8:	d108      	bne.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f003 0302 	and.w	r3, r3, #2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8006db4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006db8:	61bb      	str	r3, [r7, #24]
 8006dba:	e01f      	b.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dc6:	d109      	bne.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006dc8:	4b19      	ldr	r3, [pc, #100]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8006dd4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8006dd8:	61bb      	str	r3, [r7, #24]
 8006dda:	e00f      	b.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006de2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006de6:	d11c      	bne.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006de8:	4b11      	ldr	r3, [pc, #68]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d016      	beq.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8006df4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8006df8:	61bb      	str	r3, [r7, #24]
      break;
 8006dfa:	e012      	b.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006dfc:	e011      	b.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006dfe:	f7ff fe85 	bl	8006b0c <HAL_RCC_GetPCLK2Freq>
 8006e02:	4602      	mov	r2, r0
 8006e04:	4b0a      	ldr	r3, [pc, #40]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	0b9b      	lsrs	r3, r3, #14
 8006e0a:	f003 0303 	and.w	r3, r3, #3
 8006e0e:	3301      	adds	r3, #1
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e16:	61bb      	str	r3, [r7, #24]
      break;
 8006e18:	e004      	b.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006e1a:	bf00      	nop
 8006e1c:	e002      	b.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006e1e:	bf00      	nop
 8006e20:	e000      	b.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006e22:	bf00      	nop
    }
  }
  return (frequency);
 8006e24:	69bb      	ldr	r3, [r7, #24]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3720      	adds	r7, #32
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	40021000 	.word	0x40021000
 8006e34:	08008d90 	.word	0x08008d90
 8006e38:	08008da0 	.word	0x08008da0
 8006e3c:	007a1200 	.word	0x007a1200
 8006e40:	003d0900 	.word	0x003d0900
 8006e44:	aaaaaaab 	.word	0xaaaaaaab

08006e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e041      	b.n	8006ede <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d106      	bne.n	8006e74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7fd fe28 	bl	8004ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2202      	movs	r2, #2
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	3304      	adds	r3, #4
 8006e84:	4619      	mov	r1, r3
 8006e86:	4610      	mov	r0, r2
 8006e88:	f000 fd16 	bl	80078b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e041      	b.n	8006f7c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d106      	bne.n	8006f12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f839 	bl	8006f84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2202      	movs	r2, #2
 8006f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	3304      	adds	r3, #4
 8006f22:	4619      	mov	r1, r3
 8006f24:	4610      	mov	r0, r2
 8006f26:	f000 fcc7 	bl	80078b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bc80      	pop	{r7}
 8006f94:	4770      	bx	lr
	...

08006f98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d109      	bne.n	8006fbc <HAL_TIM_PWM_Start+0x24>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	bf14      	ite	ne
 8006fb4:	2301      	movne	r3, #1
 8006fb6:	2300      	moveq	r3, #0
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	e022      	b.n	8007002 <HAL_TIM_PWM_Start+0x6a>
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	d109      	bne.n	8006fd6 <HAL_TIM_PWM_Start+0x3e>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	bf14      	ite	ne
 8006fce:	2301      	movne	r3, #1
 8006fd0:	2300      	moveq	r3, #0
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	e015      	b.n	8007002 <HAL_TIM_PWM_Start+0x6a>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d109      	bne.n	8006ff0 <HAL_TIM_PWM_Start+0x58>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	bf14      	ite	ne
 8006fe8:	2301      	movne	r3, #1
 8006fea:	2300      	moveq	r3, #0
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	e008      	b.n	8007002 <HAL_TIM_PWM_Start+0x6a>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	bf14      	ite	ne
 8006ffc:	2301      	movne	r3, #1
 8006ffe:	2300      	moveq	r3, #0
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e05e      	b.n	80070c8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d104      	bne.n	800701a <HAL_TIM_PWM_Start+0x82>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007018:	e013      	b.n	8007042 <HAL_TIM_PWM_Start+0xaa>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b04      	cmp	r3, #4
 800701e:	d104      	bne.n	800702a <HAL_TIM_PWM_Start+0x92>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007028:	e00b      	b.n	8007042 <HAL_TIM_PWM_Start+0xaa>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b08      	cmp	r3, #8
 800702e:	d104      	bne.n	800703a <HAL_TIM_PWM_Start+0xa2>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007038:	e003      	b.n	8007042 <HAL_TIM_PWM_Start+0xaa>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2202      	movs	r2, #2
 800703e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2201      	movs	r2, #1
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	4618      	mov	r0, r3
 800704c:	f000 fec0 	bl	8007dd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a1e      	ldr	r2, [pc, #120]	@ (80070d0 <HAL_TIM_PWM_Start+0x138>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d107      	bne.n	800706a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007068:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a18      	ldr	r2, [pc, #96]	@ (80070d0 <HAL_TIM_PWM_Start+0x138>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d00e      	beq.n	8007092 <HAL_TIM_PWM_Start+0xfa>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800707c:	d009      	beq.n	8007092 <HAL_TIM_PWM_Start+0xfa>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a14      	ldr	r2, [pc, #80]	@ (80070d4 <HAL_TIM_PWM_Start+0x13c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d004      	beq.n	8007092 <HAL_TIM_PWM_Start+0xfa>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a12      	ldr	r2, [pc, #72]	@ (80070d8 <HAL_TIM_PWM_Start+0x140>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d111      	bne.n	80070b6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b06      	cmp	r3, #6
 80070a2:	d010      	beq.n	80070c6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f042 0201 	orr.w	r2, r2, #1
 80070b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b4:	e007      	b.n	80070c6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f042 0201 	orr.w	r2, r2, #1
 80070c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	40012c00 	.word	0x40012c00
 80070d4:	40000400 	.word	0x40000400
 80070d8:	40000800 	.word	0x40000800

080070dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e093      	b.n	8007218 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d106      	bne.n	800710a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7fd fcf9 	bl	8004afc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2202      	movs	r2, #2
 800710e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	6812      	ldr	r2, [r2, #0]
 800711c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007120:	f023 0307 	bic.w	r3, r3, #7
 8007124:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	3304      	adds	r3, #4
 800712e:	4619      	mov	r1, r3
 8007130:	4610      	mov	r0, r2
 8007132:	f000 fbc1 	bl	80078b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	4313      	orrs	r3, r2
 8007156:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800715e:	f023 0303 	bic.w	r3, r3, #3
 8007162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	021b      	lsls	r3, r3, #8
 800716e:	4313      	orrs	r3, r2
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	4313      	orrs	r3, r2
 8007174:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800717c:	f023 030c 	bic.w	r3, r3, #12
 8007180:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007188:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800718c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68da      	ldr	r2, [r3, #12]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	021b      	lsls	r3, r3, #8
 8007198:	4313      	orrs	r3, r2
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4313      	orrs	r3, r2
 800719e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	011a      	lsls	r2, r3, #4
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	031b      	lsls	r3, r3, #12
 80071ac:	4313      	orrs	r3, r2
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80071ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	011b      	lsls	r3, r3, #4
 80071c6:	4313      	orrs	r3, r2
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3718      	adds	r7, #24
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007230:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007238:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007240:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007248:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d110      	bne.n	8007272 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d102      	bne.n	800725c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007256:	7b7b      	ldrb	r3, [r7, #13]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d001      	beq.n	8007260 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e089      	b.n	8007374 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007270:	e031      	b.n	80072d6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b04      	cmp	r3, #4
 8007276:	d110      	bne.n	800729a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007278:	7bbb      	ldrb	r3, [r7, #14]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d102      	bne.n	8007284 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800727e:	7b3b      	ldrb	r3, [r7, #12]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d001      	beq.n	8007288 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e075      	b.n	8007374 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007298:	e01d      	b.n	80072d6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800729a:	7bfb      	ldrb	r3, [r7, #15]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d108      	bne.n	80072b2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80072a0:	7bbb      	ldrb	r3, [r7, #14]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d105      	bne.n	80072b2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80072a6:	7b7b      	ldrb	r3, [r7, #13]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d102      	bne.n	80072b2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80072ac:	7b3b      	ldrb	r3, [r7, #12]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d001      	beq.n	80072b6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e05e      	b.n	8007374 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2202      	movs	r2, #2
 80072ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2202      	movs	r2, #2
 80072c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2202      	movs	r2, #2
 80072ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2202      	movs	r2, #2
 80072d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <HAL_TIM_Encoder_Start_IT+0xc4>
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d010      	beq.n	8007304 <HAL_TIM_Encoder_Start_IT+0xe4>
 80072e2:	e01f      	b.n	8007324 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2201      	movs	r2, #1
 80072ea:	2100      	movs	r1, #0
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 fd6f 	bl	8007dd0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f042 0202 	orr.w	r2, r2, #2
 8007300:	60da      	str	r2, [r3, #12]
      break;
 8007302:	e02e      	b.n	8007362 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2201      	movs	r2, #1
 800730a:	2104      	movs	r1, #4
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fd5f 	bl	8007dd0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68da      	ldr	r2, [r3, #12]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f042 0204 	orr.w	r2, r2, #4
 8007320:	60da      	str	r2, [r3, #12]
      break;
 8007322:	e01e      	b.n	8007362 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2201      	movs	r2, #1
 800732a:	2100      	movs	r1, #0
 800732c:	4618      	mov	r0, r3
 800732e:	f000 fd4f 	bl	8007dd0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2201      	movs	r2, #1
 8007338:	2104      	movs	r1, #4
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fd48 	bl	8007dd0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68da      	ldr	r2, [r3, #12]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0202 	orr.w	r2, r2, #2
 800734e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f042 0204 	orr.w	r2, r2, #4
 800735e:	60da      	str	r2, [r3, #12]
      break;
 8007360:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f042 0201 	orr.w	r2, r2, #1
 8007370:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	f003 0302 	and.w	r3, r3, #2
 800739a:	2b00      	cmp	r3, #0
 800739c:	d020      	beq.n	80073e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d01b      	beq.n	80073e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f06f 0202 	mvn.w	r2, #2
 80073b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	f003 0303 	and.w	r3, r3, #3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f7fa fa80 	bl	80018cc <HAL_TIM_IC_CaptureCallback>
 80073cc:	e005      	b.n	80073da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fa56 	bl	8007880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fa5c 	bl	8007892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f003 0304 	and.w	r3, r3, #4
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d020      	beq.n	800742c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f003 0304 	and.w	r3, r3, #4
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d01b      	beq.n	800742c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f06f 0204 	mvn.w	r2, #4
 80073fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2202      	movs	r2, #2
 8007402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7fa fa5a 	bl	80018cc <HAL_TIM_IC_CaptureCallback>
 8007418:	e005      	b.n	8007426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fa30 	bl	8007880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fa36 	bl	8007892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	f003 0308 	and.w	r3, r3, #8
 8007432:	2b00      	cmp	r3, #0
 8007434:	d020      	beq.n	8007478 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f003 0308 	and.w	r3, r3, #8
 800743c:	2b00      	cmp	r3, #0
 800743e:	d01b      	beq.n	8007478 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f06f 0208 	mvn.w	r2, #8
 8007448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2204      	movs	r2, #4
 800744e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	f003 0303 	and.w	r3, r3, #3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7fa fa34 	bl	80018cc <HAL_TIM_IC_CaptureCallback>
 8007464:	e005      	b.n	8007472 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fa0a 	bl	8007880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fa10 	bl	8007892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f003 0310 	and.w	r3, r3, #16
 800747e:	2b00      	cmp	r3, #0
 8007480:	d020      	beq.n	80074c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f003 0310 	and.w	r3, r3, #16
 8007488:	2b00      	cmp	r3, #0
 800748a:	d01b      	beq.n	80074c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f06f 0210 	mvn.w	r2, #16
 8007494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2208      	movs	r2, #8
 800749a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7fa fa0e 	bl	80018cc <HAL_TIM_IC_CaptureCallback>
 80074b0:	e005      	b.n	80074be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f9e4 	bl	8007880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f9ea 	bl	8007892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00c      	beq.n	80074e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d007      	beq.n	80074e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f06f 0201 	mvn.w	r2, #1
 80074e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f9c3 	bl	800786e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00c      	beq.n	800750c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d007      	beq.n	800750c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fced 	bl	8007ee6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00c      	beq.n	8007530 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800751c:	2b00      	cmp	r3, #0
 800751e:	d007      	beq.n	8007530 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f9ba 	bl	80078a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	f003 0320 	and.w	r3, r3, #32
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00c      	beq.n	8007554 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f003 0320 	and.w	r3, r3, #32
 8007540:	2b00      	cmp	r3, #0
 8007542:	d007      	beq.n	8007554 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f06f 0220 	mvn.w	r2, #32
 800754c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fcc0 	bl	8007ed4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007554:	bf00      	nop
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007572:	2b01      	cmp	r3, #1
 8007574:	d101      	bne.n	800757a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007576:	2302      	movs	r3, #2
 8007578:	e0ae      	b.n	80076d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b0c      	cmp	r3, #12
 8007586:	f200 809f 	bhi.w	80076c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800758a:	a201      	add	r2, pc, #4	@ (adr r2, 8007590 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800758c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007590:	080075c5 	.word	0x080075c5
 8007594:	080076c9 	.word	0x080076c9
 8007598:	080076c9 	.word	0x080076c9
 800759c:	080076c9 	.word	0x080076c9
 80075a0:	08007605 	.word	0x08007605
 80075a4:	080076c9 	.word	0x080076c9
 80075a8:	080076c9 	.word	0x080076c9
 80075ac:	080076c9 	.word	0x080076c9
 80075b0:	08007647 	.word	0x08007647
 80075b4:	080076c9 	.word	0x080076c9
 80075b8:	080076c9 	.word	0x080076c9
 80075bc:	080076c9 	.word	0x080076c9
 80075c0:	08007687 	.word	0x08007687
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68b9      	ldr	r1, [r7, #8]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 f9e2 	bl	8007994 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	699a      	ldr	r2, [r3, #24]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0208 	orr.w	r2, r2, #8
 80075de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	699a      	ldr	r2, [r3, #24]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f022 0204 	bic.w	r2, r2, #4
 80075ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6999      	ldr	r1, [r3, #24]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	691a      	ldr	r2, [r3, #16]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	619a      	str	r2, [r3, #24]
      break;
 8007602:	e064      	b.n	80076ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68b9      	ldr	r1, [r7, #8]
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fa28 	bl	8007a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	699a      	ldr	r2, [r3, #24]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800761e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	699a      	ldr	r2, [r3, #24]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800762e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6999      	ldr	r1, [r3, #24]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	021a      	lsls	r2, r3, #8
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	430a      	orrs	r2, r1
 8007642:	619a      	str	r2, [r3, #24]
      break;
 8007644:	e043      	b.n	80076ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68b9      	ldr	r1, [r7, #8]
 800764c:	4618      	mov	r0, r3
 800764e:	f000 fa71 	bl	8007b34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	69da      	ldr	r2, [r3, #28]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f042 0208 	orr.w	r2, r2, #8
 8007660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	69da      	ldr	r2, [r3, #28]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0204 	bic.w	r2, r2, #4
 8007670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	69d9      	ldr	r1, [r3, #28]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	691a      	ldr	r2, [r3, #16]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	430a      	orrs	r2, r1
 8007682:	61da      	str	r2, [r3, #28]
      break;
 8007684:	e023      	b.n	80076ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68b9      	ldr	r1, [r7, #8]
 800768c:	4618      	mov	r0, r3
 800768e:	f000 fabb 	bl	8007c08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69da      	ldr	r2, [r3, #28]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	69da      	ldr	r2, [r3, #28]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	69d9      	ldr	r1, [r3, #28]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	021a      	lsls	r2, r3, #8
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	430a      	orrs	r2, r1
 80076c4:	61da      	str	r2, [r3, #28]
      break;
 80076c6:	e002      	b.n	80076ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	75fb      	strb	r3, [r7, #23]
      break;
 80076cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80076d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3718      	adds	r7, #24
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d101      	bne.n	80076fc <HAL_TIM_ConfigClockSource+0x1c>
 80076f8:	2302      	movs	r3, #2
 80076fa:	e0b4      	b.n	8007866 <HAL_TIM_ConfigClockSource+0x186>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2202      	movs	r2, #2
 8007708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800771a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007722:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007734:	d03e      	beq.n	80077b4 <HAL_TIM_ConfigClockSource+0xd4>
 8007736:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800773a:	f200 8087 	bhi.w	800784c <HAL_TIM_ConfigClockSource+0x16c>
 800773e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007742:	f000 8086 	beq.w	8007852 <HAL_TIM_ConfigClockSource+0x172>
 8007746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800774a:	d87f      	bhi.n	800784c <HAL_TIM_ConfigClockSource+0x16c>
 800774c:	2b70      	cmp	r3, #112	@ 0x70
 800774e:	d01a      	beq.n	8007786 <HAL_TIM_ConfigClockSource+0xa6>
 8007750:	2b70      	cmp	r3, #112	@ 0x70
 8007752:	d87b      	bhi.n	800784c <HAL_TIM_ConfigClockSource+0x16c>
 8007754:	2b60      	cmp	r3, #96	@ 0x60
 8007756:	d050      	beq.n	80077fa <HAL_TIM_ConfigClockSource+0x11a>
 8007758:	2b60      	cmp	r3, #96	@ 0x60
 800775a:	d877      	bhi.n	800784c <HAL_TIM_ConfigClockSource+0x16c>
 800775c:	2b50      	cmp	r3, #80	@ 0x50
 800775e:	d03c      	beq.n	80077da <HAL_TIM_ConfigClockSource+0xfa>
 8007760:	2b50      	cmp	r3, #80	@ 0x50
 8007762:	d873      	bhi.n	800784c <HAL_TIM_ConfigClockSource+0x16c>
 8007764:	2b40      	cmp	r3, #64	@ 0x40
 8007766:	d058      	beq.n	800781a <HAL_TIM_ConfigClockSource+0x13a>
 8007768:	2b40      	cmp	r3, #64	@ 0x40
 800776a:	d86f      	bhi.n	800784c <HAL_TIM_ConfigClockSource+0x16c>
 800776c:	2b30      	cmp	r3, #48	@ 0x30
 800776e:	d064      	beq.n	800783a <HAL_TIM_ConfigClockSource+0x15a>
 8007770:	2b30      	cmp	r3, #48	@ 0x30
 8007772:	d86b      	bhi.n	800784c <HAL_TIM_ConfigClockSource+0x16c>
 8007774:	2b20      	cmp	r3, #32
 8007776:	d060      	beq.n	800783a <HAL_TIM_ConfigClockSource+0x15a>
 8007778:	2b20      	cmp	r3, #32
 800777a:	d867      	bhi.n	800784c <HAL_TIM_ConfigClockSource+0x16c>
 800777c:	2b00      	cmp	r3, #0
 800777e:	d05c      	beq.n	800783a <HAL_TIM_ConfigClockSource+0x15a>
 8007780:	2b10      	cmp	r3, #16
 8007782:	d05a      	beq.n	800783a <HAL_TIM_ConfigClockSource+0x15a>
 8007784:	e062      	b.n	800784c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007796:	f000 fafc 	bl	8007d92 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80077a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	609a      	str	r2, [r3, #8]
      break;
 80077b2:	e04f      	b.n	8007854 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80077c4:	f000 fae5 	bl	8007d92 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689a      	ldr	r2, [r3, #8]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077d6:	609a      	str	r2, [r3, #8]
      break;
 80077d8:	e03c      	b.n	8007854 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077e6:	461a      	mov	r2, r3
 80077e8:	f000 fa5c 	bl	8007ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2150      	movs	r1, #80	@ 0x50
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 fab3 	bl	8007d5e <TIM_ITRx_SetConfig>
      break;
 80077f8:	e02c      	b.n	8007854 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007806:	461a      	mov	r2, r3
 8007808:	f000 fa7a 	bl	8007d00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2160      	movs	r1, #96	@ 0x60
 8007812:	4618      	mov	r0, r3
 8007814:	f000 faa3 	bl	8007d5e <TIM_ITRx_SetConfig>
      break;
 8007818:	e01c      	b.n	8007854 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007826:	461a      	mov	r2, r3
 8007828:	f000 fa3c 	bl	8007ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2140      	movs	r1, #64	@ 0x40
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fa93 	bl	8007d5e <TIM_ITRx_SetConfig>
      break;
 8007838:	e00c      	b.n	8007854 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4619      	mov	r1, r3
 8007844:	4610      	mov	r0, r2
 8007846:	f000 fa8a 	bl	8007d5e <TIM_ITRx_SetConfig>
      break;
 800784a:	e003      	b.n	8007854 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	73fb      	strb	r3, [r7, #15]
      break;
 8007850:	e000      	b.n	8007854 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007852:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007864:	7bfb      	ldrb	r3, [r7, #15]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800786e:	b480      	push	{r7}
 8007870:	b083      	sub	sp, #12
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007876:	bf00      	nop
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	bc80      	pop	{r7}
 800787e:	4770      	bx	lr

08007880 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	bc80      	pop	{r7}
 8007890:	4770      	bx	lr

08007892 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800789a:	bf00      	nop
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	bc80      	pop	{r7}
 80078a2:	4770      	bx	lr

080078a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bc80      	pop	{r7}
 80078b4:	4770      	bx	lr
	...

080078b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a2f      	ldr	r2, [pc, #188]	@ (8007988 <TIM_Base_SetConfig+0xd0>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d00b      	beq.n	80078e8 <TIM_Base_SetConfig+0x30>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078d6:	d007      	beq.n	80078e8 <TIM_Base_SetConfig+0x30>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a2c      	ldr	r2, [pc, #176]	@ (800798c <TIM_Base_SetConfig+0xd4>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d003      	beq.n	80078e8 <TIM_Base_SetConfig+0x30>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a2b      	ldr	r2, [pc, #172]	@ (8007990 <TIM_Base_SetConfig+0xd8>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d108      	bne.n	80078fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a22      	ldr	r2, [pc, #136]	@ (8007988 <TIM_Base_SetConfig+0xd0>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d00b      	beq.n	800791a <TIM_Base_SetConfig+0x62>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007908:	d007      	beq.n	800791a <TIM_Base_SetConfig+0x62>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a1f      	ldr	r2, [pc, #124]	@ (800798c <TIM_Base_SetConfig+0xd4>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d003      	beq.n	800791a <TIM_Base_SetConfig+0x62>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a1e      	ldr	r2, [pc, #120]	@ (8007990 <TIM_Base_SetConfig+0xd8>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d108      	bne.n	800792c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	4313      	orrs	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	4313      	orrs	r3, r2
 8007938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	689a      	ldr	r2, [r3, #8]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a0d      	ldr	r2, [pc, #52]	@ (8007988 <TIM_Base_SetConfig+0xd0>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d103      	bne.n	8007960 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	691a      	ldr	r2, [r3, #16]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d005      	beq.n	800797e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	f023 0201 	bic.w	r2, r3, #1
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	611a      	str	r2, [r3, #16]
  }
}
 800797e:	bf00      	nop
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	bc80      	pop	{r7}
 8007986:	4770      	bx	lr
 8007988:	40012c00 	.word	0x40012c00
 800798c:	40000400 	.word	0x40000400
 8007990:	40000800 	.word	0x40000800

08007994 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007994:	b480      	push	{r7}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a1b      	ldr	r3, [r3, #32]
 80079a8:	f023 0201 	bic.w	r2, r3, #1
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f023 0303 	bic.w	r3, r3, #3
 80079ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f023 0302 	bic.w	r3, r3, #2
 80079dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a1c      	ldr	r2, [pc, #112]	@ (8007a5c <TIM_OC1_SetConfig+0xc8>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d10c      	bne.n	8007a0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f023 0308 	bic.w	r3, r3, #8
 80079f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f023 0304 	bic.w	r3, r3, #4
 8007a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a13      	ldr	r2, [pc, #76]	@ (8007a5c <TIM_OC1_SetConfig+0xc8>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d111      	bne.n	8007a36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	693a      	ldr	r2, [r7, #16]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	621a      	str	r2, [r3, #32]
}
 8007a50:	bf00      	nop
 8007a52:	371c      	adds	r7, #28
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bc80      	pop	{r7}
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	40012c00 	.word	0x40012c00

08007a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	f023 0210 	bic.w	r2, r3, #16
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	021b      	lsls	r3, r3, #8
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f023 0320 	bic.w	r3, r3, #32
 8007aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	011b      	lsls	r3, r3, #4
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a1d      	ldr	r2, [pc, #116]	@ (8007b30 <TIM_OC2_SetConfig+0xd0>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d10d      	bne.n	8007adc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	011b      	lsls	r3, r3, #4
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ada:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a14      	ldr	r2, [pc, #80]	@ (8007b30 <TIM_OC2_SetConfig+0xd0>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d113      	bne.n	8007b0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007aea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007af2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	621a      	str	r2, [r3, #32]
}
 8007b26:	bf00      	nop
 8007b28:	371c      	adds	r7, #28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bc80      	pop	{r7}
 8007b2e:	4770      	bx	lr
 8007b30:	40012c00 	.word	0x40012c00

08007b34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f023 0303 	bic.w	r3, r3, #3
 8007b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	021b      	lsls	r3, r3, #8
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8007c04 <TIM_OC3_SetConfig+0xd0>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d10d      	bne.n	8007bae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	021b      	lsls	r3, r3, #8
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a14      	ldr	r2, [pc, #80]	@ (8007c04 <TIM_OC3_SetConfig+0xd0>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d113      	bne.n	8007bde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	011b      	lsls	r3, r3, #4
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	011b      	lsls	r3, r3, #4
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	621a      	str	r2, [r3, #32]
}
 8007bf8:	bf00      	nop
 8007bfa:	371c      	adds	r7, #28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bc80      	pop	{r7}
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	40012c00 	.word	0x40012c00

08007c08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	021b      	lsls	r3, r3, #8
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	031b      	lsls	r3, r3, #12
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a0f      	ldr	r2, [pc, #60]	@ (8007ca0 <TIM_OC4_SetConfig+0x98>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d109      	bne.n	8007c7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	019b      	lsls	r3, r3, #6
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	697a      	ldr	r2, [r7, #20]
 8007c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	621a      	str	r2, [r3, #32]
}
 8007c96:	bf00      	nop
 8007c98:	371c      	adds	r7, #28
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bc80      	pop	{r7}
 8007c9e:	4770      	bx	lr
 8007ca0:	40012c00 	.word	0x40012c00

08007ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	f023 0201 	bic.w	r2, r3, #1
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	011b      	lsls	r3, r3, #4
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f023 030a 	bic.w	r3, r3, #10
 8007ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	621a      	str	r2, [r3, #32]
}
 8007cf6:	bf00      	nop
 8007cf8:	371c      	adds	r7, #28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bc80      	pop	{r7}
 8007cfe:	4770      	bx	lr

08007d00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b087      	sub	sp, #28
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6a1b      	ldr	r3, [r3, #32]
 8007d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	f023 0210 	bic.w	r2, r3, #16
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	031b      	lsls	r3, r3, #12
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007d3c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	011b      	lsls	r3, r3, #4
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	621a      	str	r2, [r3, #32]
}
 8007d54:	bf00      	nop
 8007d56:	371c      	adds	r7, #28
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bc80      	pop	{r7}
 8007d5c:	4770      	bx	lr

08007d5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b085      	sub	sp, #20
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	f043 0307 	orr.w	r3, r3, #7
 8007d80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	609a      	str	r2, [r3, #8]
}
 8007d88:	bf00      	nop
 8007d8a:	3714      	adds	r7, #20
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bc80      	pop	{r7}
 8007d90:	4770      	bx	lr

08007d92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b087      	sub	sp, #28
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	607a      	str	r2, [r7, #4]
 8007d9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007dac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	021a      	lsls	r2, r3, #8
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	431a      	orrs	r2, r3
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	609a      	str	r2, [r3, #8]
}
 8007dc6:	bf00      	nop
 8007dc8:	371c      	adds	r7, #28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bc80      	pop	{r7}
 8007dce:	4770      	bx	lr

08007dd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f003 031f 	and.w	r3, r3, #31
 8007de2:	2201      	movs	r2, #1
 8007de4:	fa02 f303 	lsl.w	r3, r2, r3
 8007de8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6a1a      	ldr	r2, [r3, #32]
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	43db      	mvns	r3, r3
 8007df2:	401a      	ands	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6a1a      	ldr	r2, [r3, #32]
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	f003 031f 	and.w	r3, r3, #31
 8007e02:	6879      	ldr	r1, [r7, #4]
 8007e04:	fa01 f303 	lsl.w	r3, r1, r3
 8007e08:	431a      	orrs	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	621a      	str	r2, [r3, #32]
}
 8007e0e:	bf00      	nop
 8007e10:	371c      	adds	r7, #28
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bc80      	pop	{r7}
 8007e16:	4770      	bx	lr

08007e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d101      	bne.n	8007e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	e046      	b.n	8007ebe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a16      	ldr	r2, [pc, #88]	@ (8007ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d00e      	beq.n	8007e92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e7c:	d009      	beq.n	8007e92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a12      	ldr	r2, [pc, #72]	@ (8007ecc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d004      	beq.n	8007e92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a10      	ldr	r2, [pc, #64]	@ (8007ed0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d10c      	bne.n	8007eac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3714      	adds	r7, #20
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bc80      	pop	{r7}
 8007ec6:	4770      	bx	lr
 8007ec8:	40012c00 	.word	0x40012c00
 8007ecc:	40000400 	.word	0x40000400
 8007ed0:	40000800 	.word	0x40000800

08007ed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bc80      	pop	{r7}
 8007ee4:	4770      	bx	lr

08007ee6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b083      	sub	sp, #12
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007eee:	bf00      	nop
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bc80      	pop	{r7}
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e042      	b.n	8007f90 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d106      	bne.n	8007f24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7fc fe98 	bl	8004c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2224      	movs	r2, #36	@ 0x24
 8007f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68da      	ldr	r2, [r3, #12]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fd09 	bl	8008954 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	691a      	ldr	r2, [r3, #16]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	695a      	ldr	r2, [r3, #20]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68da      	ldr	r2, [r3, #12]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2220      	movs	r2, #32
 8007f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	2b20      	cmp	r3, #32
 8007fb0:	d121      	bne.n	8007ff6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <HAL_UART_Transmit_IT+0x26>
 8007fb8:	88fb      	ldrh	r3, [r7, #6]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e01a      	b.n	8007ff8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	88fa      	ldrh	r2, [r7, #6]
 8007fcc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	88fa      	ldrh	r2, [r7, #6]
 8007fd2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2221      	movs	r2, #33	@ 0x21
 8007fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68da      	ldr	r2, [r3, #12]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007ff0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	e000      	b.n	8007ff8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8007ff6:	2302      	movs	r3, #2
  }
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bc80      	pop	{r7}
 8008000:	4770      	bx	lr

08008002 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b084      	sub	sp, #16
 8008006:	af00      	add	r7, sp, #0
 8008008:	60f8      	str	r0, [r7, #12]
 800800a:	60b9      	str	r1, [r7, #8]
 800800c:	4613      	mov	r3, r2
 800800e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b20      	cmp	r3, #32
 800801a:	d112      	bne.n	8008042 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <HAL_UART_Receive_IT+0x26>
 8008022:	88fb      	ldrh	r3, [r7, #6]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e00b      	b.n	8008044 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008032:	88fb      	ldrh	r3, [r7, #6]
 8008034:	461a      	mov	r2, r3
 8008036:	68b9      	ldr	r1, [r7, #8]
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f000 fab6 	bl	80085aa <UART_Start_Receive_IT>
 800803e:	4603      	mov	r3, r0
 8008040:	e000      	b.n	8008044 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008042:	2302      	movs	r3, #2
  }
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b0ba      	sub	sp, #232	@ 0xe8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008072:	2300      	movs	r3, #0
 8008074:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008078:	2300      	movs	r3, #0
 800807a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800807e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008082:	f003 030f 	and.w	r3, r3, #15
 8008086:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800808a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10f      	bne.n	80080b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008096:	f003 0320 	and.w	r3, r3, #32
 800809a:	2b00      	cmp	r3, #0
 800809c:	d009      	beq.n	80080b2 <HAL_UART_IRQHandler+0x66>
 800809e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080a2:	f003 0320 	and.w	r3, r3, #32
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fb93 	bl	80087d6 <UART_Receive_IT>
      return;
 80080b0:	e25b      	b.n	800856a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80080b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f000 80de 	beq.w	8008278 <HAL_UART_IRQHandler+0x22c>
 80080bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d106      	bne.n	80080d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80080c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 80d1 	beq.w	8008278 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80080d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00b      	beq.n	80080fa <HAL_UART_IRQHandler+0xae>
 80080e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d005      	beq.n	80080fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080f2:	f043 0201 	orr.w	r2, r3, #1
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080fe:	f003 0304 	and.w	r3, r3, #4
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00b      	beq.n	800811e <HAL_UART_IRQHandler+0xd2>
 8008106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	2b00      	cmp	r3, #0
 8008110:	d005      	beq.n	800811e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008116:	f043 0202 	orr.w	r2, r3, #2
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800811e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008122:	f003 0302 	and.w	r3, r3, #2
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00b      	beq.n	8008142 <HAL_UART_IRQHandler+0xf6>
 800812a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	2b00      	cmp	r3, #0
 8008134:	d005      	beq.n	8008142 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800813a:	f043 0204 	orr.w	r2, r3, #4
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008146:	f003 0308 	and.w	r3, r3, #8
 800814a:	2b00      	cmp	r3, #0
 800814c:	d011      	beq.n	8008172 <HAL_UART_IRQHandler+0x126>
 800814e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008152:	f003 0320 	and.w	r3, r3, #32
 8008156:	2b00      	cmp	r3, #0
 8008158:	d105      	bne.n	8008166 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800815a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	2b00      	cmp	r3, #0
 8008164:	d005      	beq.n	8008172 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800816a:	f043 0208 	orr.w	r2, r3, #8
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008176:	2b00      	cmp	r3, #0
 8008178:	f000 81f2 	beq.w	8008560 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800817c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008180:	f003 0320 	and.w	r3, r3, #32
 8008184:	2b00      	cmp	r3, #0
 8008186:	d008      	beq.n	800819a <HAL_UART_IRQHandler+0x14e>
 8008188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800818c:	f003 0320 	and.w	r3, r3, #32
 8008190:	2b00      	cmp	r3, #0
 8008192:	d002      	beq.n	800819a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fb1e 	bl	80087d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	bf14      	ite	ne
 80081a8:	2301      	movne	r3, #1
 80081aa:	2300      	moveq	r3, #0
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081b6:	f003 0308 	and.w	r3, r3, #8
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d103      	bne.n	80081c6 <HAL_UART_IRQHandler+0x17a>
 80081be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d04f      	beq.n	8008266 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fa28 	bl	800861c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d041      	beq.n	800825e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3314      	adds	r3, #20
 80081e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081e8:	e853 3f00 	ldrex	r3, [r3]
 80081ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80081f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3314      	adds	r3, #20
 8008202:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008206:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800820a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008212:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008216:	e841 2300 	strex	r3, r2, [r1]
 800821a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800821e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1d9      	bne.n	80081da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800822a:	2b00      	cmp	r3, #0
 800822c:	d013      	beq.n	8008256 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008232:	4a7e      	ldr	r2, [pc, #504]	@ (800842c <HAL_UART_IRQHandler+0x3e0>)
 8008234:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800823a:	4618      	mov	r0, r3
 800823c:	f7fd fc42 	bl	8005ac4 <HAL_DMA_Abort_IT>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d016      	beq.n	8008274 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800824a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008250:	4610      	mov	r0, r2
 8008252:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008254:	e00e      	b.n	8008274 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f993 	bl	8008582 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800825c:	e00a      	b.n	8008274 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f98f 	bl	8008582 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008264:	e006      	b.n	8008274 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f98b 	bl	8008582 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008272:	e175      	b.n	8008560 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008274:	bf00      	nop
    return;
 8008276:	e173      	b.n	8008560 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800827c:	2b01      	cmp	r3, #1
 800827e:	f040 814f 	bne.w	8008520 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008286:	f003 0310 	and.w	r3, r3, #16
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 8148 	beq.w	8008520 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008294:	f003 0310 	and.w	r3, r3, #16
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 8141 	beq.w	8008520 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800829e:	2300      	movs	r3, #0
 80082a0:	60bb      	str	r3, [r7, #8]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	60bb      	str	r3, [r7, #8]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	60bb      	str	r3, [r7, #8]
 80082b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f000 80b6 	beq.w	8008430 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f000 8145 	beq.w	8008564 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082e2:	429a      	cmp	r2, r3
 80082e4:	f080 813e 	bcs.w	8008564 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	2b20      	cmp	r3, #32
 80082f8:	f000 8088 	beq.w	800840c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	330c      	adds	r3, #12
 8008302:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008306:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800830a:	e853 3f00 	ldrex	r3, [r3]
 800830e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008312:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008316:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800831a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	330c      	adds	r3, #12
 8008324:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008328:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800832c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008330:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008334:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008338:	e841 2300 	strex	r3, r2, [r1]
 800833c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008340:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1d9      	bne.n	80082fc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3314      	adds	r3, #20
 800834e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008350:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008352:	e853 3f00 	ldrex	r3, [r3]
 8008356:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008358:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800835a:	f023 0301 	bic.w	r3, r3, #1
 800835e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	3314      	adds	r3, #20
 8008368:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800836c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008370:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008372:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008374:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008378:	e841 2300 	strex	r3, r2, [r1]
 800837c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800837e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1e1      	bne.n	8008348 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	3314      	adds	r3, #20
 800838a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800838e:	e853 3f00 	ldrex	r3, [r3]
 8008392:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008394:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008396:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800839a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	3314      	adds	r3, #20
 80083a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80083a8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80083aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80083ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80083b0:	e841 2300 	strex	r3, r2, [r1]
 80083b4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80083b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1e3      	bne.n	8008384 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2220      	movs	r2, #32
 80083c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	330c      	adds	r3, #12
 80083d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083d4:	e853 3f00 	ldrex	r3, [r3]
 80083d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80083da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083dc:	f023 0310 	bic.w	r3, r3, #16
 80083e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	330c      	adds	r3, #12
 80083ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80083ee:	65ba      	str	r2, [r7, #88]	@ 0x58
 80083f0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80083f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083f6:	e841 2300 	strex	r3, r2, [r1]
 80083fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80083fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1e3      	bne.n	80083ca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008406:	4618      	mov	r0, r3
 8008408:	f7fd fb21 	bl	8005a4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2202      	movs	r2, #2
 8008410:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800841a:	b29b      	uxth	r3, r3
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	b29b      	uxth	r3, r3
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f8b6 	bl	8008594 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008428:	e09c      	b.n	8008564 <HAL_UART_IRQHandler+0x518>
 800842a:	bf00      	nop
 800842c:	080086e1 	.word	0x080086e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008438:	b29b      	uxth	r3, r3
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008444:	b29b      	uxth	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	f000 808e 	beq.w	8008568 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800844c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 8089 	beq.w	8008568 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	330c      	adds	r3, #12
 800845c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008460:	e853 3f00 	ldrex	r3, [r3]
 8008464:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008468:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800846c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	330c      	adds	r3, #12
 8008476:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800847a:	647a      	str	r2, [r7, #68]	@ 0x44
 800847c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008480:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008482:	e841 2300 	strex	r3, r2, [r1]
 8008486:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e3      	bne.n	8008456 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3314      	adds	r3, #20
 8008494:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008498:	e853 3f00 	ldrex	r3, [r3]
 800849c:	623b      	str	r3, [r7, #32]
   return(result);
 800849e:	6a3b      	ldr	r3, [r7, #32]
 80084a0:	f023 0301 	bic.w	r3, r3, #1
 80084a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	3314      	adds	r3, #20
 80084ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80084b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80084b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084ba:	e841 2300 	strex	r3, r2, [r1]
 80084be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1e3      	bne.n	800848e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2220      	movs	r2, #32
 80084ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	330c      	adds	r3, #12
 80084da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 0310 	bic.w	r3, r3, #16
 80084ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	330c      	adds	r3, #12
 80084f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80084f8:	61fa      	str	r2, [r7, #28]
 80084fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	69b9      	ldr	r1, [r7, #24]
 80084fe:	69fa      	ldr	r2, [r7, #28]
 8008500:	e841 2300 	strex	r3, r2, [r1]
 8008504:	617b      	str	r3, [r7, #20]
   return(result);
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e3      	bne.n	80084d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2202      	movs	r2, #2
 8008510:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008512:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f83b 	bl	8008594 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800851e:	e023      	b.n	8008568 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008528:	2b00      	cmp	r3, #0
 800852a:	d009      	beq.n	8008540 <HAL_UART_IRQHandler+0x4f4>
 800852c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008534:	2b00      	cmp	r3, #0
 8008536:	d003      	beq.n	8008540 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f8e5 	bl	8008708 <UART_Transmit_IT>
    return;
 800853e:	e014      	b.n	800856a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00e      	beq.n	800856a <HAL_UART_IRQHandler+0x51e>
 800854c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008554:	2b00      	cmp	r3, #0
 8008556:	d008      	beq.n	800856a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 f924 	bl	80087a6 <UART_EndTransmit_IT>
    return;
 800855e:	e004      	b.n	800856a <HAL_UART_IRQHandler+0x51e>
    return;
 8008560:	bf00      	nop
 8008562:	e002      	b.n	800856a <HAL_UART_IRQHandler+0x51e>
      return;
 8008564:	bf00      	nop
 8008566:	e000      	b.n	800856a <HAL_UART_IRQHandler+0x51e>
      return;
 8008568:	bf00      	nop
  }
}
 800856a:	37e8      	adds	r7, #232	@ 0xe8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	bc80      	pop	{r7}
 8008580:	4770      	bx	lr

08008582 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008582:	b480      	push	{r7}
 8008584:	b083      	sub	sp, #12
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800858a:	bf00      	nop
 800858c:	370c      	adds	r7, #12
 800858e:	46bd      	mov	sp, r7
 8008590:	bc80      	pop	{r7}
 8008592:	4770      	bx	lr

08008594 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	460b      	mov	r3, r1
 800859e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bc80      	pop	{r7}
 80085a8:	4770      	bx	lr

080085aa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085aa:	b480      	push	{r7}
 80085ac:	b085      	sub	sp, #20
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	60f8      	str	r0, [r7, #12]
 80085b2:	60b9      	str	r1, [r7, #8]
 80085b4:	4613      	mov	r3, r2
 80085b6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	88fa      	ldrh	r2, [r7, #6]
 80085c2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	88fa      	ldrh	r2, [r7, #6]
 80085c8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2222      	movs	r2, #34	@ 0x22
 80085d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d007      	beq.n	80085f0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68da      	ldr	r2, [r3, #12]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085ee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	695a      	ldr	r2, [r3, #20]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f042 0201 	orr.w	r2, r2, #1
 80085fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68da      	ldr	r2, [r3, #12]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f042 0220 	orr.w	r2, r2, #32
 800860e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3714      	adds	r7, #20
 8008616:	46bd      	mov	sp, r7
 8008618:	bc80      	pop	{r7}
 800861a:	4770      	bx	lr

0800861c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800861c:	b480      	push	{r7}
 800861e:	b095      	sub	sp, #84	@ 0x54
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	330c      	adds	r3, #12
 800862a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800862e:	e853 3f00 	ldrex	r3, [r3]
 8008632:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008636:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800863a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	330c      	adds	r3, #12
 8008642:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008644:	643a      	str	r2, [r7, #64]	@ 0x40
 8008646:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008648:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800864a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800864c:	e841 2300 	strex	r3, r2, [r1]
 8008650:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1e5      	bne.n	8008624 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3314      	adds	r3, #20
 800865e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008660:	6a3b      	ldr	r3, [r7, #32]
 8008662:	e853 3f00 	ldrex	r3, [r3]
 8008666:	61fb      	str	r3, [r7, #28]
   return(result);
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	f023 0301 	bic.w	r3, r3, #1
 800866e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3314      	adds	r3, #20
 8008676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008678:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800867a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800867e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008680:	e841 2300 	strex	r3, r2, [r1]
 8008684:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1e5      	bne.n	8008658 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008690:	2b01      	cmp	r3, #1
 8008692:	d119      	bne.n	80086c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	330c      	adds	r3, #12
 800869a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	e853 3f00 	ldrex	r3, [r3]
 80086a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	f023 0310 	bic.w	r3, r3, #16
 80086aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	330c      	adds	r3, #12
 80086b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086b4:	61ba      	str	r2, [r7, #24]
 80086b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b8:	6979      	ldr	r1, [r7, #20]
 80086ba:	69ba      	ldr	r2, [r7, #24]
 80086bc:	e841 2300 	strex	r3, r2, [r1]
 80086c0:	613b      	str	r3, [r7, #16]
   return(result);
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1e5      	bne.n	8008694 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2220      	movs	r2, #32
 80086cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80086d6:	bf00      	nop
 80086d8:	3754      	adds	r7, #84	@ 0x54
 80086da:	46bd      	mov	sp, r7
 80086dc:	bc80      	pop	{r7}
 80086de:	4770      	bx	lr

080086e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f7ff ff41 	bl	8008582 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008700:	bf00      	nop
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008716:	b2db      	uxtb	r3, r3
 8008718:	2b21      	cmp	r3, #33	@ 0x21
 800871a:	d13e      	bne.n	800879a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008724:	d114      	bne.n	8008750 <UART_Transmit_IT+0x48>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d110      	bne.n	8008750 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a1b      	ldr	r3, [r3, #32]
 8008732:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	881b      	ldrh	r3, [r3, #0]
 8008738:	461a      	mov	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008742:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a1b      	ldr	r3, [r3, #32]
 8008748:	1c9a      	adds	r2, r3, #2
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	621a      	str	r2, [r3, #32]
 800874e:	e008      	b.n	8008762 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a1b      	ldr	r3, [r3, #32]
 8008754:	1c59      	adds	r1, r3, #1
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	6211      	str	r1, [r2, #32]
 800875a:	781a      	ldrb	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008766:	b29b      	uxth	r3, r3
 8008768:	3b01      	subs	r3, #1
 800876a:	b29b      	uxth	r3, r3
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	4619      	mov	r1, r3
 8008770:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10f      	bne.n	8008796 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68da      	ldr	r2, [r3, #12]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008784:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68da      	ldr	r2, [r3, #12]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008794:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	e000      	b.n	800879c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800879a:	2302      	movs	r3, #2
  }
}
 800879c:	4618      	mov	r0, r3
 800879e:	3714      	adds	r7, #20
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bc80      	pop	{r7}
 80087a4:	4770      	bx	lr

080087a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b082      	sub	sp, #8
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68da      	ldr	r2, [r3, #12]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80087bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2220      	movs	r2, #32
 80087c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7ff fed2 	bl	8008570 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b08c      	sub	sp, #48	@ 0x30
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b22      	cmp	r3, #34	@ 0x22
 80087e8:	f040 80ae 	bne.w	8008948 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087f4:	d117      	bne.n	8008826 <UART_Receive_IT+0x50>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d113      	bne.n	8008826 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80087fe:	2300      	movs	r3, #0
 8008800:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008806:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	b29b      	uxth	r3, r3
 8008810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008814:	b29a      	uxth	r2, r3
 8008816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008818:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800881e:	1c9a      	adds	r2, r3, #2
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	629a      	str	r2, [r3, #40]	@ 0x28
 8008824:	e026      	b.n	8008874 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800882a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800882c:	2300      	movs	r3, #0
 800882e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008838:	d007      	beq.n	800884a <UART_Receive_IT+0x74>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10a      	bne.n	8008858 <UART_Receive_IT+0x82>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d106      	bne.n	8008858 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	b2da      	uxtb	r2, r3
 8008852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008854:	701a      	strb	r2, [r3, #0]
 8008856:	e008      	b.n	800886a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	b2db      	uxtb	r3, r3
 8008860:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008864:	b2da      	uxtb	r2, r3
 8008866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008868:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800886e:	1c5a      	adds	r2, r3, #1
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008878:	b29b      	uxth	r3, r3
 800887a:	3b01      	subs	r3, #1
 800887c:	b29b      	uxth	r3, r3
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	4619      	mov	r1, r3
 8008882:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008884:	2b00      	cmp	r3, #0
 8008886:	d15d      	bne.n	8008944 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68da      	ldr	r2, [r3, #12]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 0220 	bic.w	r2, r2, #32
 8008896:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68da      	ldr	r2, [r3, #12]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80088a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	695a      	ldr	r2, [r3, #20]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f022 0201 	bic.w	r2, r2, #1
 80088b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2220      	movs	r2, #32
 80088bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d135      	bne.n	800893a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	330c      	adds	r3, #12
 80088da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	e853 3f00 	ldrex	r3, [r3]
 80088e2:	613b      	str	r3, [r7, #16]
   return(result);
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	f023 0310 	bic.w	r3, r3, #16
 80088ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	330c      	adds	r3, #12
 80088f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088f4:	623a      	str	r2, [r7, #32]
 80088f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f8:	69f9      	ldr	r1, [r7, #28]
 80088fa:	6a3a      	ldr	r2, [r7, #32]
 80088fc:	e841 2300 	strex	r3, r2, [r1]
 8008900:	61bb      	str	r3, [r7, #24]
   return(result);
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1e5      	bne.n	80088d4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0310 	and.w	r3, r3, #16
 8008912:	2b10      	cmp	r3, #16
 8008914:	d10a      	bne.n	800892c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008916:	2300      	movs	r3, #0
 8008918:	60fb      	str	r3, [r7, #12]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	60fb      	str	r3, [r7, #12]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	60fb      	str	r3, [r7, #12]
 800892a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7ff fe2e 	bl	8008594 <HAL_UARTEx_RxEventCallback>
 8008938:	e002      	b.n	8008940 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7f8 fed0 	bl	80016e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	e002      	b.n	800894a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008944:	2300      	movs	r3, #0
 8008946:	e000      	b.n	800894a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008948:	2302      	movs	r3, #2
  }
}
 800894a:	4618      	mov	r0, r3
 800894c:	3730      	adds	r7, #48	@ 0x30
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
	...

08008954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	68da      	ldr	r2, [r3, #12]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	430a      	orrs	r2, r1
 8008970:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	689a      	ldr	r2, [r3, #8]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	431a      	orrs	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	695b      	ldr	r3, [r3, #20]
 8008980:	4313      	orrs	r3, r2
 8008982:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800898e:	f023 030c 	bic.w	r3, r3, #12
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	6812      	ldr	r2, [r2, #0]
 8008996:	68b9      	ldr	r1, [r7, #8]
 8008998:	430b      	orrs	r3, r1
 800899a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	699a      	ldr	r2, [r3, #24]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a2c      	ldr	r2, [pc, #176]	@ (8008a68 <UART_SetConfig+0x114>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d103      	bne.n	80089c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80089bc:	f7fe f8a6 	bl	8006b0c <HAL_RCC_GetPCLK2Freq>
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	e002      	b.n	80089ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80089c4:	f7fe f88e 	bl	8006ae4 <HAL_RCC_GetPCLK1Freq>
 80089c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	4613      	mov	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	009a      	lsls	r2, r3, #2
 80089d4:	441a      	add	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80089e0:	4a22      	ldr	r2, [pc, #136]	@ (8008a6c <UART_SetConfig+0x118>)
 80089e2:	fba2 2303 	umull	r2, r3, r2, r3
 80089e6:	095b      	lsrs	r3, r3, #5
 80089e8:	0119      	lsls	r1, r3, #4
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	4613      	mov	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	009a      	lsls	r2, r3, #2
 80089f4:	441a      	add	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a00:	4b1a      	ldr	r3, [pc, #104]	@ (8008a6c <UART_SetConfig+0x118>)
 8008a02:	fba3 0302 	umull	r0, r3, r3, r2
 8008a06:	095b      	lsrs	r3, r3, #5
 8008a08:	2064      	movs	r0, #100	@ 0x64
 8008a0a:	fb00 f303 	mul.w	r3, r0, r3
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	011b      	lsls	r3, r3, #4
 8008a12:	3332      	adds	r3, #50	@ 0x32
 8008a14:	4a15      	ldr	r2, [pc, #84]	@ (8008a6c <UART_SetConfig+0x118>)
 8008a16:	fba2 2303 	umull	r2, r3, r2, r3
 8008a1a:	095b      	lsrs	r3, r3, #5
 8008a1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008a20:	4419      	add	r1, r3
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	4613      	mov	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	4413      	add	r3, r2
 8008a2a:	009a      	lsls	r2, r3, #2
 8008a2c:	441a      	add	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a38:	4b0c      	ldr	r3, [pc, #48]	@ (8008a6c <UART_SetConfig+0x118>)
 8008a3a:	fba3 0302 	umull	r0, r3, r3, r2
 8008a3e:	095b      	lsrs	r3, r3, #5
 8008a40:	2064      	movs	r0, #100	@ 0x64
 8008a42:	fb00 f303 	mul.w	r3, r0, r3
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	011b      	lsls	r3, r3, #4
 8008a4a:	3332      	adds	r3, #50	@ 0x32
 8008a4c:	4a07      	ldr	r2, [pc, #28]	@ (8008a6c <UART_SetConfig+0x118>)
 8008a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a52:	095b      	lsrs	r3, r3, #5
 8008a54:	f003 020f 	and.w	r2, r3, #15
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	440a      	add	r2, r1
 8008a5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008a60:	bf00      	nop
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	40013800 	.word	0x40013800
 8008a6c:	51eb851f 	.word	0x51eb851f

08008a70 <malloc>:
 8008a70:	4b02      	ldr	r3, [pc, #8]	@ (8008a7c <malloc+0xc>)
 8008a72:	4601      	mov	r1, r0
 8008a74:	6818      	ldr	r0, [r3, #0]
 8008a76:	f000 b82d 	b.w	8008ad4 <_malloc_r>
 8008a7a:	bf00      	nop
 8008a7c:	2000002c 	.word	0x2000002c

08008a80 <free>:
 8008a80:	4b02      	ldr	r3, [pc, #8]	@ (8008a8c <free+0xc>)
 8008a82:	4601      	mov	r1, r0
 8008a84:	6818      	ldr	r0, [r3, #0]
 8008a86:	f000 b903 	b.w	8008c90 <_free_r>
 8008a8a:	bf00      	nop
 8008a8c:	2000002c 	.word	0x2000002c

08008a90 <sbrk_aligned>:
 8008a90:	b570      	push	{r4, r5, r6, lr}
 8008a92:	4e0f      	ldr	r6, [pc, #60]	@ (8008ad0 <sbrk_aligned+0x40>)
 8008a94:	460c      	mov	r4, r1
 8008a96:	6831      	ldr	r1, [r6, #0]
 8008a98:	4605      	mov	r5, r0
 8008a9a:	b911      	cbnz	r1, 8008aa2 <sbrk_aligned+0x12>
 8008a9c:	f000 f8ae 	bl	8008bfc <_sbrk_r>
 8008aa0:	6030      	str	r0, [r6, #0]
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	f000 f8a9 	bl	8008bfc <_sbrk_r>
 8008aaa:	1c43      	adds	r3, r0, #1
 8008aac:	d103      	bne.n	8008ab6 <sbrk_aligned+0x26>
 8008aae:	f04f 34ff 	mov.w	r4, #4294967295
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	bd70      	pop	{r4, r5, r6, pc}
 8008ab6:	1cc4      	adds	r4, r0, #3
 8008ab8:	f024 0403 	bic.w	r4, r4, #3
 8008abc:	42a0      	cmp	r0, r4
 8008abe:	d0f8      	beq.n	8008ab2 <sbrk_aligned+0x22>
 8008ac0:	1a21      	subs	r1, r4, r0
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	f000 f89a 	bl	8008bfc <_sbrk_r>
 8008ac8:	3001      	adds	r0, #1
 8008aca:	d1f2      	bne.n	8008ab2 <sbrk_aligned+0x22>
 8008acc:	e7ef      	b.n	8008aae <sbrk_aligned+0x1e>
 8008ace:	bf00      	nop
 8008ad0:	20000cb8 	.word	0x20000cb8

08008ad4 <_malloc_r>:
 8008ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ad8:	1ccd      	adds	r5, r1, #3
 8008ada:	f025 0503 	bic.w	r5, r5, #3
 8008ade:	3508      	adds	r5, #8
 8008ae0:	2d0c      	cmp	r5, #12
 8008ae2:	bf38      	it	cc
 8008ae4:	250c      	movcc	r5, #12
 8008ae6:	2d00      	cmp	r5, #0
 8008ae8:	4606      	mov	r6, r0
 8008aea:	db01      	blt.n	8008af0 <_malloc_r+0x1c>
 8008aec:	42a9      	cmp	r1, r5
 8008aee:	d904      	bls.n	8008afa <_malloc_r+0x26>
 8008af0:	230c      	movs	r3, #12
 8008af2:	6033      	str	r3, [r6, #0]
 8008af4:	2000      	movs	r0, #0
 8008af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008afa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008bd0 <_malloc_r+0xfc>
 8008afe:	f000 f869 	bl	8008bd4 <__malloc_lock>
 8008b02:	f8d8 3000 	ldr.w	r3, [r8]
 8008b06:	461c      	mov	r4, r3
 8008b08:	bb44      	cbnz	r4, 8008b5c <_malloc_r+0x88>
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f7ff ffbf 	bl	8008a90 <sbrk_aligned>
 8008b12:	1c43      	adds	r3, r0, #1
 8008b14:	4604      	mov	r4, r0
 8008b16:	d158      	bne.n	8008bca <_malloc_r+0xf6>
 8008b18:	f8d8 4000 	ldr.w	r4, [r8]
 8008b1c:	4627      	mov	r7, r4
 8008b1e:	2f00      	cmp	r7, #0
 8008b20:	d143      	bne.n	8008baa <_malloc_r+0xd6>
 8008b22:	2c00      	cmp	r4, #0
 8008b24:	d04b      	beq.n	8008bbe <_malloc_r+0xea>
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	4639      	mov	r1, r7
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	eb04 0903 	add.w	r9, r4, r3
 8008b30:	f000 f864 	bl	8008bfc <_sbrk_r>
 8008b34:	4581      	cmp	r9, r0
 8008b36:	d142      	bne.n	8008bbe <_malloc_r+0xea>
 8008b38:	6821      	ldr	r1, [r4, #0]
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	1a6d      	subs	r5, r5, r1
 8008b3e:	4629      	mov	r1, r5
 8008b40:	f7ff ffa6 	bl	8008a90 <sbrk_aligned>
 8008b44:	3001      	adds	r0, #1
 8008b46:	d03a      	beq.n	8008bbe <_malloc_r+0xea>
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	442b      	add	r3, r5
 8008b4c:	6023      	str	r3, [r4, #0]
 8008b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8008b52:	685a      	ldr	r2, [r3, #4]
 8008b54:	bb62      	cbnz	r2, 8008bb0 <_malloc_r+0xdc>
 8008b56:	f8c8 7000 	str.w	r7, [r8]
 8008b5a:	e00f      	b.n	8008b7c <_malloc_r+0xa8>
 8008b5c:	6822      	ldr	r2, [r4, #0]
 8008b5e:	1b52      	subs	r2, r2, r5
 8008b60:	d420      	bmi.n	8008ba4 <_malloc_r+0xd0>
 8008b62:	2a0b      	cmp	r2, #11
 8008b64:	d917      	bls.n	8008b96 <_malloc_r+0xc2>
 8008b66:	1961      	adds	r1, r4, r5
 8008b68:	42a3      	cmp	r3, r4
 8008b6a:	6025      	str	r5, [r4, #0]
 8008b6c:	bf18      	it	ne
 8008b6e:	6059      	strne	r1, [r3, #4]
 8008b70:	6863      	ldr	r3, [r4, #4]
 8008b72:	bf08      	it	eq
 8008b74:	f8c8 1000 	streq.w	r1, [r8]
 8008b78:	5162      	str	r2, [r4, r5]
 8008b7a:	604b      	str	r3, [r1, #4]
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	f000 f82f 	bl	8008be0 <__malloc_unlock>
 8008b82:	f104 000b 	add.w	r0, r4, #11
 8008b86:	1d23      	adds	r3, r4, #4
 8008b88:	f020 0007 	bic.w	r0, r0, #7
 8008b8c:	1ac2      	subs	r2, r0, r3
 8008b8e:	bf1c      	itt	ne
 8008b90:	1a1b      	subne	r3, r3, r0
 8008b92:	50a3      	strne	r3, [r4, r2]
 8008b94:	e7af      	b.n	8008af6 <_malloc_r+0x22>
 8008b96:	6862      	ldr	r2, [r4, #4]
 8008b98:	42a3      	cmp	r3, r4
 8008b9a:	bf0c      	ite	eq
 8008b9c:	f8c8 2000 	streq.w	r2, [r8]
 8008ba0:	605a      	strne	r2, [r3, #4]
 8008ba2:	e7eb      	b.n	8008b7c <_malloc_r+0xa8>
 8008ba4:	4623      	mov	r3, r4
 8008ba6:	6864      	ldr	r4, [r4, #4]
 8008ba8:	e7ae      	b.n	8008b08 <_malloc_r+0x34>
 8008baa:	463c      	mov	r4, r7
 8008bac:	687f      	ldr	r7, [r7, #4]
 8008bae:	e7b6      	b.n	8008b1e <_malloc_r+0x4a>
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	42a3      	cmp	r3, r4
 8008bb6:	d1fb      	bne.n	8008bb0 <_malloc_r+0xdc>
 8008bb8:	2300      	movs	r3, #0
 8008bba:	6053      	str	r3, [r2, #4]
 8008bbc:	e7de      	b.n	8008b7c <_malloc_r+0xa8>
 8008bbe:	230c      	movs	r3, #12
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	6033      	str	r3, [r6, #0]
 8008bc4:	f000 f80c 	bl	8008be0 <__malloc_unlock>
 8008bc8:	e794      	b.n	8008af4 <_malloc_r+0x20>
 8008bca:	6005      	str	r5, [r0, #0]
 8008bcc:	e7d6      	b.n	8008b7c <_malloc_r+0xa8>
 8008bce:	bf00      	nop
 8008bd0:	20000cbc 	.word	0x20000cbc

08008bd4 <__malloc_lock>:
 8008bd4:	4801      	ldr	r0, [pc, #4]	@ (8008bdc <__malloc_lock+0x8>)
 8008bd6:	f000 b84b 	b.w	8008c70 <__retarget_lock_acquire_recursive>
 8008bda:	bf00      	nop
 8008bdc:	20000dfc 	.word	0x20000dfc

08008be0 <__malloc_unlock>:
 8008be0:	4801      	ldr	r0, [pc, #4]	@ (8008be8 <__malloc_unlock+0x8>)
 8008be2:	f000 b846 	b.w	8008c72 <__retarget_lock_release_recursive>
 8008be6:	bf00      	nop
 8008be8:	20000dfc 	.word	0x20000dfc

08008bec <memset>:
 8008bec:	4603      	mov	r3, r0
 8008bee:	4402      	add	r2, r0
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d100      	bne.n	8008bf6 <memset+0xa>
 8008bf4:	4770      	bx	lr
 8008bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8008bfa:	e7f9      	b.n	8008bf0 <memset+0x4>

08008bfc <_sbrk_r>:
 8008bfc:	b538      	push	{r3, r4, r5, lr}
 8008bfe:	2300      	movs	r3, #0
 8008c00:	4d05      	ldr	r5, [pc, #20]	@ (8008c18 <_sbrk_r+0x1c>)
 8008c02:	4604      	mov	r4, r0
 8008c04:	4608      	mov	r0, r1
 8008c06:	602b      	str	r3, [r5, #0]
 8008c08:	f7fc f8d4 	bl	8004db4 <_sbrk>
 8008c0c:	1c43      	adds	r3, r0, #1
 8008c0e:	d102      	bne.n	8008c16 <_sbrk_r+0x1a>
 8008c10:	682b      	ldr	r3, [r5, #0]
 8008c12:	b103      	cbz	r3, 8008c16 <_sbrk_r+0x1a>
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	bd38      	pop	{r3, r4, r5, pc}
 8008c18:	20000df8 	.word	0x20000df8

08008c1c <__errno>:
 8008c1c:	4b01      	ldr	r3, [pc, #4]	@ (8008c24 <__errno+0x8>)
 8008c1e:	6818      	ldr	r0, [r3, #0]
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	2000002c 	.word	0x2000002c

08008c28 <__libc_init_array>:
 8008c28:	b570      	push	{r4, r5, r6, lr}
 8008c2a:	2600      	movs	r6, #0
 8008c2c:	4d0c      	ldr	r5, [pc, #48]	@ (8008c60 <__libc_init_array+0x38>)
 8008c2e:	4c0d      	ldr	r4, [pc, #52]	@ (8008c64 <__libc_init_array+0x3c>)
 8008c30:	1b64      	subs	r4, r4, r5
 8008c32:	10a4      	asrs	r4, r4, #2
 8008c34:	42a6      	cmp	r6, r4
 8008c36:	d109      	bne.n	8008c4c <__libc_init_array+0x24>
 8008c38:	f000 f872 	bl	8008d20 <_init>
 8008c3c:	2600      	movs	r6, #0
 8008c3e:	4d0a      	ldr	r5, [pc, #40]	@ (8008c68 <__libc_init_array+0x40>)
 8008c40:	4c0a      	ldr	r4, [pc, #40]	@ (8008c6c <__libc_init_array+0x44>)
 8008c42:	1b64      	subs	r4, r4, r5
 8008c44:	10a4      	asrs	r4, r4, #2
 8008c46:	42a6      	cmp	r6, r4
 8008c48:	d105      	bne.n	8008c56 <__libc_init_array+0x2e>
 8008c4a:	bd70      	pop	{r4, r5, r6, pc}
 8008c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c50:	4798      	blx	r3
 8008c52:	3601      	adds	r6, #1
 8008c54:	e7ee      	b.n	8008c34 <__libc_init_array+0xc>
 8008c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c5a:	4798      	blx	r3
 8008c5c:	3601      	adds	r6, #1
 8008c5e:	e7f2      	b.n	8008c46 <__libc_init_array+0x1e>
 8008c60:	08008da4 	.word	0x08008da4
 8008c64:	08008da4 	.word	0x08008da4
 8008c68:	08008da4 	.word	0x08008da4
 8008c6c:	08008da8 	.word	0x08008da8

08008c70 <__retarget_lock_acquire_recursive>:
 8008c70:	4770      	bx	lr

08008c72 <__retarget_lock_release_recursive>:
 8008c72:	4770      	bx	lr

08008c74 <memcpy>:
 8008c74:	440a      	add	r2, r1
 8008c76:	4291      	cmp	r1, r2
 8008c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c7c:	d100      	bne.n	8008c80 <memcpy+0xc>
 8008c7e:	4770      	bx	lr
 8008c80:	b510      	push	{r4, lr}
 8008c82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c86:	4291      	cmp	r1, r2
 8008c88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c8c:	d1f9      	bne.n	8008c82 <memcpy+0xe>
 8008c8e:	bd10      	pop	{r4, pc}

08008c90 <_free_r>:
 8008c90:	b538      	push	{r3, r4, r5, lr}
 8008c92:	4605      	mov	r5, r0
 8008c94:	2900      	cmp	r1, #0
 8008c96:	d040      	beq.n	8008d1a <_free_r+0x8a>
 8008c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c9c:	1f0c      	subs	r4, r1, #4
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	bfb8      	it	lt
 8008ca2:	18e4      	addlt	r4, r4, r3
 8008ca4:	f7ff ff96 	bl	8008bd4 <__malloc_lock>
 8008ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8008d1c <_free_r+0x8c>)
 8008caa:	6813      	ldr	r3, [r2, #0]
 8008cac:	b933      	cbnz	r3, 8008cbc <_free_r+0x2c>
 8008cae:	6063      	str	r3, [r4, #4]
 8008cb0:	6014      	str	r4, [r2, #0]
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cb8:	f7ff bf92 	b.w	8008be0 <__malloc_unlock>
 8008cbc:	42a3      	cmp	r3, r4
 8008cbe:	d908      	bls.n	8008cd2 <_free_r+0x42>
 8008cc0:	6820      	ldr	r0, [r4, #0]
 8008cc2:	1821      	adds	r1, r4, r0
 8008cc4:	428b      	cmp	r3, r1
 8008cc6:	bf01      	itttt	eq
 8008cc8:	6819      	ldreq	r1, [r3, #0]
 8008cca:	685b      	ldreq	r3, [r3, #4]
 8008ccc:	1809      	addeq	r1, r1, r0
 8008cce:	6021      	streq	r1, [r4, #0]
 8008cd0:	e7ed      	b.n	8008cae <_free_r+0x1e>
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	b10b      	cbz	r3, 8008cdc <_free_r+0x4c>
 8008cd8:	42a3      	cmp	r3, r4
 8008cda:	d9fa      	bls.n	8008cd2 <_free_r+0x42>
 8008cdc:	6811      	ldr	r1, [r2, #0]
 8008cde:	1850      	adds	r0, r2, r1
 8008ce0:	42a0      	cmp	r0, r4
 8008ce2:	d10b      	bne.n	8008cfc <_free_r+0x6c>
 8008ce4:	6820      	ldr	r0, [r4, #0]
 8008ce6:	4401      	add	r1, r0
 8008ce8:	1850      	adds	r0, r2, r1
 8008cea:	4283      	cmp	r3, r0
 8008cec:	6011      	str	r1, [r2, #0]
 8008cee:	d1e0      	bne.n	8008cb2 <_free_r+0x22>
 8008cf0:	6818      	ldr	r0, [r3, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	4408      	add	r0, r1
 8008cf6:	6010      	str	r0, [r2, #0]
 8008cf8:	6053      	str	r3, [r2, #4]
 8008cfa:	e7da      	b.n	8008cb2 <_free_r+0x22>
 8008cfc:	d902      	bls.n	8008d04 <_free_r+0x74>
 8008cfe:	230c      	movs	r3, #12
 8008d00:	602b      	str	r3, [r5, #0]
 8008d02:	e7d6      	b.n	8008cb2 <_free_r+0x22>
 8008d04:	6820      	ldr	r0, [r4, #0]
 8008d06:	1821      	adds	r1, r4, r0
 8008d08:	428b      	cmp	r3, r1
 8008d0a:	bf01      	itttt	eq
 8008d0c:	6819      	ldreq	r1, [r3, #0]
 8008d0e:	685b      	ldreq	r3, [r3, #4]
 8008d10:	1809      	addeq	r1, r1, r0
 8008d12:	6021      	streq	r1, [r4, #0]
 8008d14:	6063      	str	r3, [r4, #4]
 8008d16:	6054      	str	r4, [r2, #4]
 8008d18:	e7cb      	b.n	8008cb2 <_free_r+0x22>
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	20000cbc 	.word	0x20000cbc

08008d20 <_init>:
 8008d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d22:	bf00      	nop
 8008d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d26:	bc08      	pop	{r3}
 8008d28:	469e      	mov	lr, r3
 8008d2a:	4770      	bx	lr

08008d2c <_fini>:
 8008d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2e:	bf00      	nop
 8008d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d32:	bc08      	pop	{r3}
 8008d34:	469e      	mov	lr, r3
 8008d36:	4770      	bx	lr
