
TheHammer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005090  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080051a0  080051a0  000061a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051e8  080051e8  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  080051e8  080051e8  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051e8  080051e8  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051e8  080051e8  000061e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051ec  080051ec  000061ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080051f0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000010  08005200  00007010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08005200  00007200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f53a  00000000  00000000  00007039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002842  00000000  00000000  00016573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00018db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b43  00000000  00000000  00019c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190c4  00000000  00000000  0001a77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012442  00000000  00000000  0003383f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f3e8  00000000  00000000  00045c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5069  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c18  00000000  00000000  000d50ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000d8cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005188 	.word	0x08005188

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005188 	.word	0x08005188

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f2:	f001 f8af 	bl	8001a54 <HAL_Init>

  /* USER CODE BEGIN Init */
  LED_Power_Init();
 80008f6:	f000 fca7 	bl	8001248 <LED_Power_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fa:	f000 f82f 	bl	800095c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fe:	f000 fa53 	bl	8000da8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000902:	f000 f883 	bl	8000a0c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000906:	f000 f8fd 	bl	8000b04 <MX_TIM2_Init>
  MX_TIM3_Init();
 800090a:	f000 f97b 	bl	8000c04 <MX_TIM3_Init>
  MX_TIM4_Init();
 800090e:	f000 f9cd 	bl	8000cac <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000912:	f000 fa1f 	bl	8000d54 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8000916:	f000 f8b7 	bl	8000a88 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t startBuff;
  HAL_UART_Receive_IT(&huart1, &startBuff, 1);
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	2201      	movs	r2, #1
 800091e:	4619      	mov	r1, r3
 8000920:	480c      	ldr	r0, [pc, #48]	@ (8000954 <main+0x68>)
 8000922:	f003 fec0 	bl	80046a6 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000926:	2108      	movs	r1, #8
 8000928:	480b      	ldr	r0, [pc, #44]	@ (8000958 <main+0x6c>)
 800092a:	f002 ff2d 	bl	8003788 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800092e:	210c      	movs	r1, #12
 8000930:	4809      	ldr	r0, [pc, #36]	@ (8000958 <main+0x6c>)
 8000932:	f002 ff29 	bl	8003788 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Set_Direction(MOTOR_RIGHT, FORWARD);
 8000936:	2100      	movs	r1, #0
 8000938:	2001      	movs	r0, #1
 800093a:	f000 fc07 	bl	800114c <Set_Direction>
		Set_PWM(MOTOR_RIGHT, 500);
 800093e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000942:	2001      	movs	r0, #1
 8000944:	f000 fbde 	bl	8001104 <Set_PWM>
		HAL_Delay(500);
 8000948:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800094c:	f001 f8e4 	bl	8001b18 <HAL_Delay>
		Set_Direction(MOTOR_RIGHT, FORWARD);
 8000950:	bf00      	nop
 8000952:	e7f0      	b.n	8000936 <main+0x4a>
 8000954:	20000164 	.word	0x20000164
 8000958:	2000008c 	.word	0x2000008c

0800095c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b094      	sub	sp, #80	@ 0x50
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000966:	2228      	movs	r2, #40	@ 0x28
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f004 fbd2 	bl	8005114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800098c:	2302      	movs	r3, #2
 800098e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000990:	2301      	movs	r3, #1
 8000992:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000994:	2310      	movs	r3, #16
 8000996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000998:	2302      	movs	r3, #2
 800099a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800099c:	2300      	movs	r3, #0
 800099e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009a0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80009a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 f8c8 	bl	8002b40 <HAL_RCC_OscConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80009b6:	f000 faba 	bl	8000f2e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ba:	230f      	movs	r3, #15
 80009bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009be:	2302      	movs	r3, #2
 80009c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2101      	movs	r1, #1
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 fb34 	bl	8003044 <HAL_RCC_ClockConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80009e2:	f000 faa4 	bl	8000f2e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009e6:	2302      	movs	r3, #2
 80009e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80009ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009ee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 fcb4 	bl	8003360 <HAL_RCCEx_PeriphCLKConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009fe:	f000 fa96 	bl	8000f2e <Error_Handler>
  }
}
 8000a02:	bf00      	nop
 8000a04:	3750      	adds	r7, #80	@ 0x50
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a1c:	4b18      	ldr	r3, [pc, #96]	@ (8000a80 <MX_ADC1_Init+0x74>)
 8000a1e:	4a19      	ldr	r2, [pc, #100]	@ (8000a84 <MX_ADC1_Init+0x78>)
 8000a20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a22:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <MX_ADC1_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a28:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <MX_ADC1_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <MX_ADC1_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a34:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <MX_ADC1_Init+0x74>)
 8000a36:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a3c:	4b10      	ldr	r3, [pc, #64]	@ (8000a80 <MX_ADC1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a42:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <MX_ADC1_Init+0x74>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a48:	480d      	ldr	r0, [pc, #52]	@ (8000a80 <MX_ADC1_Init+0x74>)
 8000a4a:	f001 f889 	bl	8001b60 <HAL_ADC_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a54:	f000 fa6b 	bl	8000f2e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a58:	2305      	movs	r3, #5
 8000a5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <MX_ADC1_Init+0x74>)
 8000a6a:	f001 fb3d 	bl	80020e8 <HAL_ADC_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a74:	f000 fa5b 	bl	8000f2e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	2000002c 	.word	0x2000002c
 8000a84:	40012400 	.word	0x40012400

08000a88 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a98:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <MX_ADC2_Init+0x74>)
 8000a9a:	4a19      	ldr	r2, [pc, #100]	@ (8000b00 <MX_ADC2_Init+0x78>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a9e:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <MX_ADC2_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000aa4:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <MX_ADC2_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <MX_ADC2_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <MX_ADC2_Init+0x74>)
 8000ab2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000ab6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ab8:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <MX_ADC2_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000abe:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <MX_ADC2_Init+0x74>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ac4:	480d      	ldr	r0, [pc, #52]	@ (8000afc <MX_ADC2_Init+0x74>)
 8000ac6:	f001 f84b 	bl	8001b60 <HAL_ADC_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000ad0:	f000 fa2d 	bl	8000f2e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_ADC2_Init+0x74>)
 8000ae6:	f001 faff 	bl	80020e8 <HAL_ADC_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000af0:	f000 fa1d 	bl	8000f2e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2000005c 	.word	0x2000005c
 8000b00:	40012800 	.word	0x40012800

08000b04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	@ 0x38
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b18:	f107 0320 	add.w	r3, r7, #32
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
 8000b30:	615a      	str	r2, [r3, #20]
 8000b32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b34:	4b32      	ldr	r3, [pc, #200]	@ (8000c00 <MX_TIM2_Init+0xfc>)
 8000b36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b3c:	4b30      	ldr	r3, [pc, #192]	@ (8000c00 <MX_TIM2_Init+0xfc>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b42:	4b2f      	ldr	r3, [pc, #188]	@ (8000c00 <MX_TIM2_Init+0xfc>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2047;
 8000b48:	4b2d      	ldr	r3, [pc, #180]	@ (8000c00 <MX_TIM2_Init+0xfc>)
 8000b4a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000b4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b50:	4b2b      	ldr	r3, [pc, #172]	@ (8000c00 <MX_TIM2_Init+0xfc>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b56:	4b2a      	ldr	r3, [pc, #168]	@ (8000c00 <MX_TIM2_Init+0xfc>)
 8000b58:	2280      	movs	r2, #128	@ 0x80
 8000b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b5c:	4828      	ldr	r0, [pc, #160]	@ (8000c00 <MX_TIM2_Init+0xfc>)
 8000b5e:	f002 fd6b 	bl	8003638 <HAL_TIM_Base_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b68:	f000 f9e1 	bl	8000f2e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4821      	ldr	r0, [pc, #132]	@ (8000c00 <MX_TIM2_Init+0xfc>)
 8000b7a:	f003 f8fb 	bl	8003d74 <HAL_TIM_ConfigClockSource>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b84:	f000 f9d3 	bl	8000f2e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b88:	481d      	ldr	r0, [pc, #116]	@ (8000c00 <MX_TIM2_Init+0xfc>)
 8000b8a:	f002 fda4 	bl	80036d6 <HAL_TIM_PWM_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000b94:	f000 f9cb 	bl	8000f2e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4816      	ldr	r0, [pc, #88]	@ (8000c00 <MX_TIM2_Init+0xfc>)
 8000ba8:	f003 fc88 	bl	80044bc <HAL_TIMEx_MasterConfigSynchronization>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000bb2:	f000 f9bc 	bl	8000f2e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bb6:	2360      	movs	r3, #96	@ 0x60
 8000bb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2208      	movs	r2, #8
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480c      	ldr	r0, [pc, #48]	@ (8000c00 <MX_TIM2_Init+0xfc>)
 8000bce:	f003 f80f 	bl	8003bf0 <HAL_TIM_PWM_ConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000bd8:	f000 f9a9 	bl	8000f2e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	220c      	movs	r2, #12
 8000be0:	4619      	mov	r1, r3
 8000be2:	4807      	ldr	r0, [pc, #28]	@ (8000c00 <MX_TIM2_Init+0xfc>)
 8000be4:	f003 f804 	bl	8003bf0 <HAL_TIM_PWM_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000bee:	f000 f99e 	bl	8000f2e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bf2:	4803      	ldr	r0, [pc, #12]	@ (8000c00 <MX_TIM2_Init+0xfc>)
 8000bf4:	f000 fe22 	bl	800183c <HAL_TIM_MspPostInit>

}
 8000bf8:	bf00      	nop
 8000bfa:	3738      	adds	r7, #56	@ 0x38
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	2000008c 	.word	0x2000008c

08000c04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	@ 0x30
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	2224      	movs	r2, #36	@ 0x24
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f004 fa7e 	bl	8005114 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c20:	4b20      	ldr	r3, [pc, #128]	@ (8000ca4 <MX_TIM3_Init+0xa0>)
 8000c22:	4a21      	ldr	r2, [pc, #132]	@ (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <MX_TIM3_Init+0xa0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <MX_TIM3_Init+0xa0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <MX_TIM3_Init+0xa0>)
 8000c34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <MX_TIM3_Init+0xa0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c40:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <MX_TIM3_Init+0xa0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c46:	2303      	movs	r3, #3
 8000c48:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480c      	ldr	r0, [pc, #48]	@ (8000ca4 <MX_TIM3_Init+0xa0>)
 8000c72:	f002 fe2b 	bl	80038cc <HAL_TIM_Encoder_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000c7c:	f000 f957 	bl	8000f2e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <MX_TIM3_Init+0xa0>)
 8000c8e:	f003 fc15 	bl	80044bc <HAL_TIMEx_MasterConfigSynchronization>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000c98:	f000 f949 	bl	8000f2e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3730      	adds	r7, #48	@ 0x30
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200000d4 	.word	0x200000d4
 8000ca8:	40000400 	.word	0x40000400

08000cac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08c      	sub	sp, #48	@ 0x30
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	2224      	movs	r2, #36	@ 0x24
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f004 fa2a 	bl	8005114 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cc8:	4b20      	ldr	r3, [pc, #128]	@ (8000d4c <MX_TIM4_Init+0xa0>)
 8000cca:	4a21      	ldr	r2, [pc, #132]	@ (8000d50 <MX_TIM4_Init+0xa4>)
 8000ccc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cce:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <MX_TIM4_Init+0xa0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <MX_TIM4_Init+0xa0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <MX_TIM4_Init+0xa0>)
 8000cdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ce0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <MX_TIM4_Init+0xa0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce8:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <MX_TIM4_Init+0xa0>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000d02:	2302      	movs	r3, #2
 8000d04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d06:	2301      	movs	r3, #1
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	4619      	mov	r1, r3
 8000d18:	480c      	ldr	r0, [pc, #48]	@ (8000d4c <MX_TIM4_Init+0xa0>)
 8000d1a:	f002 fdd7 	bl	80038cc <HAL_TIM_Encoder_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000d24:	f000 f903 	bl	8000f2e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <MX_TIM4_Init+0xa0>)
 8000d36:	f003 fbc1 	bl	80044bc <HAL_TIMEx_MasterConfigSynchronization>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000d40:	f000 f8f5 	bl	8000f2e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	3730      	adds	r7, #48	@ 0x30
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	2000011c 	.word	0x2000011c
 8000d50:	40000800 	.word	0x40000800

08000d54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <MX_USART1_UART_Init+0x4c>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	@ (8000da4 <MX_USART1_UART_Init+0x50>)
 8000d5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <MX_USART1_UART_Init+0x4c>)
 8000d60:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <MX_USART1_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <MX_USART1_UART_Init+0x4c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <MX_USART1_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d78:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <MX_USART1_UART_Init+0x4c>)
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <MX_USART1_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <MX_USART1_UART_Init+0x4c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_USART1_UART_Init+0x4c>)
 8000d8c:	f003 fc06 	bl	800459c <HAL_UART_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d96:	f000 f8ca 	bl	8000f2e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000164 	.word	0x20000164
 8000da4:	40013800 	.word	0x40013800

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbc:	4b51      	ldr	r3, [pc, #324]	@ (8000f04 <MX_GPIO_Init+0x15c>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a50      	ldr	r2, [pc, #320]	@ (8000f04 <MX_GPIO_Init+0x15c>)
 8000dc2:	f043 0310 	orr.w	r3, r3, #16
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b4e      	ldr	r3, [pc, #312]	@ (8000f04 <MX_GPIO_Init+0x15c>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0310 	and.w	r3, r3, #16
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8000f04 <MX_GPIO_Init+0x15c>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a4a      	ldr	r2, [pc, #296]	@ (8000f04 <MX_GPIO_Init+0x15c>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b48      	ldr	r3, [pc, #288]	@ (8000f04 <MX_GPIO_Init+0x15c>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dec:	4b45      	ldr	r3, [pc, #276]	@ (8000f04 <MX_GPIO_Init+0x15c>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	4a44      	ldr	r2, [pc, #272]	@ (8000f04 <MX_GPIO_Init+0x15c>)
 8000df2:	f043 0308 	orr.w	r3, r3, #8
 8000df6:	6193      	str	r3, [r2, #24]
 8000df8:	4b42      	ldr	r3, [pc, #264]	@ (8000f04 <MX_GPIO_Init+0x15c>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	f003 0308 	and.w	r3, r3, #8
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Power_GPIO_Port, LED_Power_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e0a:	483f      	ldr	r0, [pc, #252]	@ (8000f08 <MX_GPIO_Init+0x160>)
 8000e0c:	f001 fe44 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMIT_R_Pin|EMIT_L_Pin|EMIT_FL_Pin|MR_FWD_Pin
 8000e10:	2200      	movs	r2, #0
 8000e12:	f64f 5120 	movw	r1, #64800	@ 0xfd20
 8000e16:	483d      	ldr	r0, [pc, #244]	@ (8000f0c <MX_GPIO_Init+0x164>)
 8000e18:	f001 fe3e 	bl	8002a98 <HAL_GPIO_WritePin>
                          |ML_FWD_Pin|MR_BWD_Pin|EMIT_FR_Pin|Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e22:	483b      	ldr	r0, [pc, #236]	@ (8000f10 <MX_GPIO_Init+0x168>)
 8000e24:	f001 fe38 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Blue_Pin|LED_Green_Pin, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 8000e2e:	4838      	ldr	r0, [pc, #224]	@ (8000f10 <MX_GPIO_Init+0x168>)
 8000e30:	f001 fe32 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Power_Pin */
  GPIO_InitStruct.Pin = LED_Power_Pin;
 8000e34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_Power_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	482e      	ldr	r0, [pc, #184]	@ (8000f08 <MX_GPIO_Init+0x160>)
 8000e4e:	f001 fc9f 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPEED_SW2_Pin */
  GPIO_InitStruct.Pin = SPEED_SW2_Pin;
 8000e52:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e58:	4b2e      	ldr	r3, [pc, #184]	@ (8000f14 <MX_GPIO_Init+0x16c>)
 8000e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPEED_SW2_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	4619      	mov	r1, r3
 8000e66:	4828      	ldr	r0, [pc, #160]	@ (8000f08 <MX_GPIO_Init+0x160>)
 8000e68:	f001 fc92 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_R_Pin EMIT_L_Pin EMIT_FL_Pin MR_FWD_Pin
                           ML_FWD_Pin MR_BWD_Pin EMIT_FR_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = EMIT_R_Pin|EMIT_L_Pin|EMIT_FL_Pin|MR_FWD_Pin
 8000e6c:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8000e70:	613b      	str	r3, [r7, #16]
                          |ML_FWD_Pin|MR_BWD_Pin|EMIT_FR_Pin|Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	4619      	mov	r1, r3
 8000e84:	4821      	ldr	r0, [pc, #132]	@ (8000f0c <MX_GPIO_Init+0x164>)
 8000e86:	f001 fc83 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : ML_BWD_Pin LED_Red_Pin LED_Blue_Pin LED_Green_Pin */
  GPIO_InitStruct.Pin = ML_BWD_Pin|LED_Red_Pin|LED_Blue_Pin|LED_Green_Pin;
 8000e8a:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8000e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	481b      	ldr	r0, [pc, #108]	@ (8000f10 <MX_GPIO_Init+0x168>)
 8000ea4:	f001 fc74 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARM_SW1_Pin */
  GPIO_InitStruct.Pin = ARM_SW1_Pin;
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eac:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <MX_GPIO_Init+0x16c>)
 8000eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ARM_SW1_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4814      	ldr	r0, [pc, #80]	@ (8000f0c <MX_GPIO_Init+0x164>)
 8000ebc:	f001 fc68 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOADMAZE_SW3_Pin */
  GPIO_InitStruct.Pin = LOADMAZE_SW3_Pin;
 8000ec0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LOADMAZE_SW3_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	480d      	ldr	r0, [pc, #52]	@ (8000f0c <MX_GPIO_Init+0x164>)
 8000ed6:	f001 fc5b 	bl	8002790 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	210f      	movs	r1, #15
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f001 fb6d 	bl	80025be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ee4:	200a      	movs	r0, #10
 8000ee6:	f001 fb86 	bl	80025f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	210f      	movs	r1, #15
 8000eee:	2028      	movs	r0, #40	@ 0x28
 8000ef0:	f001 fb65 	bl	80025be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ef4:	2028      	movs	r0, #40	@ 0x28
 8000ef6:	f001 fb7e 	bl	80025f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000efa:	bf00      	nop
 8000efc:	3720      	adds	r7, #32
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40011000 	.word	0x40011000
 8000f0c:	40010c00 	.word	0x40010c00
 8000f10:	40010800 	.word	0x40010800
 8000f14:	10210000 	.word	0x10210000

08000f18 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	UART_Receive_Callback(huart);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 f8cb 	bl	80010bc <UART_Receive_Callback>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f32:	b672      	cpsid	i
}
 8000f34:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f36:	bf00      	nop
 8000f38:	e7fd      	b.n	8000f36 <Error_Handler+0x8>
	...

08000f3c <Parse_Receive_Data>:
#define READ_BATT   0b0010  // READ BATTERY: Read battery voltage.
#define PULSE_BUZZ  0b0011  // PULSE BUZZER: Play a short noise from the buzzer.
#define START_RUN   0b0100  // START RUN: Start a maze run. For testing purposes only.
#define PAIRED      0b0101  // PAIRED: Send OK response to verify received.

void Parse_Receive_Data(uint8_t rxBuff) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
	uint8_t command = (rxBuff & 0xF0) >> 4;   // Isolate command code
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	091b      	lsrs	r3, r3, #4
 8000f4a:	73fb      	strb	r3, [r7, #15]
	uint8_t data    = (rxBuff & 0x0F);        // Isolate other data (not used currently)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	73bb      	strb	r3, [r7, #14]
	(void) data;                              // Temporary to remove warning for unused variable

	switch(command) {
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	2b07      	cmp	r3, #7
 8000f58:	d838      	bhi.n	8000fcc <Parse_Receive_Data+0x90>
 8000f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f60 <Parse_Receive_Data+0x24>)
 8000f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f60:	08000f81 	.word	0x08000f81
 8000f64:	08000f9f 	.word	0x08000f9f
 8000f68:	08000fb9 	.word	0x08000fb9
 8000f6c:	08000fc5 	.word	0x08000fc5
 8000f70:	08000fcd 	.word	0x08000fcd
 8000f74:	08000fcd 	.word	0x08000fcd
 8000f78:	08000fcd 	.word	0x08000fcd
 8000f7c:	08000fb1 	.word	0x08000fb1
		case SET_MODE:
			debugMode = (debugMode + 1) % 2;
 8000f80:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <Parse_Receive_Data+0x9c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	bfb8      	it	lt
 8000f8e:	425b      	neglt	r3, r3
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <Parse_Receive_Data+0x9c>)
 8000f94:	701a      	strb	r2, [r3, #0]
			debugCounter = 0;
 8000f96:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <Parse_Receive_Data+0xa0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
			break;
 8000f9c:	e017      	b.n	8000fce <Parse_Receive_Data+0x92>
		case HALT_RUN:
			HALTED = 1;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <Parse_Receive_Data+0xa4>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
			while (HALTED);
 8000fa4:	bf00      	nop
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <Parse_Receive_Data+0xa4>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1fb      	bne.n	8000fa6 <Parse_Receive_Data+0x6a>
			break;
 8000fae:	e00e      	b.n	8000fce <Parse_Receive_Data+0x92>
		case RESUME_RUN:
			HALTED = 0;
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <Parse_Receive_Data+0xa4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
			break;
 8000fb6:	e00a      	b.n	8000fce <Parse_Receive_Data+0x92>
		case READ_BATT:
			HAL_UART_Transmit_IT(&huart1, (uint8_t*)&(mouse_state.battery_voltage), sizeof(double));
 8000fb8:	2208      	movs	r2, #8
 8000fba:	490a      	ldr	r1, [pc, #40]	@ (8000fe4 <Parse_Receive_Data+0xa8>)
 8000fbc:	480a      	ldr	r0, [pc, #40]	@ (8000fe8 <Parse_Receive_Data+0xac>)
 8000fbe:	f003 fb3d 	bl	800463c <HAL_UART_Transmit_IT>
			break;
 8000fc2:	e004      	b.n	8000fce <Parse_Receive_Data+0x92>
		case PULSE_BUZZ:
			Pulse_Buzzer(100);
 8000fc4:	2064      	movs	r0, #100	@ 0x64
 8000fc6:	f000 f94b 	bl	8001260 <Pulse_Buzzer>
			break;
 8000fca:	e000      	b.n	8000fce <Parse_Receive_Data+0x92>
			// SET RUN START VAR TO TRUE
			break;
		case PAIRED:
			break;
		default:
			break;
 8000fcc:	bf00      	nop
	}
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200001d8 	.word	0x200001d8
 8000fdc:	200001d9 	.word	0x200001d9
 8000fe0:	200001f8 	.word	0x200001f8
 8000fe4:	200001d0 	.word	0x200001d0
 8000fe8:	20000164 	.word	0x20000164

08000fec <Create_Byte_Stream>:

void Create_Byte_Stream(uint8_t txData[PACKET_SIZE]) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	bzero(txData, PACKET_SIZE);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	6053      	str	r3, [r2, #4]
 8000ffe:	6093      	str	r3, [r2, #8]
 8001000:	60d3      	str	r3, [r2, #12]
 8001002:	6113      	str	r3, [r2, #16]
 8001004:	6153      	str	r3, [r2, #20]
 8001006:	6193      	str	r3, [r2, #24]

	memcpy(txData, "Debug", 5);
 8001008:	2205      	movs	r2, #5
 800100a:	4922      	ldr	r1, [pc, #136]	@ (8001094 <Create_Byte_Stream+0xa8>)
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f004 f8ad 	bl	800516c <memcpy>
	memcpy(txData + 5, &mouse_state.current_cell, sizeof(uint8_t));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3305      	adds	r3, #5
 8001016:	4a20      	ldr	r2, [pc, #128]	@ (8001098 <Create_Byte_Stream+0xac>)
 8001018:	7812      	ldrb	r2, [r2, #0]
 800101a:	701a      	strb	r2, [r3, #0]
	memcpy(txData + 6, &mouse_state.motor_L_RPM, sizeof(uint16_t));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3306      	adds	r3, #6
 8001020:	4a1d      	ldr	r2, [pc, #116]	@ (8001098 <Create_Byte_Stream+0xac>)
 8001022:	8892      	ldrh	r2, [r2, #4]
 8001024:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 8, &mouse_state.motor_R_RPM, sizeof(uint16_t));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3308      	adds	r3, #8
 800102a:	4a1b      	ldr	r2, [pc, #108]	@ (8001098 <Create_Byte_Stream+0xac>)
 800102c:	88d2      	ldrh	r2, [r2, #6]
 800102e:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 10, &mouse_state.mouse_direction, sizeof(uint8_t));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	330a      	adds	r3, #10
 8001034:	4a18      	ldr	r2, [pc, #96]	@ (8001098 <Create_Byte_Stream+0xac>)
 8001036:	78d2      	ldrb	r2, [r2, #3]
 8001038:	701a      	strb	r2, [r3, #0]
	memset(txData + 11, ((mouse_state.mouse_position[0] << 4) | mouse_state.mouse_position[1]), sizeof(uint8_t));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f103 000b 	add.w	r0, r3, #11
 8001040:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <Create_Byte_Stream+0xac>)
 8001042:	785b      	ldrb	r3, [r3, #1]
 8001044:	011b      	lsls	r3, r3, #4
 8001046:	4a14      	ldr	r2, [pc, #80]	@ (8001098 <Create_Byte_Stream+0xac>)
 8001048:	7892      	ldrb	r2, [r2, #2]
 800104a:	4313      	orrs	r3, r2
 800104c:	2201      	movs	r2, #1
 800104e:	4619      	mov	r1, r3
 8001050:	f004 f860 	bl	8005114 <memset>
	memcpy(txData + 12, &mouse_state.battery_voltage, sizeof(double));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f103 010c 	add.w	r1, r3, #12
 800105a:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <Create_Byte_Stream+0xac>)
 800105c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001060:	600a      	str	r2, [r1, #0]
 8001062:	604b      	str	r3, [r1, #4]
	memcpy(txData + 20, &mouse_state.raw_FL, sizeof(uint16_t));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3314      	adds	r3, #20
 8001068:	4a0b      	ldr	r2, [pc, #44]	@ (8001098 <Create_Byte_Stream+0xac>)
 800106a:	8912      	ldrh	r2, [r2, #8]
 800106c:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 22, &mouse_state.raw_L, sizeof(uint16_t));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3316      	adds	r3, #22
 8001072:	4a09      	ldr	r2, [pc, #36]	@ (8001098 <Create_Byte_Stream+0xac>)
 8001074:	8952      	ldrh	r2, [r2, #10]
 8001076:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 24, &mouse_state.raw_R, sizeof(uint16_t));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3318      	adds	r3, #24
 800107c:	4a06      	ldr	r2, [pc, #24]	@ (8001098 <Create_Byte_Stream+0xac>)
 800107e:	8992      	ldrh	r2, [r2, #12]
 8001080:	801a      	strh	r2, [r3, #0]
	memcpy(txData + 26, &mouse_state.raw_FR, sizeof(uint16_t));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	331a      	adds	r3, #26
 8001086:	4a04      	ldr	r2, [pc, #16]	@ (8001098 <Create_Byte_Stream+0xac>)
 8001088:	89d2      	ldrh	r2, [r2, #14]
 800108a:	801a      	strh	r2, [r3, #0]
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	080051a0 	.word	0x080051a0
 8001098:	200001b0 	.word	0x200001b0

0800109c <Debug_Packet_Send>:

// When mouse in debug mode transmit above data.
//  Also transmit start identifier "Debug". This totals to 28 bytes of data transmitted every 50 ms.
void Debug_Packet_Send() {
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	Create_Byte_Stream(txDebug);                                  // Create byte stream
 80010a0:	4804      	ldr	r0, [pc, #16]	@ (80010b4 <Debug_Packet_Send+0x18>)
 80010a2:	f7ff ffa3 	bl	8000fec <Create_Byte_Stream>
	HAL_UART_Transmit_IT(&huart1, txDebug, sizeof(txDebug));      // Transmit data
 80010a6:	221c      	movs	r2, #28
 80010a8:	4902      	ldr	r1, [pc, #8]	@ (80010b4 <Debug_Packet_Send+0x18>)
 80010aa:	4803      	ldr	r0, [pc, #12]	@ (80010b8 <Debug_Packet_Send+0x1c>)
 80010ac:	f003 fac6 	bl	800463c <HAL_UART_Transmit_IT>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200001dc 	.word	0x200001dc
 80010b8:	20000164 	.word	0x20000164

080010bc <UART_Receive_Callback>:

void UART_Receive_Callback(UART_HandleTypeDef *huart) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <UART_Receive_Callback+0x38>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d10e      	bne.n	80010ec <UART_Receive_Callback+0x30>
		Parse_Receive_Data(rxData);
 80010ce:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <UART_Receive_Callback+0x3c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff32 	bl	8000f3c <Parse_Receive_Data>
		HAL_UART_Transmit_IT(&huart1, &txData, sizeof(txData));      // Transmit response ACK (0xFF)                          // Parse incoming command
 80010d8:	2201      	movs	r2, #1
 80010da:	4908      	ldr	r1, [pc, #32]	@ (80010fc <UART_Receive_Callback+0x40>)
 80010dc:	4808      	ldr	r0, [pc, #32]	@ (8001100 <UART_Receive_Callback+0x44>)
 80010de:	f003 faad 	bl	800463c <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart1, &rxData, sizeof(rxData));       // Receive incoming command
 80010e2:	2201      	movs	r2, #1
 80010e4:	4904      	ldr	r1, [pc, #16]	@ (80010f8 <UART_Receive_Callback+0x3c>)
 80010e6:	4806      	ldr	r0, [pc, #24]	@ (8001100 <UART_Receive_Callback+0x44>)
 80010e8:	f003 fadd 	bl	80046a6 <HAL_UART_Receive_IT>
	}
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40013800 	.word	0x40013800
 80010f8:	200001da 	.word	0x200001da
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000164 	.word	0x20000164

08001104 <Set_PWM>:
 * File for the implementation of motor control
 */

#include "mm_motors.h"

void Set_PWM(motor_t motor, uint16_t counter_period) {
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	460a      	mov	r2, r1
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	4613      	mov	r3, r2
 8001112:	80bb      	strh	r3, [r7, #4]
	// Software limit for motor voltage ~6V
	counter_period = counter_period > 1450 ? 1450: counter_period;
 8001114:	88bb      	ldrh	r3, [r7, #4]
 8001116:	f240 52aa 	movw	r2, #1450	@ 0x5aa
 800111a:	4293      	cmp	r3, r2
 800111c:	bf28      	it	cs
 800111e:	4613      	movcs	r3, r2
 8001120:	80bb      	strh	r3, [r7, #4]
	switch(motor) {
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <Set_PWM+0x2a>
 8001128:	2b01      	cmp	r3, #1
 800112a:	d005      	beq.n	8001138 <Set_PWM+0x34>
			break;
		case MOTOR_RIGHT:
			TIM2->CCR3 = counter_period;
			break;
	}
}
 800112c:	e009      	b.n	8001142 <Set_PWM+0x3e>
			TIM2->CCR4 = counter_period;
 800112e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001132:	88bb      	ldrh	r3, [r7, #4]
 8001134:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 8001136:	e004      	b.n	8001142 <Set_PWM+0x3e>
			TIM2->CCR3 = counter_period;
 8001138:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800113c:	88bb      	ldrh	r3, [r7, #4]
 800113e:	63d3      	str	r3, [r2, #60]	@ 0x3c
			break;
 8001140:	bf00      	nop
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <Set_Direction>:

void Set_Direction(motor_t motor, motor_direction_t direction) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	460a      	mov	r2, r1
 8001156:	71fb      	strb	r3, [r7, #7]
 8001158:	4613      	mov	r3, r2
 800115a:	71bb      	strb	r3, [r7, #6]
	switch(motor) {
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <Set_Direction+0x1c>
 8001162:	2b01      	cmp	r3, #1
 8001164:	d032      	beq.n	80011cc <Set_Direction+0x80>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
					break;
			}
			break;
	}
}
 8001166:	e066      	b.n	8001236 <Set_Direction+0xea>
			switch(direction) {
 8001168:	79bb      	ldrb	r3, [r7, #6]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d020      	beq.n	80011b0 <Set_Direction+0x64>
 800116e:	2b02      	cmp	r3, #2
 8001170:	dc5e      	bgt.n	8001230 <Set_Direction+0xe4>
 8001172:	2b00      	cmp	r3, #0
 8001174:	d002      	beq.n	800117c <Set_Direction+0x30>
 8001176:	2b01      	cmp	r3, #1
 8001178:	d00d      	beq.n	8001196 <Set_Direction+0x4a>
			break;
 800117a:	e059      	b.n	8001230 <Set_Direction+0xe4>
					HAL_GPIO_WritePin(ML_FWD_GPIO_Port,  ML_FWD_Pin, 1);
 800117c:	2201      	movs	r2, #1
 800117e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001182:	482f      	ldr	r0, [pc, #188]	@ (8001240 <Set_Direction+0xf4>)
 8001184:	f001 fc88 	bl	8002a98 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800118e:	482d      	ldr	r0, [pc, #180]	@ (8001244 <Set_Direction+0xf8>)
 8001190:	f001 fc82 	bl	8002a98 <HAL_GPIO_WritePin>
					break;
 8001194:	e019      	b.n	80011ca <Set_Direction+0x7e>
					HAL_GPIO_WritePin(ML_FWD_GPIO_Port,  ML_FWD_Pin, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800119c:	4828      	ldr	r0, [pc, #160]	@ (8001240 <Set_Direction+0xf4>)
 800119e:	f001 fc7b 	bl	8002a98 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 1);
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011a8:	4826      	ldr	r0, [pc, #152]	@ (8001244 <Set_Direction+0xf8>)
 80011aa:	f001 fc75 	bl	8002a98 <HAL_GPIO_WritePin>
					break;
 80011ae:	e00c      	b.n	80011ca <Set_Direction+0x7e>
					HAL_GPIO_WritePin(ML_FWD_GPIO_Port,  ML_FWD_Pin, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011b6:	4822      	ldr	r0, [pc, #136]	@ (8001240 <Set_Direction+0xf4>)
 80011b8:	f001 fc6e 	bl	8002a98 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011c2:	4820      	ldr	r0, [pc, #128]	@ (8001244 <Set_Direction+0xf8>)
 80011c4:	f001 fc68 	bl	8002a98 <HAL_GPIO_WritePin>
					break;
 80011c8:	bf00      	nop
			break;
 80011ca:	e031      	b.n	8001230 <Set_Direction+0xe4>
			switch(direction) {
 80011cc:	79bb      	ldrb	r3, [r7, #6]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d020      	beq.n	8001214 <Set_Direction+0xc8>
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	dc2e      	bgt.n	8001234 <Set_Direction+0xe8>
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <Set_Direction+0x94>
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d00d      	beq.n	80011fa <Set_Direction+0xae>
			break;
 80011de:	e029      	b.n	8001234 <Set_Direction+0xe8>
					HAL_GPIO_WritePin(MR_FWD_GPIO_Port,  MR_FWD_Pin, 1);
 80011e0:	2201      	movs	r2, #1
 80011e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011e6:	4816      	ldr	r0, [pc, #88]	@ (8001240 <Set_Direction+0xf4>)
 80011e8:	f001 fc56 	bl	8002a98 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011f2:	4813      	ldr	r0, [pc, #76]	@ (8001240 <Set_Direction+0xf4>)
 80011f4:	f001 fc50 	bl	8002a98 <HAL_GPIO_WritePin>
					break;
 80011f8:	e019      	b.n	800122e <Set_Direction+0xe2>
					HAL_GPIO_WritePin(MR_FWD_GPIO_Port,  MR_FWD_Pin, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001200:	480f      	ldr	r0, [pc, #60]	@ (8001240 <Set_Direction+0xf4>)
 8001202:	f001 fc49 	bl	8002a98 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 1);
 8001206:	2201      	movs	r2, #1
 8001208:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800120c:	480c      	ldr	r0, [pc, #48]	@ (8001240 <Set_Direction+0xf4>)
 800120e:	f001 fc43 	bl	8002a98 <HAL_GPIO_WritePin>
					break;
 8001212:	e00c      	b.n	800122e <Set_Direction+0xe2>
					HAL_GPIO_WritePin(MR_FWD_GPIO_Port,  MR_FWD_Pin, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800121a:	4809      	ldr	r0, [pc, #36]	@ (8001240 <Set_Direction+0xf4>)
 800121c:	f001 fc3c 	bl	8002a98 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001226:	4806      	ldr	r0, [pc, #24]	@ (8001240 <Set_Direction+0xf4>)
 8001228:	f001 fc36 	bl	8002a98 <HAL_GPIO_WritePin>
					break;
 800122c:	bf00      	nop
			break;
 800122e:	e001      	b.n	8001234 <Set_Direction+0xe8>
			break;
 8001230:	bf00      	nop
 8001232:	e000      	b.n	8001236 <Set_Direction+0xea>
			break;
 8001234:	bf00      	nop
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40010c00 	.word	0x40010c00
 8001244:	40010800 	.word	0x40010800

08001248 <LED_Power_Init>:

volatile uint16_t buzzerDelay = 0;

extern ADC_HandleTypeDef hadc2;

void LED_Power_Init() {
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Power_GPIO_Port, LED_Power_Pin);
 800124c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001250:	4802      	ldr	r0, [pc, #8]	@ (800125c <LED_Power_Init+0x14>)
 8001252:	f001 fc39 	bl	8002ac8 <HAL_GPIO_TogglePin>
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40011000 	.word	0x40011000

08001260 <Pulse_Buzzer>:
void Reset_Buffers(uint8_t rxBuff, uint8_t txBuff) {
	rxBuff = 0;
	txBuff = 0;
}

void Pulse_Buzzer(uint16_t delay) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 800126a:	2201      	movs	r2, #1
 800126c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001270:	4804      	ldr	r0, [pc, #16]	@ (8001284 <Pulse_Buzzer+0x24>)
 8001272:	f001 fc11 	bl	8002a98 <HAL_GPIO_WritePin>
	buzzerDelay = delay;
 8001276:	4a04      	ldr	r2, [pc, #16]	@ (8001288 <Pulse_Buzzer+0x28>)
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	8013      	strh	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40010c00 	.word	0x40010c00
 8001288:	200001fa 	.word	0x200001fa
 800128c:	00000000 	.word	0x00000000

08001290 <Read_Battery>:

void LED_Blue_Toggle() {
	HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
}

double Read_Battery() {
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 8001296:	481e      	ldr	r0, [pc, #120]	@ (8001310 <Read_Battery+0x80>)
 8001298:	f000 fd3a 	bl	8001d10 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 800129c:	f04f 31ff 	mov.w	r1, #4294967295
 80012a0:	481b      	ldr	r0, [pc, #108]	@ (8001310 <Read_Battery+0x80>)
 80012a2:	f000 fe0f 	bl	8001ec4 <HAL_ADC_PollForConversion>
	uint16_t raw_adc = HAL_ADC_GetValue(&hadc2);
 80012a6:	481a      	ldr	r0, [pc, #104]	@ (8001310 <Read_Battery+0x80>)
 80012a8:	f000 ff12 	bl	80020d0 <HAL_ADC_GetValue>
 80012ac:	4603      	mov	r3, r0
 80012ae:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc2);
 80012b0:	4817      	ldr	r0, [pc, #92]	@ (8001310 <Read_Battery+0x80>)
 80012b2:	f000 fddb 	bl	8001e6c <HAL_ADC_Stop>

	return ((raw_adc / 4095.0) * 3.3) * 3.5;
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f89b 	bl	80003f4 <__aeabi_i2d>
 80012be:	a310      	add	r3, pc, #64	@ (adr r3, 8001300 <Read_Battery+0x70>)
 80012c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c4:	f7ff fa2a 	bl	800071c <__aeabi_ddiv>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	a30d      	add	r3, pc, #52	@ (adr r3, 8001308 <Read_Battery+0x78>)
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	f7ff f8f7 	bl	80004c8 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <Read_Battery+0x84>)
 80012e8:	f7ff f8ee 	bl	80004c8 <__aeabi_dmul>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
}
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	f3af 8000 	nop.w
 8001300:	00000000 	.word	0x00000000
 8001304:	40affe00 	.word	0x40affe00
 8001308:	66666666 	.word	0x66666666
 800130c:	400a6666 	.word	0x400a6666
 8001310:	2000005c 	.word	0x2000005c
 8001314:	400c0000 	.word	0x400c0000

08001318 <Systick>:
extern uint8_t debugCounter;
extern mouse_state_t mouse_state;

extern volatile uint16_t buzzerDelay;

void Systick() {
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	Poll_Sensors(&mouse_state);
 800131c:	4807      	ldr	r0, [pc, #28]	@ (800133c <Systick+0x24>)
 800131e:	f000 f921 	bl	8001564 <Poll_Sensors>
	mouse_state.battery_voltage = Read_Battery();
 8001322:	f7ff ffb5 	bl	8001290 <Read_Battery>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4904      	ldr	r1, [pc, #16]	@ (800133c <Systick+0x24>)
 800132c:	e9c1 2308 	strd	r2, r3, [r1, #32]

	Debug_Mode();
 8001330:	f000 f806 	bl	8001340 <Debug_Mode>
	Buzzer_Check();
 8001334:	f000 f828 	bl	8001388 <Buzzer_Check>
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200001b0 	.word	0x200001b0

08001340 <Debug_Mode>:

void Debug_Mode() {
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	if (debugMode) {
 8001344:	4b0d      	ldr	r3, [pc, #52]	@ (800137c <Debug_Mode+0x3c>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d015      	beq.n	8001378 <Debug_Mode+0x38>
		debugCounter = (debugCounter + 1) % DEBUG_PERIOD;
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <Debug_Mode+0x40>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	4a0c      	ldr	r2, [pc, #48]	@ (8001384 <Debug_Mode+0x44>)
 8001354:	fb82 1203 	smull	r1, r2, r2, r3
 8001358:	1111      	asrs	r1, r2, #4
 800135a:	17da      	asrs	r2, r3, #31
 800135c:	1a8a      	subs	r2, r1, r2
 800135e:	2132      	movs	r1, #50	@ 0x32
 8001360:	fb01 f202 	mul.w	r2, r1, r2
 8001364:	1a9a      	subs	r2, r3, r2
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <Debug_Mode+0x40>)
 800136a:	701a      	strb	r2, [r3, #0]
		if (debugCounter == 0) {
 800136c:	4b04      	ldr	r3, [pc, #16]	@ (8001380 <Debug_Mode+0x40>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <Debug_Mode+0x38>
			Debug_Packet_Send();
 8001374:	f7ff fe92 	bl	800109c <Debug_Packet_Send>
		}
	}
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200001d8 	.word	0x200001d8
 8001380:	200001d9 	.word	0x200001d9
 8001384:	51eb851f 	.word	0x51eb851f

08001388 <Buzzer_Check>:

void Buzzer_Check() {
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	if (buzzerDelay > 0) {
 800138c:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <Buzzer_Check+0x30>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	b29b      	uxth	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d007      	beq.n	80013a6 <Buzzer_Check+0x1e>
		buzzerDelay--;
 8001396:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <Buzzer_Check+0x30>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	3b01      	subs	r3, #1
 800139e:	b29a      	uxth	r2, r3
 80013a0:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <Buzzer_Check+0x30>)
 80013a2:	801a      	strh	r2, [r3, #0]
	}
	else {
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
	}
}
 80013a4:	e005      	b.n	80013b2 <Buzzer_Check+0x2a>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013ac:	4803      	ldr	r0, [pc, #12]	@ (80013bc <Buzzer_Check+0x34>)
 80013ae:	f001 fb73 	bl	8002a98 <HAL_GPIO_WritePin>
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200001fa 	.word	0x200001fa
 80013bc:	40010c00 	.word	0x40010c00

080013c0 <ADC1_Select_CH9>:
extern uint16_t raw_FL;
extern uint16_t raw_L;
extern uint16_t raw_R;
extern uint16_t raw_FR;

static void ADC1_Select_CH9(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_9;
 80013d0:	2309      	movs	r3, #9
 80013d2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80013d8:	2301      	movs	r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel (&hadc1, &sConfig) != HAL_OK) {
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4619      	mov	r1, r3
 80013e0:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <ADC1_Select_CH9+0x38>)
 80013e2:	f000 fe81 	bl	80020e8 <HAL_ADC_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <ADC1_Select_CH9+0x30>
		Error_Handler();
 80013ec:	f7ff fd9f 	bl	8000f2e <Error_Handler>
	}
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	2000002c 	.word	0x2000002c

080013fc <ADC1_Select_CH8>:

static void ADC1_Select_CH8(void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_8;
 800140c:	2308      	movs	r3, #8
 800140e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001410:	2301      	movs	r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001414:	2301      	movs	r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	4619      	mov	r1, r3
 800141c:	4805      	ldr	r0, [pc, #20]	@ (8001434 <ADC1_Select_CH8+0x38>)
 800141e:	f000 fe63 	bl	80020e8 <HAL_ADC_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <ADC1_Select_CH8+0x30>
		Error_Handler();
 8001428:	f7ff fd81 	bl	8000f2e <Error_Handler>
	}
}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2000002c 	.word	0x2000002c

08001438 <ADC1_Select_CH5>:

static void ADC1_Select_CH5(void) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_5;
 8001448:	2305      	movs	r3, #5
 800144a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800144c:	2301      	movs	r3, #1
 800144e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001450:	2301      	movs	r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	@ (8001470 <ADC1_Select_CH5+0x38>)
 800145a:	f000 fe45 	bl	80020e8 <HAL_ADC_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <ADC1_Select_CH5+0x30>
		Error_Handler();
 8001464:	f7ff fd63 	bl	8000f2e <Error_Handler>
	}
}
 8001468:	bf00      	nop
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2000002c 	.word	0x2000002c

08001474 <ADC1_Select_CH4>:

static void ADC1_Select_CH4(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_4;
 8001484:	2304      	movs	r3, #4
 8001486:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001488:	2301      	movs	r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800148c:	2301      	movs	r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel (&hadc1, &sConfig) != HAL_OK) {
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	@ (80014ac <ADC1_Select_CH4+0x38>)
 8001496:	f000 fe27 	bl	80020e8 <HAL_ADC_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <ADC1_Select_CH4+0x30>
		Error_Handler();
 80014a0:	f7ff fd45 	bl	8000f2e <Error_Handler>
	}
}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	2000002c 	.word	0x2000002c

080014b0 <Measure_Dist>:

uint16_t Measure_Dist(dist_t dist) { // Poll raw IR sensors
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef* emitter_port;
	uint16_t emitter_pin;

	switch(dist) {
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d82a      	bhi.n	8001516 <Measure_Dist+0x66>
 80014c0:	a201      	add	r2, pc, #4	@ (adr r2, 80014c8 <Measure_Dist+0x18>)
 80014c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c6:	bf00      	nop
 80014c8:	080014d9 	.word	0x080014d9
 80014cc:	080014e9 	.word	0x080014e9
 80014d0:	080014f9 	.word	0x080014f9
 80014d4:	08001509 	.word	0x08001509
	case DIST_FL:
		emitter_port = EMIT_FL_GPIO_Port;
 80014d8:	4b20      	ldr	r3, [pc, #128]	@ (800155c <Measure_Dist+0xac>)
 80014da:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_FL_Pin;
 80014dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e0:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH9();
 80014e2:	f7ff ff6d 	bl	80013c0 <ADC1_Select_CH9>
		break;
 80014e6:	e017      	b.n	8001518 <Measure_Dist+0x68>
	case DIST_L:
		emitter_port = EMIT_L_GPIO_Port;
 80014e8:	4b1c      	ldr	r3, [pc, #112]	@ (800155c <Measure_Dist+0xac>)
 80014ea:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_L_Pin;
 80014ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014f0:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH8();
 80014f2:	f7ff ff83 	bl	80013fc <ADC1_Select_CH8>
		break;
 80014f6:	e00f      	b.n	8001518 <Measure_Dist+0x68>
	case DIST_R:
		emitter_port = EMIT_R_GPIO_Port;
 80014f8:	4b18      	ldr	r3, [pc, #96]	@ (800155c <Measure_Dist+0xac>)
 80014fa:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_R_Pin;
 80014fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001500:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH5();
 8001502:	f7ff ff99 	bl	8001438 <ADC1_Select_CH5>
		break;
 8001506:	e007      	b.n	8001518 <Measure_Dist+0x68>
	case DIST_FR:
		emitter_port = EMIT_FR_GPIO_Port;
 8001508:	4b14      	ldr	r3, [pc, #80]	@ (800155c <Measure_Dist+0xac>)
 800150a:	60fb      	str	r3, [r7, #12]
		emitter_pin = EMIT_FR_Pin;
 800150c:	2320      	movs	r3, #32
 800150e:	817b      	strh	r3, [r7, #10]
		ADC1_Select_CH4();
 8001510:	f7ff ffb0 	bl	8001474 <ADC1_Select_CH4>
		break;
 8001514:	e000      	b.n	8001518 <Measure_Dist+0x68>
	default:
		break;
 8001516:	bf00      	nop
	}
	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_SET);
 8001518:	897b      	ldrh	r3, [r7, #10]
 800151a:	2201      	movs	r2, #1
 800151c:	4619      	mov	r1, r3
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f001 faba 	bl	8002a98 <HAL_GPIO_WritePin>

	HAL_ADC_Start(&hadc1);
 8001524:	480e      	ldr	r0, [pc, #56]	@ (8001560 <Measure_Dist+0xb0>)
 8001526:	f000 fbf3 	bl	8001d10 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800152a:	f04f 31ff 	mov.w	r1, #4294967295
 800152e:	480c      	ldr	r0, [pc, #48]	@ (8001560 <Measure_Dist+0xb0>)
 8001530:	f000 fcc8 	bl	8001ec4 <HAL_ADC_PollForConversion>
	uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 8001534:	480a      	ldr	r0, [pc, #40]	@ (8001560 <Measure_Dist+0xb0>)
 8001536:	f000 fdcb 	bl	80020d0 <HAL_ADC_GetValue>
 800153a:	4603      	mov	r3, r0
 800153c:	813b      	strh	r3, [r7, #8]
	HAL_ADC_Stop(&hadc1);
 800153e:	4808      	ldr	r0, [pc, #32]	@ (8001560 <Measure_Dist+0xb0>)
 8001540:	f000 fc94 	bl	8001e6c <HAL_ADC_Stop>

	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_RESET);
 8001544:	897b      	ldrh	r3, [r7, #10]
 8001546:	2200      	movs	r2, #0
 8001548:	4619      	mov	r1, r3
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f001 faa4 	bl	8002a98 <HAL_GPIO_WritePin>

	return adc_val;
 8001550:	893b      	ldrh	r3, [r7, #8]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40010c00 	.word	0x40010c00
 8001560:	2000002c 	.word	0x2000002c

08001564 <Poll_Sensors>:

void Poll_Sensors(mouse_state_t* mouse_state){ // Gather all raw IR values
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	mouse_state->raw_FL = Measure_Dist(DIST_FL);
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff ff9f 	bl	80014b0 <Measure_Dist>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	811a      	strh	r2, [r3, #8]
	mouse_state->raw_L = Measure_Dist(DIST_L);
 800157a:	2001      	movs	r0, #1
 800157c:	f7ff ff98 	bl	80014b0 <Measure_Dist>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	815a      	strh	r2, [r3, #10]
	mouse_state->raw_R = Measure_Dist(DIST_R);
 8001588:	2002      	movs	r0, #2
 800158a:	f7ff ff91 	bl	80014b0 <Measure_Dist>
 800158e:	4603      	mov	r3, r0
 8001590:	461a      	mov	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	819a      	strh	r2, [r3, #12]
	mouse_state->raw_FR = Measure_Dist(DIST_FR);
 8001596:	2003      	movs	r0, #3
 8001598:	f7ff ff8a 	bl	80014b0 <Measure_Dist>
 800159c:	4603      	mov	r3, r0
 800159e:	461a      	mov	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	81da      	strh	r2, [r3, #14]
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015b2:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <HAL_MspInit+0x5c>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	4a14      	ldr	r2, [pc, #80]	@ (8001608 <HAL_MspInit+0x5c>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6193      	str	r3, [r2, #24]
 80015be:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <HAL_MspInit+0x5c>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <HAL_MspInit+0x5c>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001608 <HAL_MspInit+0x5c>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <HAL_MspInit+0x5c>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015e2:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <HAL_MspInit+0x60>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	4a04      	ldr	r2, [pc, #16]	@ (800160c <HAL_MspInit+0x60>)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	40021000 	.word	0x40021000
 800160c:	40010000 	.word	0x40010000

08001610 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	@ 0x30
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0320 	add.w	r3, r7, #32
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a33      	ldr	r2, [pc, #204]	@ (80016f8 <HAL_ADC_MspInit+0xe8>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d138      	bne.n	80016a2 <HAL_ADC_MspInit+0x92>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001630:	4b32      	ldr	r3, [pc, #200]	@ (80016fc <HAL_ADC_MspInit+0xec>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a31      	ldr	r2, [pc, #196]	@ (80016fc <HAL_ADC_MspInit+0xec>)
 8001636:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b2f      	ldr	r3, [pc, #188]	@ (80016fc <HAL_ADC_MspInit+0xec>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b2c      	ldr	r3, [pc, #176]	@ (80016fc <HAL_ADC_MspInit+0xec>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a2b      	ldr	r2, [pc, #172]	@ (80016fc <HAL_ADC_MspInit+0xec>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b29      	ldr	r3, [pc, #164]	@ (80016fc <HAL_ADC_MspInit+0xec>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001660:	4b26      	ldr	r3, [pc, #152]	@ (80016fc <HAL_ADC_MspInit+0xec>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a25      	ldr	r2, [pc, #148]	@ (80016fc <HAL_ADC_MspInit+0xec>)
 8001666:	f043 0308 	orr.w	r3, r3, #8
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b23      	ldr	r3, [pc, #140]	@ (80016fc <HAL_ADC_MspInit+0xec>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	697b      	ldr	r3, [r7, #20]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RECIV_FR_Pin|RECIV_R_Pin;
 8001678:	2330      	movs	r3, #48	@ 0x30
 800167a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800167c:	2303      	movs	r3, #3
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	f107 0320 	add.w	r3, r7, #32
 8001684:	4619      	mov	r1, r3
 8001686:	481e      	ldr	r0, [pc, #120]	@ (8001700 <HAL_ADC_MspInit+0xf0>)
 8001688:	f001 f882 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RECIV_L_Pin|RECIV_FL_Pin;
 800168c:	2303      	movs	r3, #3
 800168e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001690:	2303      	movs	r3, #3
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 0320 	add.w	r3, r7, #32
 8001698:	4619      	mov	r1, r3
 800169a:	481a      	ldr	r0, [pc, #104]	@ (8001704 <HAL_ADC_MspInit+0xf4>)
 800169c:	f001 f878 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80016a0:	e026      	b.n	80016f0 <HAL_ADC_MspInit+0xe0>
  else if(hadc->Instance==ADC2)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a18      	ldr	r2, [pc, #96]	@ (8001708 <HAL_ADC_MspInit+0xf8>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d121      	bne.n	80016f0 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80016ac:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <HAL_ADC_MspInit+0xec>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a12      	ldr	r2, [pc, #72]	@ (80016fc <HAL_ADC_MspInit+0xec>)
 80016b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <HAL_ADC_MspInit+0xec>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <HAL_ADC_MspInit+0xec>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a0c      	ldr	r2, [pc, #48]	@ (80016fc <HAL_ADC_MspInit+0xec>)
 80016ca:	f043 0304 	orr.w	r3, r3, #4
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <HAL_ADC_MspInit+0xec>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_METER_Pin;
 80016dc:	2302      	movs	r3, #2
 80016de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e0:	2303      	movs	r3, #3
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(V_METER_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 0320 	add.w	r3, r7, #32
 80016e8:	4619      	mov	r1, r3
 80016ea:	4805      	ldr	r0, [pc, #20]	@ (8001700 <HAL_ADC_MspInit+0xf0>)
 80016ec:	f001 f850 	bl	8002790 <HAL_GPIO_Init>
}
 80016f0:	bf00      	nop
 80016f2:	3730      	adds	r7, #48	@ 0x30
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40012400 	.word	0x40012400
 80016fc:	40021000 	.word	0x40021000
 8001700:	40010800 	.word	0x40010800
 8001704:	40010c00 	.word	0x40010c00
 8001708:	40012800 	.word	0x40012800

0800170c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800171c:	d10b      	bne.n	8001736 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800171e:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <HAL_TIM_Base_MspInit+0x34>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a07      	ldr	r2, [pc, #28]	@ (8001740 <HAL_TIM_Base_MspInit+0x34>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	61d3      	str	r3, [r2, #28]
 800172a:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <HAL_TIM_Base_MspInit+0x34>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	40021000 	.word	0x40021000

08001744 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	@ 0x28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 0318 	add.w	r3, r7, #24
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a32      	ldr	r2, [pc, #200]	@ (8001828 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d12c      	bne.n	80017be <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001764:	4b31      	ldr	r3, [pc, #196]	@ (800182c <HAL_TIM_Encoder_MspInit+0xe8>)
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	4a30      	ldr	r2, [pc, #192]	@ (800182c <HAL_TIM_Encoder_MspInit+0xe8>)
 800176a:	f043 0302 	orr.w	r3, r3, #2
 800176e:	61d3      	str	r3, [r2, #28]
 8001770:	4b2e      	ldr	r3, [pc, #184]	@ (800182c <HAL_TIM_Encoder_MspInit+0xe8>)
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177c:	4b2b      	ldr	r3, [pc, #172]	@ (800182c <HAL_TIM_Encoder_MspInit+0xe8>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	4a2a      	ldr	r2, [pc, #168]	@ (800182c <HAL_TIM_Encoder_MspInit+0xe8>)
 8001782:	f043 0304 	orr.w	r3, r3, #4
 8001786:	6193      	str	r3, [r2, #24]
 8001788:	4b28      	ldr	r3, [pc, #160]	@ (800182c <HAL_TIM_Encoder_MspInit+0xe8>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ML_ENC_A_Pin|ML_ENC_B_Pin;
 8001794:	23c0      	movs	r3, #192	@ 0xc0
 8001796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	f107 0318 	add.w	r3, r7, #24
 80017a4:	4619      	mov	r1, r3
 80017a6:	4822      	ldr	r0, [pc, #136]	@ (8001830 <HAL_TIM_Encoder_MspInit+0xec>)
 80017a8:	f000 fff2 	bl	8002790 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2100      	movs	r1, #0
 80017b0:	201d      	movs	r0, #29
 80017b2:	f000 ff04 	bl	80025be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017b6:	201d      	movs	r0, #29
 80017b8:	f000 ff1d 	bl	80025f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017bc:	e030      	b.n	8001820 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001834 <HAL_TIM_Encoder_MspInit+0xf0>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d12b      	bne.n	8001820 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017c8:	4b18      	ldr	r3, [pc, #96]	@ (800182c <HAL_TIM_Encoder_MspInit+0xe8>)
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	4a17      	ldr	r2, [pc, #92]	@ (800182c <HAL_TIM_Encoder_MspInit+0xe8>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	61d3      	str	r3, [r2, #28]
 80017d4:	4b15      	ldr	r3, [pc, #84]	@ (800182c <HAL_TIM_Encoder_MspInit+0xe8>)
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4b12      	ldr	r3, [pc, #72]	@ (800182c <HAL_TIM_Encoder_MspInit+0xe8>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a11      	ldr	r2, [pc, #68]	@ (800182c <HAL_TIM_Encoder_MspInit+0xe8>)
 80017e6:	f043 0308 	orr.w	r3, r3, #8
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <HAL_TIM_Encoder_MspInit+0xe8>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MR_ENC_B_Pin|MR_ENC_A_Pin;
 80017f8:	23c0      	movs	r3, #192	@ 0xc0
 80017fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 0318 	add.w	r3, r7, #24
 8001808:	4619      	mov	r1, r3
 800180a:	480b      	ldr	r0, [pc, #44]	@ (8001838 <HAL_TIM_Encoder_MspInit+0xf4>)
 800180c:	f000 ffc0 	bl	8002790 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2100      	movs	r1, #0
 8001814:	201e      	movs	r0, #30
 8001816:	f000 fed2 	bl	80025be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800181a:	201e      	movs	r0, #30
 800181c:	f000 feeb 	bl	80025f6 <HAL_NVIC_EnableIRQ>
}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	@ 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40000400 	.word	0x40000400
 800182c:	40021000 	.word	0x40021000
 8001830:	40010800 	.word	0x40010800
 8001834:	40000800 	.word	0x40000800
 8001838:	40010c00 	.word	0x40010c00

0800183c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800185a:	d117      	bne.n	800188c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185c:	4b0d      	ldr	r3, [pc, #52]	@ (8001894 <HAL_TIM_MspPostInit+0x58>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4a0c      	ldr	r2, [pc, #48]	@ (8001894 <HAL_TIM_MspPostInit+0x58>)
 8001862:	f043 0304 	orr.w	r3, r3, #4
 8001866:	6193      	str	r3, [r2, #24]
 8001868:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <HAL_TIM_MspPostInit+0x58>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ML_PWM_Pin|MR_PWM_Pin;
 8001874:	230c      	movs	r3, #12
 8001876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2302      	movs	r3, #2
 800187e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	4619      	mov	r1, r3
 8001886:	4804      	ldr	r0, [pc, #16]	@ (8001898 <HAL_TIM_MspPostInit+0x5c>)
 8001888:	f000 ff82 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800188c:	bf00      	nop
 800188e:	3720      	adds	r7, #32
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40021000 	.word	0x40021000
 8001898:	40010800 	.word	0x40010800

0800189c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a20      	ldr	r2, [pc, #128]	@ (8001938 <HAL_UART_MspInit+0x9c>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d139      	bne.n	8001930 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018bc:	4b1f      	ldr	r3, [pc, #124]	@ (800193c <HAL_UART_MspInit+0xa0>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a1e      	ldr	r2, [pc, #120]	@ (800193c <HAL_UART_MspInit+0xa0>)
 80018c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c6:	6193      	str	r3, [r2, #24]
 80018c8:	4b1c      	ldr	r3, [pc, #112]	@ (800193c <HAL_UART_MspInit+0xa0>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d4:	4b19      	ldr	r3, [pc, #100]	@ (800193c <HAL_UART_MspInit+0xa0>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a18      	ldr	r2, [pc, #96]	@ (800193c <HAL_UART_MspInit+0xa0>)
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	6193      	str	r3, [r2, #24]
 80018e0:	4b16      	ldr	r3, [pc, #88]	@ (800193c <HAL_UART_MspInit+0xa0>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fa:	f107 0310 	add.w	r3, r7, #16
 80018fe:	4619      	mov	r1, r3
 8001900:	480f      	ldr	r0, [pc, #60]	@ (8001940 <HAL_UART_MspInit+0xa4>)
 8001902:	f000 ff45 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001906:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800190a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001914:	f107 0310 	add.w	r3, r7, #16
 8001918:	4619      	mov	r1, r3
 800191a:	4809      	ldr	r0, [pc, #36]	@ (8001940 <HAL_UART_MspInit+0xa4>)
 800191c:	f000 ff38 	bl	8002790 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	2025      	movs	r0, #37	@ 0x25
 8001926:	f000 fe4a 	bl	80025be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800192a:	2025      	movs	r0, #37	@ 0x25
 800192c:	f000 fe63 	bl	80025f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001930:	bf00      	nop
 8001932:	3720      	adds	r7, #32
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40013800 	.word	0x40013800
 800193c:	40021000 	.word	0x40021000
 8001940:	40010800 	.word	0x40010800

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <NMI_Handler+0x4>

0800194c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <HardFault_Handler+0x4>

08001954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <MemManage_Handler+0x4>

0800195c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <BusFault_Handler+0x4>

08001964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <UsageFault_Handler+0x4>

0800196c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001994:	f000 f8a4 	bl	8001ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Systick();
 8001998:	f7ff fcbe 	bl	8001318 <Systick>
  /* USER CODE END SysTick_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ARM_SW1_Pin);
 80019a4:	2010      	movs	r0, #16
 80019a6:	f001 f8a9 	bl	8002afc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019b4:	4802      	ldr	r0, [pc, #8]	@ (80019c0 <TIM3_IRQHandler+0x10>)
 80019b6:	f002 f82b 	bl	8003a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200000d4 	.word	0x200000d4

080019c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019c8:	4802      	ldr	r0, [pc, #8]	@ (80019d4 <TIM4_IRQHandler+0x10>)
 80019ca:	f002 f821 	bl	8003a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2000011c 	.word	0x2000011c

080019d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019dc:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <USART1_IRQHandler+0x10>)
 80019de:	f002 fe87 	bl	80046f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000164 	.word	0x20000164

080019ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPEED_SW2_Pin);
 80019f0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80019f4:	f001 f882 	bl	8002afc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}

080019fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a08:	f7ff fff8 	bl	80019fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a0c:	480b      	ldr	r0, [pc, #44]	@ (8001a3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a0e:	490c      	ldr	r1, [pc, #48]	@ (8001a40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a10:	4a0c      	ldr	r2, [pc, #48]	@ (8001a44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a14:	e002      	b.n	8001a1c <LoopCopyDataInit>

08001a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1a:	3304      	adds	r3, #4

08001a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a20:	d3f9      	bcc.n	8001a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a22:	4a09      	ldr	r2, [pc, #36]	@ (8001a48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a24:	4c09      	ldr	r4, [pc, #36]	@ (8001a4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a28:	e001      	b.n	8001a2e <LoopFillZerobss>

08001a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a2c:	3204      	adds	r2, #4

08001a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a30:	d3fb      	bcc.n	8001a2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a32:	f003 fb77 	bl	8005124 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a36:	f7fe ff59 	bl	80008ec <main>
  bx lr
 8001a3a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a40:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001a44:	080051f0 	.word	0x080051f0
  ldr r2, =_sbss
 8001a48:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001a4c:	20000200 	.word	0x20000200

08001a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC1_2_IRQHandler>
	...

08001a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a58:	4b08      	ldr	r3, [pc, #32]	@ (8001a7c <HAL_Init+0x28>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a07      	ldr	r2, [pc, #28]	@ (8001a7c <HAL_Init+0x28>)
 8001a5e:	f043 0310 	orr.w	r3, r3, #16
 8001a62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a64:	2003      	movs	r0, #3
 8001a66:	f000 fd9f 	bl	80025a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a6a:	200e      	movs	r0, #14
 8001a6c:	f000 f808 	bl	8001a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a70:	f7ff fd9c 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40022000 	.word	0x40022000

08001a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a88:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <HAL_InitTick+0x54>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <HAL_InitTick+0x58>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4619      	mov	r1, r3
 8001a92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 fdb7 	bl	8002612 <HAL_SYSTICK_Config>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00e      	b.n	8001acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b0f      	cmp	r3, #15
 8001ab2:	d80a      	bhi.n	8001aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f000 fd7f 	bl	80025be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac0:	4a06      	ldr	r2, [pc, #24]	@ (8001adc <HAL_InitTick+0x5c>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e000      	b.n	8001acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000004 	.word	0x20000004
 8001ad8:	2000000c 	.word	0x2000000c
 8001adc:	20000008 	.word	0x20000008

08001ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <HAL_IncTick+0x1c>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <HAL_IncTick+0x20>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	4a03      	ldr	r2, [pc, #12]	@ (8001b00 <HAL_IncTick+0x20>)
 8001af2:	6013      	str	r3, [r2, #0]
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	2000000c 	.word	0x2000000c
 8001b00:	200001fc 	.word	0x200001fc

08001b04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;
 8001b08:	4b02      	ldr	r3, [pc, #8]	@ (8001b14 <HAL_GetTick+0x10>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	200001fc 	.word	0x200001fc

08001b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff fff0 	bl	8001b04 <HAL_GetTick>
 8001b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b30:	d005      	beq.n	8001b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b32:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <HAL_Delay+0x44>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b3e:	bf00      	nop
 8001b40:	f7ff ffe0 	bl	8001b04 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d8f7      	bhi.n	8001b40 <HAL_Delay+0x28>
  {
  }
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2000000c 	.word	0x2000000c

08001b60 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e0be      	b.n	8001d00 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d109      	bne.n	8001ba4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff fd36 	bl	8001610 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 fbf1 	bl	800238c <ADC_ConversionStop_Disable>
 8001baa:	4603      	mov	r3, r0
 8001bac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f040 8099 	bne.w	8001cee <HAL_ADC_Init+0x18e>
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f040 8095 	bne.w	8001cee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bcc:	f023 0302 	bic.w	r3, r3, #2
 8001bd0:	f043 0202 	orr.w	r2, r3, #2
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001be0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7b1b      	ldrb	r3, [r3, #12]
 8001be6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001be8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bf8:	d003      	beq.n	8001c02 <HAL_ADC_Init+0xa2>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d102      	bne.n	8001c08 <HAL_ADC_Init+0xa8>
 8001c02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c06:	e000      	b.n	8001c0a <HAL_ADC_Init+0xaa>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7d1b      	ldrb	r3, [r3, #20]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d119      	bne.n	8001c4c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7b1b      	ldrb	r3, [r3, #12]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d109      	bne.n	8001c34 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	035a      	lsls	r2, r3, #13
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	e00b      	b.n	8001c4c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c38:	f043 0220 	orr.w	r2, r3, #32
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c44:	f043 0201 	orr.w	r2, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	4b28      	ldr	r3, [pc, #160]	@ (8001d08 <HAL_ADC_Init+0x1a8>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	68b9      	ldr	r1, [r7, #8]
 8001c70:	430b      	orrs	r3, r1
 8001c72:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c7c:	d003      	beq.n	8001c86 <HAL_ADC_Init+0x126>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d104      	bne.n	8001c90 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	051b      	lsls	r3, r3, #20
 8001c8e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c96:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	4b18      	ldr	r3, [pc, #96]	@ (8001d0c <HAL_ADC_Init+0x1ac>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d10b      	bne.n	8001ccc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cbe:	f023 0303 	bic.w	r3, r3, #3
 8001cc2:	f043 0201 	orr.w	r2, r3, #1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cca:	e018      	b.n	8001cfe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd0:	f023 0312 	bic.w	r3, r3, #18
 8001cd4:	f043 0210 	orr.w	r2, r3, #16
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce0:	f043 0201 	orr.w	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cec:	e007      	b.n	8001cfe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf2:	f043 0210 	orr.w	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	ffe1f7fd 	.word	0xffe1f7fd
 8001d0c:	ff1f0efe 	.word	0xff1f0efe

08001d10 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_Start+0x1a>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e098      	b.n	8001e5c <HAL_ADC_Start+0x14c>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fad0 	bl	80022d8 <ADC_Enable>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f040 8087 	bne.w	8001e52 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d4c:	f023 0301 	bic.w	r3, r3, #1
 8001d50:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a41      	ldr	r2, [pc, #260]	@ (8001e64 <HAL_ADC_Start+0x154>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d105      	bne.n	8001d6e <HAL_ADC_Start+0x5e>
 8001d62:	4b41      	ldr	r3, [pc, #260]	@ (8001e68 <HAL_ADC_Start+0x158>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d115      	bne.n	8001d9a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d72:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d026      	beq.n	8001dd6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d90:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d98:	e01d      	b.n	8001dd6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a2f      	ldr	r2, [pc, #188]	@ (8001e68 <HAL_ADC_Start+0x158>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d004      	beq.n	8001dba <HAL_ADC_Start+0xaa>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a2b      	ldr	r2, [pc, #172]	@ (8001e64 <HAL_ADC_Start+0x154>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d10d      	bne.n	8001dd6 <HAL_ADC_Start+0xc6>
 8001dba:	4b2b      	ldr	r3, [pc, #172]	@ (8001e68 <HAL_ADC_Start+0x158>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d007      	beq.n	8001dd6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001dce:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d006      	beq.n	8001df0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de6:	f023 0206 	bic.w	r2, r3, #6
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001dee:	e002      	b.n	8001df6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f06f 0202 	mvn.w	r2, #2
 8001e06:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e12:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e16:	d113      	bne.n	8001e40 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e1c:	4a11      	ldr	r2, [pc, #68]	@ (8001e64 <HAL_ADC_Start+0x154>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d105      	bne.n	8001e2e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e22:	4b11      	ldr	r3, [pc, #68]	@ (8001e68 <HAL_ADC_Start+0x158>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d108      	bne.n	8001e40 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	e00c      	b.n	8001e5a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	e003      	b.n	8001e5a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40012800 	.word	0x40012800
 8001e68:	40012400 	.word	0x40012400

08001e6c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_ADC_Stop+0x1a>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e01a      	b.n	8001ebc <HAL_ADC_Stop+0x50>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 fa7c 	bl	800238c <ADC_ConversionStop_Disable>
 8001e94:	4603      	mov	r3, r0
 8001e96:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ea6:	f023 0301 	bic.w	r3, r3, #1
 8001eaa:	f043 0201 	orr.w	r2, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001eda:	f7ff fe13 	bl	8001b04 <HAL_GetTick>
 8001ede:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00b      	beq.n	8001f06 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef2:	f043 0220 	orr.w	r2, r3, #32
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e0d3      	b.n	80020ae <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d131      	bne.n	8001f78 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d12a      	bne.n	8001f78 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001f22:	e021      	b.n	8001f68 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2a:	d01d      	beq.n	8001f68 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <HAL_ADC_PollForConversion+0x7e>
 8001f32:	f7ff fde7 	bl	8001b04 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d212      	bcs.n	8001f68 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10b      	bne.n	8001f68 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f54:	f043 0204 	orr.w	r2, r3, #4
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0a2      	b.n	80020ae <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0d6      	beq.n	8001f24 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f76:	e070      	b.n	800205a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001f78:	4b4f      	ldr	r3, [pc, #316]	@ (80020b8 <HAL_ADC_PollForConversion+0x1f4>)
 8001f7a:	681c      	ldr	r4, [r3, #0]
 8001f7c:	2002      	movs	r0, #2
 8001f7e:	f001 faa5 	bl	80034cc <HAL_RCCEx_GetPeriphCLKFreq>
 8001f82:	4603      	mov	r3, r0
 8001f84:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6919      	ldr	r1, [r3, #16]
 8001f8e:	4b4b      	ldr	r3, [pc, #300]	@ (80020bc <HAL_ADC_PollForConversion+0x1f8>)
 8001f90:	400b      	ands	r3, r1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d118      	bne.n	8001fc8 <HAL_ADC_PollForConversion+0x104>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68d9      	ldr	r1, [r3, #12]
 8001f9c:	4b48      	ldr	r3, [pc, #288]	@ (80020c0 <HAL_ADC_PollForConversion+0x1fc>)
 8001f9e:	400b      	ands	r3, r1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d111      	bne.n	8001fc8 <HAL_ADC_PollForConversion+0x104>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6919      	ldr	r1, [r3, #16]
 8001faa:	4b46      	ldr	r3, [pc, #280]	@ (80020c4 <HAL_ADC_PollForConversion+0x200>)
 8001fac:	400b      	ands	r3, r1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d108      	bne.n	8001fc4 <HAL_ADC_PollForConversion+0x100>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68d9      	ldr	r1, [r3, #12]
 8001fb8:	4b43      	ldr	r3, [pc, #268]	@ (80020c8 <HAL_ADC_PollForConversion+0x204>)
 8001fba:	400b      	ands	r3, r1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_ADC_PollForConversion+0x100>
 8001fc0:	2314      	movs	r3, #20
 8001fc2:	e020      	b.n	8002006 <HAL_ADC_PollForConversion+0x142>
 8001fc4:	2329      	movs	r3, #41	@ 0x29
 8001fc6:	e01e      	b.n	8002006 <HAL_ADC_PollForConversion+0x142>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6919      	ldr	r1, [r3, #16]
 8001fce:	4b3d      	ldr	r3, [pc, #244]	@ (80020c4 <HAL_ADC_PollForConversion+0x200>)
 8001fd0:	400b      	ands	r3, r1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d106      	bne.n	8001fe4 <HAL_ADC_PollForConversion+0x120>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68d9      	ldr	r1, [r3, #12]
 8001fdc:	4b3a      	ldr	r3, [pc, #232]	@ (80020c8 <HAL_ADC_PollForConversion+0x204>)
 8001fde:	400b      	ands	r3, r1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00d      	beq.n	8002000 <HAL_ADC_PollForConversion+0x13c>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6919      	ldr	r1, [r3, #16]
 8001fea:	4b38      	ldr	r3, [pc, #224]	@ (80020cc <HAL_ADC_PollForConversion+0x208>)
 8001fec:	400b      	ands	r3, r1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d108      	bne.n	8002004 <HAL_ADC_PollForConversion+0x140>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68d9      	ldr	r1, [r3, #12]
 8001ff8:	4b34      	ldr	r3, [pc, #208]	@ (80020cc <HAL_ADC_PollForConversion+0x208>)
 8001ffa:	400b      	ands	r3, r1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_ADC_PollForConversion+0x140>
 8002000:	2354      	movs	r3, #84	@ 0x54
 8002002:	e000      	b.n	8002006 <HAL_ADC_PollForConversion+0x142>
 8002004:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002006:	fb02 f303 	mul.w	r3, r2, r3
 800200a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800200c:	e021      	b.n	8002052 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002014:	d01a      	beq.n	800204c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d007      	beq.n	800202c <HAL_ADC_PollForConversion+0x168>
 800201c:	f7ff fd72 	bl	8001b04 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d20f      	bcs.n	800204c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	429a      	cmp	r2, r3
 8002032:	d90b      	bls.n	800204c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002038:	f043 0204 	orr.w	r2, r3, #4
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e030      	b.n	80020ae <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	3301      	adds	r3, #1
 8002050:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	429a      	cmp	r2, r3
 8002058:	d8d9      	bhi.n	800200e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f06f 0212 	mvn.w	r2, #18
 8002062:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002068:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800207a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800207e:	d115      	bne.n	80020ac <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002084:	2b00      	cmp	r3, #0
 8002086:	d111      	bne.n	80020ac <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d105      	bne.n	80020ac <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a4:	f043 0201 	orr.w	r2, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	371c      	adds	r7, #28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd90      	pop	{r4, r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000004 	.word	0x20000004
 80020bc:	24924924 	.word	0x24924924
 80020c0:	00924924 	.word	0x00924924
 80020c4:	12492492 	.word	0x12492492
 80020c8:	00492492 	.word	0x00492492
 80020cc:	00249249 	.word	0x00249249

080020d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x20>
 8002104:	2302      	movs	r3, #2
 8002106:	e0dc      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x1da>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b06      	cmp	r3, #6
 8002116:	d81c      	bhi.n	8002152 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	3b05      	subs	r3, #5
 800212a:	221f      	movs	r2, #31
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	4019      	ands	r1, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	3b05      	subs	r3, #5
 8002144:	fa00 f203 	lsl.w	r2, r0, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002150:	e03c      	b.n	80021cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b0c      	cmp	r3, #12
 8002158:	d81c      	bhi.n	8002194 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	3b23      	subs	r3, #35	@ 0x23
 800216c:	221f      	movs	r2, #31
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	4019      	ands	r1, r3
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	3b23      	subs	r3, #35	@ 0x23
 8002186:	fa00 f203 	lsl.w	r2, r0, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	631a      	str	r2, [r3, #48]	@ 0x30
 8002192:	e01b      	b.n	80021cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	3b41      	subs	r3, #65	@ 0x41
 80021a6:	221f      	movs	r2, #31
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	4019      	ands	r1, r3
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	3b41      	subs	r3, #65	@ 0x41
 80021c0:	fa00 f203 	lsl.w	r2, r0, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b09      	cmp	r3, #9
 80021d2:	d91c      	bls.n	800220e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68d9      	ldr	r1, [r3, #12]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	3b1e      	subs	r3, #30
 80021e6:	2207      	movs	r2, #7
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	4019      	ands	r1, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	6898      	ldr	r0, [r3, #8]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4613      	mov	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4413      	add	r3, r2
 80021fe:	3b1e      	subs	r3, #30
 8002200:	fa00 f203 	lsl.w	r2, r0, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	60da      	str	r2, [r3, #12]
 800220c:	e019      	b.n	8002242 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6919      	ldr	r1, [r3, #16]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4613      	mov	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	2207      	movs	r2, #7
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	4019      	ands	r1, r3
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	6898      	ldr	r0, [r3, #8]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4613      	mov	r3, r2
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4413      	add	r3, r2
 8002236:	fa00 f203 	lsl.w	r2, r0, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b10      	cmp	r3, #16
 8002248:	d003      	beq.n	8002252 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800224e:	2b11      	cmp	r3, #17
 8002250:	d132      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1d      	ldr	r2, [pc, #116]	@ (80022cc <HAL_ADC_ConfigChannel+0x1e4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d125      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d126      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002278:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b10      	cmp	r3, #16
 8002280:	d11a      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002282:	4b13      	ldr	r3, [pc, #76]	@ (80022d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a13      	ldr	r2, [pc, #76]	@ (80022d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002288:	fba2 2303 	umull	r2, r3, r2, r3
 800228c:	0c9a      	lsrs	r2, r3, #18
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002298:	e002      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	3b01      	subs	r3, #1
 800229e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f9      	bne.n	800229a <HAL_ADC_ConfigChannel+0x1b2>
 80022a6:	e007      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ac:	f043 0220 	orr.w	r2, r3, #32
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	40012400 	.word	0x40012400
 80022d0:	20000004 	.word	0x20000004
 80022d4:	431bde83 	.word	0x431bde83

080022d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d040      	beq.n	8002378 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f042 0201 	orr.w	r2, r2, #1
 8002304:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002306:	4b1f      	ldr	r3, [pc, #124]	@ (8002384 <ADC_Enable+0xac>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a1f      	ldr	r2, [pc, #124]	@ (8002388 <ADC_Enable+0xb0>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	0c9b      	lsrs	r3, r3, #18
 8002312:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002314:	e002      	b.n	800231c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	3b01      	subs	r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f9      	bne.n	8002316 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002322:	f7ff fbef 	bl	8001b04 <HAL_GetTick>
 8002326:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002328:	e01f      	b.n	800236a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800232a:	f7ff fbeb 	bl	8001b04 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d918      	bls.n	800236a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b01      	cmp	r3, #1
 8002344:	d011      	beq.n	800236a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234a:	f043 0210 	orr.w	r2, r3, #16
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002356:	f043 0201 	orr.w	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e007      	b.n	800237a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b01      	cmp	r3, #1
 8002376:	d1d8      	bne.n	800232a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000004 	.word	0x20000004
 8002388:	431bde83 	.word	0x431bde83

0800238c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d12e      	bne.n	8002404 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0201 	bic.w	r2, r2, #1
 80023b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023b6:	f7ff fba5 	bl	8001b04 <HAL_GetTick>
 80023ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023bc:	e01b      	b.n	80023f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023be:	f7ff fba1 	bl	8001b04 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d914      	bls.n	80023f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d10d      	bne.n	80023f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023de:	f043 0210 	orr.w	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e007      	b.n	8002406 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b01      	cmp	r3, #1
 8002402:	d0dc      	beq.n	80023be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002420:	4b0c      	ldr	r3, [pc, #48]	@ (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800242c:	4013      	ands	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002438:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800243c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002442:	4a04      	ldr	r2, [pc, #16]	@ (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	60d3      	str	r3, [r2, #12]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800245c:	4b04      	ldr	r3, [pc, #16]	@ (8002470 <__NVIC_GetPriorityGrouping+0x18>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	f003 0307 	and.w	r3, r3, #7
}
 8002466:	4618      	mov	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	2b00      	cmp	r3, #0
 8002484:	db0b      	blt.n	800249e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	f003 021f 	and.w	r2, r3, #31
 800248c:	4906      	ldr	r1, [pc, #24]	@ (80024a8 <__NVIC_EnableIRQ+0x34>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	2001      	movs	r0, #1
 8002496:	fa00 f202 	lsl.w	r2, r0, r2
 800249a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	e000e100 	.word	0xe000e100

080024ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	6039      	str	r1, [r7, #0]
 80024b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	db0a      	blt.n	80024d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	490c      	ldr	r1, [pc, #48]	@ (80024f8 <__NVIC_SetPriority+0x4c>)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	0112      	lsls	r2, r2, #4
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	440b      	add	r3, r1
 80024d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d4:	e00a      	b.n	80024ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4908      	ldr	r1, [pc, #32]	@ (80024fc <__NVIC_SetPriority+0x50>)
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	3b04      	subs	r3, #4
 80024e4:	0112      	lsls	r2, r2, #4
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	440b      	add	r3, r1
 80024ea:	761a      	strb	r2, [r3, #24]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	e000e100 	.word	0xe000e100
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	@ 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f1c3 0307 	rsb	r3, r3, #7
 800251a:	2b04      	cmp	r3, #4
 800251c:	bf28      	it	cs
 800251e:	2304      	movcs	r3, #4
 8002520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3304      	adds	r3, #4
 8002526:	2b06      	cmp	r3, #6
 8002528:	d902      	bls.n	8002530 <NVIC_EncodePriority+0x30>
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3b03      	subs	r3, #3
 800252e:	e000      	b.n	8002532 <NVIC_EncodePriority+0x32>
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	f04f 32ff 	mov.w	r2, #4294967295
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43da      	mvns	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	401a      	ands	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002548:	f04f 31ff 	mov.w	r1, #4294967295
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	43d9      	mvns	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	4313      	orrs	r3, r2
         );
}
 800255a:	4618      	mov	r0, r3
 800255c:	3724      	adds	r7, #36	@ 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3b01      	subs	r3, #1
 8002570:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002574:	d301      	bcc.n	800257a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002576:	2301      	movs	r3, #1
 8002578:	e00f      	b.n	800259a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800257a:	4a0a      	ldr	r2, [pc, #40]	@ (80025a4 <SysTick_Config+0x40>)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3b01      	subs	r3, #1
 8002580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002582:	210f      	movs	r1, #15
 8002584:	f04f 30ff 	mov.w	r0, #4294967295
 8002588:	f7ff ff90 	bl	80024ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800258c:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <SysTick_Config+0x40>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002592:	4b04      	ldr	r3, [pc, #16]	@ (80025a4 <SysTick_Config+0x40>)
 8002594:	2207      	movs	r2, #7
 8002596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	e000e010 	.word	0xe000e010

080025a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff ff2d 	bl	8002410 <__NVIC_SetPriorityGrouping>
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025be:	b580      	push	{r7, lr}
 80025c0:	b086      	sub	sp, #24
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	4603      	mov	r3, r0
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025d0:	f7ff ff42 	bl	8002458 <__NVIC_GetPriorityGrouping>
 80025d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	6978      	ldr	r0, [r7, #20]
 80025dc:	f7ff ff90 	bl	8002500 <NVIC_EncodePriority>
 80025e0:	4602      	mov	r2, r0
 80025e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff5f 	bl	80024ac <__NVIC_SetPriority>
}
 80025ee:	bf00      	nop
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4603      	mov	r3, r0
 80025fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff35 	bl	8002474 <__NVIC_EnableIRQ>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ffa2 	bl	8002564 <SysTick_Config>
 8002620:	4603      	mov	r3, r0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800262a:	b480      	push	{r7}
 800262c:	b085      	sub	sp, #20
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d008      	beq.n	8002654 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2204      	movs	r2, #4
 8002646:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e020      	b.n	8002696 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 020e 	bic.w	r2, r2, #14
 8002662:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f202 	lsl.w	r2, r1, r2
 8002682:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002694:	7bfb      	ldrb	r3, [r7, #15]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d005      	beq.n	80026c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2204      	movs	r2, #4
 80026bc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	e051      	b.n	8002768 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 020e 	bic.w	r2, r2, #14
 80026d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0201 	bic.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a22      	ldr	r2, [pc, #136]	@ (8002774 <HAL_DMA_Abort_IT+0xd4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d029      	beq.n	8002742 <HAL_DMA_Abort_IT+0xa2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a21      	ldr	r2, [pc, #132]	@ (8002778 <HAL_DMA_Abort_IT+0xd8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d022      	beq.n	800273e <HAL_DMA_Abort_IT+0x9e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a1f      	ldr	r2, [pc, #124]	@ (800277c <HAL_DMA_Abort_IT+0xdc>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d01a      	beq.n	8002738 <HAL_DMA_Abort_IT+0x98>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a1e      	ldr	r2, [pc, #120]	@ (8002780 <HAL_DMA_Abort_IT+0xe0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d012      	beq.n	8002732 <HAL_DMA_Abort_IT+0x92>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1c      	ldr	r2, [pc, #112]	@ (8002784 <HAL_DMA_Abort_IT+0xe4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00a      	beq.n	800272c <HAL_DMA_Abort_IT+0x8c>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1b      	ldr	r2, [pc, #108]	@ (8002788 <HAL_DMA_Abort_IT+0xe8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d102      	bne.n	8002726 <HAL_DMA_Abort_IT+0x86>
 8002720:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002724:	e00e      	b.n	8002744 <HAL_DMA_Abort_IT+0xa4>
 8002726:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800272a:	e00b      	b.n	8002744 <HAL_DMA_Abort_IT+0xa4>
 800272c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002730:	e008      	b.n	8002744 <HAL_DMA_Abort_IT+0xa4>
 8002732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002736:	e005      	b.n	8002744 <HAL_DMA_Abort_IT+0xa4>
 8002738:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800273c:	e002      	b.n	8002744 <HAL_DMA_Abort_IT+0xa4>
 800273e:	2310      	movs	r3, #16
 8002740:	e000      	b.n	8002744 <HAL_DMA_Abort_IT+0xa4>
 8002742:	2301      	movs	r3, #1
 8002744:	4a11      	ldr	r2, [pc, #68]	@ (800278c <HAL_DMA_Abort_IT+0xec>)
 8002746:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	4798      	blx	r3
    } 
  }
  return status;
 8002768:	7bfb      	ldrb	r3, [r7, #15]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40020008 	.word	0x40020008
 8002778:	4002001c 	.word	0x4002001c
 800277c:	40020030 	.word	0x40020030
 8002780:	40020044 	.word	0x40020044
 8002784:	40020058 	.word	0x40020058
 8002788:	4002006c 	.word	0x4002006c
 800278c:	40020000 	.word	0x40020000

08002790 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002790:	b480      	push	{r7}
 8002792:	b08b      	sub	sp, #44	@ 0x2c
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800279e:	2300      	movs	r3, #0
 80027a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a2:	e169      	b.n	8002a78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027a4:	2201      	movs	r2, #1
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	429a      	cmp	r2, r3
 80027be:	f040 8158 	bne.w	8002a72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4a9a      	ldr	r2, [pc, #616]	@ (8002a30 <HAL_GPIO_Init+0x2a0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d05e      	beq.n	800288a <HAL_GPIO_Init+0xfa>
 80027cc:	4a98      	ldr	r2, [pc, #608]	@ (8002a30 <HAL_GPIO_Init+0x2a0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d875      	bhi.n	80028be <HAL_GPIO_Init+0x12e>
 80027d2:	4a98      	ldr	r2, [pc, #608]	@ (8002a34 <HAL_GPIO_Init+0x2a4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d058      	beq.n	800288a <HAL_GPIO_Init+0xfa>
 80027d8:	4a96      	ldr	r2, [pc, #600]	@ (8002a34 <HAL_GPIO_Init+0x2a4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d86f      	bhi.n	80028be <HAL_GPIO_Init+0x12e>
 80027de:	4a96      	ldr	r2, [pc, #600]	@ (8002a38 <HAL_GPIO_Init+0x2a8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d052      	beq.n	800288a <HAL_GPIO_Init+0xfa>
 80027e4:	4a94      	ldr	r2, [pc, #592]	@ (8002a38 <HAL_GPIO_Init+0x2a8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d869      	bhi.n	80028be <HAL_GPIO_Init+0x12e>
 80027ea:	4a94      	ldr	r2, [pc, #592]	@ (8002a3c <HAL_GPIO_Init+0x2ac>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d04c      	beq.n	800288a <HAL_GPIO_Init+0xfa>
 80027f0:	4a92      	ldr	r2, [pc, #584]	@ (8002a3c <HAL_GPIO_Init+0x2ac>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d863      	bhi.n	80028be <HAL_GPIO_Init+0x12e>
 80027f6:	4a92      	ldr	r2, [pc, #584]	@ (8002a40 <HAL_GPIO_Init+0x2b0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d046      	beq.n	800288a <HAL_GPIO_Init+0xfa>
 80027fc:	4a90      	ldr	r2, [pc, #576]	@ (8002a40 <HAL_GPIO_Init+0x2b0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d85d      	bhi.n	80028be <HAL_GPIO_Init+0x12e>
 8002802:	2b12      	cmp	r3, #18
 8002804:	d82a      	bhi.n	800285c <HAL_GPIO_Init+0xcc>
 8002806:	2b12      	cmp	r3, #18
 8002808:	d859      	bhi.n	80028be <HAL_GPIO_Init+0x12e>
 800280a:	a201      	add	r2, pc, #4	@ (adr r2, 8002810 <HAL_GPIO_Init+0x80>)
 800280c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002810:	0800288b 	.word	0x0800288b
 8002814:	08002865 	.word	0x08002865
 8002818:	08002877 	.word	0x08002877
 800281c:	080028b9 	.word	0x080028b9
 8002820:	080028bf 	.word	0x080028bf
 8002824:	080028bf 	.word	0x080028bf
 8002828:	080028bf 	.word	0x080028bf
 800282c:	080028bf 	.word	0x080028bf
 8002830:	080028bf 	.word	0x080028bf
 8002834:	080028bf 	.word	0x080028bf
 8002838:	080028bf 	.word	0x080028bf
 800283c:	080028bf 	.word	0x080028bf
 8002840:	080028bf 	.word	0x080028bf
 8002844:	080028bf 	.word	0x080028bf
 8002848:	080028bf 	.word	0x080028bf
 800284c:	080028bf 	.word	0x080028bf
 8002850:	080028bf 	.word	0x080028bf
 8002854:	0800286d 	.word	0x0800286d
 8002858:	08002881 	.word	0x08002881
 800285c:	4a79      	ldr	r2, [pc, #484]	@ (8002a44 <HAL_GPIO_Init+0x2b4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002862:	e02c      	b.n	80028be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	623b      	str	r3, [r7, #32]
          break;
 800286a:	e029      	b.n	80028c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	3304      	adds	r3, #4
 8002872:	623b      	str	r3, [r7, #32]
          break;
 8002874:	e024      	b.n	80028c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	3308      	adds	r3, #8
 800287c:	623b      	str	r3, [r7, #32]
          break;
 800287e:	e01f      	b.n	80028c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	330c      	adds	r3, #12
 8002886:	623b      	str	r3, [r7, #32]
          break;
 8002888:	e01a      	b.n	80028c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d102      	bne.n	8002898 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002892:	2304      	movs	r3, #4
 8002894:	623b      	str	r3, [r7, #32]
          break;
 8002896:	e013      	b.n	80028c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d105      	bne.n	80028ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028a0:	2308      	movs	r3, #8
 80028a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	611a      	str	r2, [r3, #16]
          break;
 80028aa:	e009      	b.n	80028c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028ac:	2308      	movs	r3, #8
 80028ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69fa      	ldr	r2, [r7, #28]
 80028b4:	615a      	str	r2, [r3, #20]
          break;
 80028b6:	e003      	b.n	80028c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028b8:	2300      	movs	r3, #0
 80028ba:	623b      	str	r3, [r7, #32]
          break;
 80028bc:	e000      	b.n	80028c0 <HAL_GPIO_Init+0x130>
          break;
 80028be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	2bff      	cmp	r3, #255	@ 0xff
 80028c4:	d801      	bhi.n	80028ca <HAL_GPIO_Init+0x13a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	e001      	b.n	80028ce <HAL_GPIO_Init+0x13e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3304      	adds	r3, #4
 80028ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	2bff      	cmp	r3, #255	@ 0xff
 80028d4:	d802      	bhi.n	80028dc <HAL_GPIO_Init+0x14c>
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	e002      	b.n	80028e2 <HAL_GPIO_Init+0x152>
 80028dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028de:	3b08      	subs	r3, #8
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	210f      	movs	r1, #15
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	fa01 f303 	lsl.w	r3, r1, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	401a      	ands	r2, r3
 80028f4:	6a39      	ldr	r1, [r7, #32]
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	fa01 f303 	lsl.w	r3, r1, r3
 80028fc:	431a      	orrs	r2, r3
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 80b1 	beq.w	8002a72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002910:	4b4d      	ldr	r3, [pc, #308]	@ (8002a48 <HAL_GPIO_Init+0x2b8>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	4a4c      	ldr	r2, [pc, #304]	@ (8002a48 <HAL_GPIO_Init+0x2b8>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	6193      	str	r3, [r2, #24]
 800291c:	4b4a      	ldr	r3, [pc, #296]	@ (8002a48 <HAL_GPIO_Init+0x2b8>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002928:	4a48      	ldr	r2, [pc, #288]	@ (8002a4c <HAL_GPIO_Init+0x2bc>)
 800292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292c:	089b      	lsrs	r3, r3, #2
 800292e:	3302      	adds	r3, #2
 8002930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002934:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	220f      	movs	r2, #15
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4013      	ands	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a40      	ldr	r2, [pc, #256]	@ (8002a50 <HAL_GPIO_Init+0x2c0>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d013      	beq.n	800297c <HAL_GPIO_Init+0x1ec>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a3f      	ldr	r2, [pc, #252]	@ (8002a54 <HAL_GPIO_Init+0x2c4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d00d      	beq.n	8002978 <HAL_GPIO_Init+0x1e8>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a3e      	ldr	r2, [pc, #248]	@ (8002a58 <HAL_GPIO_Init+0x2c8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d007      	beq.n	8002974 <HAL_GPIO_Init+0x1e4>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a3d      	ldr	r2, [pc, #244]	@ (8002a5c <HAL_GPIO_Init+0x2cc>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d101      	bne.n	8002970 <HAL_GPIO_Init+0x1e0>
 800296c:	2303      	movs	r3, #3
 800296e:	e006      	b.n	800297e <HAL_GPIO_Init+0x1ee>
 8002970:	2304      	movs	r3, #4
 8002972:	e004      	b.n	800297e <HAL_GPIO_Init+0x1ee>
 8002974:	2302      	movs	r3, #2
 8002976:	e002      	b.n	800297e <HAL_GPIO_Init+0x1ee>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <HAL_GPIO_Init+0x1ee>
 800297c:	2300      	movs	r3, #0
 800297e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002980:	f002 0203 	and.w	r2, r2, #3
 8002984:	0092      	lsls	r2, r2, #2
 8002986:	4093      	lsls	r3, r2
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800298e:	492f      	ldr	r1, [pc, #188]	@ (8002a4c <HAL_GPIO_Init+0x2bc>)
 8002990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	3302      	adds	r3, #2
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d006      	beq.n	80029b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002a60 <HAL_GPIO_Init+0x2d0>)
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	492c      	ldr	r1, [pc, #176]	@ (8002a60 <HAL_GPIO_Init+0x2d0>)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	608b      	str	r3, [r1, #8]
 80029b4:	e006      	b.n	80029c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a60 <HAL_GPIO_Init+0x2d0>)
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	43db      	mvns	r3, r3
 80029be:	4928      	ldr	r1, [pc, #160]	@ (8002a60 <HAL_GPIO_Init+0x2d0>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d006      	beq.n	80029de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029d0:	4b23      	ldr	r3, [pc, #140]	@ (8002a60 <HAL_GPIO_Init+0x2d0>)
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	4922      	ldr	r1, [pc, #136]	@ (8002a60 <HAL_GPIO_Init+0x2d0>)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60cb      	str	r3, [r1, #12]
 80029dc:	e006      	b.n	80029ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029de:	4b20      	ldr	r3, [pc, #128]	@ (8002a60 <HAL_GPIO_Init+0x2d0>)
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	491e      	ldr	r1, [pc, #120]	@ (8002a60 <HAL_GPIO_Init+0x2d0>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d006      	beq.n	8002a06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029f8:	4b19      	ldr	r3, [pc, #100]	@ (8002a60 <HAL_GPIO_Init+0x2d0>)
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	4918      	ldr	r1, [pc, #96]	@ (8002a60 <HAL_GPIO_Init+0x2d0>)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
 8002a04:	e006      	b.n	8002a14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a06:	4b16      	ldr	r3, [pc, #88]	@ (8002a60 <HAL_GPIO_Init+0x2d0>)
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	4914      	ldr	r1, [pc, #80]	@ (8002a60 <HAL_GPIO_Init+0x2d0>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d021      	beq.n	8002a64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a20:	4b0f      	ldr	r3, [pc, #60]	@ (8002a60 <HAL_GPIO_Init+0x2d0>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	490e      	ldr	r1, [pc, #56]	@ (8002a60 <HAL_GPIO_Init+0x2d0>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	600b      	str	r3, [r1, #0]
 8002a2c:	e021      	b.n	8002a72 <HAL_GPIO_Init+0x2e2>
 8002a2e:	bf00      	nop
 8002a30:	10320000 	.word	0x10320000
 8002a34:	10310000 	.word	0x10310000
 8002a38:	10220000 	.word	0x10220000
 8002a3c:	10210000 	.word	0x10210000
 8002a40:	10120000 	.word	0x10120000
 8002a44:	10110000 	.word	0x10110000
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40010000 	.word	0x40010000
 8002a50:	40010800 	.word	0x40010800
 8002a54:	40010c00 	.word	0x40010c00
 8002a58:	40011000 	.word	0x40011000
 8002a5c:	40011400 	.word	0x40011400
 8002a60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a64:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <HAL_GPIO_Init+0x304>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	4909      	ldr	r1, [pc, #36]	@ (8002a94 <HAL_GPIO_Init+0x304>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	3301      	adds	r3, #1
 8002a76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f47f ae8e 	bne.w	80027a4 <HAL_GPIO_Init+0x14>
  }
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	372c      	adds	r7, #44	@ 0x2c
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	40010400 	.word	0x40010400

08002a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aa8:	787b      	ldrb	r3, [r7, #1]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aae:	887a      	ldrh	r2, [r7, #2]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ab4:	e003      	b.n	8002abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ab6:	887b      	ldrh	r3, [r7, #2]
 8002ab8:	041a      	lsls	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	611a      	str	r2, [r3, #16]
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ada:	887a      	ldrh	r2, [r7, #2]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	041a      	lsls	r2, r3, #16
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	43d9      	mvns	r1, r3
 8002ae6:	887b      	ldrh	r3, [r7, #2]
 8002ae8:	400b      	ands	r3, r1
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	611a      	str	r2, [r3, #16]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr
	...

08002afc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b06:	4b08      	ldr	r3, [pc, #32]	@ (8002b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d006      	beq.n	8002b20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b12:	4a05      	ldr	r2, [pc, #20]	@ (8002b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f806 	bl	8002b2c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b20:	bf00      	nop
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40010400 	.word	0x40010400

08002b2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e272      	b.n	8003038 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8087 	beq.w	8002c6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b60:	4b92      	ldr	r3, [pc, #584]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 030c 	and.w	r3, r3, #12
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d00c      	beq.n	8002b86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b6c:	4b8f      	ldr	r3, [pc, #572]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d112      	bne.n	8002b9e <HAL_RCC_OscConfig+0x5e>
 8002b78:	4b8c      	ldr	r3, [pc, #560]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b84:	d10b      	bne.n	8002b9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b86:	4b89      	ldr	r3, [pc, #548]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d06c      	beq.n	8002c6c <HAL_RCC_OscConfig+0x12c>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d168      	bne.n	8002c6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e24c      	b.n	8003038 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba6:	d106      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x76>
 8002ba8:	4b80      	ldr	r3, [pc, #512]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a7f      	ldr	r2, [pc, #508]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002bae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	e02e      	b.n	8002c14 <HAL_RCC_OscConfig+0xd4>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10c      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x98>
 8002bbe:	4b7b      	ldr	r3, [pc, #492]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a7a      	ldr	r2, [pc, #488]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	4b78      	ldr	r3, [pc, #480]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a77      	ldr	r2, [pc, #476]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e01d      	b.n	8002c14 <HAL_RCC_OscConfig+0xd4>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0xbc>
 8002be2:	4b72      	ldr	r3, [pc, #456]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a71      	ldr	r2, [pc, #452]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002be8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b6f      	ldr	r3, [pc, #444]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a6e      	ldr	r2, [pc, #440]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0xd4>
 8002bfc:	4b6b      	ldr	r3, [pc, #428]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a6a      	ldr	r2, [pc, #424]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002c02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b68      	ldr	r3, [pc, #416]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a67      	ldr	r2, [pc, #412]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d013      	beq.n	8002c44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7fe ff72 	bl	8001b04 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fe ff6e 	bl	8001b04 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	@ 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e200      	b.n	8003038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	4b5d      	ldr	r3, [pc, #372]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0xe4>
 8002c42:	e014      	b.n	8002c6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7fe ff5e 	bl	8001b04 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7fe ff5a 	bl	8001b04 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	@ 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e1ec      	b.n	8003038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5e:	4b53      	ldr	r3, [pc, #332]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x10c>
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d063      	beq.n	8002d42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c7a:	4b4c      	ldr	r3, [pc, #304]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00b      	beq.n	8002c9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c86:	4b49      	ldr	r3, [pc, #292]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d11c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x18c>
 8002c92:	4b46      	ldr	r3, [pc, #280]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d116      	bne.n	8002ccc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9e:	4b43      	ldr	r3, [pc, #268]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x176>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e1c0      	b.n	8003038 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb6:	4b3d      	ldr	r3, [pc, #244]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4939      	ldr	r1, [pc, #228]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cca:	e03a      	b.n	8002d42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d020      	beq.n	8002d16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd4:	4b36      	ldr	r3, [pc, #216]	@ (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cda:	f7fe ff13 	bl	8001b04 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce2:	f7fe ff0f 	bl	8001b04 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e1a1      	b.n	8003038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d00:	4b2a      	ldr	r3, [pc, #168]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4927      	ldr	r1, [pc, #156]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	600b      	str	r3, [r1, #0]
 8002d14:	e015      	b.n	8002d42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d16:	4b26      	ldr	r3, [pc, #152]	@ (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fef2 	bl	8001b04 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d24:	f7fe feee 	bl	8001b04 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e180      	b.n	8003038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d36:	4b1d      	ldr	r3, [pc, #116]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d03a      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d019      	beq.n	8002d8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d56:	4b17      	ldr	r3, [pc, #92]	@ (8002db4 <HAL_RCC_OscConfig+0x274>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5c:	f7fe fed2 	bl	8001b04 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d64:	f7fe fece 	bl	8001b04 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e160      	b.n	8003038 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d76:	4b0d      	ldr	r3, [pc, #52]	@ (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d82:	2001      	movs	r0, #1
 8002d84:	f000 face 	bl	8003324 <RCC_Delay>
 8002d88:	e01c      	b.n	8002dc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002db4 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d90:	f7fe feb8 	bl	8001b04 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d96:	e00f      	b.n	8002db8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d98:	f7fe feb4 	bl	8001b04 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d908      	bls.n	8002db8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e146      	b.n	8003038 <HAL_RCC_OscConfig+0x4f8>
 8002daa:	bf00      	nop
 8002dac:	40021000 	.word	0x40021000
 8002db0:	42420000 	.word	0x42420000
 8002db4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db8:	4b92      	ldr	r3, [pc, #584]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1e9      	bne.n	8002d98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80a6 	beq.w	8002f1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dd6:	4b8b      	ldr	r3, [pc, #556]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10d      	bne.n	8002dfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de2:	4b88      	ldr	r3, [pc, #544]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	4a87      	ldr	r2, [pc, #540]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dec:	61d3      	str	r3, [r2, #28]
 8002dee:	4b85      	ldr	r3, [pc, #532]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfe:	4b82      	ldr	r3, [pc, #520]	@ (8003008 <HAL_RCC_OscConfig+0x4c8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d118      	bne.n	8002e3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e0a:	4b7f      	ldr	r3, [pc, #508]	@ (8003008 <HAL_RCC_OscConfig+0x4c8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a7e      	ldr	r2, [pc, #504]	@ (8003008 <HAL_RCC_OscConfig+0x4c8>)
 8002e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e16:	f7fe fe75 	bl	8001b04 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1e:	f7fe fe71 	bl	8001b04 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b64      	cmp	r3, #100	@ 0x64
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e103      	b.n	8003038 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e30:	4b75      	ldr	r3, [pc, #468]	@ (8003008 <HAL_RCC_OscConfig+0x4c8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d106      	bne.n	8002e52 <HAL_RCC_OscConfig+0x312>
 8002e44:	4b6f      	ldr	r3, [pc, #444]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	4a6e      	ldr	r2, [pc, #440]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6213      	str	r3, [r2, #32]
 8002e50:	e02d      	b.n	8002eae <HAL_RCC_OscConfig+0x36e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCC_OscConfig+0x334>
 8002e5a:	4b6a      	ldr	r3, [pc, #424]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	4a69      	ldr	r2, [pc, #420]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	6213      	str	r3, [r2, #32]
 8002e66:	4b67      	ldr	r3, [pc, #412]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	4a66      	ldr	r2, [pc, #408]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	f023 0304 	bic.w	r3, r3, #4
 8002e70:	6213      	str	r3, [r2, #32]
 8002e72:	e01c      	b.n	8002eae <HAL_RCC_OscConfig+0x36e>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b05      	cmp	r3, #5
 8002e7a:	d10c      	bne.n	8002e96 <HAL_RCC_OscConfig+0x356>
 8002e7c:	4b61      	ldr	r3, [pc, #388]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	4a60      	ldr	r2, [pc, #384]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002e82:	f043 0304 	orr.w	r3, r3, #4
 8002e86:	6213      	str	r3, [r2, #32]
 8002e88:	4b5e      	ldr	r3, [pc, #376]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4a5d      	ldr	r2, [pc, #372]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6213      	str	r3, [r2, #32]
 8002e94:	e00b      	b.n	8002eae <HAL_RCC_OscConfig+0x36e>
 8002e96:	4b5b      	ldr	r3, [pc, #364]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	4a5a      	ldr	r2, [pc, #360]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	f023 0301 	bic.w	r3, r3, #1
 8002ea0:	6213      	str	r3, [r2, #32]
 8002ea2:	4b58      	ldr	r3, [pc, #352]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	4a57      	ldr	r2, [pc, #348]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002ea8:	f023 0304 	bic.w	r3, r3, #4
 8002eac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d015      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb6:	f7fe fe25 	bl	8001b04 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebe:	f7fe fe21 	bl	8001b04 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e0b1      	b.n	8003038 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed4:	4b4b      	ldr	r3, [pc, #300]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0ee      	beq.n	8002ebe <HAL_RCC_OscConfig+0x37e>
 8002ee0:	e014      	b.n	8002f0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee2:	f7fe fe0f 	bl	8001b04 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee8:	e00a      	b.n	8002f00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eea:	f7fe fe0b 	bl	8001b04 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e09b      	b.n	8003038 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f00:	4b40      	ldr	r3, [pc, #256]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1ee      	bne.n	8002eea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d105      	bne.n	8002f1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f12:	4b3c      	ldr	r3, [pc, #240]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	4a3b      	ldr	r2, [pc, #236]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002f18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 8087 	beq.w	8003036 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f28:	4b36      	ldr	r3, [pc, #216]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d061      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d146      	bne.n	8002fca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3c:	4b33      	ldr	r3, [pc, #204]	@ (800300c <HAL_RCC_OscConfig+0x4cc>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f42:	f7fe fddf 	bl	8001b04 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4a:	f7fe fddb 	bl	8001b04 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e06d      	b.n	8003038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5c:	4b29      	ldr	r3, [pc, #164]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f0      	bne.n	8002f4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f70:	d108      	bne.n	8002f84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f72:	4b24      	ldr	r3, [pc, #144]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	4921      	ldr	r1, [pc, #132]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f84:	4b1f      	ldr	r3, [pc, #124]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a19      	ldr	r1, [r3, #32]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f94:	430b      	orrs	r3, r1
 8002f96:	491b      	ldr	r1, [pc, #108]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800300c <HAL_RCC_OscConfig+0x4cc>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa2:	f7fe fdaf 	bl	8001b04 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002faa:	f7fe fdab 	bl	8001b04 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e03d      	b.n	8003038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fbc:	4b11      	ldr	r3, [pc, #68]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x46a>
 8002fc8:	e035      	b.n	8003036 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fca:	4b10      	ldr	r3, [pc, #64]	@ (800300c <HAL_RCC_OscConfig+0x4cc>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe fd98 	bl	8001b04 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7fe fd94 	bl	8001b04 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e026      	b.n	8003038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fea:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x498>
 8002ff6:	e01e      	b.n	8003036 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d107      	bne.n	8003010 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e019      	b.n	8003038 <HAL_RCC_OscConfig+0x4f8>
 8003004:	40021000 	.word	0x40021000
 8003008:	40007000 	.word	0x40007000
 800300c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003010:	4b0b      	ldr	r3, [pc, #44]	@ (8003040 <HAL_RCC_OscConfig+0x500>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	429a      	cmp	r2, r3
 8003022:	d106      	bne.n	8003032 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302e:	429a      	cmp	r2, r3
 8003030:	d001      	beq.n	8003036 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40021000 	.word	0x40021000

08003044 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0d0      	b.n	80031fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003058:	4b6a      	ldr	r3, [pc, #424]	@ (8003204 <HAL_RCC_ClockConfig+0x1c0>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d910      	bls.n	8003088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4b67      	ldr	r3, [pc, #412]	@ (8003204 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 0207 	bic.w	r2, r3, #7
 800306e:	4965      	ldr	r1, [pc, #404]	@ (8003204 <HAL_RCC_ClockConfig+0x1c0>)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b63      	ldr	r3, [pc, #396]	@ (8003204 <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0b8      	b.n	80031fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d020      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a0:	4b59      	ldr	r3, [pc, #356]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	4a58      	ldr	r2, [pc, #352]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80030aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b8:	4b53      	ldr	r3, [pc, #332]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	4a52      	ldr	r2, [pc, #328]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80030c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c4:	4b50      	ldr	r3, [pc, #320]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	494d      	ldr	r1, [pc, #308]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d040      	beq.n	8003164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	4b47      	ldr	r3, [pc, #284]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d115      	bne.n	8003122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e07f      	b.n	80031fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003102:	4b41      	ldr	r3, [pc, #260]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d109      	bne.n	8003122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e073      	b.n	80031fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003112:	4b3d      	ldr	r3, [pc, #244]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e06b      	b.n	80031fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003122:	4b39      	ldr	r3, [pc, #228]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f023 0203 	bic.w	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4936      	ldr	r1, [pc, #216]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003134:	f7fe fce6 	bl	8001b04 <HAL_GetTick>
 8003138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313a:	e00a      	b.n	8003152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800313c:	f7fe fce2 	bl	8001b04 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e053      	b.n	80031fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	4b2d      	ldr	r3, [pc, #180]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 020c 	and.w	r2, r3, #12
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	429a      	cmp	r2, r3
 8003162:	d1eb      	bne.n	800313c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003164:	4b27      	ldr	r3, [pc, #156]	@ (8003204 <HAL_RCC_ClockConfig+0x1c0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d210      	bcs.n	8003194 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b24      	ldr	r3, [pc, #144]	@ (8003204 <HAL_RCC_ClockConfig+0x1c0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 0207 	bic.w	r2, r3, #7
 800317a:	4922      	ldr	r1, [pc, #136]	@ (8003204 <HAL_RCC_ClockConfig+0x1c0>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b20      	ldr	r3, [pc, #128]	@ (8003204 <HAL_RCC_ClockConfig+0x1c0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e032      	b.n	80031fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a0:	4b19      	ldr	r3, [pc, #100]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4916      	ldr	r1, [pc, #88]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031be:	4b12      	ldr	r3, [pc, #72]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	490e      	ldr	r1, [pc, #56]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031d2:	f000 f821 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80031d6:	4602      	mov	r2, r0
 80031d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	091b      	lsrs	r3, r3, #4
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	490a      	ldr	r1, [pc, #40]	@ (800320c <HAL_RCC_ClockConfig+0x1c8>)
 80031e4:	5ccb      	ldrb	r3, [r1, r3]
 80031e6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ea:	4a09      	ldr	r2, [pc, #36]	@ (8003210 <HAL_RCC_ClockConfig+0x1cc>)
 80031ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031ee:	4b09      	ldr	r3, [pc, #36]	@ (8003214 <HAL_RCC_ClockConfig+0x1d0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe fc44 	bl	8001a80 <HAL_InitTick>

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40022000 	.word	0x40022000
 8003208:	40021000 	.word	0x40021000
 800320c:	080051a8 	.word	0x080051a8
 8003210:	20000004 	.word	0x20000004
 8003214:	20000008 	.word	0x20000008

08003218 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	2300      	movs	r3, #0
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	2300      	movs	r3, #0
 800322c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003232:	4b1e      	ldr	r3, [pc, #120]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x94>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b04      	cmp	r3, #4
 8003240:	d002      	beq.n	8003248 <HAL_RCC_GetSysClockFreq+0x30>
 8003242:	2b08      	cmp	r3, #8
 8003244:	d003      	beq.n	800324e <HAL_RCC_GetSysClockFreq+0x36>
 8003246:	e027      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003248:	4b19      	ldr	r3, [pc, #100]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800324a:	613b      	str	r3, [r7, #16]
      break;
 800324c:	e027      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	0c9b      	lsrs	r3, r3, #18
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	4a17      	ldr	r2, [pc, #92]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003258:	5cd3      	ldrb	r3, [r2, r3]
 800325a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d010      	beq.n	8003288 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003266:	4b11      	ldr	r3, [pc, #68]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x94>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	0c5b      	lsrs	r3, r3, #17
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	4a11      	ldr	r2, [pc, #68]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003272:	5cd3      	ldrb	r3, [r2, r3]
 8003274:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a0d      	ldr	r2, [pc, #52]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800327a:	fb03 f202 	mul.w	r2, r3, r2
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	fbb2 f3f3 	udiv	r3, r2, r3
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	e004      	b.n	8003292 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a0c      	ldr	r2, [pc, #48]	@ (80032bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800328c:	fb02 f303 	mul.w	r3, r2, r3
 8003290:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	613b      	str	r3, [r7, #16]
      break;
 8003296:	e002      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003298:	4b05      	ldr	r3, [pc, #20]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800329a:	613b      	str	r3, [r7, #16]
      break;
 800329c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800329e:	693b      	ldr	r3, [r7, #16]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	371c      	adds	r7, #28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000
 80032b0:	007a1200 	.word	0x007a1200
 80032b4:	080051c0 	.word	0x080051c0
 80032b8:	080051d0 	.word	0x080051d0
 80032bc:	003d0900 	.word	0x003d0900

080032c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c4:	4b02      	ldr	r3, [pc, #8]	@ (80032d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80032c6:	681b      	ldr	r3, [r3, #0]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr
 80032d0:	20000004 	.word	0x20000004

080032d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032d8:	f7ff fff2 	bl	80032c0 <HAL_RCC_GetHCLKFreq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b05      	ldr	r3, [pc, #20]	@ (80032f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	0a1b      	lsrs	r3, r3, #8
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	4903      	ldr	r1, [pc, #12]	@ (80032f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40021000 	.word	0x40021000
 80032f8:	080051b8 	.word	0x080051b8

080032fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003300:	f7ff ffde 	bl	80032c0 <HAL_RCC_GetHCLKFreq>
 8003304:	4602      	mov	r2, r0
 8003306:	4b05      	ldr	r3, [pc, #20]	@ (800331c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	0adb      	lsrs	r3, r3, #11
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	4903      	ldr	r1, [pc, #12]	@ (8003320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003312:	5ccb      	ldrb	r3, [r1, r3]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003318:	4618      	mov	r0, r3
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40021000 	.word	0x40021000
 8003320:	080051b8 	.word	0x080051b8

08003324 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800332c:	4b0a      	ldr	r3, [pc, #40]	@ (8003358 <RCC_Delay+0x34>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a0a      	ldr	r2, [pc, #40]	@ (800335c <RCC_Delay+0x38>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	0a5b      	lsrs	r3, r3, #9
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	fb02 f303 	mul.w	r3, r2, r3
 800333e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003340:	bf00      	nop
  }
  while (Delay --);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1e5a      	subs	r2, r3, #1
 8003346:	60fa      	str	r2, [r7, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f9      	bne.n	8003340 <RCC_Delay+0x1c>
}
 800334c:	bf00      	nop
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr
 8003358:	20000004 	.word	0x20000004
 800335c:	10624dd3 	.word	0x10624dd3

08003360 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d07d      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800337c:	2300      	movs	r3, #0
 800337e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003380:	4b4f      	ldr	r3, [pc, #316]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10d      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800338c:	4b4c      	ldr	r3, [pc, #304]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	4a4b      	ldr	r2, [pc, #300]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003392:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003396:	61d3      	str	r3, [r2, #28]
 8003398:	4b49      	ldr	r3, [pc, #292]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a4:	2301      	movs	r3, #1
 80033a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a8:	4b46      	ldr	r3, [pc, #280]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d118      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b4:	4b43      	ldr	r3, [pc, #268]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a42      	ldr	r2, [pc, #264]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c0:	f7fe fba0 	bl	8001b04 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c6:	e008      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c8:	f7fe fb9c 	bl	8001b04 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	@ 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e06d      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033da:	4b3a      	ldr	r3, [pc, #232]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033e6:	4b36      	ldr	r3, [pc, #216]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d02e      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	429a      	cmp	r2, r3
 8003402:	d027      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003404:	4b2e      	ldr	r3, [pc, #184]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800340c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800340e:	4b2e      	ldr	r3, [pc, #184]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003410:	2201      	movs	r2, #1
 8003412:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003414:	4b2c      	ldr	r3, [pc, #176]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800341a:	4a29      	ldr	r2, [pc, #164]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d014      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342a:	f7fe fb6b 	bl	8001b04 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003430:	e00a      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003432:	f7fe fb67 	bl	8001b04 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003440:	4293      	cmp	r3, r2
 8003442:	d901      	bls.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e036      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003448:	4b1d      	ldr	r3, [pc, #116]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0ee      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003454:	4b1a      	ldr	r3, [pc, #104]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4917      	ldr	r1, [pc, #92]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003462:	4313      	orrs	r3, r2
 8003464:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003466:	7dfb      	ldrb	r3, [r7, #23]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d105      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346c:	4b14      	ldr	r3, [pc, #80]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	4a13      	ldr	r2, [pc, #76]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003472:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003476:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003484:	4b0e      	ldr	r3, [pc, #56]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	490b      	ldr	r1, [pc, #44]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d008      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034a2:	4b07      	ldr	r3, [pc, #28]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	4904      	ldr	r1, [pc, #16]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40007000 	.word	0x40007000
 80034c8:	42420440 	.word	0x42420440

080034cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	2300      	movs	r3, #0
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	2300      	movs	r3, #0
 80034de:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	2300      	movs	r3, #0
 80034e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b10      	cmp	r3, #16
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b10      	cmp	r3, #16
 80034f2:	f200 808a 	bhi.w	800360a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d045      	beq.n	8003588 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d075      	beq.n	80035ee <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003502:	e082      	b.n	800360a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003504:	4b46      	ldr	r3, [pc, #280]	@ (8003620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800350a:	4b45      	ldr	r3, [pc, #276]	@ (8003620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d07b      	beq.n	800360e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	0c9b      	lsrs	r3, r3, #18
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	4a41      	ldr	r2, [pc, #260]	@ (8003624 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003520:	5cd3      	ldrb	r3, [r2, r3]
 8003522:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d015      	beq.n	800355a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800352e:	4b3c      	ldr	r3, [pc, #240]	@ (8003620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	0c5b      	lsrs	r3, r3, #17
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	4a3b      	ldr	r2, [pc, #236]	@ (8003628 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800353a:	5cd3      	ldrb	r3, [r2, r3]
 800353c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00d      	beq.n	8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003548:	4a38      	ldr	r2, [pc, #224]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	61fb      	str	r3, [r7, #28]
 8003558:	e004      	b.n	8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4a34      	ldr	r2, [pc, #208]	@ (8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003564:	4b2e      	ldr	r3, [pc, #184]	@ (8003620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800356c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003570:	d102      	bne.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	61bb      	str	r3, [r7, #24]
      break;
 8003576:	e04a      	b.n	800360e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	4a2d      	ldr	r2, [pc, #180]	@ (8003634 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	085b      	lsrs	r3, r3, #1
 8003584:	61bb      	str	r3, [r7, #24]
      break;
 8003586:	e042      	b.n	800360e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003588:	4b25      	ldr	r3, [pc, #148]	@ (8003620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003594:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003598:	d108      	bne.n	80035ac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80035a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	e01f      	b.n	80035ec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035b6:	d109      	bne.n	80035cc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80035b8:	4b19      	ldr	r3, [pc, #100]	@ (8003620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80035c4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	e00f      	b.n	80035ec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035d6:	d11c      	bne.n	8003612 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80035d8:	4b11      	ldr	r3, [pc, #68]	@ (8003620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d016      	beq.n	8003612 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80035e4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80035e8:	61bb      	str	r3, [r7, #24]
      break;
 80035ea:	e012      	b.n	8003612 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80035ec:	e011      	b.n	8003612 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80035ee:	f7ff fe85 	bl	80032fc <HAL_RCC_GetPCLK2Freq>
 80035f2:	4602      	mov	r2, r0
 80035f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	0b9b      	lsrs	r3, r3, #14
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	3301      	adds	r3, #1
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	fbb2 f3f3 	udiv	r3, r2, r3
 8003606:	61bb      	str	r3, [r7, #24]
      break;
 8003608:	e004      	b.n	8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800360a:	bf00      	nop
 800360c:	e002      	b.n	8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800360e:	bf00      	nop
 8003610:	e000      	b.n	8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003612:	bf00      	nop
    }
  }
  return (frequency);
 8003614:	69bb      	ldr	r3, [r7, #24]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3720      	adds	r7, #32
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40021000 	.word	0x40021000
 8003624:	080051d4 	.word	0x080051d4
 8003628:	080051e4 	.word	0x080051e4
 800362c:	007a1200 	.word	0x007a1200
 8003630:	003d0900 	.word	0x003d0900
 8003634:	aaaaaaab 	.word	0xaaaaaaab

08003638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e041      	b.n	80036ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fe f854 	bl	800170c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3304      	adds	r3, #4
 8003674:	4619      	mov	r1, r3
 8003676:	4610      	mov	r0, r2
 8003678:	f000 fc70 	bl	8003f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e041      	b.n	800376c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d106      	bne.n	8003702 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f839 	bl	8003774 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2202      	movs	r2, #2
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3304      	adds	r3, #4
 8003712:	4619      	mov	r1, r3
 8003714:	4610      	mov	r0, r2
 8003716:	f000 fc21 	bl	8003f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr
	...

08003788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d109      	bne.n	80037ac <HAL_TIM_PWM_Start+0x24>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e022      	b.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d109      	bne.n	80037c6 <HAL_TIM_PWM_Start+0x3e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	bf14      	ite	ne
 80037be:	2301      	movne	r3, #1
 80037c0:	2300      	moveq	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	e015      	b.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d109      	bne.n	80037e0 <HAL_TIM_PWM_Start+0x58>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	bf14      	ite	ne
 80037d8:	2301      	movne	r3, #1
 80037da:	2300      	moveq	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	e008      	b.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e05e      	b.n	80038b8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d104      	bne.n	800380a <HAL_TIM_PWM_Start+0x82>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003808:	e013      	b.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b04      	cmp	r3, #4
 800380e:	d104      	bne.n	800381a <HAL_TIM_PWM_Start+0x92>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003818:	e00b      	b.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d104      	bne.n	800382a <HAL_TIM_PWM_Start+0xa2>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003828:	e003      	b.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2202      	movs	r2, #2
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2201      	movs	r2, #1
 8003838:	6839      	ldr	r1, [r7, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fe1a 	bl	8004474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a1e      	ldr	r2, [pc, #120]	@ (80038c0 <HAL_TIM_PWM_Start+0x138>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d107      	bne.n	800385a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003858:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a18      	ldr	r2, [pc, #96]	@ (80038c0 <HAL_TIM_PWM_Start+0x138>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00e      	beq.n	8003882 <HAL_TIM_PWM_Start+0xfa>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800386c:	d009      	beq.n	8003882 <HAL_TIM_PWM_Start+0xfa>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a14      	ldr	r2, [pc, #80]	@ (80038c4 <HAL_TIM_PWM_Start+0x13c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d004      	beq.n	8003882 <HAL_TIM_PWM_Start+0xfa>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a12      	ldr	r2, [pc, #72]	@ (80038c8 <HAL_TIM_PWM_Start+0x140>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d111      	bne.n	80038a6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b06      	cmp	r3, #6
 8003892:	d010      	beq.n	80038b6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a4:	e007      	b.n	80038b6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0201 	orr.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40012c00 	.word	0x40012c00
 80038c4:	40000400 	.word	0x40000400
 80038c8:	40000800 	.word	0x40000800

080038cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e093      	b.n	8003a08 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d106      	bne.n	80038fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7fd ff25 	bl	8001744 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2202      	movs	r2, #2
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003910:	f023 0307 	bic.w	r3, r3, #7
 8003914:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3304      	adds	r3, #4
 800391e:	4619      	mov	r1, r3
 8003920:	4610      	mov	r0, r2
 8003922:	f000 fb1b 	bl	8003f5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800394e:	f023 0303 	bic.w	r3, r3, #3
 8003952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	4313      	orrs	r3, r2
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800396c:	f023 030c 	bic.w	r3, r3, #12
 8003970:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003978:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800397c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	4313      	orrs	r3, r2
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	011a      	lsls	r2, r3, #4
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	031b      	lsls	r3, r3, #12
 800399c:	4313      	orrs	r3, r2
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80039aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	4313      	orrs	r3, r2
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d020      	beq.n	8003a74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01b      	beq.n	8003a74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0202 	mvn.w	r2, #2
 8003a44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fa63 	bl	8003f26 <HAL_TIM_IC_CaptureCallback>
 8003a60:	e005      	b.n	8003a6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fa56 	bl	8003f14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fa65 	bl	8003f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d020      	beq.n	8003ac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d01b      	beq.n	8003ac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0204 	mvn.w	r2, #4
 8003a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2202      	movs	r2, #2
 8003a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fa3d 	bl	8003f26 <HAL_TIM_IC_CaptureCallback>
 8003aac:	e005      	b.n	8003aba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fa30 	bl	8003f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fa3f 	bl	8003f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d020      	beq.n	8003b0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d01b      	beq.n	8003b0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0208 	mvn.w	r2, #8
 8003adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fa17 	bl	8003f26 <HAL_TIM_IC_CaptureCallback>
 8003af8:	e005      	b.n	8003b06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fa0a 	bl	8003f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 fa19 	bl	8003f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d020      	beq.n	8003b58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01b      	beq.n	8003b58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0210 	mvn.w	r2, #16
 8003b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f9f1 	bl	8003f26 <HAL_TIM_IC_CaptureCallback>
 8003b44:	e005      	b.n	8003b52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f9e4 	bl	8003f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f9f3 	bl	8003f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00c      	beq.n	8003b7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0201 	mvn.w	r2, #1
 8003b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f9c3 	bl	8003f02 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00c      	beq.n	8003ba0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fcf5 	bl	800458a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00c      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d007      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f9c3 	bl	8003f4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00c      	beq.n	8003be8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d007      	beq.n	8003be8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0220 	mvn.w	r2, #32
 8003be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fcc8 	bl	8004578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003be8:	bf00      	nop
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e0ae      	b.n	8003d6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b0c      	cmp	r3, #12
 8003c1a:	f200 809f 	bhi.w	8003d5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003c59 	.word	0x08003c59
 8003c28:	08003d5d 	.word	0x08003d5d
 8003c2c:	08003d5d 	.word	0x08003d5d
 8003c30:	08003d5d 	.word	0x08003d5d
 8003c34:	08003c99 	.word	0x08003c99
 8003c38:	08003d5d 	.word	0x08003d5d
 8003c3c:	08003d5d 	.word	0x08003d5d
 8003c40:	08003d5d 	.word	0x08003d5d
 8003c44:	08003cdb 	.word	0x08003cdb
 8003c48:	08003d5d 	.word	0x08003d5d
 8003c4c:	08003d5d 	.word	0x08003d5d
 8003c50:	08003d5d 	.word	0x08003d5d
 8003c54:	08003d1b 	.word	0x08003d1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 f9ea 	bl	8004038 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0208 	orr.w	r2, r2, #8
 8003c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699a      	ldr	r2, [r3, #24]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0204 	bic.w	r2, r2, #4
 8003c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6999      	ldr	r1, [r3, #24]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	619a      	str	r2, [r3, #24]
      break;
 8003c96:	e064      	b.n	8003d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fa30 	bl	8004104 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699a      	ldr	r2, [r3, #24]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6999      	ldr	r1, [r3, #24]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	021a      	lsls	r2, r3, #8
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	619a      	str	r2, [r3, #24]
      break;
 8003cd8:	e043      	b.n	8003d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68b9      	ldr	r1, [r7, #8]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fa79 	bl	80041d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69da      	ldr	r2, [r3, #28]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0208 	orr.w	r2, r2, #8
 8003cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69da      	ldr	r2, [r3, #28]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0204 	bic.w	r2, r2, #4
 8003d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69d9      	ldr	r1, [r3, #28]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	61da      	str	r2, [r3, #28]
      break;
 8003d18:	e023      	b.n	8003d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 fac3 	bl	80042ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69da      	ldr	r2, [r3, #28]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69da      	ldr	r2, [r3, #28]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69d9      	ldr	r1, [r3, #28]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	021a      	lsls	r2, r3, #8
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	61da      	str	r2, [r3, #28]
      break;
 8003d5a:	e002      	b.n	8003d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_TIM_ConfigClockSource+0x1c>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e0b4      	b.n	8003efa <HAL_TIM_ConfigClockSource+0x186>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003db6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dc8:	d03e      	beq.n	8003e48 <HAL_TIM_ConfigClockSource+0xd4>
 8003dca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dce:	f200 8087 	bhi.w	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd6:	f000 8086 	beq.w	8003ee6 <HAL_TIM_ConfigClockSource+0x172>
 8003dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dde:	d87f      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003de0:	2b70      	cmp	r3, #112	@ 0x70
 8003de2:	d01a      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0xa6>
 8003de4:	2b70      	cmp	r3, #112	@ 0x70
 8003de6:	d87b      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003de8:	2b60      	cmp	r3, #96	@ 0x60
 8003dea:	d050      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x11a>
 8003dec:	2b60      	cmp	r3, #96	@ 0x60
 8003dee:	d877      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003df0:	2b50      	cmp	r3, #80	@ 0x50
 8003df2:	d03c      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0xfa>
 8003df4:	2b50      	cmp	r3, #80	@ 0x50
 8003df6:	d873      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003df8:	2b40      	cmp	r3, #64	@ 0x40
 8003dfa:	d058      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0x13a>
 8003dfc:	2b40      	cmp	r3, #64	@ 0x40
 8003dfe:	d86f      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e00:	2b30      	cmp	r3, #48	@ 0x30
 8003e02:	d064      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15a>
 8003e04:	2b30      	cmp	r3, #48	@ 0x30
 8003e06:	d86b      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d060      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15a>
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d867      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d05c      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15a>
 8003e14:	2b10      	cmp	r3, #16
 8003e16:	d05a      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15a>
 8003e18:	e062      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e2a:	f000 fb04 	bl	8004436 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	609a      	str	r2, [r3, #8]
      break;
 8003e46:	e04f      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e58:	f000 faed 	bl	8004436 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e6a:	609a      	str	r2, [r3, #8]
      break;
 8003e6c:	e03c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f000 fa64 	bl	8004348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2150      	movs	r1, #80	@ 0x50
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fabb 	bl	8004402 <TIM_ITRx_SetConfig>
      break;
 8003e8c:	e02c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f000 fa82 	bl	80043a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2160      	movs	r1, #96	@ 0x60
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 faab 	bl	8004402 <TIM_ITRx_SetConfig>
      break;
 8003eac:	e01c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f000 fa44 	bl	8004348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2140      	movs	r1, #64	@ 0x40
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fa9b 	bl	8004402 <TIM_ITRx_SetConfig>
      break;
 8003ecc:	e00c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4610      	mov	r0, r2
 8003eda:	f000 fa92 	bl	8004402 <TIM_ITRx_SetConfig>
      break;
 8003ede:	e003      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee4:	e000      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ee6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr

08003f14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr

08003f26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr

08003f38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr

08003f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a2f      	ldr	r2, [pc, #188]	@ (800402c <TIM_Base_SetConfig+0xd0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00b      	beq.n	8003f8c <TIM_Base_SetConfig+0x30>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f7a:	d007      	beq.n	8003f8c <TIM_Base_SetConfig+0x30>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a2c      	ldr	r2, [pc, #176]	@ (8004030 <TIM_Base_SetConfig+0xd4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <TIM_Base_SetConfig+0x30>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a2b      	ldr	r2, [pc, #172]	@ (8004034 <TIM_Base_SetConfig+0xd8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d108      	bne.n	8003f9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a22      	ldr	r2, [pc, #136]	@ (800402c <TIM_Base_SetConfig+0xd0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00b      	beq.n	8003fbe <TIM_Base_SetConfig+0x62>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fac:	d007      	beq.n	8003fbe <TIM_Base_SetConfig+0x62>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a1f      	ldr	r2, [pc, #124]	@ (8004030 <TIM_Base_SetConfig+0xd4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d003      	beq.n	8003fbe <TIM_Base_SetConfig+0x62>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a1e      	ldr	r2, [pc, #120]	@ (8004034 <TIM_Base_SetConfig+0xd8>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d108      	bne.n	8003fd0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a0d      	ldr	r2, [pc, #52]	@ (800402c <TIM_Base_SetConfig+0xd0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d103      	bne.n	8004004 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f023 0201 	bic.w	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	611a      	str	r2, [r3, #16]
  }
}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr
 800402c:	40012c00 	.word	0x40012c00
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800

08004038 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f023 0201 	bic.w	r2, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0303 	bic.w	r3, r3, #3
 800406e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f023 0302 	bic.w	r3, r3, #2
 8004080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a1c      	ldr	r2, [pc, #112]	@ (8004100 <TIM_OC1_SetConfig+0xc8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d10c      	bne.n	80040ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f023 0308 	bic.w	r3, r3, #8
 800409a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f023 0304 	bic.w	r3, r3, #4
 80040ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a13      	ldr	r2, [pc, #76]	@ (8004100 <TIM_OC1_SetConfig+0xc8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d111      	bne.n	80040da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	621a      	str	r2, [r3, #32]
}
 80040f4:	bf00      	nop
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bc80      	pop	{r7}
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40012c00 	.word	0x40012c00

08004104 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	f023 0210 	bic.w	r2, r3, #16
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800413a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	021b      	lsls	r3, r3, #8
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4313      	orrs	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f023 0320 	bic.w	r3, r3, #32
 800414e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a1d      	ldr	r2, [pc, #116]	@ (80041d4 <TIM_OC2_SetConfig+0xd0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d10d      	bne.n	8004180 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800416a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800417e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a14      	ldr	r2, [pc, #80]	@ (80041d4 <TIM_OC2_SetConfig+0xd0>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d113      	bne.n	80041b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800418e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004196:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	621a      	str	r2, [r3, #32]
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr
 80041d4:	40012c00 	.word	0x40012c00

080041d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0303 	bic.w	r3, r3, #3
 800420e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a1d      	ldr	r2, [pc, #116]	@ (80042a8 <TIM_OC3_SetConfig+0xd0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d10d      	bne.n	8004252 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800423c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	021b      	lsls	r3, r3, #8
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	4313      	orrs	r3, r2
 8004248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a14      	ldr	r2, [pc, #80]	@ (80042a8 <TIM_OC3_SetConfig+0xd0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d113      	bne.n	8004282 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4313      	orrs	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	621a      	str	r2, [r3, #32]
}
 800429c:	bf00      	nop
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bc80      	pop	{r7}
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40012c00 	.word	0x40012c00

080042ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	021b      	lsls	r3, r3, #8
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	031b      	lsls	r3, r3, #12
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a0f      	ldr	r2, [pc, #60]	@ (8004344 <TIM_OC4_SetConfig+0x98>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d109      	bne.n	8004320 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004312:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	019b      	lsls	r3, r3, #6
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	621a      	str	r2, [r3, #32]
}
 800433a:	bf00      	nop
 800433c:	371c      	adds	r7, #28
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr
 8004344:	40012c00 	.word	0x40012c00

08004348 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	f023 0201 	bic.w	r2, r3, #1
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f023 030a 	bic.w	r3, r3, #10
 8004384:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	621a      	str	r2, [r3, #32]
}
 800439a:	bf00      	nop
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr

080043a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f023 0210 	bic.w	r2, r3, #16
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	031b      	lsls	r3, r3, #12
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	621a      	str	r2, [r3, #32]
}
 80043f8:	bf00      	nop
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr

08004402 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004402:	b480      	push	{r7}
 8004404:	b085      	sub	sp, #20
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004418:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	f043 0307 	orr.w	r3, r3, #7
 8004424:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	609a      	str	r2, [r3, #8]
}
 800442c:	bf00      	nop
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr

08004436 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004436:	b480      	push	{r7}
 8004438:	b087      	sub	sp, #28
 800443a:	af00      	add	r7, sp, #0
 800443c:	60f8      	str	r0, [r7, #12]
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	607a      	str	r2, [r7, #4]
 8004442:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004450:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	021a      	lsls	r2, r3, #8
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	431a      	orrs	r2, r3
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	4313      	orrs	r3, r2
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	609a      	str	r2, [r3, #8]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	2201      	movs	r2, #1
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a1a      	ldr	r2, [r3, #32]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	43db      	mvns	r3, r3
 8004496:	401a      	ands	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a1a      	ldr	r2, [r3, #32]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f003 031f 	and.w	r3, r3, #31
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ac:	431a      	orrs	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e046      	b.n	8004562 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a16      	ldr	r2, [pc, #88]	@ (800456c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d00e      	beq.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004520:	d009      	beq.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a12      	ldr	r2, [pc, #72]	@ (8004570 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d004      	beq.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a10      	ldr	r2, [pc, #64]	@ (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d10c      	bne.n	8004550 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800453c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	4313      	orrs	r3, r2
 8004546:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr
 800456c:	40012c00 	.word	0x40012c00
 8004570:	40000400 	.word	0x40000400
 8004574:	40000800 	.word	0x40000800

08004578 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr

0800458a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr

0800459c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e042      	b.n	8004634 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fd f96a 	bl	800189c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2224      	movs	r2, #36	@ 0x24
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 fd09 	bl	8004ff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695a      	ldr	r2, [r3, #20]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004604:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004614:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	4613      	mov	r3, r2
 8004648:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b20      	cmp	r3, #32
 8004654:	d121      	bne.n	800469a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_UART_Transmit_IT+0x26>
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e01a      	b.n	800469c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	88fa      	ldrh	r2, [r7, #6]
 8004670:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	88fa      	ldrh	r2, [r7, #6]
 8004676:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2221      	movs	r2, #33	@ 0x21
 8004682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004694:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	e000      	b.n	800469c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800469a:	2302      	movs	r3, #2
  }
}
 800469c:	4618      	mov	r0, r3
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr

080046a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	4613      	mov	r3, r2
 80046b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d112      	bne.n	80046e6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <HAL_UART_Receive_IT+0x26>
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e00b      	b.n	80046e8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046d6:	88fb      	ldrh	r3, [r7, #6]
 80046d8:	461a      	mov	r2, r3
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 fab6 	bl	8004c4e <UART_Start_Receive_IT>
 80046e2:	4603      	mov	r3, r0
 80046e4:	e000      	b.n	80046e8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80046e6:	2302      	movs	r3, #2
  }
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b0ba      	sub	sp, #232	@ 0xe8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004716:	2300      	movs	r3, #0
 8004718:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800471c:	2300      	movs	r3, #0
 800471e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800472e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10f      	bne.n	8004756 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b00      	cmp	r3, #0
 8004740:	d009      	beq.n	8004756 <HAL_UART_IRQHandler+0x66>
 8004742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fb93 	bl	8004e7a <UART_Receive_IT>
      return;
 8004754:	e25b      	b.n	8004c0e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004756:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 80de 	beq.w	800491c <HAL_UART_IRQHandler+0x22c>
 8004760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d106      	bne.n	800477a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800476c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004770:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80d1 	beq.w	800491c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800477a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00b      	beq.n	800479e <HAL_UART_IRQHandler+0xae>
 8004786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800478a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800478e:	2b00      	cmp	r3, #0
 8004790:	d005      	beq.n	800479e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004796:	f043 0201 	orr.w	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800479e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047a2:	f003 0304 	and.w	r3, r3, #4
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00b      	beq.n	80047c2 <HAL_UART_IRQHandler+0xd2>
 80047aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d005      	beq.n	80047c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ba:	f043 0202 	orr.w	r2, r3, #2
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00b      	beq.n	80047e6 <HAL_UART_IRQHandler+0xf6>
 80047ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047de:	f043 0204 	orr.w	r2, r3, #4
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d011      	beq.n	8004816 <HAL_UART_IRQHandler+0x126>
 80047f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d105      	bne.n	800480a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800480e:	f043 0208 	orr.w	r2, r3, #8
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 81f2 	beq.w	8004c04 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004824:	f003 0320 	and.w	r3, r3, #32
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <HAL_UART_IRQHandler+0x14e>
 800482c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004830:	f003 0320 	and.w	r3, r3, #32
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fb1e 	bl	8004e7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	bf14      	ite	ne
 800484c:	2301      	movne	r3, #1
 800484e:	2300      	moveq	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d103      	bne.n	800486a <HAL_UART_IRQHandler+0x17a>
 8004862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004866:	2b00      	cmp	r3, #0
 8004868:	d04f      	beq.n	800490a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fa28 	bl	8004cc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d041      	beq.n	8004902 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3314      	adds	r3, #20
 8004884:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004894:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004898:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800489c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3314      	adds	r3, #20
 80048a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80048aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80048ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80048b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80048c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1d9      	bne.n	800487e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d013      	beq.n	80048fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d6:	4a7e      	ldr	r2, [pc, #504]	@ (8004ad0 <HAL_UART_IRQHandler+0x3e0>)
 80048d8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fd fede 	bl	80026a0 <HAL_DMA_Abort_IT>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d016      	beq.n	8004918 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80048f4:	4610      	mov	r0, r2
 80048f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f8:	e00e      	b.n	8004918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f993 	bl	8004c26 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004900:	e00a      	b.n	8004918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f98f 	bl	8004c26 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004908:	e006      	b.n	8004918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f98b 	bl	8004c26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004916:	e175      	b.n	8004c04 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004918:	bf00      	nop
    return;
 800491a:	e173      	b.n	8004c04 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004920:	2b01      	cmp	r3, #1
 8004922:	f040 814f 	bne.w	8004bc4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800492a:	f003 0310 	and.w	r3, r3, #16
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 8148 	beq.w	8004bc4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004938:	f003 0310 	and.w	r3, r3, #16
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 8141 	beq.w	8004bc4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004942:	2300      	movs	r3, #0
 8004944:	60bb      	str	r3, [r7, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 80b6 	beq.w	8004ad4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004974:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 8145 	beq.w	8004c08 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004982:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004986:	429a      	cmp	r2, r3
 8004988:	f080 813e 	bcs.w	8004c08 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004992:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	2b20      	cmp	r3, #32
 800499c:	f000 8088 	beq.w	8004ab0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	330c      	adds	r3, #12
 80049a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80049ae:	e853 3f00 	ldrex	r3, [r3]
 80049b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80049b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	330c      	adds	r3, #12
 80049c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80049cc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80049d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80049d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80049dc:	e841 2300 	strex	r3, r2, [r1]
 80049e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80049e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1d9      	bne.n	80049a0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3314      	adds	r3, #20
 80049f2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80049fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049fe:	f023 0301 	bic.w	r3, r3, #1
 8004a02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	3314      	adds	r3, #20
 8004a0c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a10:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004a14:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a16:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004a18:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004a1c:	e841 2300 	strex	r3, r2, [r1]
 8004a20:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004a22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e1      	bne.n	80049ec <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3314      	adds	r3, #20
 8004a2e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a32:	e853 3f00 	ldrex	r3, [r3]
 8004a36:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004a38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3314      	adds	r3, #20
 8004a48:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a4c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a4e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a52:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a54:	e841 2300 	strex	r3, r2, [r1]
 8004a58:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1e3      	bne.n	8004a28 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	330c      	adds	r3, #12
 8004a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a80:	f023 0310 	bic.w	r3, r3, #16
 8004a84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	330c      	adds	r3, #12
 8004a8e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004a92:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a94:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004aa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e3      	bne.n	8004a6e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fd fdbd 	bl	800262a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f8b6 	bl	8004c38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004acc:	e09c      	b.n	8004c08 <HAL_UART_IRQHandler+0x518>
 8004ace:	bf00      	nop
 8004ad0:	08004d85 	.word	0x08004d85
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 808e 	beq.w	8004c0c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004af0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 8089 	beq.w	8004c0c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	330c      	adds	r3, #12
 8004b00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	330c      	adds	r3, #12
 8004b1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004b1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e3      	bne.n	8004afa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3314      	adds	r3, #20
 8004b38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3c:	e853 3f00 	ldrex	r3, [r3]
 8004b40:	623b      	str	r3, [r7, #32]
   return(result);
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3314      	adds	r3, #20
 8004b52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b56:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b5e:	e841 2300 	strex	r3, r2, [r1]
 8004b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1e3      	bne.n	8004b32 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	330c      	adds	r3, #12
 8004b7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0310 	bic.w	r3, r3, #16
 8004b8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	330c      	adds	r3, #12
 8004b98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004b9c:	61fa      	str	r2, [r7, #28]
 8004b9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	69b9      	ldr	r1, [r7, #24]
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	617b      	str	r3, [r7, #20]
   return(result);
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e3      	bne.n	8004b78 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004bba:	4619      	mov	r1, r3
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f83b 	bl	8004c38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bc2:	e023      	b.n	8004c0c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d009      	beq.n	8004be4 <HAL_UART_IRQHandler+0x4f4>
 8004bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f8e5 	bl	8004dac <UART_Transmit_IT>
    return;
 8004be2:	e014      	b.n	8004c0e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00e      	beq.n	8004c0e <HAL_UART_IRQHandler+0x51e>
 8004bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d008      	beq.n	8004c0e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f924 	bl	8004e4a <UART_EndTransmit_IT>
    return;
 8004c02:	e004      	b.n	8004c0e <HAL_UART_IRQHandler+0x51e>
    return;
 8004c04:	bf00      	nop
 8004c06:	e002      	b.n	8004c0e <HAL_UART_IRQHandler+0x51e>
      return;
 8004c08:	bf00      	nop
 8004c0a:	e000      	b.n	8004c0e <HAL_UART_IRQHandler+0x51e>
      return;
 8004c0c:	bf00      	nop
  }
}
 8004c0e:	37e8      	adds	r7, #232	@ 0xe8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr

08004c26 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bc80      	pop	{r7}
 8004c36:	4770      	bx	lr

08004c38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr

08004c4e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b085      	sub	sp, #20
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	88fa      	ldrh	r2, [r7, #6]
 8004c66:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	88fa      	ldrh	r2, [r7, #6]
 8004c6c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2222      	movs	r2, #34	@ 0x22
 8004c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d007      	beq.n	8004c94 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c92:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695a      	ldr	r2, [r3, #20]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0201 	orr.w	r2, r2, #1
 8004ca2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0220 	orr.w	r2, r2, #32
 8004cb2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr

08004cc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b095      	sub	sp, #84	@ 0x54
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	330c      	adds	r3, #12
 8004cce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
 8004cd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ce8:	643a      	str	r2, [r7, #64]	@ 0x40
 8004cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cf0:	e841 2300 	strex	r3, r2, [r1]
 8004cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e5      	bne.n	8004cc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3314      	adds	r3, #20
 8004d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f023 0301 	bic.w	r3, r3, #1
 8004d12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3314      	adds	r3, #20
 8004d1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e5      	bne.n	8004cfc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d119      	bne.n	8004d6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	330c      	adds	r3, #12
 8004d3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f023 0310 	bic.w	r3, r3, #16
 8004d4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	330c      	adds	r3, #12
 8004d56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d58:	61ba      	str	r2, [r7, #24]
 8004d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	6979      	ldr	r1, [r7, #20]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	613b      	str	r3, [r7, #16]
   return(result);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e5      	bne.n	8004d38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d7a:	bf00      	nop
 8004d7c:	3754      	adds	r7, #84	@ 0x54
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr

08004d84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f7ff ff41 	bl	8004c26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004da4:	bf00      	nop
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b21      	cmp	r3, #33	@ 0x21
 8004dbe:	d13e      	bne.n	8004e3e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dc8:	d114      	bne.n	8004df4 <UART_Transmit_IT+0x48>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d110      	bne.n	8004df4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004de6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	1c9a      	adds	r2, r3, #2
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	621a      	str	r2, [r3, #32]
 8004df2:	e008      	b.n	8004e06 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	1c59      	adds	r1, r3, #1
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6211      	str	r1, [r2, #32]
 8004dfe:	781a      	ldrb	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	4619      	mov	r1, r3
 8004e14:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10f      	bne.n	8004e3a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e000      	b.n	8004e40 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e3e:	2302      	movs	r3, #2
  }
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc80      	pop	{r7}
 8004e48:	4770      	bx	lr

08004e4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b082      	sub	sp, #8
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff fed2 	bl	8004c14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b08c      	sub	sp, #48	@ 0x30
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b22      	cmp	r3, #34	@ 0x22
 8004e8c:	f040 80ae 	bne.w	8004fec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e98:	d117      	bne.n	8004eca <UART_Receive_IT+0x50>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d113      	bne.n	8004eca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec2:	1c9a      	adds	r2, r3, #2
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ec8:	e026      	b.n	8004f18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004edc:	d007      	beq.n	8004eee <UART_Receive_IT+0x74>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10a      	bne.n	8004efc <UART_Receive_IT+0x82>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef8:	701a      	strb	r2, [r3, #0]
 8004efa:	e008      	b.n	8004f0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	4619      	mov	r1, r3
 8004f26:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d15d      	bne.n	8004fe8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0220 	bic.w	r2, r2, #32
 8004f3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695a      	ldr	r2, [r3, #20]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d135      	bne.n	8004fde <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	330c      	adds	r3, #12
 8004f7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	e853 3f00 	ldrex	r3, [r3]
 8004f86:	613b      	str	r3, [r7, #16]
   return(result);
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f023 0310 	bic.w	r3, r3, #16
 8004f8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	330c      	adds	r3, #12
 8004f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f98:	623a      	str	r2, [r7, #32]
 8004f9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	69f9      	ldr	r1, [r7, #28]
 8004f9e:	6a3a      	ldr	r2, [r7, #32]
 8004fa0:	e841 2300 	strex	r3, r2, [r1]
 8004fa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e5      	bne.n	8004f78 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0310 	and.w	r3, r3, #16
 8004fb6:	2b10      	cmp	r3, #16
 8004fb8:	d10a      	bne.n	8004fd0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7ff fe2e 	bl	8004c38 <HAL_UARTEx_RxEventCallback>
 8004fdc:	e002      	b.n	8004fe4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fb ff9a 	bl	8000f18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	e002      	b.n	8004fee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	e000      	b.n	8004fee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004fec:	2302      	movs	r3, #2
  }
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3730      	adds	r7, #48	@ 0x30
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	4313      	orrs	r3, r2
 8005026:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005032:	f023 030c 	bic.w	r3, r3, #12
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6812      	ldr	r2, [r2, #0]
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	430b      	orrs	r3, r1
 800503e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a2c      	ldr	r2, [pc, #176]	@ (800510c <UART_SetConfig+0x114>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d103      	bne.n	8005068 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005060:	f7fe f94c 	bl	80032fc <HAL_RCC_GetPCLK2Freq>
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	e002      	b.n	800506e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005068:	f7fe f934 	bl	80032d4 <HAL_RCC_GetPCLK1Freq>
 800506c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4613      	mov	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	009a      	lsls	r2, r3, #2
 8005078:	441a      	add	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	fbb2 f3f3 	udiv	r3, r2, r3
 8005084:	4a22      	ldr	r2, [pc, #136]	@ (8005110 <UART_SetConfig+0x118>)
 8005086:	fba2 2303 	umull	r2, r3, r2, r3
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	0119      	lsls	r1, r3, #4
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	009a      	lsls	r2, r3, #2
 8005098:	441a      	add	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005110 <UART_SetConfig+0x118>)
 80050a6:	fba3 0302 	umull	r0, r3, r3, r2
 80050aa:	095b      	lsrs	r3, r3, #5
 80050ac:	2064      	movs	r0, #100	@ 0x64
 80050ae:	fb00 f303 	mul.w	r3, r0, r3
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	3332      	adds	r3, #50	@ 0x32
 80050b8:	4a15      	ldr	r2, [pc, #84]	@ (8005110 <UART_SetConfig+0x118>)
 80050ba:	fba2 2303 	umull	r2, r3, r2, r3
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050c4:	4419      	add	r1, r3
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	009a      	lsls	r2, r3, #2
 80050d0:	441a      	add	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80050dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005110 <UART_SetConfig+0x118>)
 80050de:	fba3 0302 	umull	r0, r3, r3, r2
 80050e2:	095b      	lsrs	r3, r3, #5
 80050e4:	2064      	movs	r0, #100	@ 0x64
 80050e6:	fb00 f303 	mul.w	r3, r0, r3
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	3332      	adds	r3, #50	@ 0x32
 80050f0:	4a07      	ldr	r2, [pc, #28]	@ (8005110 <UART_SetConfig+0x118>)
 80050f2:	fba2 2303 	umull	r2, r3, r2, r3
 80050f6:	095b      	lsrs	r3, r3, #5
 80050f8:	f003 020f 	and.w	r2, r3, #15
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	440a      	add	r2, r1
 8005102:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005104:	bf00      	nop
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40013800 	.word	0x40013800
 8005110:	51eb851f 	.word	0x51eb851f

08005114 <memset>:
 8005114:	4603      	mov	r3, r0
 8005116:	4402      	add	r2, r0
 8005118:	4293      	cmp	r3, r2
 800511a:	d100      	bne.n	800511e <memset+0xa>
 800511c:	4770      	bx	lr
 800511e:	f803 1b01 	strb.w	r1, [r3], #1
 8005122:	e7f9      	b.n	8005118 <memset+0x4>

08005124 <__libc_init_array>:
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	2600      	movs	r6, #0
 8005128:	4d0c      	ldr	r5, [pc, #48]	@ (800515c <__libc_init_array+0x38>)
 800512a:	4c0d      	ldr	r4, [pc, #52]	@ (8005160 <__libc_init_array+0x3c>)
 800512c:	1b64      	subs	r4, r4, r5
 800512e:	10a4      	asrs	r4, r4, #2
 8005130:	42a6      	cmp	r6, r4
 8005132:	d109      	bne.n	8005148 <__libc_init_array+0x24>
 8005134:	f000 f828 	bl	8005188 <_init>
 8005138:	2600      	movs	r6, #0
 800513a:	4d0a      	ldr	r5, [pc, #40]	@ (8005164 <__libc_init_array+0x40>)
 800513c:	4c0a      	ldr	r4, [pc, #40]	@ (8005168 <__libc_init_array+0x44>)
 800513e:	1b64      	subs	r4, r4, r5
 8005140:	10a4      	asrs	r4, r4, #2
 8005142:	42a6      	cmp	r6, r4
 8005144:	d105      	bne.n	8005152 <__libc_init_array+0x2e>
 8005146:	bd70      	pop	{r4, r5, r6, pc}
 8005148:	f855 3b04 	ldr.w	r3, [r5], #4
 800514c:	4798      	blx	r3
 800514e:	3601      	adds	r6, #1
 8005150:	e7ee      	b.n	8005130 <__libc_init_array+0xc>
 8005152:	f855 3b04 	ldr.w	r3, [r5], #4
 8005156:	4798      	blx	r3
 8005158:	3601      	adds	r6, #1
 800515a:	e7f2      	b.n	8005142 <__libc_init_array+0x1e>
 800515c:	080051e8 	.word	0x080051e8
 8005160:	080051e8 	.word	0x080051e8
 8005164:	080051e8 	.word	0x080051e8
 8005168:	080051ec 	.word	0x080051ec

0800516c <memcpy>:
 800516c:	440a      	add	r2, r1
 800516e:	4291      	cmp	r1, r2
 8005170:	f100 33ff 	add.w	r3, r0, #4294967295
 8005174:	d100      	bne.n	8005178 <memcpy+0xc>
 8005176:	4770      	bx	lr
 8005178:	b510      	push	{r4, lr}
 800517a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800517e:	4291      	cmp	r1, r2
 8005180:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005184:	d1f9      	bne.n	800517a <memcpy+0xe>
 8005186:	bd10      	pop	{r4, pc}

08005188 <_init>:
 8005188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518a:	bf00      	nop
 800518c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518e:	bc08      	pop	{r3}
 8005190:	469e      	mov	lr, r3
 8005192:	4770      	bx	lr

08005194 <_fini>:
 8005194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005196:	bf00      	nop
 8005198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519a:	bc08      	pop	{r3}
 800519c:	469e      	mov	lr, r3
 800519e:	4770      	bx	lr
